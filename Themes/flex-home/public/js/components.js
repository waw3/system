/******/
(function (modules) { // webpackBootstrap
    /******/ 	// The module cache
    /******/
    var installedModules = {};
    /******/
    /******/ 	// The require function
    /******/
    function __webpack_require__(moduleId) {
        /******/
        /******/ 		// Check if module is in cache
        /******/
        if (installedModules[moduleId]) {
            /******/
            return installedModules[moduleId].exports;
            /******/
        }
        /******/ 		// Create a new module (and put it into the cache)
        /******/
        var module = installedModules[moduleId] = {
            /******/            i: moduleId,
            /******/            l: false,
            /******/            exports: {}
            /******/
        };
        /******/
        /******/ 		// Execute the module function
        /******/
        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ 		// Flag the module as loaded
        /******/
        module.l = true;
        /******/
        /******/ 		// Return the exports of the module
        /******/
        return module.exports;
        /******/
    }

    /******/
    /******/
    /******/ 	// expose the modules object (__webpack_modules__)
    /******/
    __webpack_require__.m = modules;
    /******/
    /******/ 	// expose the module cache
    /******/
    __webpack_require__.c = installedModules;
    /******/
    /******/ 	// define getter function for harmony exports
    /******/
    __webpack_require__.d = function (exports, name, getter) {
        /******/
        if (!__webpack_require__.o(exports, name)) {
            /******/
            Object.defineProperty(exports, name, {enumerable: true, get: getter});
            /******/
        }
        /******/
    };
    /******/
    /******/ 	// define __esModule on exports
    /******/
    __webpack_require__.r = function (exports) {
        /******/
        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
            /******/
            Object.defineProperty(exports, Symbol.toStringTag, {value: 'Module'});
            /******/
        }
        /******/
        Object.defineProperty(exports, '__esModule', {value: true});
        /******/
    };
    /******/
    /******/ 	// create a fake namespace object
    /******/ 	// mode & 1: value is a module id, require it
    /******/ 	// mode & 2: merge all properties of value into the ns
    /******/ 	// mode & 4: return value when already ns object
    /******/ 	// mode & 8|1: behave like require
    /******/
    __webpack_require__.t = function (value, mode) {
        /******/
        if (mode & 1) value = __webpack_require__(value);
        /******/
        if (mode & 8) return value;
        /******/
        if ((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
        /******/
        var ns = Object.create(null);
        /******/
        __webpack_require__.r(ns);
        /******/
        Object.defineProperty(ns, 'default', {enumerable: true, value: value});
        /******/
        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {
            return value[key];
        }.bind(null, key));
        /******/
        return ns;
        /******/
    };
    /******/
    /******/ 	// getDefaultExport function for compatibility with non-harmony modules
    /******/
    __webpack_require__.n = function (module) {
        /******/
        var getter = module && module.__esModule ?
            /******/            function getDefault() {
                return module['default'];
            } :
            /******/            function getModuleExports() {
                return module;
            };
        /******/
        __webpack_require__.d(getter, 'a', getter);
        /******/
        return getter;
        /******/
    };
    /******/
    /******/ 	// Object.prototype.hasOwnProperty.call
    /******/
    __webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ 	// __webpack_public_path__
    /******/
    __webpack_require__.p = "/";
    /******/
    /******/
    /******/ 	// Load entry module and return exports
    /******/
    return __webpack_require__(__webpack_require__.s = 26);
    /******/
})
    /************************************************************************/
    /******/ ({

    /***/
    "./node_modules/axios/index.js":
    /*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

        /***/
    }),

    /***/
    "./node_modules/axios/lib/adapters/xhr.js":
    /*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
        var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
        var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
        var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
        var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
        var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
        var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

        module.exports = function xhrAdapter(config) {
            return new Promise(function dispatchXhrRequest(resolve, reject) {
                var requestData = config.data;
                var requestHeaders = config.headers;

                if (utils.isFormData(requestData)) {
                    delete requestHeaders['Content-Type']; // Let the browser set it
                }

                var request = new XMLHttpRequest();

                // HTTP basic authentication
                if (config.auth) {
                    var username = config.auth.username || '';
                    var password = config.auth.password || '';
                    requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
                }

                var fullPath = buildFullPath(config.baseURL, config.url);
                request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

                // Set the request timeout in MS
                request.timeout = config.timeout;

                // Listen for ready state
                request.onreadystatechange = function handleLoad() {
                    if (!request || request.readyState !== 4) {
                        return;
                    }

                    // The request errored out and we didn't get a response, this will be
                    // handled by onerror instead
                    // With one exception: request that using file: protocol, most browsers
                    // will return status as 0 even though it's a successful request
                    if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
                        return;
                    }

                    // Prepare the response
                    var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
                    var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
                    var response = {
                        data: responseData,
                        status: request.status,
                        statusText: request.statusText,
                        headers: responseHeaders,
                        config: config,
                        request: request
                    };

                    settle(resolve, reject, response);

                    // Clean up request
                    request = null;
                };

                // Handle browser request cancellation (as opposed to a manual cancellation)
                request.onabort = function handleAbort() {
                    if (!request) {
                        return;
                    }

                    reject(createError('Request aborted', config, 'ECONNABORTED', request));

                    // Clean up request
                    request = null;
                };

                // Handle low level network errors
                request.onerror = function handleError() {
                    // Real errors are hidden from us by the browser
                    // onerror should only fire if it's a network error
                    reject(createError('Network Error', config, null, request));

                    // Clean up request
                    request = null;
                };

                // Handle timeout
                request.ontimeout = function handleTimeout() {
                    var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
                    if (config.timeoutErrorMessage) {
                        timeoutErrorMessage = config.timeoutErrorMessage;
                    }
                    reject(createError(timeoutErrorMessage, config, 'ECONNABORTED',
                        request));

                    // Clean up request
                    request = null;
                };

                // Add xsrf header
                // This is only done if running in a standard browser environment.
                // Specifically not if we're in a web worker, or react-native.
                if (utils.isStandardBrowserEnv()) {
                    var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");

                    // Add xsrf header
                    var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
                        cookies.read(config.xsrfCookieName) :
                        undefined;

                    if (xsrfValue) {
                        requestHeaders[config.xsrfHeaderName] = xsrfValue;
                    }
                }

                // Add headers to the request
                if ('setRequestHeader' in request) {
                    utils.forEach(requestHeaders, function setRequestHeader(val, key) {
                        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
                            // Remove Content-Type if data is undefined
                            delete requestHeaders[key];
                        } else {
                            // Otherwise add header to the request
                            request.setRequestHeader(key, val);
                        }
                    });
                }

                // Add withCredentials to request if needed
                if (!utils.isUndefined(config.withCredentials)) {
                    request.withCredentials = !!config.withCredentials;
                }

                // Add responseType to request if needed
                if (config.responseType) {
                    try {
                        request.responseType = config.responseType;
                    } catch (e) {
                        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
                        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
                        if (config.responseType !== 'json') {
                            throw e;
                        }
                    }
                }

                // Handle progress if needed
                if (typeof config.onDownloadProgress === 'function') {
                    request.addEventListener('progress', config.onDownloadProgress);
                }

                // Not all browsers support upload events
                if (typeof config.onUploadProgress === 'function' && request.upload) {
                    request.upload.addEventListener('progress', config.onUploadProgress);
                }

                if (config.cancelToken) {
                    // Handle cancellation
                    config.cancelToken.promise.then(function onCanceled(cancel) {
                        if (!request) {
                            return;
                        }

                        request.abort();
                        reject(cancel);
                        // Clean up request
                        request = null;
                    });
                }

                if (requestData === undefined) {
                    requestData = null;
                }

                // Send the request
                request.send(requestData);
            });
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/axios.js":
    /*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
        var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
        var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
        var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
        var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

        /**
         * Create an instance of Axios
         *
         * @param {Object} defaultConfig The default config for the instance
         * @return {Axios} A new instance of Axios
         */
        function createInstance(defaultConfig) {
            var context = new Axios(defaultConfig);
            var instance = bind(Axios.prototype.request, context);

            // Copy axios.prototype to instance
            utils.extend(instance, Axios.prototype, context);

            // Copy context to instance
            utils.extend(instance, context);

            return instance;
        }

// Create the default instance to be exported
        var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
        axios.Axios = Axios;

// Factory for creating new instances
        axios.create = function create(instanceConfig) {
            return createInstance(mergeConfig(axios.defaults, instanceConfig));
        };

// Expose Cancel & CancelToken
        axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
        axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
        axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
        axios.all = function all(promises) {
            return Promise.all(promises);
        };
        axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

        module.exports = axios;

// Allow use of default import syntax in TypeScript
        module.exports.default = axios;


        /***/
    }),

    /***/
    "./node_modules/axios/lib/cancel/Cancel.js":
    /*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        /**
         * A `Cancel` is an object that is thrown when an operation is canceled.
         *
         * @class
         * @param {string=} message The message.
         */
        function Cancel(message) {
            this.message = message;
        }

        Cancel.prototype.toString = function toString() {
            return 'Cancel' + (this.message ? ': ' + this.message : '');
        };

        Cancel.prototype.__CANCEL__ = true;

        module.exports = Cancel;


        /***/
    }),

    /***/
    "./node_modules/axios/lib/cancel/CancelToken.js":
    /*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

        /**
         * A `CancelToken` is an object that can be used to request cancellation of an operation.
         *
         * @class
         * @param {Function} executor The executor function.
         */
        function CancelToken(executor) {
            if (typeof executor !== 'function') {
                throw new TypeError('executor must be a function.');
            }

            var resolvePromise;
            this.promise = new Promise(function promiseExecutor(resolve) {
                resolvePromise = resolve;
            });

            var token = this;
            executor(function cancel(message) {
                if (token.reason) {
                    // Cancellation has already been requested
                    return;
                }

                token.reason = new Cancel(message);
                resolvePromise(token.reason);
            });
        }

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        CancelToken.prototype.throwIfRequested = function throwIfRequested() {
            if (this.reason) {
                throw this.reason;
            }
        };

        /**
         * Returns an object that contains a new `CancelToken` and a function that, when called,
         * cancels the `CancelToken`.
         */
        CancelToken.source = function source() {
            var cancel;
            var token = new CancelToken(function executor(c) {
                cancel = c;
            });
            return {
                token: token,
                cancel: cancel
            };
        };

        module.exports = CancelToken;


        /***/
    }),

    /***/
    "./node_modules/axios/lib/cancel/isCancel.js":
    /*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        module.exports = function isCancel(value) {
            return !!(value && value.__CANCEL__);
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/core/Axios.js":
    /*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
        var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
        var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
        var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
        var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");

        /**
         * Create a new instance of Axios
         *
         * @param {Object} instanceConfig The default config for the instance
         */
        function Axios(instanceConfig) {
            this.defaults = instanceConfig;
            this.interceptors = {
                request: new InterceptorManager(),
                response: new InterceptorManager()
            };
        }

        /**
         * Dispatch a request
         *
         * @param {Object} config The config specific for this request (merged with this.defaults)
         */
        Axios.prototype.request = function request(config) {
            /*eslint no-param-reassign:0*/
            // Allow for axios('example/url'[, config]) a la fetch API
            if (typeof config === 'string') {
                config = arguments[1] || {};
                config.url = arguments[0];
            } else {
                config = config || {};
            }

            config = mergeConfig(this.defaults, config);

            // Set config.method
            if (config.method) {
                config.method = config.method.toLowerCase();
            } else if (this.defaults.method) {
                config.method = this.defaults.method.toLowerCase();
            } else {
                config.method = 'get';
            }

            // Hook up interceptors middleware
            var chain = [dispatchRequest, undefined];
            var promise = Promise.resolve(config);

            this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
                chain.unshift(interceptor.fulfilled, interceptor.rejected);
            });

            this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
                chain.push(interceptor.fulfilled, interceptor.rejected);
            });

            while (chain.length) {
                promise = promise.then(chain.shift(), chain.shift());
            }

            return promise;
        };

        Axios.prototype.getUri = function getUri(config) {
            config = mergeConfig(this.defaults, config);
            return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
        };

// Provide aliases for supported request methods
        utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, config) {
                return this.request(utils.merge(config || {}, {
                    method: method,
                    url: url
                }));
            };
        });

        utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
            /*eslint func-names:0*/
            Axios.prototype[method] = function (url, data, config) {
                return this.request(utils.merge(config || {}, {
                    method: method,
                    url: url,
                    data: data
                }));
            };
        });

        module.exports = Axios;


        /***/
    }),

    /***/
    "./node_modules/axios/lib/core/InterceptorManager.js":
    /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

        function InterceptorManager() {
            this.handlers = [];
        }

        /**
         * Add a new interceptor to the stack
         *
         * @param {Function} fulfilled The function to handle `then` for a `Promise`
         * @param {Function} rejected The function to handle `reject` for a `Promise`
         *
         * @return {Number} An ID used to remove interceptor later
         */
        InterceptorManager.prototype.use = function use(fulfilled, rejected) {
            this.handlers.push({
                fulfilled: fulfilled,
                rejected: rejected
            });
            return this.handlers.length - 1;
        };

        /**
         * Remove an interceptor from the stack
         *
         * @param {Number} id The ID that was returned by `use`
         */
        InterceptorManager.prototype.eject = function eject(id) {
            if (this.handlers[id]) {
                this.handlers[id] = null;
            }
        };

        /**
         * Iterate over all the registered interceptors
         *
         * This method is particularly useful for skipping over any
         * interceptors that may have become `null` calling `eject`.
         *
         * @param {Function} fn The function to call for each interceptor
         */
        InterceptorManager.prototype.forEach = function forEach(fn) {
            utils.forEach(this.handlers, function forEachHandler(h) {
                if (h !== null) {
                    fn(h);
                }
            });
        };

        module.exports = InterceptorManager;


        /***/
    }),

    /***/
    "./node_modules/axios/lib/core/buildFullPath.js":
    /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
        var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

        /**
         * Creates a new URL by combining the baseURL with the requestedURL,
         * only when the requestedURL is not already an absolute URL.
         * If the requestURL is absolute, this function returns the requestedURL untouched.
         *
         * @param {string} baseURL The base URL
         * @param {string} requestedURL Absolute or relative URL to combine
         * @returns {string} The combined full path
         */
        module.exports = function buildFullPath(baseURL, requestedURL) {
            if (baseURL && !isAbsoluteURL(requestedURL)) {
                return combineURLs(baseURL, requestedURL);
            }
            return requestedURL;
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/core/createError.js":
    /*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

        /**
         * Create an Error with the specified message, config, error code, request and response.
         *
         * @param {string} message The error message.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The created error.
         */
        module.exports = function createError(message, config, code, request, response) {
            var error = new Error(message);
            return enhanceError(error, config, code, request, response);
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/core/dispatchRequest.js":
    /*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
        var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
        var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
        var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

        /**
         * Throws a `Cancel` if cancellation has been requested.
         */
        function throwIfCancellationRequested(config) {
            if (config.cancelToken) {
                config.cancelToken.throwIfRequested();
            }
        }

        /**
         * Dispatch a request to the server using the configured adapter.
         *
         * @param {object} config The config that is to be used for the request
         * @returns {Promise} The Promise to be fulfilled
         */
        module.exports = function dispatchRequest(config) {
            throwIfCancellationRequested(config);

            // Ensure headers exist
            config.headers = config.headers || {};

            // Transform request data
            config.data = transformData(
                config.data,
                config.headers,
                config.transformRequest
            );

            // Flatten headers
            config.headers = utils.merge(
                config.headers.common || {},
                config.headers[config.method] || {},
                config.headers
            );

            utils.forEach(
                ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
                function cleanHeaderConfig(method) {
                    delete config.headers[method];
                }
            );

            var adapter = config.adapter || defaults.adapter;

            return adapter(config).then(function onAdapterResolution(response) {
                throwIfCancellationRequested(config);

                // Transform response data
                response.data = transformData(
                    response.data,
                    response.headers,
                    config.transformResponse
                );

                return response;
            }, function onAdapterRejection(reason) {
                if (!isCancel(reason)) {
                    throwIfCancellationRequested(config);

                    // Transform response data
                    if (reason && reason.response) {
                        reason.response.data = transformData(
                            reason.response.data,
                            reason.response.headers,
                            config.transformResponse
                        );
                    }
                }

                return Promise.reject(reason);
            });
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/core/enhanceError.js":
    /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        /**
         * Update an Error with the specified config, error code, and response.
         *
         * @param {Error} error The error to update.
         * @param {Object} config The config.
         * @param {string} [code] The error code (for example, 'ECONNABORTED').
         * @param {Object} [request] The request.
         * @param {Object} [response] The response.
         * @returns {Error} The error.
         */
        module.exports = function enhanceError(error, config, code, request, response) {
            error.config = config;
            if (code) {
                error.code = code;
            }

            error.request = request;
            error.response = response;
            error.isAxiosError = true;

            error.toJSON = function () {
                return {
                    // Standard
                    message: this.message,
                    name: this.name,
                    // Microsoft
                    description: this.description,
                    number: this.number,
                    // Mozilla
                    fileName: this.fileName,
                    lineNumber: this.lineNumber,
                    columnNumber: this.columnNumber,
                    stack: this.stack,
                    // Axios
                    config: this.config,
                    code: this.code
                };
            };
            return error;
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/core/mergeConfig.js":
    /*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

        /**
         * Config-specific merge-function which creates a new config-object
         * by merging two configuration objects together.
         *
         * @param {Object} config1
         * @param {Object} config2
         * @returns {Object} New object resulting from merging config2 to config1
         */
        module.exports = function mergeConfig(config1, config2) {
            // eslint-disable-next-line no-param-reassign
            config2 = config2 || {};
            var config = {};

            var valueFromConfig2Keys = ['url', 'method', 'params', 'data'];
            var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy'];
            var defaultToConfig2Keys = [
                'baseURL', 'url', 'transformRequest', 'transformResponse', 'paramsSerializer',
                'timeout', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
                'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress',
                'maxContentLength', 'validateStatus', 'maxRedirects', 'httpAgent',
                'httpsAgent', 'cancelToken', 'socketPath'
            ];

            utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
                if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                }
            });

            utils.forEach(mergeDeepPropertiesKeys, function mergeDeepProperties(prop) {
                if (utils.isObject(config2[prop])) {
                    config[prop] = utils.deepMerge(config1[prop], config2[prop]);
                } else if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                } else if (utils.isObject(config1[prop])) {
                    config[prop] = utils.deepMerge(config1[prop]);
                } else if (typeof config1[prop] !== 'undefined') {
                    config[prop] = config1[prop];
                }
            });

            utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
                if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                } else if (typeof config1[prop] !== 'undefined') {
                    config[prop] = config1[prop];
                }
            });

            var axiosKeys = valueFromConfig2Keys
                .concat(mergeDeepPropertiesKeys)
                .concat(defaultToConfig2Keys);

            var otherKeys = Object
                .keys(config2)
                .filter(function filterAxiosKeys(key) {
                    return axiosKeys.indexOf(key) === -1;
                });

            utils.forEach(otherKeys, function otherKeysDefaultToConfig2(prop) {
                if (typeof config2[prop] !== 'undefined') {
                    config[prop] = config2[prop];
                } else if (typeof config1[prop] !== 'undefined') {
                    config[prop] = config1[prop];
                }
            });

            return config;
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/core/settle.js":
    /*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

        /**
         * Resolve or reject a Promise based on response status.
         *
         * @param {Function} resolve A function that resolves the promise.
         * @param {Function} reject A function that rejects the promise.
         * @param {object} response The response.
         */
        module.exports = function settle(resolve, reject, response) {
            var validateStatus = response.config.validateStatus;
            if (!validateStatus || validateStatus(response.status)) {
                resolve(response);
            } else {
                reject(createError(
                    'Request failed with status code ' + response.status,
                    response.config,
                    null,
                    response.request,
                    response
                ));
            }
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/core/transformData.js":
    /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

        /**
         * Transform the data for a request or a response
         *
         * @param {Object|String} data The data to be transformed
         * @param {Array} headers The headers for the request or response
         * @param {Array|Function} fns A single function or Array of functions
         * @returns {*} The resulting transformed data
         */
        module.exports = function transformData(data, headers, fns) {
            /*eslint no-param-reassign:0*/
            utils.forEach(fns, function transform(fn) {
                data = fn(data, headers);
            });

            return data;
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/defaults.js":
    /*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */
        (function (process) {

            var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
            var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");

            var DEFAULT_CONTENT_TYPE = {
                'Content-Type': 'application/x-www-form-urlencoded'
            };

            function setContentTypeIfUnset(headers, value) {
                if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
                    headers['Content-Type'] = value;
                }
            }

            function getDefaultAdapter() {
                var adapter;
                if (typeof XMLHttpRequest !== 'undefined') {
                    // For browsers use XHR adapter
                    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
                } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
                    // For node use HTTP adapter
                    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
                }
                return adapter;
            }

            var defaults = {
                adapter: getDefaultAdapter(),

                transformRequest: [function transformRequest(data, headers) {
                    normalizeHeaderName(headers, 'Accept');
                    normalizeHeaderName(headers, 'Content-Type');
                    if (utils.isFormData(data) ||
                        utils.isArrayBuffer(data) ||
                        utils.isBuffer(data) ||
                        utils.isStream(data) ||
                        utils.isFile(data) ||
                        utils.isBlob(data)
                    ) {
                        return data;
                    }
                    if (utils.isArrayBufferView(data)) {
                        return data.buffer;
                    }
                    if (utils.isURLSearchParams(data)) {
                        setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
                        return data.toString();
                    }
                    if (utils.isObject(data)) {
                        setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
                        return JSON.stringify(data);
                    }
                    return data;
                }],

                transformResponse: [function transformResponse(data) {
                    /*eslint no-param-reassign:0*/
                    if (typeof data === 'string') {
                        try {
                            data = JSON.parse(data);
                        } catch (e) { /* Ignore */
                        }
                    }
                    return data;
                }],

                /**
                 * A timeout in milliseconds to abort a request. If set to 0 (default) a
                 * timeout is not created.
                 */
                timeout: 0,

                xsrfCookieName: 'XSRF-TOKEN',
                xsrfHeaderName: 'X-XSRF-TOKEN',

                maxContentLength: -1,

                validateStatus: function validateStatus(status) {
                    return status >= 200 && status < 300;
                }
            };

            defaults.headers = {
                common: {
                    'Accept': 'application/json, text/plain, */*'
                }
            };

            utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
                defaults.headers[method] = {};
            });

            utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
                defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
            });

            module.exports = defaults;

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

        /***/
    }),

    /***/
    "./node_modules/axios/lib/helpers/bind.js":
    /*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        module.exports = function bind(fn, thisArg) {
            return function wrap() {
                var args = new Array(arguments.length);
                for (var i = 0; i < args.length; i++) {
                    args[i] = arguments[i];
                }
                return fn.apply(thisArg, args);
            };
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/helpers/buildURL.js":
    /*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

        function encode(val) {
            return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
        }

        /**
         * Build a URL by appending params to the end
         *
         * @param {string} url The base of the url (e.g., http://www.google.com)
         * @param {object} [params] The params to be appended
         * @returns {string} The formatted url
         */
        module.exports = function buildURL(url, params, paramsSerializer) {
            /*eslint no-param-reassign:0*/
            if (!params) {
                return url;
            }

            var serializedParams;
            if (paramsSerializer) {
                serializedParams = paramsSerializer(params);
            } else if (utils.isURLSearchParams(params)) {
                serializedParams = params.toString();
            } else {
                var parts = [];

                utils.forEach(params, function serialize(val, key) {
                    if (val === null || typeof val === 'undefined') {
                        return;
                    }

                    if (utils.isArray(val)) {
                        key = key + '[]';
                    } else {
                        val = [val];
                    }

                    utils.forEach(val, function parseValue(v) {
                        if (utils.isDate(v)) {
                            v = v.toISOString();
                        } else if (utils.isObject(v)) {
                            v = JSON.stringify(v);
                        }
                        parts.push(encode(key) + '=' + encode(v));
                    });
                });

                serializedParams = parts.join('&');
            }

            if (serializedParams) {
                var hashmarkIndex = url.indexOf('#');
                if (hashmarkIndex !== -1) {
                    url = url.slice(0, hashmarkIndex);
                }

                url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
            }

            return url;
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/helpers/combineURLs.js":
    /*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        /**
         * Creates a new URL by combining the specified URLs
         *
         * @param {string} baseURL The base URL
         * @param {string} relativeURL The relative URL
         * @returns {string} The combined URL
         */
        module.exports = function combineURLs(baseURL, relativeURL) {
            return relativeURL
                ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
                : baseURL;
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/helpers/cookies.js":
    /*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

        module.exports = (
            utils.isStandardBrowserEnv() ?

                // Standard browser envs support document.cookie
                (function standardBrowserEnv() {
                    return {
                        write: function write(name, value, expires, path, domain, secure) {
                            var cookie = [];
                            cookie.push(name + '=' + encodeURIComponent(value));

                            if (utils.isNumber(expires)) {
                                cookie.push('expires=' + new Date(expires).toGMTString());
                            }

                            if (utils.isString(path)) {
                                cookie.push('path=' + path);
                            }

                            if (utils.isString(domain)) {
                                cookie.push('domain=' + domain);
                            }

                            if (secure === true) {
                                cookie.push('secure');
                            }

                            document.cookie = cookie.join('; ');
                        },

                        read: function read(name) {
                            var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
                            return (match ? decodeURIComponent(match[3]) : null);
                        },

                        remove: function remove(name) {
                            this.write(name, '', Date.now() - 86400000);
                        }
                    };
                })() :

                // Non standard browser env (web workers, react-native) lack needed support.
                (function nonStandardBrowserEnv() {
                    return {
                        write: function write() {
                        },
                        read: function read() {
                            return null;
                        },
                        remove: function remove() {
                        }
                    };
                })()
        );


        /***/
    }),

    /***/
    "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
    /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        /**
         * Determines whether the specified URL is absolute
         *
         * @param {string} url The URL to test
         * @returns {boolean} True if the specified URL is absolute, otherwise false
         */
        module.exports = function isAbsoluteURL(url) {
            // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
            // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
            // by any combination of letters, digits, plus, period, or hyphen.
            return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
    /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

        module.exports = (
            utils.isStandardBrowserEnv() ?

                // Standard browser envs have full support of the APIs needed to test
                // whether the request URL is of the same origin as current location.
                (function standardBrowserEnv() {
                    var msie = /(msie|trident)/i.test(navigator.userAgent);
                    var urlParsingNode = document.createElement('a');
                    var originURL;

                    /**
                     * Parse a URL to discover it's components
                     *
                     * @param {String} url The URL to be parsed
                     * @returns {Object}
                     */
                    function resolveURL(url) {
                        var href = url;

                        if (msie) {
                            // IE needs attribute set twice to normalize properties
                            urlParsingNode.setAttribute('href', href);
                            href = urlParsingNode.href;
                        }

                        urlParsingNode.setAttribute('href', href);

                        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
                        return {
                            href: urlParsingNode.href,
                            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
                            host: urlParsingNode.host,
                            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
                            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
                            hostname: urlParsingNode.hostname,
                            port: urlParsingNode.port,
                            pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                                urlParsingNode.pathname :
                                '/' + urlParsingNode.pathname
                        };
                    }

                    originURL = resolveURL(window.location.href);

                    /**
                     * Determine if a URL shares the same origin as the current location
                     *
                     * @param {String} requestURL The URL to test
                     * @returns {boolean} True if URL shares the same origin, otherwise false
                     */
                    return function isURLSameOrigin(requestURL) {
                        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
                        return (parsed.protocol === originURL.protocol &&
                            parsed.host === originURL.host);
                    };
                })() :

                // Non standard browser envs (web workers, react-native) lack needed support.
                (function nonStandardBrowserEnv() {
                    return function isURLSameOrigin() {
                        return true;
                    };
                })()
        );


        /***/
    }),

    /***/
    "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
    /*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

        module.exports = function normalizeHeaderName(headers, normalizedName) {
            utils.forEach(headers, function processHeader(value, name) {
                if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
                    headers[normalizedName] = value;
                    delete headers[name];
                }
            });
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/helpers/parseHeaders.js":
    /*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
        var ignoreDuplicateOf = [
            'age', 'authorization', 'content-length', 'content-type', 'etag',
            'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
            'last-modified', 'location', 'max-forwards', 'proxy-authorization',
            'referer', 'retry-after', 'user-agent'
        ];

        /**
         * Parse headers into an object
         *
         * ```
         * Date: Wed, 27 Aug 2014 08:58:49 GMT
         * Content-Type: application/json
         * Connection: keep-alive
         * Transfer-Encoding: chunked
         * ```
         *
         * @param {String} headers Headers needing to be parsed
         * @returns {Object} Headers parsed into an object
         */
        module.exports = function parseHeaders(headers) {
            var parsed = {};
            var key;
            var val;
            var i;

            if (!headers) {
                return parsed;
            }

            utils.forEach(headers.split('\n'), function parser(line) {
                i = line.indexOf(':');
                key = utils.trim(line.substr(0, i)).toLowerCase();
                val = utils.trim(line.substr(i + 1));

                if (key) {
                    if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
                        return;
                    }
                    if (key === 'set-cookie') {
                        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
                    } else {
                        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
                    }
                }
            });

            return parsed;
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/helpers/spread.js":
    /*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        /**
         * Syntactic sugar for invoking a function and expanding an array for arguments.
         *
         * Common use case would be to use `Function.prototype.apply`.
         *
         *  ```js
         *  function f(x, y, z) {}
         *  var args = [1, 2, 3];
         *  f.apply(null, args);
         *  ```
         *
         * With `spread` this example can be re-written.
         *
         *  ```js
         *  spread(function(x, y, z) {})([1, 2, 3]);
         *  ```
         *
         * @param {Function} callback
         * @returns {Function}
         */
        module.exports = function spread(callback) {
            return function wrap(arr) {
                return callback.apply(null, arr);
            };
        };


        /***/
    }),

    /***/
    "./node_modules/axios/lib/utils.js":
    /*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";


        var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

        /*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

        var toString = Object.prototype.toString;

        /**
         * Determine if a value is an Array
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Array, otherwise false
         */
        function isArray(val) {
            return toString.call(val) === '[object Array]';
        }

        /**
         * Determine if a value is undefined
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if the value is undefined, otherwise false
         */
        function isUndefined(val) {
            return typeof val === 'undefined';
        }

        /**
         * Determine if a value is a Buffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Buffer, otherwise false
         */
        function isBuffer(val) {
            return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
                && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
        }

        /**
         * Determine if a value is an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an ArrayBuffer, otherwise false
         */
        function isArrayBuffer(val) {
            return toString.call(val) === '[object ArrayBuffer]';
        }

        /**
         * Determine if a value is a FormData
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an FormData, otherwise false
         */
        function isFormData(val) {
            return (typeof FormData !== 'undefined') && (val instanceof FormData);
        }

        /**
         * Determine if a value is a view on an ArrayBuffer
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
         */
        function isArrayBufferView(val) {
            var result;
            if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
                result = ArrayBuffer.isView(val);
            } else {
                result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
            }
            return result;
        }

        /**
         * Determine if a value is a String
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a String, otherwise false
         */
        function isString(val) {
            return typeof val === 'string';
        }

        /**
         * Determine if a value is a Number
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Number, otherwise false
         */
        function isNumber(val) {
            return typeof val === 'number';
        }

        /**
         * Determine if a value is an Object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is an Object, otherwise false
         */
        function isObject(val) {
            return val !== null && typeof val === 'object';
        }

        /**
         * Determine if a value is a Date
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Date, otherwise false
         */
        function isDate(val) {
            return toString.call(val) === '[object Date]';
        }

        /**
         * Determine if a value is a File
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a File, otherwise false
         */
        function isFile(val) {
            return toString.call(val) === '[object File]';
        }

        /**
         * Determine if a value is a Blob
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Blob, otherwise false
         */
        function isBlob(val) {
            return toString.call(val) === '[object Blob]';
        }

        /**
         * Determine if a value is a Function
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Function, otherwise false
         */
        function isFunction(val) {
            return toString.call(val) === '[object Function]';
        }

        /**
         * Determine if a value is a Stream
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a Stream, otherwise false
         */
        function isStream(val) {
            return isObject(val) && isFunction(val.pipe);
        }

        /**
         * Determine if a value is a URLSearchParams object
         *
         * @param {Object} val The value to test
         * @returns {boolean} True if value is a URLSearchParams object, otherwise false
         */
        function isURLSearchParams(val) {
            return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
        }

        /**
         * Trim excess whitespace off the beginning and end of a string
         *
         * @param {String} str The String to trim
         * @returns {String} The String freed of excess whitespace
         */
        function trim(str) {
            return str.replace(/^\s*/, '').replace(/\s*$/, '');
        }

        /**
         * Determine if we're running in a standard browser environment
         *
         * This allows axios to run in a web worker, and react-native.
         * Both environments support XMLHttpRequest, but not fully standard globals.
         *
         * web workers:
         *  typeof window -> undefined
         *  typeof document -> undefined
         *
         * react-native:
         *  navigator.product -> 'ReactNative'
         * nativescript
         *  navigator.product -> 'NativeScript' or 'NS'
         */
        function isStandardBrowserEnv() {
            if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                navigator.product === 'NativeScript' ||
                navigator.product === 'NS')) {
                return false;
            }
            return (
                typeof window !== 'undefined' &&
                typeof document !== 'undefined'
            );
        }

        /**
         * Iterate over an Array or an Object invoking a function for each item.
         *
         * If `obj` is an Array callback will be called passing
         * the value, index, and complete array for each item.
         *
         * If 'obj' is an Object callback will be called passing
         * the value, key, and complete object for each property.
         *
         * @param {Object|Array} obj The object to iterate
         * @param {Function} fn The callback to invoke for each item
         */
        function forEach(obj, fn) {
            // Don't bother if no value provided
            if (obj === null || typeof obj === 'undefined') {
                return;
            }

            // Force an array if not already something iterable
            if (typeof obj !== 'object') {
                /*eslint no-param-reassign:0*/
                obj = [obj];
            }

            if (isArray(obj)) {
                // Iterate over array values
                for (var i = 0, l = obj.length; i < l; i++) {
                    fn.call(null, obj[i], i, obj);
                }
            } else {
                // Iterate over object keys
                for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key)) {
                        fn.call(null, obj[key], key, obj);
                    }
                }
            }
        }

        /**
         * Accepts varargs expecting each argument to be an object, then
         * immutably merges the properties of each object and returns result.
         *
         * When multiple objects contain the same key the later object in
         * the arguments list will take precedence.
         *
         * Example:
         *
         * ```js
         * var result = merge({foo: 123}, {foo: 456});
         * console.log(result.foo); // outputs 456
         * ```
         *
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function merge(/* obj1, obj2, obj3, ... */) {
            var result = {};

            function assignValue(val, key) {
                if (typeof result[key] === 'object' && typeof val === 'object') {
                    result[key] = merge(result[key], val);
                } else {
                    result[key] = val;
                }
            }

            for (var i = 0, l = arguments.length; i < l; i++) {
                forEach(arguments[i], assignValue);
            }
            return result;
        }

        /**
         * Function equal to merge with the difference being that no reference
         * to original objects is kept.
         *
         * @see merge
         * @param {Object} obj1 Object to merge
         * @returns {Object} Result of all merge properties
         */
        function deepMerge(/* obj1, obj2, obj3, ... */) {
            var result = {};

            function assignValue(val, key) {
                if (typeof result[key] === 'object' && typeof val === 'object') {
                    result[key] = deepMerge(result[key], val);
                } else if (typeof val === 'object') {
                    result[key] = deepMerge({}, val);
                } else {
                    result[key] = val;
                }
            }

            for (var i = 0, l = arguments.length; i < l; i++) {
                forEach(arguments[i], assignValue);
            }
            return result;
        }

        /**
         * Extends object a by mutably adding to it the properties of object b.
         *
         * @param {Object} a The object to be extended
         * @param {Object} b The object to copy properties from
         * @param {Object} thisArg The object to bind function to
         * @return {Object} The resulting value of object a
         */
        function extend(a, b, thisArg) {
            forEach(b, function assignValue(val, key) {
                if (thisArg && typeof val === 'function') {
                    a[key] = bind(val, thisArg);
                } else {
                    a[key] = val;
                }
            });
            return a;
        }

        module.exports = {
            isArray: isArray,
            isArrayBuffer: isArrayBuffer,
            isBuffer: isBuffer,
            isFormData: isFormData,
            isArrayBufferView: isArrayBufferView,
            isString: isString,
            isNumber: isNumber,
            isObject: isObject,
            isUndefined: isUndefined,
            isDate: isDate,
            isFile: isFile,
            isBlob: isBlob,
            isFunction: isFunction,
            isStream: isStream,
            isURLSearchParams: isURLSearchParams,
            isStandardBrowserEnv: isStandardBrowserEnv,
            forEach: forEach,
            merge: merge,
            deepMerge: deepMerge,
            extend: extend,
            trim: trim
        };


        /***/
    }),

    /***/
    "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=script&lang=js&":
    /*!***********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var epic_spinners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! epic-spinners */ "./node_modules/epic-spinners/src/lib.js");
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            components: {
                HalfCircleSpinner: epic_spinners__WEBPACK_IMPORTED_MODULE_0__["HalfCircleSpinner"]
            },
            data: function data() {
                return {
                    isLoading: true,
                    data: []
                };
            },
            mounted: function mounted() {
                this.getProperties();
            },
            props: {
                type: {
                    type: String,
                    "default": function _default() {
                        return '';
                    }
                },
                url: {
                    type: String,
                    "default": function _default() {
                        return null;
                    },
                    required: true
                }
            },
            methods: {
                getProperties: function getProperties() {
                    var _this = this;

                    this.data = [];
                    this.isLoading = true;
                    axios.get(this.url).then(function (res) {
                        _this.data = res.data.data;
                        _this.isLoading = false;
                    });
                }
            }
        });

        /***/
    }),

    /***/
    "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=script&lang=js&":
    /*!***************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib??ref--4-0!./node_modules/vue-loader/lib??vue-loader-options!./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var epic_spinners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! epic-spinners */ "./node_modules/epic-spinners/src/lib.js");
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            components: {
                HalfCircleSpinner: epic_spinners__WEBPACK_IMPORTED_MODULE_0__["HalfCircleSpinner"]
            },
            data: function data() {
                return {
                    isLoading: true,
                    data: []
                };
            },
            mounted: function mounted() {
                this.getProperties();
            },
            props: {
                url: {
                    type: String,
                    "default": function _default() {
                        return null;
                    },
                    required: true
                },
                type: {
                    type: String,
                    "default": function _default() {
                        return 'rent';
                    }
                },
                property_id: {
                    type: Number,
                    "default": function _default() {
                        return null;
                    }
                },
                project_id: {
                    type: Number,
                    "default": function _default() {
                        return null;
                    }
                },
                show_empty_string: {
                    type: Boolean,
                    "default": function _default() {
                        return false;
                    }
                }
            },
            methods: {
                getProperties: function getProperties() {
                    var _this = this;

                    this.data = [];
                    this.isLoading = true;
                    var url = this.url + '?type=' + this.type;

                    if (this.property_id) {
                        url += '&property_id=' + this.property_id;
                    }

                    if (this.project_id) {
                        url += '&project_id=' + this.project_id;
                    }

                    axios.get(url).then(function (res) {
                        _this.data = res.data.data;
                        _this.isLoading = false;
                    });
                }
            }
        });

        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css&":
    /*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.atom-spinner[data-v-002b7664], .atom-spinner *[data-v-002b7664] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.atom-spinner[data-v-002b7664] {\n  height: 60px;\n  width: 60px;\n  overflow: hidden;\n}\n.atom-spinner .spinner-inner[data-v-002b7664] {\n  position: relative;\n  display: block;\n  height: 100%;\n  width: 100%;\n}\n.atom-spinner .spinner-circle[data-v-002b7664] {\n  display: block;\n  position: absolute;\n  color: #ff1d5e;\n  font-size: calc(60px * 0.24);\n  top: 50%;\n  left: 50%;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n.atom-spinner .spinner-line[data-v-002b7664] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  -webkit-animation-duration: 1s;\n          animation-duration: 1s;\n  border-left-width: calc(60px / 25);\n  border-top-width: calc(60px / 25);\n  border-left-color: #ff1d5e;\n  border-left-style: solid;\n  border-top-style: solid;\n  border-top-color: transparent;\n}\n.atom-spinner .spinner-line[data-v-002b7664]:nth-child(1) {\n  -webkit-animation: atom-spinner-animation-1-data-v-002b7664 1s linear infinite;\n          animation: atom-spinner-animation-1-data-v-002b7664 1s linear infinite;\n  -webkit-transform: rotateZ(120deg) rotateX(66deg) rotateZ(0deg);\n          transform: rotateZ(120deg) rotateX(66deg) rotateZ(0deg);\n}\n.atom-spinner .spinner-line[data-v-002b7664]:nth-child(2) {\n  -webkit-animation: atom-spinner-animation-2-data-v-002b7664 1s linear infinite;\n          animation: atom-spinner-animation-2-data-v-002b7664 1s linear infinite;\n  -webkit-transform: rotateZ(240deg) rotateX(66deg) rotateZ(0deg);\n          transform: rotateZ(240deg) rotateX(66deg) rotateZ(0deg);\n}\n.atom-spinner .spinner-line[data-v-002b7664]:nth-child(3) {\n  -webkit-animation: atom-spinner-animation-3-data-v-002b7664 1s linear infinite;\n          animation: atom-spinner-animation-3-data-v-002b7664 1s linear infinite;\n  -webkit-transform: rotateZ(360deg) rotateX(66deg) rotateZ(0deg);\n          transform: rotateZ(360deg) rotateX(66deg) rotateZ(0deg);\n}\n@-webkit-keyframes atom-spinner-animation-1-data-v-002b7664 {\n100% {\n    -webkit-transform: rotateZ(120deg) rotateX(66deg) rotateZ(360deg);\n            transform: rotateZ(120deg) rotateX(66deg) rotateZ(360deg);\n}\n}\n@keyframes atom-spinner-animation-1-data-v-002b7664 {\n100% {\n    -webkit-transform: rotateZ(120deg) rotateX(66deg) rotateZ(360deg);\n            transform: rotateZ(120deg) rotateX(66deg) rotateZ(360deg);\n}\n}\n@-webkit-keyframes atom-spinner-animation-2-data-v-002b7664 {\n100% {\n    -webkit-transform: rotateZ(240deg) rotateX(66deg) rotateZ(360deg);\n            transform: rotateZ(240deg) rotateX(66deg) rotateZ(360deg);\n}\n}\n@keyframes atom-spinner-animation-2-data-v-002b7664 {\n100% {\n    -webkit-transform: rotateZ(240deg) rotateX(66deg) rotateZ(360deg);\n            transform: rotateZ(240deg) rotateX(66deg) rotateZ(360deg);\n}\n}\n@-webkit-keyframes atom-spinner-animation-3-data-v-002b7664 {\n100% {\n    -webkit-transform: rotateZ(360deg) rotateX(66deg) rotateZ(360deg);\n            transform: rotateZ(360deg) rotateX(66deg) rotateZ(360deg);\n}\n}\n@keyframes atom-spinner-animation-3-data-v-002b7664 {\n100% {\n    -webkit-transform: rotateZ(360deg) rotateX(66deg) rotateZ(360deg);\n            transform: rotateZ(360deg) rotateX(66deg) rotateZ(360deg);\n}\n}\n\n\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css&":
    /*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.breeding-rhombus-spinner[data-v-a1d20622] {\n  height: 65px;\n  width: 65px;\n  position: relative;\n  -webkit-transform: rotate(45deg);\n          transform: rotate(45deg);\n}\n.breeding-rhombus-spinner[data-v-a1d20622], .breeding-rhombus-spinner *[data-v-a1d20622] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.breeding-rhombus-spinner .rhombus[data-v-a1d20622] {\n  height: calc(65px / 7.5);\n  width: calc(65px / 7.5);\n  -webkit-animation-duration: 2000ms;\n          animation-duration: 2000ms;\n  top: calc(65px / 2.3077);\n  left: calc(65px / 2.3077);\n  background-color: #ff1d5e;\n  position: absolute;\n  -webkit-animation-iteration-count: infinite;\n          animation-iteration-count: infinite;\n}\n.breeding-rhombus-spinner .rhombus[data-v-a1d20622]:nth-child(2n+0) {\n  margin-right: 0;\n}\n.breeding-rhombus-spinner .rhombus.child-1[data-v-a1d20622] {\n  -webkit-animation-name: breeding-rhombus-spinner-animation-child-1-data-v-a1d20622;\n          animation-name: breeding-rhombus-spinner-animation-child-1-data-v-a1d20622;\n  -webkit-animation-delay: calc(100ms * 1);\n          animation-delay: calc(100ms * 1);\n}\n.breeding-rhombus-spinner .rhombus.child-2[data-v-a1d20622] {\n  -webkit-animation-name: breeding-rhombus-spinner-animation-child-2-data-v-a1d20622;\n          animation-name: breeding-rhombus-spinner-animation-child-2-data-v-a1d20622;\n  -webkit-animation-delay: calc(100ms * 2);\n          animation-delay: calc(100ms * 2);\n}\n.breeding-rhombus-spinner .rhombus.child-3[data-v-a1d20622] {\n  -webkit-animation-name: breeding-rhombus-spinner-animation-child-3-data-v-a1d20622;\n          animation-name: breeding-rhombus-spinner-animation-child-3-data-v-a1d20622;\n  -webkit-animation-delay: calc(100ms * 3);\n          animation-delay: calc(100ms * 3);\n}\n.breeding-rhombus-spinner .rhombus.child-4[data-v-a1d20622] {\n  -webkit-animation-name: breeding-rhombus-spinner-animation-child-4-data-v-a1d20622;\n          animation-name: breeding-rhombus-spinner-animation-child-4-data-v-a1d20622;\n  -webkit-animation-delay: calc(100ms * 4);\n          animation-delay: calc(100ms * 4);\n}\n.breeding-rhombus-spinner .rhombus.child-5[data-v-a1d20622] {\n  -webkit-animation-name: breeding-rhombus-spinner-animation-child-5-data-v-a1d20622;\n          animation-name: breeding-rhombus-spinner-animation-child-5-data-v-a1d20622;\n  -webkit-animation-delay: calc(100ms * 5);\n          animation-delay: calc(100ms * 5);\n}\n.breeding-rhombus-spinner .rhombus.child-6[data-v-a1d20622] {\n  -webkit-animation-name: breeding-rhombus-spinner-animation-child-6-data-v-a1d20622;\n          animation-name: breeding-rhombus-spinner-animation-child-6-data-v-a1d20622;\n  -webkit-animation-delay: calc(100ms * 6);\n          animation-delay: calc(100ms * 6);\n}\n.breeding-rhombus-spinner .rhombus.child-7[data-v-a1d20622] {\n  -webkit-animation-name: breeding-rhombus-spinner-animation-child-7-data-v-a1d20622;\n          animation-name: breeding-rhombus-spinner-animation-child-7-data-v-a1d20622;\n  -webkit-animation-delay: calc(100ms * 7);\n          animation-delay: calc(100ms * 7);\n}\n.breeding-rhombus-spinner .rhombus.child-8[data-v-a1d20622] {\n  -webkit-animation-name: breeding-rhombus-spinner-animation-child-8-data-v-a1d20622;\n          animation-name: breeding-rhombus-spinner-animation-child-8-data-v-a1d20622;\n  -webkit-animation-delay: calc(100ms * 8);\n          animation-delay: calc(100ms * 8);\n}\n.breeding-rhombus-spinner .rhombus.big[data-v-a1d20622] {\n  height: calc(65px / 3);\n  width: calc(65px / 3);\n  -webkit-animation-duration: 2000ms;\n          animation-duration: 2000ms;\n  top: calc(65px / 3);\n  left: calc(65px / 3);\n  background-color: #ff1d5e;\n  -webkit-animation: breeding-rhombus-spinner-animation-child-big-data-v-a1d20622 2s infinite;\n          animation: breeding-rhombus-spinner-animation-child-big-data-v-a1d20622 2s infinite;\n  -webkit-animation-delay: 0.5s;\n          animation-delay: 0.5s;\n}\n@-webkit-keyframes breeding-rhombus-spinner-animation-child-1-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(-325%, -325%);\n            transform: translate(-325%, -325%);\n}\n}\n@keyframes breeding-rhombus-spinner-animation-child-1-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(-325%, -325%);\n            transform: translate(-325%, -325%);\n}\n}\n@-webkit-keyframes breeding-rhombus-spinner-animation-child-2-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(0, -325%);\n            transform: translate(0, -325%);\n}\n}\n@keyframes breeding-rhombus-spinner-animation-child-2-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(0, -325%);\n            transform: translate(0, -325%);\n}\n}\n@-webkit-keyframes breeding-rhombus-spinner-animation-child-3-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(325%, -325%);\n            transform: translate(325%, -325%);\n}\n}\n@keyframes breeding-rhombus-spinner-animation-child-3-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(325%, -325%);\n            transform: translate(325%, -325%);\n}\n}\n@-webkit-keyframes breeding-rhombus-spinner-animation-child-4-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(325%, 0);\n            transform: translate(325%, 0);\n}\n}\n@keyframes breeding-rhombus-spinner-animation-child-4-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(325%, 0);\n            transform: translate(325%, 0);\n}\n}\n@-webkit-keyframes breeding-rhombus-spinner-animation-child-5-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(325%, 325%);\n            transform: translate(325%, 325%);\n}\n}\n@keyframes breeding-rhombus-spinner-animation-child-5-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(325%, 325%);\n            transform: translate(325%, 325%);\n}\n}\n@-webkit-keyframes breeding-rhombus-spinner-animation-child-6-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(0, 325%);\n            transform: translate(0, 325%);\n}\n}\n@keyframes breeding-rhombus-spinner-animation-child-6-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(0, 325%);\n            transform: translate(0, 325%);\n}\n}\n@-webkit-keyframes breeding-rhombus-spinner-animation-child-7-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(-325%, 325%);\n            transform: translate(-325%, 325%);\n}\n}\n@keyframes breeding-rhombus-spinner-animation-child-7-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(-325%, 325%);\n            transform: translate(-325%, 325%);\n}\n}\n@-webkit-keyframes breeding-rhombus-spinner-animation-child-8-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(-325%, 0);\n            transform: translate(-325%, 0);\n}\n}\n@keyframes breeding-rhombus-spinner-animation-child-8-data-v-a1d20622 {\n50% {\n    -webkit-transform: translate(-325%, 0);\n            transform: translate(-325%, 0);\n}\n}\n@-webkit-keyframes breeding-rhombus-spinner-animation-child-big-data-v-a1d20622 {\n50% {\n    -webkit-transform: scale(0.5);\n            transform: scale(0.5);\n}\n}\n@keyframes breeding-rhombus-spinner-animation-child-big-data-v-a1d20622 {\n50% {\n    -webkit-transform: scale(0.5);\n            transform: scale(0.5);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css&":
    /*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css& ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.circles-to-rhombuses-spinner[data-v-690fd6ce], .circles-to-rhombuses-spinner *[data-v-690fd6ce] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.circles-to-rhombuses-spinner[data-v-690fd6ce] {\n  height: 15px;\n  width: calc( (15px + 15px * 1.125) * 3);\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center\n}\n.circles-to-rhombuses-spinner .circle[data-v-690fd6ce] {\n  height: 15px;\n  width: 15px;\n  margin-left: calc(15px * 1.125);\n  -webkit-transform: rotate(45deg);\n          transform: rotate(45deg);\n  border-radius: 10%;\n  border: 3px solid #ff1d5e;\n  overflow: hidden;\n  background: transparent;\n\n  -webkit-animation: circles-to-rhombuses-animation-data-v-690fd6ce 1200ms linear infinite;\n\n          animation: circles-to-rhombuses-animation-data-v-690fd6ce 1200ms linear infinite;\n}\n.circles-to-rhombuses-spinner .circle[data-v-690fd6ce]:nth-child(1) {\n  -webkit-animation-delay: calc(150ms * 1);\n          animation-delay: calc(150ms * 1);\n  margin-left: 0\n}\n.circles-to-rhombuses-spinner .circle[data-v-690fd6ce]:nth-child(2) {\n  -webkit-animation-delay: calc(150ms * 2);\n          animation-delay: calc(150ms * 2);\n}\n.circles-to-rhombuses-spinner .circle[data-v-690fd6ce]:nth-child(3) {\n  -webkit-animation-delay: calc(150ms * 3);\n          animation-delay: calc(150ms * 3);\n}\n@-webkit-keyframes circles-to-rhombuses-animation-data-v-690fd6ce {\n0% {\n    border-radius: 10%;\n}\n17.5% {\n    border-radius: 10%;\n}\n50% {\n    border-radius: 100%;\n}\n93.5% {\n    border-radius: 10%;\n}\n100% {\n    border-radius: 10%;\n}\n}\n@keyframes circles-to-rhombuses-animation-data-v-690fd6ce {\n0% {\n    border-radius: 10%;\n}\n17.5% {\n    border-radius: 10%;\n}\n50% {\n    border-radius: 100%;\n}\n93.5% {\n    border-radius: 10%;\n}\n100% {\n    border-radius: 10%;\n}\n}\n@-webkit-keyframes circles-to-rhombuses-background-animation-data-v-690fd6ce {\n50% {\n    opacity: 0.4;\n}\n}\n@keyframes circles-to-rhombuses-background-animation-data-v-690fd6ce {\n50% {\n    opacity: 0.4;\n}\n}\n\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css&":
    /*!************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.fingerprint-spinner[data-v-3fdbdfe9], .fingerprint-spinner *[data-v-3fdbdfe9] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.fingerprint-spinner[data-v-3fdbdfe9] {\n  height: 64px;\n  width: 64px;\n  padding: 2px;\n  overflow: hidden;\n  position: relative;\n}\n.fingerprint-spinner .spinner-ring[data-v-3fdbdfe9] {\n  position: absolute;\n  border-radius: 50%;\n  border: 2px solid transparent;\n  border-top-color: #ff1d5e;\n  -webkit-animation: fingerprint-spinner-animation-data-v-3fdbdfe9 1500ms cubic-bezier(0.680, -0.750, 0.265, 1.750) infinite forwards;\n          animation: fingerprint-spinner-animation-data-v-3fdbdfe9 1500ms cubic-bezier(0.680, -0.750, 0.265, 1.750) infinite forwards;\n  margin: auto;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  top: 0;\n}\n.fingerprint-spinner .spinner-ring[data-v-3fdbdfe9]:nth-child(1) {\n  height: calc(60px / 9 + 0 * 60px / 9);\n  width: calc(60px / 9 + 0 * 60px / 9);\n  -webkit-animation-delay: calc(50ms * 1);\n          animation-delay: calc(50ms * 1);\n}\n.fingerprint-spinner .spinner-ring[data-v-3fdbdfe9]:nth-child(2) {\n  height: calc(60px / 9 + 1 * 60px / 9);\n  width: calc(60px / 9 + 1 * 60px / 9);\n  -webkit-animation-delay: calc(50ms * 2);\n          animation-delay: calc(50ms * 2);\n}\n.fingerprint-spinner .spinner-ring[data-v-3fdbdfe9]:nth-child(3) {\n  height: calc(60px / 9 + 2 * 60px / 9);\n  width: calc(60px / 9 + 2 * 60px / 9);\n  -webkit-animation-delay: calc(50ms * 3);\n          animation-delay: calc(50ms * 3);\n}\n.fingerprint-spinner .spinner-ring[data-v-3fdbdfe9]:nth-child(4) {\n  height: calc(60px / 9 + 3 * 60px / 9);\n  width: calc(60px / 9 + 3 * 60px / 9);\n  -webkit-animation-delay: calc(50ms * 4);\n          animation-delay: calc(50ms * 4);\n}\n.fingerprint-spinner .spinner-ring[data-v-3fdbdfe9]:nth-child(5) {\n  height: calc(60px / 9 + 4 * 60px / 9);\n  width: calc(60px / 9 + 4 * 60px / 9);\n  -webkit-animation-delay: calc(50ms * 5);\n          animation-delay: calc(50ms * 5);\n}\n.fingerprint-spinner .spinner-ring[data-v-3fdbdfe9]:nth-child(6) {\n  height: calc(60px / 9 + 5 * 60px / 9);\n  width: calc(60px / 9 + 5 * 60px / 9);\n  -webkit-animation-delay: calc(50ms * 6);\n          animation-delay: calc(50ms * 6);\n}\n.fingerprint-spinner .spinner-ring[data-v-3fdbdfe9]:nth-child(7) {\n  height: calc(60px / 9 + 6 * 60px / 9);\n  width: calc(60px / 9 + 6 * 60px / 9);\n  -webkit-animation-delay: calc(50ms * 7);\n          animation-delay: calc(50ms * 7);\n}\n.fingerprint-spinner .spinner-ring[data-v-3fdbdfe9]:nth-child(8) {\n  height: calc(60px / 9 + 7 * 60px / 9);\n  width: calc(60px / 9 + 7 * 60px / 9);\n  -webkit-animation-delay: calc(50ms * 8);\n          animation-delay: calc(50ms * 8);\n}\n.fingerprint-spinner .spinner-ring[data-v-3fdbdfe9]:nth-child(9) {\n  height: calc(60px / 9 + 8 * 60px / 9);\n  width: calc(60px / 9 + 8 * 60px / 9);\n  -webkit-animation-delay: calc(50ms * 9);\n          animation-delay: calc(50ms * 9);\n}\n@-webkit-keyframes fingerprint-spinner-animation-data-v-3fdbdfe9 {\n100% {\n    -webkit-transform: rotate( 360deg );\n            transform: rotate( 360deg );\n}\n}\n@keyframes fingerprint-spinner-animation-data-v-3fdbdfe9 {\n100% {\n    -webkit-transform: rotate( 360deg );\n            transform: rotate( 360deg );\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css&":
    /*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css& ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.flower-spinner[data-v-3996aa1a],  .flower-spinner *[data-v-3996aa1a] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.flower-spinner[data-v-3996aa1a] {\n  height: 70px;\n  width: 70px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n}\n.flower-spinner .dots-container[data-v-3996aa1a] {\n  height: calc(70px / 7);\n  width: calc(70px / 7);\n}\n.flower-spinner .small-dot[data-v-3996aa1a] {\n  background: #ff1d5e;\n  height: 100%;\n  width: 100%;\n  border-radius: 50%;\n  -webkit-animation: flower-spinner-small-dot-animation-data-v-3996aa1a 2.5s 0s infinite both;\n          animation: flower-spinner-small-dot-animation-data-v-3996aa1a 2.5s 0s infinite both;\n}\n.flower-spinner .big-dot[data-v-3996aa1a] {\n  background: #ff1d5e;\n  height: 100%;\n  width: 100%;\n  padding: 10%;\n  border-radius: 50%;\n  -webkit-animation: flower-spinner-big-dot-animation-data-v-3996aa1a 2.5s 0s infinite both;\n          animation: flower-spinner-big-dot-animation-data-v-3996aa1a 2.5s 0s infinite both;\n}\n\n/* NOTE Keyframes here serve as reference. They don't do anything. */\n@-webkit-keyframes flower-spinner-big-dot-animation-data-v-3996aa1a {\n0%, 100% {\n    -webkit-box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n            box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n}\n50% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg);\n}\n25%, 75% {\n    -webkit-box-shadow: rgb(255, 29, 94) 26px 0px 0px,\n    rgb(255, 29, 94) -26px 0px 0px,\n    rgb(255, 29, 94) 0px 26px 0px,\n    rgb(255, 29, 94) 0px -26px 0px,\n    rgb(255, 29, 94) 19px -19px 0px,\n    rgb(255, 29, 94) 19px 19px 0px,\n    rgb(255, 29, 94) -19px -19px 0px,\n    rgb(255, 29, 94) -19px 19px 0px;\n            box-shadow: rgb(255, 29, 94) 26px 0px 0px,\n    rgb(255, 29, 94) -26px 0px 0px,\n    rgb(255, 29, 94) 0px 26px 0px,\n    rgb(255, 29, 94) 0px -26px 0px,\n    rgb(255, 29, 94) 19px -19px 0px,\n    rgb(255, 29, 94) 19px 19px 0px,\n    rgb(255, 29, 94) -19px -19px 0px,\n    rgb(255, 29, 94) -19px 19px 0px;\n}\n100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n    -webkit-box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n            box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n}\n}\n@keyframes flower-spinner-big-dot-animation-data-v-3996aa1a {\n0%, 100% {\n    -webkit-box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n            box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n}\n50% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg);\n}\n25%, 75% {\n    -webkit-box-shadow: rgb(255, 29, 94) 26px 0px 0px,\n    rgb(255, 29, 94) -26px 0px 0px,\n    rgb(255, 29, 94) 0px 26px 0px,\n    rgb(255, 29, 94) 0px -26px 0px,\n    rgb(255, 29, 94) 19px -19px 0px,\n    rgb(255, 29, 94) 19px 19px 0px,\n    rgb(255, 29, 94) -19px -19px 0px,\n    rgb(255, 29, 94) -19px 19px 0px;\n            box-shadow: rgb(255, 29, 94) 26px 0px 0px,\n    rgb(255, 29, 94) -26px 0px 0px,\n    rgb(255, 29, 94) 0px 26px 0px,\n    rgb(255, 29, 94) 0px -26px 0px,\n    rgb(255, 29, 94) 19px -19px 0px,\n    rgb(255, 29, 94) 19px 19px 0px,\n    rgb(255, 29, 94) -19px -19px 0px,\n    rgb(255, 29, 94) -19px 19px 0px;\n}\n100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n    -webkit-box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n            box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n}\n}\n@-webkit-keyframes flower-spinner-small-dot-animation-data-v-3996aa1a {\n0%, 100% {\n    -webkit-box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n            box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n}\n25%, 75% {\n    -webkit-box-shadow: rgb(255, 29, 94) 14px 0px 0px,\n    rgb(255, 29, 94) -14px 0px 0px,\n    rgb(255, 29, 94) 0px 14px 0px,\n    rgb(255, 29, 94) 0px -14px 0px,\n    rgb(255, 29, 94) 10px -10px 0px,\n    rgb(255, 29, 94) 10px 10px 0px,\n    rgb(255, 29, 94) -10px -10px 0px,\n    rgb(255, 29, 94) -10px 10px 0px;\n            box-shadow: rgb(255, 29, 94) 14px 0px 0px,\n    rgb(255, 29, 94) -14px 0px 0px,\n    rgb(255, 29, 94) 0px 14px 0px,\n    rgb(255, 29, 94) 0px -14px 0px,\n    rgb(255, 29, 94) 10px -10px 0px,\n    rgb(255, 29, 94) 10px 10px 0px,\n    rgb(255, 29, 94) -10px -10px 0px,\n    rgb(255, 29, 94) -10px 10px 0px;\n}\n100% {\n    -webkit-box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n            box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n}\n}\n@keyframes flower-spinner-small-dot-animation-data-v-3996aa1a {\n0%, 100% {\n    -webkit-box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n            box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n}\n25%, 75% {\n    -webkit-box-shadow: rgb(255, 29, 94) 14px 0px 0px,\n    rgb(255, 29, 94) -14px 0px 0px,\n    rgb(255, 29, 94) 0px 14px 0px,\n    rgb(255, 29, 94) 0px -14px 0px,\n    rgb(255, 29, 94) 10px -10px 0px,\n    rgb(255, 29, 94) 10px 10px 0px,\n    rgb(255, 29, 94) -10px -10px 0px,\n    rgb(255, 29, 94) -10px 10px 0px;\n            box-shadow: rgb(255, 29, 94) 14px 0px 0px,\n    rgb(255, 29, 94) -14px 0px 0px,\n    rgb(255, 29, 94) 0px 14px 0px,\n    rgb(255, 29, 94) 0px -14px 0px,\n    rgb(255, 29, 94) 10px -10px 0px,\n    rgb(255, 29, 94) 10px 10px 0px,\n    rgb(255, 29, 94) -10px -10px 0px,\n    rgb(255, 29, 94) -10px 10px 0px;\n}\n100% {\n    -webkit-box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n            box-shadow: rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px,\n    rgb(255, 29, 94) 0px 0px 0px;\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css&":
    /*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css& ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.fulfilling-bouncing-circle-spinner[data-v-dd350904], .fulfilling-bouncing-circle-spinner *[data-v-dd350904] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.fulfilling-bouncing-circle-spinner[data-v-dd350904] {\n  height: 60px;\n  width: 60px;\n  position: relative;\n  -webkit-animation: fulfilling-bouncing-circle-spinner-animation-data-v-dd350904 infinite 4000ms ease;\n          animation: fulfilling-bouncing-circle-spinner-animation-data-v-dd350904 infinite 4000ms ease;\n}\n.fulfilling-bouncing-circle-spinner .orbit[data-v-dd350904] {\n  height: 60px;\n  width: 60px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 50%;\n  border: calc(60px * 0.03) solid #ff1d5e;\n  -webkit-animation: fulfilling-bouncing-circle-spinner-orbit-animation-data-v-dd350904 infinite 4000ms ease;\n          animation: fulfilling-bouncing-circle-spinner-orbit-animation-data-v-dd350904 infinite 4000ms ease;\n}\n.fulfilling-bouncing-circle-spinner .circle[data-v-dd350904] {\n  height: 60px;\n  width: 60px;\n  color: #ff1d5e;\n  display: block;\n  border-radius: 50%;\n  position: relative;\n  border: calc(60px * 0.1) solid #ff1d5e;\n  -webkit-animation: fulfilling-bouncing-circle-spinner-circle-animation-data-v-dd350904 infinite 4000ms ease;\n          animation: fulfilling-bouncing-circle-spinner-circle-animation-data-v-dd350904 infinite 4000ms ease;\n  -webkit-transform: rotate(0deg) scale(1);\n          transform: rotate(0deg) scale(1);\n}\n@-webkit-keyframes fulfilling-bouncing-circle-spinner-animation-data-v-dd350904 {\n0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n}\n100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n}\n}\n@keyframes fulfilling-bouncing-circle-spinner-animation-data-v-dd350904 {\n0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n}\n100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n}\n}\n@-webkit-keyframes fulfilling-bouncing-circle-spinner-orbit-animation-data-v-dd350904 {\n0% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n50% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n62.5% {\n    -webkit-transform: scale(0.8);\n            transform: scale(0.8);\n}\n75% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n87.5% {\n    -webkit-transform: scale(0.8);\n            transform: scale(0.8);\n}\n100% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n}\n@keyframes fulfilling-bouncing-circle-spinner-orbit-animation-data-v-dd350904 {\n0% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n50% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n62.5% {\n    -webkit-transform: scale(0.8);\n            transform: scale(0.8);\n}\n75% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n87.5% {\n    -webkit-transform: scale(0.8);\n            transform: scale(0.8);\n}\n100% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n}\n@-webkit-keyframes fulfilling-bouncing-circle-spinner-circle-animation-data-v-dd350904 {\n0% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    border-color: transparent;\n    border-top-color: inherit;\n}\n16.7% {\n    border-color: transparent;\n    border-top-color: initial;\n    border-right-color: initial;\n}\n33.4% {\n    border-color: transparent;\n    border-top-color: inherit;\n    border-right-color: inherit;\n    border-bottom-color: inherit;\n}\n50% {\n    border-color: inherit;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n62.5% {\n    border-color: inherit;\n    -webkit-transform: scale(1.4);\n            transform: scale(1.4);\n}\n75% {\n    border-color: inherit;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity: 1;\n}\n87.5% {\n    border-color: inherit;\n    -webkit-transform: scale(1.4);\n            transform: scale(1.4);\n}\n100% {\n    border-color: transparent;\n    border-top-color: inherit;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n}\n@keyframes fulfilling-bouncing-circle-spinner-circle-animation-data-v-dd350904 {\n0% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    border-color: transparent;\n    border-top-color: inherit;\n}\n16.7% {\n    border-color: transparent;\n    border-top-color: initial;\n    border-right-color: initial;\n}\n33.4% {\n    border-color: transparent;\n    border-top-color: inherit;\n    border-right-color: inherit;\n    border-bottom-color: inherit;\n}\n50% {\n    border-color: inherit;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n62.5% {\n    border-color: inherit;\n    -webkit-transform: scale(1.4);\n            transform: scale(1.4);\n}\n75% {\n    border-color: inherit;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity: 1;\n}\n87.5% {\n    border-color: inherit;\n    -webkit-transform: scale(1.4);\n            transform: scale(1.4);\n}\n100% {\n    border-color: transparent;\n    border-top-color: inherit;\n    -webkit-transform: scale(1);\n            transform: scale(1);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css&":
    /*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.fulfilling-square-spinner[data-v-38857dd6], .fulfilling-square-spinner *[data-v-38857dd6] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.fulfilling-square-spinner[data-v-38857dd6] {\n  height: 50px;\n  width: 50px;\n  position: relative;\n  border: 4px solid #ff1d5e;\n  -webkit-animation: fulfilling-square-spinner-animation-data-v-38857dd6 4s infinite ease;\n          animation: fulfilling-square-spinner-animation-data-v-38857dd6 4s infinite ease;\n}\n.fulfilling-square-spinner .spinner-inner[data-v-38857dd6] {\n  vertical-align: top;\n  display: inline-block;\n  background-color: #ff1d5e;\n  width: 100%;\n  opacity: 1;\n  -webkit-animation: fulfilling-square-spinner-inner-animation-data-v-38857dd6 4s infinite ease-in;\n          animation: fulfilling-square-spinner-inner-animation-data-v-38857dd6 4s infinite ease-in;\n}\n@-webkit-keyframes fulfilling-square-spinner-animation-data-v-38857dd6 {\n0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n}\n25% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg);\n}\n50% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg);\n}\n75% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n}\n100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n}\n}\n@keyframes fulfilling-square-spinner-animation-data-v-38857dd6 {\n0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n}\n25% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg);\n}\n50% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg);\n}\n75% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n}\n100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n}\n}\n@-webkit-keyframes fulfilling-square-spinner-inner-animation-data-v-38857dd6 {\n0% {\n    height: 0%;\n}\n25% {\n    height: 0%;\n}\n50% {\n    height: 100%;\n}\n75% {\n    height: 100%;\n}\n100% {\n    height: 0%;\n}\n}\n@keyframes fulfilling-square-spinner-inner-animation-data-v-38857dd6 {\n0% {\n    height: 0%;\n}\n25% {\n    height: 0%;\n}\n50% {\n    height: 100%;\n}\n75% {\n    height: 100%;\n}\n100% {\n    height: 0%;\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css&":
    /*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.half-circle-spinner[data-v-bf5bf2dc], .half-circle-spinner *[data-v-bf5bf2dc] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.half-circle-spinner[data-v-bf5bf2dc] {\n  width: 60px;\n  height: 60px;\n  border-radius: 100%;\n  position: relative;\n}\n.half-circle-spinner .circle[data-v-bf5bf2dc] {\n  content: \"\";\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  border-radius: 100%;\n  border: calc(60px / 10) solid transparent;\n}\n.half-circle-spinner .circle.circle-1[data-v-bf5bf2dc] {\n  border-top-color: #ff1d5e;\n  -webkit-animation: half-circle-spinner-animation-data-v-bf5bf2dc 1s infinite;\n          animation: half-circle-spinner-animation-data-v-bf5bf2dc 1s infinite;\n}\n.half-circle-spinner .circle.circle-2[data-v-bf5bf2dc] {\n  border-bottom-color: #ff1d5e;\n  -webkit-animation: half-circle-spinner-animation-data-v-bf5bf2dc 1s infinite alternate;\n          animation: half-circle-spinner-animation-data-v-bf5bf2dc 1s infinite alternate;\n}\n@-webkit-keyframes half-circle-spinner-animation-data-v-bf5bf2dc {\n0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n}\n100%{\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n}\n}\n@keyframes half-circle-spinner-animation-data-v-bf5bf2dc {\n0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n}\n100%{\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css&":
    /*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.hollow-dots-spinner[data-v-6a8af1dc], .hollow-dots-spinner *[data-v-6a8af1dc] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.hollow-dots-spinner[data-v-6a8af1dc] {\n  height: 15px;\n  width: calc(30px * 3);\n}\n.hollow-dots-spinner .dot[data-v-6a8af1dc] {\n  width: 15px;\n  height: 15px;\n  margin: 0 calc(15px / 2);\n  border: calc(15px / 5) solid #ff1d5e;\n  border-radius: 50%;\n  float: left;\n  -webkit-transform: scale(0);\n          transform: scale(0);\n  -webkit-animation: hollow-dots-spinner-animation-data-v-6a8af1dc 1000ms ease infinite 0ms;\n          animation: hollow-dots-spinner-animation-data-v-6a8af1dc 1000ms ease infinite 0ms;\n}\n.hollow-dots-spinner .dot[data-v-6a8af1dc]:nth-child(1) {\n  -webkit-animation-delay: calc(300ms * 1);\n          animation-delay: calc(300ms * 1);\n}\n.hollow-dots-spinner .dot[data-v-6a8af1dc]:nth-child(2) {\n  -webkit-animation-delay: calc(300ms * 2);\n          animation-delay: calc(300ms * 2);\n}\n.hollow-dots-spinner .dot[data-v-6a8af1dc]:nth-child(3) {\n  -webkit-animation-delay: calc(300ms * 3);\n          animation-delay: calc(300ms * 3);\n}\n@-webkit-keyframes hollow-dots-spinner-animation-data-v-6a8af1dc {\n50% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity: 1;\n}\n100% {\n    opacity: 0;\n}\n}\n@keyframes hollow-dots-spinner-animation-data-v-6a8af1dc {\n50% {\n    -webkit-transform: scale(1);\n            transform: scale(1);\n    opacity: 1;\n}\n100% {\n    opacity: 0;\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css&":
    /*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.intersecting-circles-spinner[data-v-3b0bf4e6], .intersecting-circles-spinner *[data-v-3b0bf4e6] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.intersecting-circles-spinner[data-v-3b0bf4e6] {\n  height: 70px;\n  width: 70px;\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n.intersecting-circles-spinner .spinnerBlock[data-v-3b0bf4e6] {\n  -webkit-animation: intersecting-circles-spinners-animation-data-v-3b0bf4e6 1200ms linear infinite;\n          animation: intersecting-circles-spinners-animation-data-v-3b0bf4e6 1200ms linear infinite;\n  -webkit-transform-origin: center;\n          transform-origin: center;\n  display: block;\n  height: 35px;\n  width: 35px;\n}\n.intersecting-circles-spinner .circle[data-v-3b0bf4e6] {\n  display: block;\n  border: 2px solid #ff1d5e;\n  border-radius: 50%;\n  height: 100%;\n  width: 100%;\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n.intersecting-circles-spinner .circle[data-v-3b0bf4e6]:nth-child(1) {\n  left: 0;\n  top: 0;\n}\n.intersecting-circles-spinner .circle[data-v-3b0bf4e6]:nth-child(2) {\n  left: calc(35px * -0.36);\n  top: calc(35px * 0.2);\n}\n.intersecting-circles-spinner .circle[data-v-3b0bf4e6]:nth-child(3) {\n  left: calc(35px * -0.36);\n  top: calc(35px * -0.2);\n}\n.intersecting-circles-spinner .circle[data-v-3b0bf4e6]:nth-child(4) {\n  left: 0;\n  top: calc(35px * -0.36);\n}\n.intersecting-circles-spinner .circle[data-v-3b0bf4e6]:nth-child(5) {\n  left: calc(35px * 0.36);\n  top: calc(35px * -0.2);\n}\n.intersecting-circles-spinner .circle[data-v-3b0bf4e6]:nth-child(6) {\n  left: calc(35px * 0.36);\n  top: calc(35px * 0.2);\n}\n.intersecting-circles-spinner .circle[data-v-3b0bf4e6]:nth-child(7) {\n  left: 0;\n  top: calc(35px * 0.36);\n}\n@-webkit-keyframes intersecting-circles-spinners-animation-data-v-3b0bf4e6 {\nfrom { -webkit-transform: rotate(0deg); transform: rotate(0deg);\n}\nto { -webkit-transform: rotate(360deg); transform: rotate(360deg);\n}\n}\n@keyframes intersecting-circles-spinners-animation-data-v-3b0bf4e6 {\nfrom { -webkit-transform: rotate(0deg); transform: rotate(0deg);\n}\nto { -webkit-transform: rotate(360deg); transform: rotate(360deg);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css&":
    /*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.looping-rhombuses-spinner[data-v-656608d9], .looping-rhombuses-spinner *[data-v-656608d9] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.looping-rhombuses-spinner[data-v-656608d9] {\n  width: calc(15px * 4);\n  height: 15px;\n  position: relative;\n}\n.looping-rhombuses-spinner .rhombus[data-v-656608d9] {\n  height: 15px;\n  width: 15px;\n  background-color: #ff1d5e;\n  left: calc(15px * 4);\n  position: absolute;\n  margin: 0 auto;\n  border-radius: 2px;\n  -webkit-transform: translateY(0) rotate(45deg) scale(0);\n          transform: translateY(0) rotate(45deg) scale(0);\n  -webkit-animation: looping-rhombuses-spinner-animation-data-v-656608d9 2500ms linear infinite;\n          animation: looping-rhombuses-spinner-animation-data-v-656608d9 2500ms linear infinite;\n}\n.looping-rhombuses-spinner .rhombus[data-v-656608d9]:nth-child(1) {\n  -webkit-animation-delay: calc(2500ms * 1 / -1.5);\n          animation-delay: calc(2500ms * 1 / -1.5);\n}\n.looping-rhombuses-spinner .rhombus[data-v-656608d9]:nth-child(2) {\n  -webkit-animation-delay: calc(2500ms * 2 / -1.5);\n          animation-delay: calc(2500ms * 2 / -1.5);\n}\n.looping-rhombuses-spinner .rhombus[data-v-656608d9]:nth-child(3) {\n  -webkit-animation-delay: calc(2500ms * 3 / -1.5);\n          animation-delay: calc(2500ms * 3 / -1.5);\n}\n@-webkit-keyframes looping-rhombuses-spinner-animation-data-v-656608d9 {\n0% {\n    -webkit-transform: translateX(0) rotate(45deg) scale(0);\n            transform: translateX(0) rotate(45deg) scale(0);\n}\n50% {\n    -webkit-transform: translateX(-233%) rotate(45deg) scale(1);\n            transform: translateX(-233%) rotate(45deg) scale(1);\n}\n100% {\n    -webkit-transform: translateX(-466%) rotate(45deg) scale(0);\n            transform: translateX(-466%) rotate(45deg) scale(0);\n}\n}\n@keyframes looping-rhombuses-spinner-animation-data-v-656608d9 {\n0% {\n    -webkit-transform: translateX(0) rotate(45deg) scale(0);\n            transform: translateX(0) rotate(45deg) scale(0);\n}\n50% {\n    -webkit-transform: translateX(-233%) rotate(45deg) scale(1);\n            transform: translateX(-233%) rotate(45deg) scale(1);\n}\n100% {\n    -webkit-transform: translateX(-466%) rotate(45deg) scale(0);\n            transform: translateX(-466%) rotate(45deg) scale(0);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css&":
    /*!******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.orbit-spinner[data-v-2767e9c3], .orbit-spinner *[data-v-2767e9c3] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.orbit-spinner[data-v-2767e9c3] {\n  height: 55px;\n  width: 55px;\n  border-radius: 50%;\n  -webkit-perspective: 800px;\n          perspective: 800px;\n}\n.orbit-spinner .orbit[data-v-2767e9c3] {\n  position: absolute;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n}\n.orbit-spinner .orbit[data-v-2767e9c3]:nth-child(1) {\n  left: 0%;\n  top: 0%;\n  -webkit-animation: orbit-spinner-orbit-one-animation-data-v-2767e9c3 1200ms linear infinite;\n          animation: orbit-spinner-orbit-one-animation-data-v-2767e9c3 1200ms linear infinite;\n  border-bottom: 3px solid #ff1d5e;\n}\n.orbit-spinner .orbit[data-v-2767e9c3]:nth-child(2) {\n  right: 0%;\n  top: 0%;\n  -webkit-animation: orbit-spinner-orbit-two-animation-data-v-2767e9c3 1200ms linear infinite;\n          animation: orbit-spinner-orbit-two-animation-data-v-2767e9c3 1200ms linear infinite;\n  border-right: 3px solid #ff1d5e;\n}\n.orbit-spinner .orbit[data-v-2767e9c3]:nth-child(3) {\n  right: 0%;\n  bottom: 0%;\n  -webkit-animation: orbit-spinner-orbit-three-animation-data-v-2767e9c3 1200ms linear infinite;\n          animation: orbit-spinner-orbit-three-animation-data-v-2767e9c3 1200ms linear infinite;\n  border-top: 3px solid #ff1d5e;\n}\n@-webkit-keyframes orbit-spinner-orbit-one-animation-data-v-2767e9c3 {\n0% {\n    -webkit-transform: rotateX(35deg) rotateY(-45deg) rotateZ(0deg);\n            transform: rotateX(35deg) rotateY(-45deg) rotateZ(0deg);\n}\n100% {\n    -webkit-transform: rotateX(35deg) rotateY(-45deg) rotateZ(360deg);\n            transform: rotateX(35deg) rotateY(-45deg) rotateZ(360deg);\n}\n}\n@keyframes orbit-spinner-orbit-one-animation-data-v-2767e9c3 {\n0% {\n    -webkit-transform: rotateX(35deg) rotateY(-45deg) rotateZ(0deg);\n            transform: rotateX(35deg) rotateY(-45deg) rotateZ(0deg);\n}\n100% {\n    -webkit-transform: rotateX(35deg) rotateY(-45deg) rotateZ(360deg);\n            transform: rotateX(35deg) rotateY(-45deg) rotateZ(360deg);\n}\n}\n@-webkit-keyframes orbit-spinner-orbit-two-animation-data-v-2767e9c3 {\n0% {\n    -webkit-transform: rotateX(50deg) rotateY(10deg) rotateZ(0deg);\n            transform: rotateX(50deg) rotateY(10deg) rotateZ(0deg);\n}\n100% {\n    -webkit-transform: rotateX(50deg) rotateY(10deg) rotateZ(360deg);\n            transform: rotateX(50deg) rotateY(10deg) rotateZ(360deg);\n}\n}\n@keyframes orbit-spinner-orbit-two-animation-data-v-2767e9c3 {\n0% {\n    -webkit-transform: rotateX(50deg) rotateY(10deg) rotateZ(0deg);\n            transform: rotateX(50deg) rotateY(10deg) rotateZ(0deg);\n}\n100% {\n    -webkit-transform: rotateX(50deg) rotateY(10deg) rotateZ(360deg);\n            transform: rotateX(50deg) rotateY(10deg) rotateZ(360deg);\n}\n}\n@-webkit-keyframes orbit-spinner-orbit-three-animation-data-v-2767e9c3 {\n0% {\n    -webkit-transform: rotateX(35deg) rotateY(55deg) rotateZ(0deg);\n            transform: rotateX(35deg) rotateY(55deg) rotateZ(0deg);\n}\n100% {\n    -webkit-transform: rotateX(35deg) rotateY(55deg) rotateZ(360deg);\n            transform: rotateX(35deg) rotateY(55deg) rotateZ(360deg);\n}\n}\n@keyframes orbit-spinner-orbit-three-animation-data-v-2767e9c3 {\n0% {\n    -webkit-transform: rotateX(35deg) rotateY(55deg) rotateZ(0deg);\n            transform: rotateX(35deg) rotateY(55deg) rotateZ(0deg);\n}\n100% {\n    -webkit-transform: rotateX(35deg) rotateY(55deg) rotateZ(360deg);\n            transform: rotateX(35deg) rotateY(55deg) rotateZ(360deg);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css&":
    /*!******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.pixel-spinner[data-v-51b91a07], .pixel-spinner *[data-v-51b91a07] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.pixel-spinner[data-v-51b91a07] {\n  height: 70px;\n  width: 70px;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n.pixel-spinner .pixel-spinner-inner[data-v-51b91a07] {\n  width: calc(70px / 7);\n  height: calc(70px / 7);\n  background-color: #ff1d5e;\n  color: #ff1d5e;\n  -webkit-box-shadow: 15px 15px  0 0,\n  -15px -15px  0 0,\n  15px -15px  0 0,\n  -15px 15px  0 0,\n  0 15px  0 0,\n  15px 0  0 0,\n  -15px 0  0 0,\n  0 -15px 0 0;\n          box-shadow: 15px 15px  0 0,\n  -15px -15px  0 0,\n  15px -15px  0 0,\n  -15px 15px  0 0,\n  0 15px  0 0,\n  15px 0  0 0,\n  -15px 0  0 0,\n  0 -15px 0 0;\n  -webkit-animation: pixel-spinner-animation-data-v-51b91a07 2000ms linear infinite;\n          animation: pixel-spinner-animation-data-v-51b91a07 2000ms linear infinite;\n}\n\n/* NOTE Keyframes here serve as reference. They don't do anything. */\n@-webkit-keyframes pixel-spinner-animation-data-v-51b91a07 {\n50% {\n    -webkit-box-shadow: 20px 20px 0px 0px,\n    -20px -20px 0px 0px,\n    20px -20px 0px 0px,\n    -20px 20px 0px 0px,\n    0px 10px 0px 0px,\n    10px 0px 0px 0px,\n    -10px 0px 0px 0px,\n    0px -10px 0px 0px;\n            box-shadow: 20px 20px 0px 0px,\n    -20px -20px 0px 0px,\n    20px -20px 0px 0px,\n    -20px 20px 0px 0px,\n    0px 10px 0px 0px,\n    10px 0px 0px 0px,\n    -10px 0px 0px 0px,\n    0px -10px 0px 0px;\n}\n75% {\n    -webkit-box-shadow: 20px 20px 0px 0px,\n    -20px -20px 0px 0px,\n    20px -20px 0px 0px,\n    -20px 20px 0px 0px,\n    0px 10px 0px 0px,\n    10px 0px 0px 0px,\n    -10px 0px 0px 0px,\n    0px -10px 0px 0px;\n            box-shadow: 20px 20px 0px 0px,\n    -20px -20px 0px 0px,\n    20px -20px 0px 0px,\n    -20px 20px 0px 0px,\n    0px 10px 0px 0px,\n    10px 0px 0px 0px,\n    -10px 0px 0px 0px,\n    0px -10px 0px 0px;\n}\n100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n}\n}\n@keyframes pixel-spinner-animation-data-v-51b91a07 {\n50% {\n    -webkit-box-shadow: 20px 20px 0px 0px,\n    -20px -20px 0px 0px,\n    20px -20px 0px 0px,\n    -20px 20px 0px 0px,\n    0px 10px 0px 0px,\n    10px 0px 0px 0px,\n    -10px 0px 0px 0px,\n    0px -10px 0px 0px;\n            box-shadow: 20px 20px 0px 0px,\n    -20px -20px 0px 0px,\n    20px -20px 0px 0px,\n    -20px 20px 0px 0px,\n    0px 10px 0px 0px,\n    10px 0px 0px 0px,\n    -10px 0px 0px 0px,\n    0px -10px 0px 0px;\n}\n75% {\n    -webkit-box-shadow: 20px 20px 0px 0px,\n    -20px -20px 0px 0px,\n    20px -20px 0px 0px,\n    -20px 20px 0px 0px,\n    0px 10px 0px 0px,\n    10px 0px 0px 0px,\n    -10px 0px 0px 0px,\n    0px -10px 0px 0px;\n            box-shadow: 20px 20px 0px 0px,\n    -20px -20px 0px 0px,\n    20px -20px 0px 0px,\n    -20px 20px 0px 0px,\n    0px 10px 0px 0px,\n    10px 0px 0px 0px,\n    -10px 0px 0px 0px,\n    0px -10px 0px 0px;\n}\n100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css&":
    /*!******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css& ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.radar-spinner[data-v-14cb8987], .radar-spinner *[data-v-14cb8987] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.radar-spinner[data-v-14cb8987] {\n  height: 60px;\n  width: 60px;\n  position: relative;\n}\n.radar-spinner .circle[data-v-14cb8987] {\n  position: absolute;\n  height: 100%;\n  width: 100%;\n  top: 0;\n  left: 0;\n  -webkit-animation: radar-spinner-animation-data-v-14cb8987 2s infinite;\n          animation: radar-spinner-animation-data-v-14cb8987 2s infinite;\n}\n.radar-spinner .circle[data-v-14cb8987]:nth-child(1) {\n  padding: calc(60px * 5 * 2 * 0 / 110);\n  -webkit-animation-delay: 300ms;\n          animation-delay: 300ms;\n}\n.radar-spinner .circle[data-v-14cb8987]:nth-child(2) {\n  padding: calc(60px * 5 * 2 * 1 / 110);\n  -webkit-animation-delay: 300ms;\n          animation-delay: 300ms;\n}\n.radar-spinner .circle[data-v-14cb8987]:nth-child(3) {\n  padding: calc(60px * 5 * 2 * 2 / 110);\n  -webkit-animation-delay: 300ms;\n          animation-delay: 300ms;\n}\n.radar-spinner .circle[data-v-14cb8987]:nth-child(4) {\n  padding: calc(60px * 5 * 2 * 3 / 110);\n  -webkit-animation-delay: 0ms;\n          animation-delay: 0ms;\n}\n.radar-spinner .circle-inner[data-v-14cb8987], .radar-spinner .circle-inner-container[data-v-14cb8987] {\n  height: 100%;\n  width: 100%;\n  border-radius: 50%;\n  border: calc(60px * 5 / 110) solid transparent;\n}\n.radar-spinner .circle-inner[data-v-14cb8987] {\n  border-left-color: #ff1d5e;\n  border-right-color: #ff1d5e;\n}\n@-webkit-keyframes radar-spinner-animation-data-v-14cb8987 {\n50% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg);\n}\n100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n}\n}\n@keyframes radar-spinner-animation-data-v-14cb8987 {\n50% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg);\n}\n100% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css&":
    /*!***************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css& ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.scaling-squares-spinner[data-v-0f830af4], .scaling-squares-spinner *[data-v-0f830af4] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.scaling-squares-spinner[data-v-0f830af4] {\n  height: 65px;\n  width: 65px;\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-animation: scaling-squares-animation-data-v-0f830af4 1250ms;\n          animation: scaling-squares-animation-data-v-0f830af4 1250ms;\n  -webkit-animation-iteration-count: infinite;\n          animation-iteration-count: infinite;\n  -webkit-transform: rotate(0deg);\n          transform: rotate(0deg);\n}\n.scaling-squares-spinner .square[data-v-0f830af4] {\n  height: calc(65px * 0.25 / 1.3);\n  width: calc(65px * 0.25 / 1.3);\n  margin-right: auto;\n  margin-left: auto;\n  border: calc(65px * 0.04 / 1.3) solid #ff1d5e;\n  position: absolute;\n  -webkit-animation-duration: 1250ms;\n          animation-duration: 1250ms;\n  -webkit-animation-iteration-count: infinite;\n          animation-iteration-count: infinite;\n}\n.scaling-squares-spinner .square[data-v-0f830af4]:nth-child(1) {\n  -webkit-animation-name: scaling-squares-spinner-animation-child-1-data-v-0f830af4;\n          animation-name: scaling-squares-spinner-animation-child-1-data-v-0f830af4;\n}\n.scaling-squares-spinner .square[data-v-0f830af4]:nth-child(2) {\n  -webkit-animation-name: scaling-squares-spinner-animation-child-2-data-v-0f830af4;\n          animation-name: scaling-squares-spinner-animation-child-2-data-v-0f830af4;\n}\n.scaling-squares-spinner .square[data-v-0f830af4]:nth-child(3) {\n  -webkit-animation-name: scaling-squares-spinner-animation-child-3-data-v-0f830af4;\n          animation-name: scaling-squares-spinner-animation-child-3-data-v-0f830af4;\n}\n.scaling-squares-spinner .square[data-v-0f830af4]:nth-child(4) {\n  -webkit-animation-name: scaling-squares-spinner-animation-child-4-data-v-0f830af4;\n          animation-name: scaling-squares-spinner-animation-child-4-data-v-0f830af4;\n}\n@-webkit-keyframes scaling-squares-animation-data-v-0f830af4 {\n50% {\n    -webkit-transform: rotate(90deg);\n            transform: rotate(90deg);\n}\n100% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg);\n}\n}\n@keyframes scaling-squares-animation-data-v-0f830af4 {\n50% {\n    -webkit-transform: rotate(90deg);\n            transform: rotate(90deg);\n}\n100% {\n    -webkit-transform: rotate(180deg);\n            transform: rotate(180deg);\n}\n}\n@-webkit-keyframes scaling-squares-spinner-animation-child-1-data-v-0f830af4 {\n50% {\n    -webkit-transform: translate(150%,150%) scale(2,2);\n            transform: translate(150%,150%) scale(2,2);\n}\n}\n@keyframes scaling-squares-spinner-animation-child-1-data-v-0f830af4 {\n50% {\n    -webkit-transform: translate(150%,150%) scale(2,2);\n            transform: translate(150%,150%) scale(2,2);\n}\n}\n@-webkit-keyframes scaling-squares-spinner-animation-child-2-data-v-0f830af4 {\n50% {\n    -webkit-transform: translate(-150%,150%) scale(2,2);\n            transform: translate(-150%,150%) scale(2,2);\n}\n}\n@keyframes scaling-squares-spinner-animation-child-2-data-v-0f830af4 {\n50% {\n    -webkit-transform: translate(-150%,150%) scale(2,2);\n            transform: translate(-150%,150%) scale(2,2);\n}\n}\n@-webkit-keyframes scaling-squares-spinner-animation-child-3-data-v-0f830af4 {\n50% {\n    -webkit-transform: translate(-150%,-150%) scale(2,2);\n            transform: translate(-150%,-150%) scale(2,2);\n}\n}\n@keyframes scaling-squares-spinner-animation-child-3-data-v-0f830af4 {\n50% {\n    -webkit-transform: translate(-150%,-150%) scale(2,2);\n            transform: translate(-150%,-150%) scale(2,2);\n}\n}\n@-webkit-keyframes scaling-squares-spinner-animation-child-4-data-v-0f830af4 {\n50% {\n    -webkit-transform: translate(150%,-150%) scale(2,2);\n            transform: translate(150%,-150%) scale(2,2);\n}\n}\n@keyframes scaling-squares-spinner-animation-child-4-data-v-0f830af4 {\n50% {\n    -webkit-transform: translate(150%,-150%) scale(2,2);\n            transform: translate(150%,-150%) scale(2,2);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css&":
    /*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css& ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.self-building-square-spinner[data-v-4cafbc50], .self-building-square-spinner *[data-v-4cafbc50] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.self-building-square-spinner[data-v-4cafbc50] {\n  height: 40px;\n  width: 40px;\n  top: calc( -10px * 2 / 3);\n}\n.self-building-square-spinner .square[data-v-4cafbc50] {\n  height: 10px;\n  width: 10px;\n  top: calc( -10px * 2 / 3);\n  margin-right: calc(10px / 3);\n  margin-top: calc(10px / 3);\n  background: #ff1d5e;\n  float: left;\n  position:relative;\n  opacity: 0;\n  -webkit-animation: self-building-square-spinner-data-v-4cafbc50 6s infinite;\n          animation: self-building-square-spinner-data-v-4cafbc50 6s infinite;\n}\n.self-building-square-spinner .square[data-v-4cafbc50]:nth-child(1) {\n  -webkit-animation-delay: calc(300ms * 6);\n          animation-delay: calc(300ms * 6);\n}\n.self-building-square-spinner .square[data-v-4cafbc50]:nth-child(2) {\n  -webkit-animation-delay: calc(300ms * 7);\n          animation-delay: calc(300ms * 7);\n}\n.self-building-square-spinner .square[data-v-4cafbc50]:nth-child(3) {\n  -webkit-animation-delay: calc(300ms * 8);\n          animation-delay: calc(300ms * 8);\n}\n.self-building-square-spinner .square[data-v-4cafbc50]:nth-child(4) {\n  -webkit-animation-delay: calc(300ms * 3);\n          animation-delay: calc(300ms * 3);\n}\n.self-building-square-spinner .square[data-v-4cafbc50]:nth-child(5) {\n  -webkit-animation-delay: calc(300ms * 4);\n          animation-delay: calc(300ms * 4);\n}\n.self-building-square-spinner .square[data-v-4cafbc50]:nth-child(6) {\n  -webkit-animation-delay: calc(300ms * 5);\n          animation-delay: calc(300ms * 5);\n}\n.self-building-square-spinner .square[data-v-4cafbc50]:nth-child(7) {\n  -webkit-animation-delay: calc(300ms * 0);\n          animation-delay: calc(300ms * 0);\n}\n.self-building-square-spinner .square[data-v-4cafbc50]:nth-child(8) {\n  -webkit-animation-delay: calc(300ms * 1);\n          animation-delay: calc(300ms * 1);\n}\n.self-building-square-spinner .square[data-v-4cafbc50]:nth-child(9) {\n  -webkit-animation-delay: calc(300ms * 2);\n          animation-delay: calc(300ms * 2);\n}\n.self-building-square-spinner .clear[data-v-4cafbc50]{\n  clear: both;\n}\n@-webkit-keyframes self-building-square-spinner-data-v-4cafbc50 {\n0% {\n    opacity: 0;\n}\n5% {\n    opacity: 1;\n    top: 0;\n}\n50.9% {\n    opacity: 1;\n    top: 0;\n}\n55.9% {\n    opacity: 0;\n    top: inherit;\n}\n}\n@keyframes self-building-square-spinner-data-v-4cafbc50 {\n0% {\n    opacity: 0;\n}\n5% {\n    opacity: 1;\n    top: 0;\n}\n50.9% {\n    opacity: 1;\n    top: 0;\n}\n55.9% {\n    opacity: 0;\n    top: inherit;\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css&":
    /*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css& ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.semipolar-spinner[data-v-5552c086], .semipolar-spinner *[data-v-5552c086] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.semipolar-spinner[data-v-5552c086] {\n  height: 65px;\n  width: 65px;\n  position: relative;\n}\n.semipolar-spinner .ring[data-v-5552c086] {\n  border-radius: 50%;\n  position: absolute;\n  border: calc(65px * 0.05) solid transparent;\n  border-top-color: #ff1d5e;\n  border-left-color: #ff1d5e;\n  -webkit-animation: semipolar-spinner-animation-data-v-5552c086 2s infinite;\n          animation: semipolar-spinner-animation-data-v-5552c086 2s infinite;\n}\n.semipolar-spinner .ring[data-v-5552c086]:nth-child(1) {\n  height: calc(65px - 65px * 0.2 * 0);\n  width: calc(65px - 65px * 0.2 * 0);\n  top: calc(65px * 0.1 * 0);\n  left: calc(65px * 0.1 * 0);\n  -webkit-animation-delay: calc(2000ms * 0.1 * 4);\n          animation-delay: calc(2000ms * 0.1 * 4);\n  z-index: 5;\n}\n.semipolar-spinner .ring[data-v-5552c086]:nth-child(2) {\n  height: calc(65px - 65px * 0.2 * 1);\n  width: calc(65px - 65px * 0.2 * 1);\n  top: calc(65px * 0.1 * 1);\n  left: calc(65px * 0.1 * 1);\n  -webkit-animation-delay: calc(2000ms * 0.1 * 3);\n          animation-delay: calc(2000ms * 0.1 * 3);\n  z-index: 4;\n}\n.semipolar-spinner .ring[data-v-5552c086]:nth-child(3) {\n  height: calc(65px - 65px * 0.2 * 2);\n  width: calc(65px - 65px * 0.2 * 2);\n  top: calc(65px * 0.1 * 2);\n  left: calc(65px * 0.1 * 2);\n  -webkit-animation-delay: calc(2000ms * 0.1 * 2);\n          animation-delay: calc(2000ms * 0.1 * 2);\n  z-index: 3;\n}\n.semipolar-spinner .ring[data-v-5552c086]:nth-child(4) {\n  height: calc(65px - 65px * 0.2 * 3);\n  width: calc(65px - 65px * 0.2 * 3);\n  top: calc(65px * 0.1 * 3);\n  left: calc(65px * 0.1 * 3);\n  -webkit-animation-delay: calc(2000ms * 0.1 * 1);\n          animation-delay: calc(2000ms * 0.1 * 1);\n  z-index: 2;\n}\n.semipolar-spinner .ring[data-v-5552c086]:nth-child(5) {\n  height: calc(65px - 65px * 0.2 * 4);\n  width: calc(65px - 65px * 0.2 * 4);\n  top: calc(65px * 0.1 * 4);\n  left: calc(65px * 0.1 * 4);\n  -webkit-animation-delay: calc(2000ms * 0.1 * 0);\n          animation-delay: calc(2000ms * 0.1 * 0);\n  z-index: 1;\n}\n@-webkit-keyframes semipolar-spinner-animation-data-v-5552c086 {\n50% {\n    -webkit-transform: rotate(360deg) scale(0.7);\n            transform: rotate(360deg) scale(0.7);\n}\n}\n@keyframes semipolar-spinner-animation-data-v-5552c086 {\n50% {\n    -webkit-transform: rotate(360deg) scale(0.7);\n            transform: rotate(360deg) scale(0.7);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css&":
    /*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css& ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.spring-spinner[data-v-cc2e81b0], .spring-spinner *[data-v-cc2e81b0] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.spring-spinner[data-v-cc2e81b0] {\n  height: 60px;\n  width: 60px;\n}\n.spring-spinner .spring-spinner-part[data-v-cc2e81b0] {\n  overflow: hidden;\n  height: calc(60px / 2);\n  width: 60px;\n}\n.spring-spinner  .spring-spinner-part.bottom[data-v-cc2e81b0] {\n  -webkit-transform: rotate(180deg) scale(-1, 1);\n          transform: rotate(180deg) scale(-1, 1);\n}\n.spring-spinner .spring-spinner-rotator[data-v-cc2e81b0] {\n  width: 60px;\n  height: 60px;\n  border: calc(60px / 7) solid transparent;\n  border-right-color: #ff1d5e;\n  border-top-color: #ff1d5e;\n  border-radius: 50%;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  -webkit-animation: spring-spinner-animation-data-v-cc2e81b0 3s ease-in-out infinite;\n          animation: spring-spinner-animation-data-v-cc2e81b0 3s ease-in-out infinite;\n  -webkit-transform: rotate(-200deg);\n          transform: rotate(-200deg);\n}\n\n/* NOTE Keyframes here serve as reference. They don't do anything. */\n@-webkit-keyframes spring-spinner-animation-data-v-cc2e81b0 {\n0% {\n    border-width: calc(60px / 7);\n}\n25% {\n    border-width: calc(60px / 23.33);\n}\n50% {\n    -webkit-transform: rotate(115deg);\n            transform: rotate(115deg);\n    border-width: calc(60px / 7);\n}\n75% {\n    border-width: calc(60px / 23.33);\n}\n100% {\n    border-width: calc(60px / 7);\n}\n}\n@keyframes spring-spinner-animation-data-v-cc2e81b0 {\n0% {\n    border-width: calc(60px / 7);\n}\n25% {\n    border-width: calc(60px / 23.33);\n}\n50% {\n    -webkit-transform: rotate(115deg);\n            transform: rotate(115deg);\n    border-width: calc(60px / 7);\n}\n75% {\n    border-width: calc(60px / 23.33);\n}\n100% {\n    border-width: calc(60px / 7);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css&":
    /*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.swapping-squares-spinner[data-v-559f9208], .swapping-squares-spinner *[data-v-559f9208] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.swapping-squares-spinner[data-v-559f9208] {\n  height: 65px;\n  width: 65px;\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n}\n.swapping-squares-spinner .square[data-v-559f9208] {\n  height: calc(65px * 0.25 / 1.3);\n  width:  calc(65px * 0.25 / 1.3);\n  -webkit-animation-duration: 1000ms;\n          animation-duration: 1000ms;\n  border: calc(65px * 0.04 / 1.3) solid #ff1d5e;\n  margin-right: auto;\n  margin-left: auto;\n  position: absolute;\n  -webkit-animation-iteration-count: infinite;\n          animation-iteration-count: infinite;\n}\n.swapping-squares-spinner .square[data-v-559f9208]:nth-child(1) {\n  -webkit-animation-name: swapping-squares-animation-child-1-data-v-559f9208;\n          animation-name: swapping-squares-animation-child-1-data-v-559f9208;\n  -webkit-animation-delay: 500ms;\n          animation-delay: 500ms;\n}\n.swapping-squares-spinner .square[data-v-559f9208]:nth-child(2) {\n  -webkit-animation-name: swapping-squares-animation-child-2-data-v-559f9208;\n          animation-name: swapping-squares-animation-child-2-data-v-559f9208;\n  -webkit-animation-delay: 0ms;\n          animation-delay: 0ms;\n}\n.swapping-squares-spinner .square[data-v-559f9208]:nth-child(3) {\n  -webkit-animation-name: swapping-squares-animation-child-3-data-v-559f9208;\n          animation-name: swapping-squares-animation-child-3-data-v-559f9208;\n  -webkit-animation-delay: 500ms;\n          animation-delay: 500ms;\n}\n.swapping-squares-spinner .square[data-v-559f9208]:nth-child(4) {\n  -webkit-animation-name: swapping-squares-animation-child-4-data-v-559f9208;\n          animation-name: swapping-squares-animation-child-4-data-v-559f9208;\n  -webkit-animation-delay: 0ms;\n          animation-delay: 0ms;\n}\n@-webkit-keyframes swapping-squares-animation-child-1-data-v-559f9208 {\n50% {\n    -webkit-transform: translate(150%,150%) scale(2,2);\n            transform: translate(150%,150%) scale(2,2);\n}\n}\n@keyframes swapping-squares-animation-child-1-data-v-559f9208 {\n50% {\n    -webkit-transform: translate(150%,150%) scale(2,2);\n            transform: translate(150%,150%) scale(2,2);\n}\n}\n@-webkit-keyframes swapping-squares-animation-child-2-data-v-559f9208 {\n50% {\n    -webkit-transform: translate(-150%,150%) scale(2,2);\n            transform: translate(-150%,150%) scale(2,2);\n}\n}\n@keyframes swapping-squares-animation-child-2-data-v-559f9208 {\n50% {\n    -webkit-transform: translate(-150%,150%) scale(2,2);\n            transform: translate(-150%,150%) scale(2,2);\n}\n}\n@-webkit-keyframes swapping-squares-animation-child-3-data-v-559f9208 {\n50% {\n    -webkit-transform: translate(-150%,-150%) scale(2,2);\n            transform: translate(-150%,-150%) scale(2,2);\n}\n}\n@keyframes swapping-squares-animation-child-3-data-v-559f9208 {\n50% {\n    -webkit-transform: translate(-150%,-150%) scale(2,2);\n            transform: translate(-150%,-150%) scale(2,2);\n}\n}\n@-webkit-keyframes swapping-squares-animation-child-4-data-v-559f9208 {\n50% {\n    -webkit-transform: translate(150%,-150%) scale(2,2);\n            transform: translate(150%,-150%) scale(2,2);\n}\n}\n@keyframes swapping-squares-animation-child-4-data-v-559f9208 {\n50% {\n    -webkit-transform: translate(150%,-150%) scale(2,2);\n            transform: translate(150%,-150%) scale(2,2);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css&":
    /*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css& ***!
  \*************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        exports = module.exports = __webpack_require__(/*! ../../../../css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
        exports.push([module.i, "\n.trinity-rings-spinner[data-v-e647c006], .trinity-rings-spinner *[data-v-e647c006] {\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.trinity-rings-spinner[data-v-e647c006] {\n  height: 66px;\n  width: 66px;\n  padding: 3px;\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-pack: center;\n      -ms-flex-pack: center;\n          justify-content: center;\n  -webkit-box-align: center;\n      -ms-flex-align: center;\n          align-items: center;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  overflow: hidden;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n}\n.trinity-rings-spinner .circle[data-v-e647c006] {\n  position:absolute;\n  display:block;\n  border-radius:50%;\n  border: 3px solid #ff1d5e;\n  opacity: 1;\n}\n.trinity-rings-spinner .circle[data-v-e647c006]:nth-child(1) {\n  height: 60px;\n  width: 60px;\n  -webkit-animation : trinity-rings-spinner-circle1-animation-data-v-e647c006 1.5s infinite linear;\n          animation : trinity-rings-spinner-circle1-animation-data-v-e647c006 1.5s infinite linear;\n  border-width: 3px;\n}\n.trinity-rings-spinner .circle[data-v-e647c006]:nth-child(2) {\n  height: calc(60px * 0.65);\n  width: calc(60px * 0.65);\n  -webkit-animation : trinity-rings-spinner-circle2-animation-data-v-e647c006 1.5s infinite linear;\n          animation : trinity-rings-spinner-circle2-animation-data-v-e647c006 1.5s infinite linear;\n  border-width: 2px;\n}\n.trinity-rings-spinner .circle[data-v-e647c006]:nth-child(3) {\n  height: calc(60px * 0.1);\n  width: calc(60px * 0.1);\n  -webkit-animation:trinity-rings-spinner-circle3-animation-data-v-e647c006 1.5s infinite linear;\n          animation:trinity-rings-spinner-circle3-animation-data-v-e647c006 1.5s infinite linear;\n  border-width: 1px;\n}\n@-webkit-keyframes trinity-rings-spinner-circle1-animation-data-v-e647c006{\n0% {\n    -webkit-transform: rotateZ(20deg) rotateY(0deg);\n            transform: rotateZ(20deg) rotateY(0deg);\n}\n100% {\n    -webkit-transform: rotateZ(100deg) rotateY(360deg);\n            transform: rotateZ(100deg) rotateY(360deg);\n}\n}\n@keyframes trinity-rings-spinner-circle1-animation-data-v-e647c006{\n0% {\n    -webkit-transform: rotateZ(20deg) rotateY(0deg);\n            transform: rotateZ(20deg) rotateY(0deg);\n}\n100% {\n    -webkit-transform: rotateZ(100deg) rotateY(360deg);\n            transform: rotateZ(100deg) rotateY(360deg);\n}\n}\n@-webkit-keyframes trinity-rings-spinner-circle2-animation-data-v-e647c006{\n0% {\n    -webkit-transform: rotateZ(100deg) rotateX(0deg);\n            transform: rotateZ(100deg) rotateX(0deg);\n}\n100% {\n    -webkit-transform: rotateZ(0deg) rotateX(360deg);\n            transform: rotateZ(0deg) rotateX(360deg);\n}\n}\n@keyframes trinity-rings-spinner-circle2-animation-data-v-e647c006{\n0% {\n    -webkit-transform: rotateZ(100deg) rotateX(0deg);\n            transform: rotateZ(100deg) rotateX(0deg);\n}\n100% {\n    -webkit-transform: rotateZ(0deg) rotateX(360deg);\n            transform: rotateZ(0deg) rotateX(360deg);\n}\n}\n@-webkit-keyframes trinity-rings-spinner-circle3-animation-data-v-e647c006{\n0% {\n    -webkit-transform: rotateZ(100deg) rotateX(-360deg);\n            transform: rotateZ(100deg) rotateX(-360deg);\n}\n100% {\n    -webkit-transform: rotateZ(-360deg) rotateX(360deg);\n            transform: rotateZ(-360deg) rotateX(360deg);\n}\n}\n@keyframes trinity-rings-spinner-circle3-animation-data-v-e647c006{\n0% {\n    -webkit-transform: rotateZ(100deg) rotateX(-360deg);\n            transform: rotateZ(100deg) rotateX(-360deg);\n}\n100% {\n    -webkit-transform: rotateZ(-360deg) rotateX(360deg);\n            transform: rotateZ(-360deg) rotateX(360deg);\n}\n}\n", ""]);

// exports


        /***/
    }),

    /***/
    "./node_modules/css-loader/lib/css-base.js":
    /*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
    /*! no static exports found */
    /***/ (function (module, exports) {

        /*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
        module.exports = function (useSourceMap) {
            var list = [];

            // return the list of modules as css string
            list.toString = function toString() {
                return this.map(function (item) {
                    var content = cssWithMappingToString(item, useSourceMap);
                    if (item[2]) {
                        return "@media " + item[2] + "{" + content + "}";
                    } else {
                        return content;
                    }
                }).join("");
            };

            // import a list of modules into the list
            list.i = function (modules, mediaQuery) {
                if (typeof modules === "string")
                    modules = [[null, modules, ""]];
                var alreadyImportedModules = {};
                for (var i = 0; i < this.length; i++) {
                    var id = this[i][0];
                    if (typeof id === "number")
                        alreadyImportedModules[id] = true;
                }
                for (i = 0; i < modules.length; i++) {
                    var item = modules[i];
                    // skip already imported module
                    // this implementation is not 100% perfect for weird media query combinations
                    //  when a module is imported multiple times with different media queries.
                    //  I hope this will never occur (Hey this way we have smaller bundles)
                    if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
                        if (mediaQuery && !item[2]) {
                            item[2] = mediaQuery;
                        } else if (mediaQuery) {
                            item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
                        }
                        list.push(item);
                    }
                }
            };
            return list;
        };

        function cssWithMappingToString(item, useSourceMap) {
            var content = item[1] || '';
            var cssMapping = item[3];
            if (!cssMapping) {
                return content;
            }

            if (useSourceMap && typeof btoa === 'function') {
                var sourceMapping = toComment(cssMapping);
                var sourceURLs = cssMapping.sources.map(function (source) {
                    return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
                });

                return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
            }

            return [content].join('\n');
        }

// Adapted from convert-source-map (MIT)
        function toComment(sourceMap) {
            // eslint-disable-next-line no-undef
            var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
            var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

            return '/*# ' + data + ' */';
        }


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue":
    /*!***********************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue ***!
  \***********************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _AtomSpinner_vue_vue_type_template_id_002b7664_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AtomSpinner.vue?vue&type=template&id=002b7664&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=template&id=002b7664&scoped=true&");
        /* harmony import */
        var _AtomSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AtomSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _AtomSpinner_vue_vue_type_style_index_0_id_002b7664_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _AtomSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _AtomSpinner_vue_vue_type_template_id_002b7664_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _AtomSpinner_vue_vue_type_template_id_002b7664_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "002b7664",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/AtomSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=script&lang=js&":
    /*!************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=script&lang=js& ***!
  \************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./AtomSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css&":
    /*!********************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css& ***!
  \********************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_style_index_0_id_002b7664_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_style_index_0_id_002b7664_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_style_index_0_id_002b7664_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_style_index_0_id_002b7664_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_style_index_0_id_002b7664_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_style_index_0_id_002b7664_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=template&id=002b7664&scoped=true&":
    /*!******************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=template&id=002b7664&scoped=true& ***!
  \******************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_template_id_002b7664_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./AtomSpinner.vue?vue&type=template&id=002b7664&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=template&id=002b7664&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_template_id_002b7664_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_AtomSpinner_vue_vue_type_template_id_002b7664_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue":
    /*!**********************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue ***!
  \**********************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _BreedingRhombusSpinner_vue_vue_type_template_id_a1d20622_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BreedingRhombusSpinner.vue?vue&type=template&id=a1d20622&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=template&id=a1d20622&scoped=true&");
        /* harmony import */
        var _BreedingRhombusSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BreedingRhombusSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _BreedingRhombusSpinner_vue_vue_type_style_index_0_id_a1d20622_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _BreedingRhombusSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _BreedingRhombusSpinner_vue_vue_type_template_id_a1d20622_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _BreedingRhombusSpinner_vue_vue_type_template_id_a1d20622_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "a1d20622",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=script&lang=js&":
    /*!***********************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./BreedingRhombusSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css&":
    /*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css& ***!
  \*******************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_style_index_0_id_a1d20622_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_style_index_0_id_a1d20622_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_style_index_0_id_a1d20622_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_style_index_0_id_a1d20622_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_style_index_0_id_a1d20622_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_style_index_0_id_a1d20622_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=template&id=a1d20622&scoped=true&":
    /*!*****************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=template&id=a1d20622&scoped=true& ***!
  \*****************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_template_id_a1d20622_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./BreedingRhombusSpinner.vue?vue&type=template&id=a1d20622&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=template&id=a1d20622&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_template_id_a1d20622_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_BreedingRhombusSpinner_vue_vue_type_template_id_a1d20622_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue":
    /*!*************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue ***!
  \*************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _CirclesToRhombusesSpinner_vue_vue_type_template_id_690fd6ce_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CirclesToRhombusesSpinner.vue?vue&type=template&id=690fd6ce&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=template&id=690fd6ce&scoped=true&");
        /* harmony import */
        var _CirclesToRhombusesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CirclesToRhombusesSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _CirclesToRhombusesSpinner_vue_vue_type_style_index_0_id_690fd6ce_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _CirclesToRhombusesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _CirclesToRhombusesSpinner_vue_vue_type_template_id_690fd6ce_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _CirclesToRhombusesSpinner_vue_vue_type_template_id_690fd6ce_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "690fd6ce",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=script&lang=js&":
    /*!**************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./CirclesToRhombusesSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css&":
    /*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css& ***!
  \**********************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_style_index_0_id_690fd6ce_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_style_index_0_id_690fd6ce_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_style_index_0_id_690fd6ce_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_style_index_0_id_690fd6ce_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_style_index_0_id_690fd6ce_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_style_index_0_id_690fd6ce_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=template&id=690fd6ce&scoped=true&":
    /*!********************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=template&id=690fd6ce&scoped=true& ***!
  \********************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_template_id_690fd6ce_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./CirclesToRhombusesSpinner.vue?vue&type=template&id=690fd6ce&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=template&id=690fd6ce&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_template_id_690fd6ce_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_CirclesToRhombusesSpinner_vue_vue_type_template_id_690fd6ce_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue":
    /*!******************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue ***!
  \******************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _FingerprintSpinner_vue_vue_type_template_id_3fdbdfe9_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FingerprintSpinner.vue?vue&type=template&id=3fdbdfe9&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=template&id=3fdbdfe9&scoped=true&");
        /* harmony import */
        var _FingerprintSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FingerprintSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _FingerprintSpinner_vue_vue_type_style_index_0_id_3fdbdfe9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _FingerprintSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _FingerprintSpinner_vue_vue_type_template_id_3fdbdfe9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _FingerprintSpinner_vue_vue_type_template_id_3fdbdfe9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "3fdbdfe9",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=script&lang=js&":
    /*!*******************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./FingerprintSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css&":
    /*!***************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css& ***!
  \***************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_style_index_0_id_3fdbdfe9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_style_index_0_id_3fdbdfe9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_style_index_0_id_3fdbdfe9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_style_index_0_id_3fdbdfe9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_style_index_0_id_3fdbdfe9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_style_index_0_id_3fdbdfe9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=template&id=3fdbdfe9&scoped=true&":
    /*!*************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=template&id=3fdbdfe9&scoped=true& ***!
  \*************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_template_id_3fdbdfe9_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./FingerprintSpinner.vue?vue&type=template&id=3fdbdfe9&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=template&id=3fdbdfe9&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_template_id_3fdbdfe9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FingerprintSpinner_vue_vue_type_template_id_3fdbdfe9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue":
    /*!*************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue ***!
  \*************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _FlowerSpinner_vue_vue_type_template_id_3996aa1a_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FlowerSpinner.vue?vue&type=template&id=3996aa1a&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=template&id=3996aa1a&scoped=true&");
        /* harmony import */
        var _FlowerSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FlowerSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _FlowerSpinner_vue_vue_type_style_index_0_id_3996aa1a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _FlowerSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _FlowerSpinner_vue_vue_type_template_id_3996aa1a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _FlowerSpinner_vue_vue_type_template_id_3996aa1a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "3996aa1a",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=script&lang=js&":
    /*!**************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./FlowerSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css&":
    /*!**********************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css& ***!
  \**********************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_style_index_0_id_3996aa1a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_style_index_0_id_3996aa1a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_style_index_0_id_3996aa1a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_style_index_0_id_3996aa1a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_style_index_0_id_3996aa1a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_style_index_0_id_3996aa1a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=template&id=3996aa1a&scoped=true&":
    /*!********************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=template&id=3996aa1a&scoped=true& ***!
  \********************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_template_id_3996aa1a_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./FlowerSpinner.vue?vue&type=template&id=3996aa1a&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=template&id=3996aa1a&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_template_id_3996aa1a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FlowerSpinner_vue_vue_type_template_id_3996aa1a_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue":
    /*!*******************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue ***!
  \*******************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _FulfillingBouncingCircleSpinner_vue_vue_type_template_id_dd350904_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FulfillingBouncingCircleSpinner.vue?vue&type=template&id=dd350904&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=template&id=dd350904&scoped=true&");
        /* harmony import */
        var _FulfillingBouncingCircleSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FulfillingBouncingCircleSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _FulfillingBouncingCircleSpinner_vue_vue_type_style_index_0_id_dd350904_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _FulfillingBouncingCircleSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _FulfillingBouncingCircleSpinner_vue_vue_type_template_id_dd350904_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _FulfillingBouncingCircleSpinner_vue_vue_type_template_id_dd350904_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "dd350904",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=script&lang=js&":
    /*!********************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=script&lang=js& ***!
  \********************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./FulfillingBouncingCircleSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css&":
    /*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css& ***!
  \****************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_style_index_0_id_dd350904_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_style_index_0_id_dd350904_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_style_index_0_id_dd350904_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_style_index_0_id_dd350904_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_style_index_0_id_dd350904_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_style_index_0_id_dd350904_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=template&id=dd350904&scoped=true&":
    /*!**************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=template&id=dd350904&scoped=true& ***!
  \**************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_template_id_dd350904_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./FulfillingBouncingCircleSpinner.vue?vue&type=template&id=dd350904&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=template&id=dd350904&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_template_id_dd350904_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FulfillingBouncingCircleSpinner_vue_vue_type_template_id_dd350904_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue":
    /*!***********************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue ***!
  \***********************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _FulfillingSquareSpinner_vue_vue_type_template_id_38857dd6_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FulfillingSquareSpinner.vue?vue&type=template&id=38857dd6&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=template&id=38857dd6&scoped=true&");
        /* harmony import */
        var _FulfillingSquareSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./FulfillingSquareSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _FulfillingSquareSpinner_vue_vue_type_style_index_0_id_38857dd6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _FulfillingSquareSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _FulfillingSquareSpinner_vue_vue_type_template_id_38857dd6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _FulfillingSquareSpinner_vue_vue_type_template_id_38857dd6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "38857dd6",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=script&lang=js&":
    /*!************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=script&lang=js& ***!
  \************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./FulfillingSquareSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css&":
    /*!********************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css& ***!
  \********************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_style_index_0_id_38857dd6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_style_index_0_id_38857dd6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_style_index_0_id_38857dd6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_style_index_0_id_38857dd6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_style_index_0_id_38857dd6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_style_index_0_id_38857dd6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=template&id=38857dd6&scoped=true&":
    /*!******************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=template&id=38857dd6&scoped=true& ***!
  \******************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_template_id_38857dd6_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./FulfillingSquareSpinner.vue?vue&type=template&id=38857dd6&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=template&id=38857dd6&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_template_id_38857dd6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_FulfillingSquareSpinner_vue_vue_type_template_id_38857dd6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue":
    /*!*****************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue ***!
  \*****************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _HalfCircleSpinner_vue_vue_type_template_id_bf5bf2dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HalfCircleSpinner.vue?vue&type=template&id=bf5bf2dc&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=template&id=bf5bf2dc&scoped=true&");
        /* harmony import */
        var _HalfCircleSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HalfCircleSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _HalfCircleSpinner_vue_vue_type_style_index_0_id_bf5bf2dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _HalfCircleSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _HalfCircleSpinner_vue_vue_type_template_id_bf5bf2dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _HalfCircleSpinner_vue_vue_type_template_id_bf5bf2dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "bf5bf2dc",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=script&lang=js&":
    /*!******************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./HalfCircleSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css&":
    /*!**************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css& ***!
  \**************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_style_index_0_id_bf5bf2dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_style_index_0_id_bf5bf2dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_style_index_0_id_bf5bf2dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_style_index_0_id_bf5bf2dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_style_index_0_id_bf5bf2dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_style_index_0_id_bf5bf2dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=template&id=bf5bf2dc&scoped=true&":
    /*!************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=template&id=bf5bf2dc&scoped=true& ***!
  \************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_template_id_bf5bf2dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./HalfCircleSpinner.vue?vue&type=template&id=bf5bf2dc&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=template&id=bf5bf2dc&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_template_id_bf5bf2dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_HalfCircleSpinner_vue_vue_type_template_id_bf5bf2dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue":
    /*!*****************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue ***!
  \*****************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _HollowDotsSpinner_vue_vue_type_template_id_6a8af1dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HollowDotsSpinner.vue?vue&type=template&id=6a8af1dc&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=template&id=6a8af1dc&scoped=true&");
        /* harmony import */
        var _HollowDotsSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./HollowDotsSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _HollowDotsSpinner_vue_vue_type_style_index_0_id_6a8af1dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _HollowDotsSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _HollowDotsSpinner_vue_vue_type_template_id_6a8af1dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _HollowDotsSpinner_vue_vue_type_template_id_6a8af1dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "6a8af1dc",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=script&lang=js&":
    /*!******************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./HollowDotsSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css&":
    /*!**************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css& ***!
  \**************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_style_index_0_id_6a8af1dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_style_index_0_id_6a8af1dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_style_index_0_id_6a8af1dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_style_index_0_id_6a8af1dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_style_index_0_id_6a8af1dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_style_index_0_id_6a8af1dc_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=template&id=6a8af1dc&scoped=true&":
    /*!************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=template&id=6a8af1dc&scoped=true& ***!
  \************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_template_id_6a8af1dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./HollowDotsSpinner.vue?vue&type=template&id=6a8af1dc&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=template&id=6a8af1dc&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_template_id_6a8af1dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_HollowDotsSpinner_vue_vue_type_template_id_6a8af1dc_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue":
    /*!**************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue ***!
  \**************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _IntersectingCirclesSpinner_vue_vue_type_template_id_3b0bf4e6_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./IntersectingCirclesSpinner.vue?vue&type=template&id=3b0bf4e6&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=template&id=3b0bf4e6&scoped=true&");
        /* harmony import */
        var _IntersectingCirclesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./IntersectingCirclesSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _IntersectingCirclesSpinner_vue_vue_type_style_index_0_id_3b0bf4e6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _IntersectingCirclesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _IntersectingCirclesSpinner_vue_vue_type_template_id_3b0bf4e6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _IntersectingCirclesSpinner_vue_vue_type_template_id_3b0bf4e6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "3b0bf4e6",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=script&lang=js&":
    /*!***************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./IntersectingCirclesSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css&":
    /*!***********************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css& ***!
  \***********************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_style_index_0_id_3b0bf4e6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_style_index_0_id_3b0bf4e6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_style_index_0_id_3b0bf4e6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_style_index_0_id_3b0bf4e6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_style_index_0_id_3b0bf4e6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_style_index_0_id_3b0bf4e6_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=template&id=3b0bf4e6&scoped=true&":
    /*!*********************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=template&id=3b0bf4e6&scoped=true& ***!
  \*********************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_template_id_3b0bf4e6_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./IntersectingCirclesSpinner.vue?vue&type=template&id=3b0bf4e6&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=template&id=3b0bf4e6&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_template_id_3b0bf4e6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_IntersectingCirclesSpinner_vue_vue_type_template_id_3b0bf4e6_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue":
    /*!***********************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue ***!
  \***********************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _LoopingRhombusesSpinner_vue_vue_type_template_id_656608d9_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LoopingRhombusesSpinner.vue?vue&type=template&id=656608d9&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=template&id=656608d9&scoped=true&");
        /* harmony import */
        var _LoopingRhombusesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LoopingRhombusesSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _LoopingRhombusesSpinner_vue_vue_type_style_index_0_id_656608d9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _LoopingRhombusesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _LoopingRhombusesSpinner_vue_vue_type_template_id_656608d9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _LoopingRhombusesSpinner_vue_vue_type_template_id_656608d9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "656608d9",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=script&lang=js&":
    /*!************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=script&lang=js& ***!
  \************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./LoopingRhombusesSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css&":
    /*!********************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css& ***!
  \********************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_style_index_0_id_656608d9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_style_index_0_id_656608d9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_style_index_0_id_656608d9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_style_index_0_id_656608d9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_style_index_0_id_656608d9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_style_index_0_id_656608d9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=template&id=656608d9&scoped=true&":
    /*!******************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=template&id=656608d9&scoped=true& ***!
  \******************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_template_id_656608d9_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./LoopingRhombusesSpinner.vue?vue&type=template&id=656608d9&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=template&id=656608d9&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_template_id_656608d9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_LoopingRhombusesSpinner_vue_vue_type_template_id_656608d9_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue":
    /*!************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue ***!
  \************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _OrbitSpinner_vue_vue_type_template_id_2767e9c3_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./OrbitSpinner.vue?vue&type=template&id=2767e9c3&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=template&id=2767e9c3&scoped=true&");
        /* harmony import */
        var _OrbitSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./OrbitSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _OrbitSpinner_vue_vue_type_style_index_0_id_2767e9c3_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _OrbitSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _OrbitSpinner_vue_vue_type_template_id_2767e9c3_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _OrbitSpinner_vue_vue_type_template_id_2767e9c3_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "2767e9c3",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=script&lang=js&":
    /*!*************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./OrbitSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css&":
    /*!*********************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css& ***!
  \*********************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_style_index_0_id_2767e9c3_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_style_index_0_id_2767e9c3_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_style_index_0_id_2767e9c3_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_style_index_0_id_2767e9c3_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_style_index_0_id_2767e9c3_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_style_index_0_id_2767e9c3_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=template&id=2767e9c3&scoped=true&":
    /*!*******************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=template&id=2767e9c3&scoped=true& ***!
  \*******************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_template_id_2767e9c3_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./OrbitSpinner.vue?vue&type=template&id=2767e9c3&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=template&id=2767e9c3&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_template_id_2767e9c3_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_OrbitSpinner_vue_vue_type_template_id_2767e9c3_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue":
    /*!************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue ***!
  \************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _PixelSpinner_vue_vue_type_template_id_51b91a07_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PixelSpinner.vue?vue&type=template&id=51b91a07&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=template&id=51b91a07&scoped=true&");
        /* harmony import */
        var _PixelSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PixelSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _PixelSpinner_vue_vue_type_style_index_0_id_51b91a07_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _PixelSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _PixelSpinner_vue_vue_type_template_id_51b91a07_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _PixelSpinner_vue_vue_type_template_id_51b91a07_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "51b91a07",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/PixelSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=script&lang=js&":
    /*!*************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./PixelSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css&":
    /*!*********************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css& ***!
  \*********************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_style_index_0_id_51b91a07_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_style_index_0_id_51b91a07_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_style_index_0_id_51b91a07_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_style_index_0_id_51b91a07_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_style_index_0_id_51b91a07_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_style_index_0_id_51b91a07_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=template&id=51b91a07&scoped=true&":
    /*!*******************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=template&id=51b91a07&scoped=true& ***!
  \*******************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_template_id_51b91a07_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./PixelSpinner.vue?vue&type=template&id=51b91a07&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=template&id=51b91a07&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_template_id_51b91a07_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_PixelSpinner_vue_vue_type_template_id_51b91a07_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue":
    /*!************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue ***!
  \************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _RadarSpinner_vue_vue_type_template_id_14cb8987_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RadarSpinner.vue?vue&type=template&id=14cb8987&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=template&id=14cb8987&scoped=true&");
        /* harmony import */
        var _RadarSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RadarSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _RadarSpinner_vue_vue_type_style_index_0_id_14cb8987_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _RadarSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _RadarSpinner_vue_vue_type_template_id_14cb8987_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _RadarSpinner_vue_vue_type_template_id_14cb8987_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "14cb8987",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/RadarSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=script&lang=js&":
    /*!*************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./RadarSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css&":
    /*!*********************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css& ***!
  \*********************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_style_index_0_id_14cb8987_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_style_index_0_id_14cb8987_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_style_index_0_id_14cb8987_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_style_index_0_id_14cb8987_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_style_index_0_id_14cb8987_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_style_index_0_id_14cb8987_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=template&id=14cb8987&scoped=true&":
    /*!*******************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=template&id=14cb8987&scoped=true& ***!
  \*******************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_template_id_14cb8987_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./RadarSpinner.vue?vue&type=template&id=14cb8987&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=template&id=14cb8987&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_template_id_14cb8987_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_RadarSpinner_vue_vue_type_template_id_14cb8987_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue":
    /*!*********************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue ***!
  \*********************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _ScalingSquaresSpinner_vue_vue_type_template_id_0f830af4_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ScalingSquaresSpinner.vue?vue&type=template&id=0f830af4&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=template&id=0f830af4&scoped=true&");
        /* harmony import */
        var _ScalingSquaresSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ScalingSquaresSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _ScalingSquaresSpinner_vue_vue_type_style_index_0_id_0f830af4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _ScalingSquaresSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _ScalingSquaresSpinner_vue_vue_type_template_id_0f830af4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _ScalingSquaresSpinner_vue_vue_type_template_id_0f830af4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "0f830af4",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=script&lang=js&":
    /*!**********************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./ScalingSquaresSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css&":
    /*!******************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css& ***!
  \******************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_style_index_0_id_0f830af4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_style_index_0_id_0f830af4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_style_index_0_id_0f830af4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_style_index_0_id_0f830af4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_style_index_0_id_0f830af4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_style_index_0_id_0f830af4_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=template&id=0f830af4&scoped=true&":
    /*!****************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=template&id=0f830af4&scoped=true& ***!
  \****************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_template_id_0f830af4_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./ScalingSquaresSpinner.vue?vue&type=template&id=0f830af4&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=template&id=0f830af4&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_template_id_0f830af4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_ScalingSquaresSpinner_vue_vue_type_template_id_0f830af4_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue":
    /*!*************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue ***!
  \*************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _SelfBuildingSquareSpinner_vue_vue_type_template_id_4cafbc50_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SelfBuildingSquareSpinner.vue?vue&type=template&id=4cafbc50&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=template&id=4cafbc50&scoped=true&");
        /* harmony import */
        var _SelfBuildingSquareSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SelfBuildingSquareSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _SelfBuildingSquareSpinner_vue_vue_type_style_index_0_id_4cafbc50_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _SelfBuildingSquareSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _SelfBuildingSquareSpinner_vue_vue_type_template_id_4cafbc50_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _SelfBuildingSquareSpinner_vue_vue_type_template_id_4cafbc50_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "4cafbc50",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=script&lang=js&":
    /*!**************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./SelfBuildingSquareSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css&":
    /*!**********************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css& ***!
  \**********************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_style_index_0_id_4cafbc50_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_style_index_0_id_4cafbc50_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_style_index_0_id_4cafbc50_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_style_index_0_id_4cafbc50_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_style_index_0_id_4cafbc50_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_style_index_0_id_4cafbc50_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=template&id=4cafbc50&scoped=true&":
    /*!********************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=template&id=4cafbc50&scoped=true& ***!
  \********************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_template_id_4cafbc50_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./SelfBuildingSquareSpinner.vue?vue&type=template&id=4cafbc50&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=template&id=4cafbc50&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_template_id_4cafbc50_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SelfBuildingSquareSpinner_vue_vue_type_template_id_4cafbc50_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue":
    /*!****************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue ***!
  \****************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _SemipolarSpinner_vue_vue_type_template_id_5552c086_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SemipolarSpinner.vue?vue&type=template&id=5552c086&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=template&id=5552c086&scoped=true&");
        /* harmony import */
        var _SemipolarSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SemipolarSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _SemipolarSpinner_vue_vue_type_style_index_0_id_5552c086_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _SemipolarSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _SemipolarSpinner_vue_vue_type_template_id_5552c086_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _SemipolarSpinner_vue_vue_type_template_id_5552c086_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "5552c086",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=script&lang=js&":
    /*!*****************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./SemipolarSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css&":
    /*!*************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css& ***!
  \*************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_style_index_0_id_5552c086_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_style_index_0_id_5552c086_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_style_index_0_id_5552c086_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_style_index_0_id_5552c086_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_style_index_0_id_5552c086_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_style_index_0_id_5552c086_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=template&id=5552c086&scoped=true&":
    /*!***********************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=template&id=5552c086&scoped=true& ***!
  \***********************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_template_id_5552c086_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./SemipolarSpinner.vue?vue&type=template&id=5552c086&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=template&id=5552c086&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_template_id_5552c086_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SemipolarSpinner_vue_vue_type_template_id_5552c086_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue":
    /*!*************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue ***!
  \*************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _SpringSpinner_vue_vue_type_template_id_cc2e81b0_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SpringSpinner.vue?vue&type=template&id=cc2e81b0&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=template&id=cc2e81b0&scoped=true&");
        /* harmony import */
        var _SpringSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SpringSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _SpringSpinner_vue_vue_type_style_index_0_id_cc2e81b0_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _SpringSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _SpringSpinner_vue_vue_type_template_id_cc2e81b0_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _SpringSpinner_vue_vue_type_template_id_cc2e81b0_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "cc2e81b0",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/SpringSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=script&lang=js&":
    /*!**************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./SpringSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css&":
    /*!**********************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css& ***!
  \**********************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_style_index_0_id_cc2e81b0_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_style_index_0_id_cc2e81b0_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_style_index_0_id_cc2e81b0_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_style_index_0_id_cc2e81b0_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_style_index_0_id_cc2e81b0_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_style_index_0_id_cc2e81b0_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=template&id=cc2e81b0&scoped=true&":
    /*!********************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=template&id=cc2e81b0&scoped=true& ***!
  \********************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_template_id_cc2e81b0_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./SpringSpinner.vue?vue&type=template&id=cc2e81b0&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=template&id=cc2e81b0&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_template_id_cc2e81b0_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SpringSpinner_vue_vue_type_template_id_cc2e81b0_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue":
    /*!**********************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue ***!
  \**********************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _SwappingSquaresSpinner_vue_vue_type_template_id_559f9208_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SwappingSquaresSpinner.vue?vue&type=template&id=559f9208&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=template&id=559f9208&scoped=true&");
        /* harmony import */
        var _SwappingSquaresSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SwappingSquaresSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _SwappingSquaresSpinner_vue_vue_type_style_index_0_id_559f9208_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _SwappingSquaresSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _SwappingSquaresSpinner_vue_vue_type_template_id_559f9208_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _SwappingSquaresSpinner_vue_vue_type_template_id_559f9208_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "559f9208",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=script&lang=js&":
    /*!***********************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./SwappingSquaresSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css&":
    /*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css& ***!
  \*******************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_style_index_0_id_559f9208_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_style_index_0_id_559f9208_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_style_index_0_id_559f9208_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_style_index_0_id_559f9208_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_style_index_0_id_559f9208_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_style_index_0_id_559f9208_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=template&id=559f9208&scoped=true&":
    /*!*****************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=template&id=559f9208&scoped=true& ***!
  \*****************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_template_id_559f9208_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./SwappingSquaresSpinner.vue?vue&type=template&id=559f9208&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=template&id=559f9208&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_template_id_559f9208_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_SwappingSquaresSpinner_vue_vue_type_template_id_559f9208_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue":
    /*!*******************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue ***!
  \*******************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _TrinityRingsSpinner_vue_vue_type_template_id_e647c006_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TrinityRingsSpinner.vue?vue&type=template&id=e647c006&scoped=true& */ "./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=template&id=e647c006&scoped=true&");
        /* harmony import */
        var _TrinityRingsSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TrinityRingsSpinner.vue?vue&type=script&lang=js& */ "./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _TrinityRingsSpinner_vue_vue_type_style_index_0_id_e647c006_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css& */ "./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css&");
        /* harmony import */
        var _vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__["default"])(
            _TrinityRingsSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _TrinityRingsSpinner_vue_vue_type_template_id_e647c006_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"],
            _TrinityRingsSpinner_vue_vue_type_template_id_e647c006_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            "e647c006",
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=script&lang=js&":
    /*!********************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=script&lang=js& ***!
  \********************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib??vue-loader-options!./TrinityRingsSpinner.vue?vue&type=script&lang=js& */ "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css&":
    /*!****************************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css& ***!
  \****************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_style_index_0_id_e647c006_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../style-loader!../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css& */ "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css&");
        /* harmony import */
        var _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_style_index_0_id_e647c006_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_style_index_0_id_e647c006_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__);
        /* harmony reexport (unknown) */
        for (var __WEBPACK_IMPORT_KEY__ in _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_style_index_0_id_e647c006_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__) if (__WEBPACK_IMPORT_KEY__ !== 'default') (function (key) {
            __webpack_require__.d(__webpack_exports__, key, function () {
                return _style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_style_index_0_id_e647c006_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__[key];
            })
        }(__WEBPACK_IMPORT_KEY__));
        /* harmony default export */
        __webpack_exports__["default"] = (_style_loader_index_js_css_loader_index_js_ref_34_1_vue_loader_lib_loaders_stylePostLoader_js_postcss_loader_src_index_js_ref_34_2_vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_style_index_0_id_e647c006_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a);

        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=template&id=e647c006&scoped=true&":
    /*!**************************************************************************************************************************!*\
  !*** ./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=template&id=e647c006&scoped=true& ***!
  \**************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_template_id_e647c006_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../vue-loader/lib??vue-loader-options!./TrinityRingsSpinner.vue?vue&type=template&id=e647c006&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=template&id=e647c006&scoped=true&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_template_id_e647c006_scoped_true___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _vue_loader_lib_loaders_templateLoader_js_vue_loader_options_vue_loader_lib_index_js_vue_loader_options_TrinityRingsSpinner_vue_vue_type_template_id_e647c006_scoped_true___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/lib.js":
    /*!***********************************************!*\
  !*** ./node_modules/epic-spinners/src/lib.js ***!
  \***********************************************/
    /*! exports provided: HollowDotsSpinner, PixelSpinner, FlowerSpinner, IntersectingCirclesSpinner, OrbitSpinner, FingerprintSpinner, TrinityRingsSpinner, FulfillingSquareSpinner, CirclesToRhombusesSpinner, SemipolarSpinner, BreedingRhombusSpinner, SwappingSquaresSpinner, ScalingSquaresSpinner, FulfillingBouncingCircleSpinner, RadarSpinner, SelfBuildingSquareSpinner, SpringSpinner, LoopingRhombusesSpinner, HalfCircleSpinner, AtomSpinner */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _components_lib_HollowDotsSpinner_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/lib/HollowDotsSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "HollowDotsSpinner", function () {
            return _components_lib_HollowDotsSpinner_vue__WEBPACK_IMPORTED_MODULE_0__["default"];
        });

        /* harmony import */
        var _components_lib_PixelSpinner_vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/lib/PixelSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "PixelSpinner", function () {
            return _components_lib_PixelSpinner_vue__WEBPACK_IMPORTED_MODULE_1__["default"];
        });

        /* harmony import */
        var _components_lib_FlowerSpinner_vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/lib/FlowerSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "FlowerSpinner", function () {
            return _components_lib_FlowerSpinner_vue__WEBPACK_IMPORTED_MODULE_2__["default"];
        });

        /* harmony import */
        var _components_lib_IntersectingCirclesSpinner_vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/lib/IntersectingCirclesSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "IntersectingCirclesSpinner", function () {
            return _components_lib_IntersectingCirclesSpinner_vue__WEBPACK_IMPORTED_MODULE_3__["default"];
        });

        /* harmony import */
        var _components_lib_OrbitSpinner_vue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/lib/OrbitSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "OrbitSpinner", function () {
            return _components_lib_OrbitSpinner_vue__WEBPACK_IMPORTED_MODULE_4__["default"];
        });

        /* harmony import */
        var _components_lib_FingerprintSpinner_vue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./components/lib/FingerprintSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "FingerprintSpinner", function () {
            return _components_lib_FingerprintSpinner_vue__WEBPACK_IMPORTED_MODULE_5__["default"];
        });

        /* harmony import */
        var _components_lib_TrinityRingsSpinner_vue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./components/lib/TrinityRingsSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "TrinityRingsSpinner", function () {
            return _components_lib_TrinityRingsSpinner_vue__WEBPACK_IMPORTED_MODULE_6__["default"];
        });

        /* harmony import */
        var _components_lib_FulfillingSquareSpinner_vue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./components/lib/FulfillingSquareSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "FulfillingSquareSpinner", function () {
            return _components_lib_FulfillingSquareSpinner_vue__WEBPACK_IMPORTED_MODULE_7__["default"];
        });

        /* harmony import */
        var _components_lib_CirclesToRhombusesSpinner_vue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./components/lib/CirclesToRhombusesSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "CirclesToRhombusesSpinner", function () {
            return _components_lib_CirclesToRhombusesSpinner_vue__WEBPACK_IMPORTED_MODULE_8__["default"];
        });

        /* harmony import */
        var _components_lib_SemipolarSpinner_vue__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./components/lib/SemipolarSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SemipolarSpinner", function () {
            return _components_lib_SemipolarSpinner_vue__WEBPACK_IMPORTED_MODULE_9__["default"];
        });

        /* harmony import */
        var _components_lib_BreedingRhombusSpinner_vue__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./components/lib/BreedingRhombusSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "BreedingRhombusSpinner", function () {
            return _components_lib_BreedingRhombusSpinner_vue__WEBPACK_IMPORTED_MODULE_10__["default"];
        });

        /* harmony import */
        var _components_lib_SwappingSquaresSpinner_vue__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/lib/SwappingSquaresSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SwappingSquaresSpinner", function () {
            return _components_lib_SwappingSquaresSpinner_vue__WEBPACK_IMPORTED_MODULE_11__["default"];
        });

        /* harmony import */
        var _components_lib_ScalingSquaresSpinner_vue__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/lib/ScalingSquaresSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "ScalingSquaresSpinner", function () {
            return _components_lib_ScalingSquaresSpinner_vue__WEBPACK_IMPORTED_MODULE_12__["default"];
        });

        /* harmony import */
        var _components_lib_FulfillingBouncingCircleSpinner_vue__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/lib/FulfillingBouncingCircleSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "FulfillingBouncingCircleSpinner", function () {
            return _components_lib_FulfillingBouncingCircleSpinner_vue__WEBPACK_IMPORTED_MODULE_13__["default"];
        });

        /* harmony import */
        var _components_lib_RadarSpinner_vue__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/lib/RadarSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "RadarSpinner", function () {
            return _components_lib_RadarSpinner_vue__WEBPACK_IMPORTED_MODULE_14__["default"];
        });

        /* harmony import */
        var _components_lib_SelfBuildingSquareSpinner_vue__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./components/lib/SelfBuildingSquareSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SelfBuildingSquareSpinner", function () {
            return _components_lib_SelfBuildingSquareSpinner_vue__WEBPACK_IMPORTED_MODULE_15__["default"];
        });

        /* harmony import */
        var _components_lib_SpringSpinner_vue__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./components/lib/SpringSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "SpringSpinner", function () {
            return _components_lib_SpringSpinner_vue__WEBPACK_IMPORTED_MODULE_16__["default"];
        });

        /* harmony import */
        var _components_lib_LoopingRhombusesSpinner_vue__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./components/lib/LoopingRhombusesSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "LoopingRhombusesSpinner", function () {
            return _components_lib_LoopingRhombusesSpinner_vue__WEBPACK_IMPORTED_MODULE_17__["default"];
        });

        /* harmony import */
        var _components_lib_HalfCircleSpinner_vue__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./components/lib/HalfCircleSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "HalfCircleSpinner", function () {
            return _components_lib_HalfCircleSpinner_vue__WEBPACK_IMPORTED_MODULE_18__["default"];
        });

        /* harmony import */
        var _components_lib_AtomSpinner_vue__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./components/lib/AtomSpinner.vue */ "./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "AtomSpinner", function () {
            return _components_lib_AtomSpinner_vue__WEBPACK_IMPORTED_MODULE_19__["default"];
        });


        /***/
    }),

    /***/
    "./node_modules/epic-spinners/src/services/utils.js":
    /*!**********************************************************!*\
  !*** ./node_modules/epic-spinners/src/services/utils.js ***!
  \**********************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony default export */
        __webpack_exports__["default"] = ({
            /**
             * Add reyframes to body as style block
             * @param name string
             * @param frames string
             */
            appendKeyframes: function (name, frames) {
                const sheet = document.createElement('style')
                if (!sheet) {
                    return
                }
                sheet.setAttribute('id', name)
                sheet.innerHTML = `@keyframes ${name} {${frames}}`
                document.body.appendChild(sheet)
            },
            /**
             * Remove reyframes from body
             * @param name string
             */
            removeKeyframes: function (name) {
                const sheet = document.getElementById(name)
                if (!sheet) {
                    return
                }
                const sheetParent = sheet.parentNode
                sheetParent.removeChild(sheet)
            }
        });


        /***/
    }),

    /***/
    "./node_modules/lodash/lodash.js":
    /*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (global, module) {
            var __WEBPACK_AMD_DEFINE_RESULT__;/**
             * @license
             * Lodash <https://lodash.com/>
             * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
             * Released under MIT license <https://lodash.com/license>
             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
             */
            ;(function () {

                /** Used as a safe reference for `undefined` in pre-ES5 environments. */
                var undefined;

                /** Used as the semantic version number. */
                var VERSION = '4.17.15';

                /** Used as the size to enable large array optimizations. */
                var LARGE_ARRAY_SIZE = 200;

                /** Error message constants. */
                var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
                    FUNC_ERROR_TEXT = 'Expected a function';

                /** Used to stand-in for `undefined` hash values. */
                var HASH_UNDEFINED = '__lodash_hash_undefined__';

                /** Used as the maximum memoize cache size. */
                var MAX_MEMOIZE_SIZE = 500;

                /** Used as the internal argument placeholder. */
                var PLACEHOLDER = '__lodash_placeholder__';

                /** Used to compose bitmasks for cloning. */
                var CLONE_DEEP_FLAG = 1,
                    CLONE_FLAT_FLAG = 2,
                    CLONE_SYMBOLS_FLAG = 4;

                /** Used to compose bitmasks for value comparisons. */
                var COMPARE_PARTIAL_FLAG = 1,
                    COMPARE_UNORDERED_FLAG = 2;

                /** Used to compose bitmasks for function metadata. */
                var WRAP_BIND_FLAG = 1,
                    WRAP_BIND_KEY_FLAG = 2,
                    WRAP_CURRY_BOUND_FLAG = 4,
                    WRAP_CURRY_FLAG = 8,
                    WRAP_CURRY_RIGHT_FLAG = 16,
                    WRAP_PARTIAL_FLAG = 32,
                    WRAP_PARTIAL_RIGHT_FLAG = 64,
                    WRAP_ARY_FLAG = 128,
                    WRAP_REARG_FLAG = 256,
                    WRAP_FLIP_FLAG = 512;

                /** Used as default options for `_.truncate`. */
                var DEFAULT_TRUNC_LENGTH = 30,
                    DEFAULT_TRUNC_OMISSION = '...';

                /** Used to detect hot functions by number of calls within a span of milliseconds. */
                var HOT_COUNT = 800,
                    HOT_SPAN = 16;

                /** Used to indicate the type of lazy iteratees. */
                var LAZY_FILTER_FLAG = 1,
                    LAZY_MAP_FLAG = 2,
                    LAZY_WHILE_FLAG = 3;

                /** Used as references for various `Number` constants. */
                var INFINITY = 1 / 0,
                    MAX_SAFE_INTEGER = 9007199254740991,
                    MAX_INTEGER = 1.7976931348623157e+308,
                    NAN = 0 / 0;

                /** Used as references for the maximum length and index of an array. */
                var MAX_ARRAY_LENGTH = 4294967295,
                    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
                    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

                /** Used to associate wrap methods with their bit flags. */
                var wrapFlags = [
                    ['ary', WRAP_ARY_FLAG],
                    ['bind', WRAP_BIND_FLAG],
                    ['bindKey', WRAP_BIND_KEY_FLAG],
                    ['curry', WRAP_CURRY_FLAG],
                    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
                    ['flip', WRAP_FLIP_FLAG],
                    ['partial', WRAP_PARTIAL_FLAG],
                    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
                    ['rearg', WRAP_REARG_FLAG]
                ];

                /** `Object#toString` result references. */
                var argsTag = '[object Arguments]',
                    arrayTag = '[object Array]',
                    asyncTag = '[object AsyncFunction]',
                    boolTag = '[object Boolean]',
                    dateTag = '[object Date]',
                    domExcTag = '[object DOMException]',
                    errorTag = '[object Error]',
                    funcTag = '[object Function]',
                    genTag = '[object GeneratorFunction]',
                    mapTag = '[object Map]',
                    numberTag = '[object Number]',
                    nullTag = '[object Null]',
                    objectTag = '[object Object]',
                    promiseTag = '[object Promise]',
                    proxyTag = '[object Proxy]',
                    regexpTag = '[object RegExp]',
                    setTag = '[object Set]',
                    stringTag = '[object String]',
                    symbolTag = '[object Symbol]',
                    undefinedTag = '[object Undefined]',
                    weakMapTag = '[object WeakMap]',
                    weakSetTag = '[object WeakSet]';

                var arrayBufferTag = '[object ArrayBuffer]',
                    dataViewTag = '[object DataView]',
                    float32Tag = '[object Float32Array]',
                    float64Tag = '[object Float64Array]',
                    int8Tag = '[object Int8Array]',
                    int16Tag = '[object Int16Array]',
                    int32Tag = '[object Int32Array]',
                    uint8Tag = '[object Uint8Array]',
                    uint8ClampedTag = '[object Uint8ClampedArray]',
                    uint16Tag = '[object Uint16Array]',
                    uint32Tag = '[object Uint32Array]';

                /** Used to match empty string literals in compiled template source. */
                var reEmptyStringLeading = /\b__p \+= '';/g,
                    reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
                    reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

                /** Used to match HTML entities and HTML characters. */
                var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
                    reUnescapedHtml = /[&<>"']/g,
                    reHasEscapedHtml = RegExp(reEscapedHtml.source),
                    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

                /** Used to match template delimiters. */
                var reEscape = /<%-([\s\S]+?)%>/g,
                    reEvaluate = /<%([\s\S]+?)%>/g,
                    reInterpolate = /<%=([\s\S]+?)%>/g;

                /** Used to match property names within property paths. */
                var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
                    reIsPlainProp = /^\w*$/,
                    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

                /**
                 * Used to match `RegExp`
                 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
                 */
                var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
                    reHasRegExpChar = RegExp(reRegExpChar.source);

                /** Used to match leading and trailing whitespace. */
                var reTrim = /^\s+|\s+$/g,
                    reTrimStart = /^\s+/,
                    reTrimEnd = /\s+$/;

                /** Used to match wrap detail comments. */
                var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
                    reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
                    reSplitDetails = /,? & /;

                /** Used to match words composed of alphanumeric characters. */
                var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

                /** Used to match backslashes in property paths. */
                var reEscapeChar = /\\(\\)?/g;

                /**
                 * Used to match
                 * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
                 */
                var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

                /** Used to match `RegExp` flags from their coerced string values. */
                var reFlags = /\w*$/;

                /** Used to detect bad signed hexadecimal string values. */
                var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

                /** Used to detect binary string values. */
                var reIsBinary = /^0b[01]+$/i;

                /** Used to detect host constructors (Safari). */
                var reIsHostCtor = /^\[object .+?Constructor\]$/;

                /** Used to detect octal string values. */
                var reIsOctal = /^0o[0-7]+$/i;

                /** Used to detect unsigned integer values. */
                var reIsUint = /^(?:0|[1-9]\d*)$/;

                /** Used to match Latin Unicode letters (excluding mathematical operators). */
                var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

                /** Used to ensure capturing order of template delimiters. */
                var reNoMatch = /($^)/;

                /** Used to match unescaped characters in compiled string literals. */
                var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

                /** Used to compose unicode character classes. */
                var rsAstralRange = '\\ud800-\\udfff',
                    rsComboMarksRange = '\\u0300-\\u036f',
                    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
                    rsComboSymbolsRange = '\\u20d0-\\u20ff',
                    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
                    rsDingbatRange = '\\u2700-\\u27bf',
                    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
                    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
                    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
                    rsPunctuationRange = '\\u2000-\\u206f',
                    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
                    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
                    rsVarRange = '\\ufe0e\\ufe0f',
                    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

                /** Used to compose unicode capture groups. */
                var rsApos = "['\u2019]",
                    rsAstral = '[' + rsAstralRange + ']',
                    rsBreak = '[' + rsBreakRange + ']',
                    rsCombo = '[' + rsComboRange + ']',
                    rsDigits = '\\d+',
                    rsDingbat = '[' + rsDingbatRange + ']',
                    rsLower = '[' + rsLowerRange + ']',
                    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
                    rsFitz = '\\ud83c[\\udffb-\\udfff]',
                    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
                    rsNonAstral = '[^' + rsAstralRange + ']',
                    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
                    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
                    rsUpper = '[' + rsUpperRange + ']',
                    rsZWJ = '\\u200d';

                /** Used to compose unicode regexes. */
                var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
                    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
                    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
                    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
                    reOptMod = rsModifier + '?',
                    rsOptVar = '[' + rsVarRange + ']?',
                    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
                    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
                    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
                    rsSeq = rsOptVar + reOptMod + rsOptJoin,
                    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
                    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

                /** Used to match apostrophes. */
                var reApos = RegExp(rsApos, 'g');

                /**
                 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
                 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
                 */
                var reComboMark = RegExp(rsCombo, 'g');

                /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
                var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

                /** Used to match complex or compound words. */
                var reUnicodeWord = RegExp([
                    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
                    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
                    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
                    rsUpper + '+' + rsOptContrUpper,
                    rsOrdUpper,
                    rsOrdLower,
                    rsDigits,
                    rsEmoji
                ].join('|'), 'g');

                /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
                var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

                /** Used to detect strings that need a more robust regexp to match words. */
                var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

                /** Used to assign default `context` object properties. */
                var contextProps = [
                    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
                    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
                    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
                    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
                    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
                ];

                /** Used to make template sourceURLs easier to identify. */
                var templateCounter = -1;

                /** Used to identify `toStringTag` values of typed arrays. */
                var typedArrayTags = {};
                typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
                    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
                        typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
                            typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
                                typedArrayTags[uint32Tag] = true;
                typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
                    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
                        typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
                            typedArrayTags[errorTag] = typedArrayTags[funcTag] =
                                typedArrayTags[mapTag] = typedArrayTags[numberTag] =
                                    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
                                        typedArrayTags[setTag] = typedArrayTags[stringTag] =
                                            typedArrayTags[weakMapTag] = false;

                /** Used to identify `toStringTag` values supported by `_.clone`. */
                var cloneableTags = {};
                cloneableTags[argsTag] = cloneableTags[arrayTag] =
                    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
                        cloneableTags[boolTag] = cloneableTags[dateTag] =
                            cloneableTags[float32Tag] = cloneableTags[float64Tag] =
                                cloneableTags[int8Tag] = cloneableTags[int16Tag] =
                                    cloneableTags[int32Tag] = cloneableTags[mapTag] =
                                        cloneableTags[numberTag] = cloneableTags[objectTag] =
                                            cloneableTags[regexpTag] = cloneableTags[setTag] =
                                                cloneableTags[stringTag] = cloneableTags[symbolTag] =
                                                    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
                                                        cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
                cloneableTags[errorTag] = cloneableTags[funcTag] =
                    cloneableTags[weakMapTag] = false;

                /** Used to map Latin Unicode letters to basic Latin letters. */
                var deburredLetters = {
                    // Latin-1 Supplement block.
                    '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
                    '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
                    '\xc7': 'C', '\xe7': 'c',
                    '\xd0': 'D', '\xf0': 'd',
                    '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
                    '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
                    '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
                    '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
                    '\xd1': 'N', '\xf1': 'n',
                    '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
                    '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
                    '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
                    '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
                    '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
                    '\xc6': 'Ae', '\xe6': 'ae',
                    '\xde': 'Th', '\xfe': 'th',
                    '\xdf': 'ss',
                    // Latin Extended-A block.
                    '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
                    '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
                    '\u0106': 'C', '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
                    '\u0107': 'c', '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
                    '\u010e': 'D', '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
                    '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
                    '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
                    '\u011c': 'G', '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
                    '\u011d': 'g', '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
                    '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
                    '\u0128': 'I', '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
                    '\u0129': 'i', '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
                    '\u0134': 'J', '\u0135': 'j',
                    '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
                    '\u0139': 'L', '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
                    '\u013a': 'l', '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
                    '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
                    '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
                    '\u014c': 'O', '\u014e': 'O', '\u0150': 'O',
                    '\u014d': 'o', '\u014f': 'o', '\u0151': 'o',
                    '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
                    '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
                    '\u015a': 'S', '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
                    '\u015b': 's', '\u015d': 's', '\u015f': 's', '\u0161': 's',
                    '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
                    '\u0163': 't', '\u0165': 't', '\u0167': 't',
                    '\u0168': 'U', '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
                    '\u0169': 'u', '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
                    '\u0174': 'W', '\u0175': 'w',
                    '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
                    '\u0179': 'Z', '\u017b': 'Z', '\u017d': 'Z',
                    '\u017a': 'z', '\u017c': 'z', '\u017e': 'z',
                    '\u0132': 'IJ', '\u0133': 'ij',
                    '\u0152': 'Oe', '\u0153': 'oe',
                    '\u0149': "'n", '\u017f': 's'
                };

                /** Used to map characters to HTML entities. */
                var htmlEscapes = {
                    '&': '&amp;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '"': '&quot;',
                    "'": '&#39;'
                };

                /** Used to map HTML entities to characters. */
                var htmlUnescapes = {
                    '&amp;': '&',
                    '&lt;': '<',
                    '&gt;': '>',
                    '&quot;': '"',
                    '&#39;': "'"
                };

                /** Used to escape characters for inclusion in compiled string literals. */
                var stringEscapes = {
                    '\\': '\\',
                    "'": "'",
                    '\n': 'n',
                    '\r': 'r',
                    '\u2028': 'u2028',
                    '\u2029': 'u2029'
                };

                /** Built-in method references without a dependency on `root`. */
                var freeParseFloat = parseFloat,
                    freeParseInt = parseInt;

                /** Detect free variable `global` from Node.js. */
                var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

                /** Detect free variable `self`. */
                var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

                /** Used as a reference to the global object. */
                var root = freeGlobal || freeSelf || Function('return this')();

                /** Detect free variable `exports`. */
                var freeExports = true && exports && !exports.nodeType && exports;

                /** Detect free variable `module`. */
                var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

                /** Detect the popular CommonJS extension `module.exports`. */
                var moduleExports = freeModule && freeModule.exports === freeExports;

                /** Detect free variable `process` from Node.js. */
                var freeProcess = moduleExports && freeGlobal.process;

                /** Used to access faster Node.js helpers. */
                var nodeUtil = (function () {
                    try {
                        // Use `util.types` for Node.js 10+.
                        var types = freeModule && freeModule.require && freeModule.require('util').types;

                        if (types) {
                            return types;
                        }

                        // Legacy `process.binding('util')` for Node.js < 10.
                        return freeProcess && freeProcess.binding && freeProcess.binding('util');
                    } catch (e) {
                    }
                }());

                /* Node.js helper references. */
                var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
                    nodeIsDate = nodeUtil && nodeUtil.isDate,
                    nodeIsMap = nodeUtil && nodeUtil.isMap,
                    nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
                    nodeIsSet = nodeUtil && nodeUtil.isSet,
                    nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

                /*--------------------------------------------------------------------------*/

                /**
                 * A faster alternative to `Function#apply`, this function invokes `func`
                 * with the `this` binding of `thisArg` and the arguments of `args`.
                 *
                 * @private
                 * @param {Function} func The function to invoke.
                 * @param {*} thisArg The `this` binding of `func`.
                 * @param {Array} args The arguments to invoke `func` with.
                 * @returns {*} Returns the result of `func`.
                 */
                function apply(func, thisArg, args) {
                    switch (args.length) {
                        case 0:
                            return func.call(thisArg);
                        case 1:
                            return func.call(thisArg, args[0]);
                        case 2:
                            return func.call(thisArg, args[0], args[1]);
                        case 3:
                            return func.call(thisArg, args[0], args[1], args[2]);
                    }
                    return func.apply(thisArg, args);
                }

                /**
                 * A specialized version of `baseAggregator` for arrays.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} setter The function to set `accumulator` values.
                 * @param {Function} iteratee The iteratee to transform keys.
                 * @param {Object} accumulator The initial aggregated object.
                 * @returns {Function} Returns `accumulator`.
                 */
                function arrayAggregator(array, setter, iteratee, accumulator) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        var value = array[index];
                        setter(accumulator, value, iteratee(value), array);
                    }
                    return accumulator;
                }

                /**
                 * A specialized version of `_.forEach` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns `array`.
                 */
                function arrayEach(array, iteratee) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (iteratee(array[index], index, array) === false) {
                            break;
                        }
                    }
                    return array;
                }

                /**
                 * A specialized version of `_.forEachRight` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns `array`.
                 */
                function arrayEachRight(array, iteratee) {
                    var length = array == null ? 0 : array.length;

                    while (length--) {
                        if (iteratee(array[length], length, array) === false) {
                            break;
                        }
                    }
                    return array;
                }

                /**
                 * A specialized version of `_.every` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if all elements pass the predicate check,
                 *  else `false`.
                 */
                function arrayEvery(array, predicate) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (!predicate(array[index], index, array)) {
                            return false;
                        }
                    }
                    return true;
                }

                /**
                 * A specialized version of `_.filter` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {Array} Returns the new filtered array.
                 */
                function arrayFilter(array, predicate) {
                    var index = -1,
                        length = array == null ? 0 : array.length,
                        resIndex = 0,
                        result = [];

                    while (++index < length) {
                        var value = array[index];
                        if (predicate(value, index, array)) {
                            result[resIndex++] = value;
                        }
                    }
                    return result;
                }

                /**
                 * A specialized version of `_.includes` for arrays without support for
                 * specifying an index to search from.
                 *
                 * @private
                 * @param {Array} [array] The array to inspect.
                 * @param {*} target The value to search for.
                 * @returns {boolean} Returns `true` if `target` is found, else `false`.
                 */
                function arrayIncludes(array, value) {
                    var length = array == null ? 0 : array.length;
                    return !!length && baseIndexOf(array, value, 0) > -1;
                }

                /**
                 * This function is like `arrayIncludes` except that it accepts a comparator.
                 *
                 * @private
                 * @param {Array} [array] The array to inspect.
                 * @param {*} target The value to search for.
                 * @param {Function} comparator The comparator invoked per element.
                 * @returns {boolean} Returns `true` if `target` is found, else `false`.
                 */
                function arrayIncludesWith(array, value, comparator) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (comparator(value, array[index])) {
                            return true;
                        }
                    }
                    return false;
                }

                /**
                 * A specialized version of `_.map` for arrays without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the new mapped array.
                 */
                function arrayMap(array, iteratee) {
                    var index = -1,
                        length = array == null ? 0 : array.length,
                        result = Array(length);

                    while (++index < length) {
                        result[index] = iteratee(array[index], index, array);
                    }
                    return result;
                }

                /**
                 * Appends the elements of `values` to `array`.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {Array} values The values to append.
                 * @returns {Array} Returns `array`.
                 */
                function arrayPush(array, values) {
                    var index = -1,
                        length = values.length,
                        offset = array.length;

                    while (++index < length) {
                        array[offset + index] = values[index];
                    }
                    return array;
                }

                /**
                 * A specialized version of `_.reduce` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @param {boolean} [initAccum] Specify using the first element of `array` as
                 *  the initial value.
                 * @returns {*} Returns the accumulated value.
                 */
                function arrayReduce(array, iteratee, accumulator, initAccum) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    if (initAccum && length) {
                        accumulator = array[++index];
                    }
                    while (++index < length) {
                        accumulator = iteratee(accumulator, array[index], index, array);
                    }
                    return accumulator;
                }

                /**
                 * A specialized version of `_.reduceRight` for arrays without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {*} [accumulator] The initial value.
                 * @param {boolean} [initAccum] Specify using the last element of `array` as
                 *  the initial value.
                 * @returns {*} Returns the accumulated value.
                 */
                function arrayReduceRight(array, iteratee, accumulator, initAccum) {
                    var length = array == null ? 0 : array.length;
                    if (initAccum && length) {
                        accumulator = array[--length];
                    }
                    while (length--) {
                        accumulator = iteratee(accumulator, array[length], length, array);
                    }
                    return accumulator;
                }

                /**
                 * A specialized version of `_.some` for arrays without support for iteratee
                 * shorthands.
                 *
                 * @private
                 * @param {Array} [array] The array to iterate over.
                 * @param {Function} predicate The function invoked per iteration.
                 * @returns {boolean} Returns `true` if any element passes the predicate check,
                 *  else `false`.
                 */
                function arraySome(array, predicate) {
                    var index = -1,
                        length = array == null ? 0 : array.length;

                    while (++index < length) {
                        if (predicate(array[index], index, array)) {
                            return true;
                        }
                    }
                    return false;
                }

                /**
                 * Gets the size of an ASCII `string`.
                 *
                 * @private
                 * @param {string} string The string inspect.
                 * @returns {number} Returns the string size.
                 */
                var asciiSize = baseProperty('length');

                /**
                 * Converts an ASCII `string` to an array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function asciiToArray(string) {
                    return string.split('');
                }

                /**
                 * Splits an ASCII `string` into an array of its words.
                 *
                 * @private
                 * @param {string} The string to inspect.
                 * @returns {Array} Returns the words of `string`.
                 */
                function asciiWords(string) {
                    return string.match(reAsciiWord) || [];
                }

                /**
                 * The base implementation of methods like `_.findKey` and `_.findLastKey`,
                 * without support for iteratee shorthands, which iterates over `collection`
                 * using `eachFunc`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to inspect.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {Function} eachFunc The function to iterate over `collection`.
                 * @returns {*} Returns the found element or its key, else `undefined`.
                 */
                function baseFindKey(collection, predicate, eachFunc) {
                    var result;
                    eachFunc(collection, function (value, key, collection) {
                        if (predicate(value, key, collection)) {
                            result = key;
                            return false;
                        }
                    });
                    return result;
                }

                /**
                 * The base implementation of `_.findIndex` and `_.findLastIndex` without
                 * support for iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {Function} predicate The function invoked per iteration.
                 * @param {number} fromIndex The index to search from.
                 * @param {boolean} [fromRight] Specify iterating from right to left.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function baseFindIndex(array, predicate, fromIndex, fromRight) {
                    var length = array.length,
                        index = fromIndex + (fromRight ? 1 : -1);

                    while ((fromRight ? index-- : ++index < length)) {
                        if (predicate(array[index], index, array)) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function baseIndexOf(array, value, fromIndex) {
                    return value === value
                        ? strictIndexOf(array, value, fromIndex)
                        : baseFindIndex(array, baseIsNaN, fromIndex);
                }

                /**
                 * This function is like `baseIndexOf` except that it accepts a comparator.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @param {Function} comparator The comparator invoked per element.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function baseIndexOfWith(array, value, fromIndex, comparator) {
                    var index = fromIndex - 1,
                        length = array.length;

                    while (++index < length) {
                        if (comparator(array[index], value)) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * The base implementation of `_.isNaN` without support for number objects.
                 *
                 * @private
                 * @param {*} value The value to check.
                 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                 */
                function baseIsNaN(value) {
                    return value !== value;
                }

                /**
                 * The base implementation of `_.mean` and `_.meanBy` without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {number} Returns the mean.
                 */
                function baseMean(array, iteratee) {
                    var length = array == null ? 0 : array.length;
                    return length ? (baseSum(array, iteratee) / length) : NAN;
                }

                /**
                 * The base implementation of `_.property` without support for deep paths.
                 *
                 * @private
                 * @param {string} key The key of the property to get.
                 * @returns {Function} Returns the new accessor function.
                 */
                function baseProperty(key) {
                    return function (object) {
                        return object == null ? undefined : object[key];
                    };
                }

                /**
                 * The base implementation of `_.propertyOf` without support for deep paths.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @returns {Function} Returns the new accessor function.
                 */
                function basePropertyOf(object) {
                    return function (key) {
                        return object == null ? undefined : object[key];
                    };
                }

                /**
                 * The base implementation of `_.reduce` and `_.reduceRight`, without support
                 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
                 *
                 * @private
                 * @param {Array|Object} collection The collection to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @param {*} accumulator The initial value.
                 * @param {boolean} initAccum Specify using the first or last element of
                 *  `collection` as the initial value.
                 * @param {Function} eachFunc The function to iterate over `collection`.
                 * @returns {*} Returns the accumulated value.
                 */
                function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
                    eachFunc(collection, function (value, index, collection) {
                        accumulator = initAccum
                            ? (initAccum = false, value)
                            : iteratee(accumulator, value, index, collection);
                    });
                    return accumulator;
                }

                /**
                 * The base implementation of `_.sortBy` which uses `comparer` to define the
                 * sort order of `array` and replaces criteria objects with their corresponding
                 * values.
                 *
                 * @private
                 * @param {Array} array The array to sort.
                 * @param {Function} comparer The function to define sort order.
                 * @returns {Array} Returns `array`.
                 */
                function baseSortBy(array, comparer) {
                    var length = array.length;

                    array.sort(comparer);
                    while (length--) {
                        array[length] = array[length].value;
                    }
                    return array;
                }

                /**
                 * The base implementation of `_.sum` and `_.sumBy` without support for
                 * iteratee shorthands.
                 *
                 * @private
                 * @param {Array} array The array to iterate over.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {number} Returns the sum.
                 */
                function baseSum(array, iteratee) {
                    var result,
                        index = -1,
                        length = array.length;

                    while (++index < length) {
                        var current = iteratee(array[index]);
                        if (current !== undefined) {
                            result = result === undefined ? current : (result + current);
                        }
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.times` without support for iteratee shorthands
                 * or max array length checks.
                 *
                 * @private
                 * @param {number} n The number of times to invoke `iteratee`.
                 * @param {Function} iteratee The function invoked per iteration.
                 * @returns {Array} Returns the array of results.
                 */
                function baseTimes(n, iteratee) {
                    var index = -1,
                        result = Array(n);

                    while (++index < n) {
                        result[index] = iteratee(index);
                    }
                    return result;
                }

                /**
                 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
                 * of key-value pairs for `object` corresponding to the property names of `props`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} props The property names to get values for.
                 * @returns {Object} Returns the key-value pairs.
                 */
                function baseToPairs(object, props) {
                    return arrayMap(props, function (key) {
                        return [key, object[key]];
                    });
                }

                /**
                 * The base implementation of `_.unary` without support for storing metadata.
                 *
                 * @private
                 * @param {Function} func The function to cap arguments for.
                 * @returns {Function} Returns the new capped function.
                 */
                function baseUnary(func) {
                    return function (value) {
                        return func(value);
                    };
                }

                /**
                 * The base implementation of `_.values` and `_.valuesIn` which creates an
                 * array of `object` property values corresponding to the property names
                 * of `props`.
                 *
                 * @private
                 * @param {Object} object The object to query.
                 * @param {Array} props The property names to get values for.
                 * @returns {Object} Returns the array of property values.
                 */
                function baseValues(object, props) {
                    return arrayMap(props, function (key) {
                        return object[key];
                    });
                }

                /**
                 * Checks if a `cache` value for `key` exists.
                 *
                 * @private
                 * @param {Object} cache The cache to query.
                 * @param {string} key The key of the entry to check.
                 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                 */
                function cacheHas(cache, key) {
                    return cache.has(key);
                }

                /**
                 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
                 * that is not found in the character symbols.
                 *
                 * @private
                 * @param {Array} strSymbols The string symbols to inspect.
                 * @param {Array} chrSymbols The character symbols to find.
                 * @returns {number} Returns the index of the first unmatched string symbol.
                 */
                function charsStartIndex(strSymbols, chrSymbols) {
                    var index = -1,
                        length = strSymbols.length;

                    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
                    }
                    return index;
                }

                /**
                 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
                 * that is not found in the character symbols.
                 *
                 * @private
                 * @param {Array} strSymbols The string symbols to inspect.
                 * @param {Array} chrSymbols The character symbols to find.
                 * @returns {number} Returns the index of the last unmatched string symbol.
                 */
                function charsEndIndex(strSymbols, chrSymbols) {
                    var index = strSymbols.length;

                    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
                    }
                    return index;
                }

                /**
                 * Gets the number of `placeholder` occurrences in `array`.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} placeholder The placeholder to search for.
                 * @returns {number} Returns the placeholder count.
                 */
                function countHolders(array, placeholder) {
                    var length = array.length,
                        result = 0;

                    while (length--) {
                        if (array[length] === placeholder) {
                            ++result;
                        }
                    }
                    return result;
                }

                /**
                 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
                 * letters to basic Latin letters.
                 *
                 * @private
                 * @param {string} letter The matched letter to deburr.
                 * @returns {string} Returns the deburred letter.
                 */
                var deburrLetter = basePropertyOf(deburredLetters);

                /**
                 * Used by `_.escape` to convert characters to HTML entities.
                 *
                 * @private
                 * @param {string} chr The matched character to escape.
                 * @returns {string} Returns the escaped character.
                 */
                var escapeHtmlChar = basePropertyOf(htmlEscapes);

                /**
                 * Used by `_.template` to escape characters for inclusion in compiled string literals.
                 *
                 * @private
                 * @param {string} chr The matched character to escape.
                 * @returns {string} Returns the escaped character.
                 */
                function escapeStringChar(chr) {
                    return '\\' + stringEscapes[chr];
                }

                /**
                 * Gets the value at `key` of `object`.
                 *
                 * @private
                 * @param {Object} [object] The object to query.
                 * @param {string} key The key of the property to get.
                 * @returns {*} Returns the property value.
                 */
                function getValue(object, key) {
                    return object == null ? undefined : object[key];
                }

                /**
                 * Checks if `string` contains Unicode symbols.
                 *
                 * @private
                 * @param {string} string The string to inspect.
                 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
                 */
                function hasUnicode(string) {
                    return reHasUnicode.test(string);
                }

                /**
                 * Checks if `string` contains a word composed of Unicode symbols.
                 *
                 * @private
                 * @param {string} string The string to inspect.
                 * @returns {boolean} Returns `true` if a word is found, else `false`.
                 */
                function hasUnicodeWord(string) {
                    return reHasUnicodeWord.test(string);
                }

                /**
                 * Converts `iterator` to an array.
                 *
                 * @private
                 * @param {Object} iterator The iterator to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function iteratorToArray(iterator) {
                    var data,
                        result = [];

                    while (!(data = iterator.next()).done) {
                        result.push(data.value);
                    }
                    return result;
                }

                /**
                 * Converts `map` to its key-value pairs.
                 *
                 * @private
                 * @param {Object} map The map to convert.
                 * @returns {Array} Returns the key-value pairs.
                 */
                function mapToArray(map) {
                    var index = -1,
                        result = Array(map.size);

                    map.forEach(function (value, key) {
                        result[++index] = [key, value];
                    });
                    return result;
                }

                /**
                 * Creates a unary function that invokes `func` with its argument transformed.
                 *
                 * @private
                 * @param {Function} func The function to wrap.
                 * @param {Function} transform The argument transform.
                 * @returns {Function} Returns the new function.
                 */
                function overArg(func, transform) {
                    return function (arg) {
                        return func(transform(arg));
                    };
                }

                /**
                 * Replaces all `placeholder` elements in `array` with an internal placeholder
                 * and returns an array of their indexes.
                 *
                 * @private
                 * @param {Array} array The array to modify.
                 * @param {*} placeholder The placeholder to replace.
                 * @returns {Array} Returns the new array of placeholder indexes.
                 */
                function replaceHolders(array, placeholder) {
                    var index = -1,
                        length = array.length,
                        resIndex = 0,
                        result = [];

                    while (++index < length) {
                        var value = array[index];
                        if (value === placeholder || value === PLACEHOLDER) {
                            array[index] = PLACEHOLDER;
                            result[resIndex++] = index;
                        }
                    }
                    return result;
                }

                /**
                 * Converts `set` to an array of its values.
                 *
                 * @private
                 * @param {Object} set The set to convert.
                 * @returns {Array} Returns the values.
                 */
                function setToArray(set) {
                    var index = -1,
                        result = Array(set.size);

                    set.forEach(function (value) {
                        result[++index] = value;
                    });
                    return result;
                }

                /**
                 * Converts `set` to its value-value pairs.
                 *
                 * @private
                 * @param {Object} set The set to convert.
                 * @returns {Array} Returns the value-value pairs.
                 */
                function setToPairs(set) {
                    var index = -1,
                        result = Array(set.size);

                    set.forEach(function (value) {
                        result[++index] = [value, value];
                    });
                    return result;
                }

                /**
                 * A specialized version of `_.indexOf` which performs strict equality
                 * comparisons of values, i.e. `===`.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function strictIndexOf(array, value, fromIndex) {
                    var index = fromIndex - 1,
                        length = array.length;

                    while (++index < length) {
                        if (array[index] === value) {
                            return index;
                        }
                    }
                    return -1;
                }

                /**
                 * A specialized version of `_.lastIndexOf` which performs strict equality
                 * comparisons of values, i.e. `===`.
                 *
                 * @private
                 * @param {Array} array The array to inspect.
                 * @param {*} value The value to search for.
                 * @param {number} fromIndex The index to search from.
                 * @returns {number} Returns the index of the matched value, else `-1`.
                 */
                function strictLastIndexOf(array, value, fromIndex) {
                    var index = fromIndex + 1;
                    while (index--) {
                        if (array[index] === value) {
                            return index;
                        }
                    }
                    return index;
                }

                /**
                 * Gets the number of symbols in `string`.
                 *
                 * @private
                 * @param {string} string The string to inspect.
                 * @returns {number} Returns the string size.
                 */
                function stringSize(string) {
                    return hasUnicode(string)
                        ? unicodeSize(string)
                        : asciiSize(string);
                }

                /**
                 * Converts `string` to an array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function stringToArray(string) {
                    return hasUnicode(string)
                        ? unicodeToArray(string)
                        : asciiToArray(string);
                }

                /**
                 * Used by `_.unescape` to convert HTML entities to characters.
                 *
                 * @private
                 * @param {string} chr The matched character to unescape.
                 * @returns {string} Returns the unescaped character.
                 */
                var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

                /**
                 * Gets the size of a Unicode `string`.
                 *
                 * @private
                 * @param {string} string The string inspect.
                 * @returns {number} Returns the string size.
                 */
                function unicodeSize(string) {
                    var result = reUnicode.lastIndex = 0;
                    while (reUnicode.test(string)) {
                        ++result;
                    }
                    return result;
                }

                /**
                 * Converts a Unicode `string` to an array.
                 *
                 * @private
                 * @param {string} string The string to convert.
                 * @returns {Array} Returns the converted array.
                 */
                function unicodeToArray(string) {
                    return string.match(reUnicode) || [];
                }

                /**
                 * Splits a Unicode `string` into an array of its words.
                 *
                 * @private
                 * @param {string} The string to inspect.
                 * @returns {Array} Returns the words of `string`.
                 */
                function unicodeWords(string) {
                    return string.match(reUnicodeWord) || [];
                }

                /*--------------------------------------------------------------------------*/

                /**
                 * Create a new pristine `lodash` function using the `context` object.
                 *
                 * @static
                 * @memberOf _
                 * @since 1.1.0
                 * @category Util
                 * @param {Object} [context=root] The context object.
                 * @returns {Function} Returns a new `lodash` function.
                 * @example
                 *
                 * _.mixin({ 'foo': _.constant('foo') });
                 *
                 * var lodash = _.runInContext();
                 * lodash.mixin({ 'bar': lodash.constant('bar') });
                 *
                 * _.isFunction(_.foo);
                 * // => true
                 * _.isFunction(_.bar);
                 * // => false
                 *
                 * lodash.isFunction(lodash.foo);
                 * // => false
                 * lodash.isFunction(lodash.bar);
                 * // => true
                 *
                 * // Create a suped-up `defer` in Node.js.
                 * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
                 */
                var runInContext = (function runInContext(context) {
                    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

                    /** Built-in constructor references. */
                    var Array = context.Array,
                        Date = context.Date,
                        Error = context.Error,
                        Function = context.Function,
                        Math = context.Math,
                        Object = context.Object,
                        RegExp = context.RegExp,
                        String = context.String,
                        TypeError = context.TypeError;

                    /** Used for built-in method references. */
                    var arrayProto = Array.prototype,
                        funcProto = Function.prototype,
                        objectProto = Object.prototype;

                    /** Used to detect overreaching core-js shims. */
                    var coreJsData = context['__core-js_shared__'];

                    /** Used to resolve the decompiled source of functions. */
                    var funcToString = funcProto.toString;

                    /** Used to check objects for own properties. */
                    var hasOwnProperty = objectProto.hasOwnProperty;

                    /** Used to generate unique IDs. */
                    var idCounter = 0;

                    /** Used to detect methods masquerading as native. */
                    var maskSrcKey = (function () {
                        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                        return uid ? ('Symbol(src)_1.' + uid) : '';
                    }());

                    /**
                     * Used to resolve the
                     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                     * of values.
                     */
                    var nativeObjectToString = objectProto.toString;

                    /** Used to infer the `Object` constructor. */
                    var objectCtorString = funcToString.call(Object);

                    /** Used to restore the original `_` reference in `_.noConflict`. */
                    var oldDash = root._;

                    /** Used to detect if a method is native. */
                    var reIsNative = RegExp('^' +
                        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
                            .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
                    );

                    /** Built-in value references. */
                    var Buffer = moduleExports ? context.Buffer : undefined,
                        Symbol = context.Symbol,
                        Uint8Array = context.Uint8Array,
                        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                        getPrototype = overArg(Object.getPrototypeOf, Object),
                        objectCreate = Object.create,
                        propertyIsEnumerable = objectProto.propertyIsEnumerable,
                        splice = arrayProto.splice,
                        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
                        symIterator = Symbol ? Symbol.iterator : undefined,
                        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

                    var defineProperty = (function () {
                        try {
                            var func = getNative(Object, 'defineProperty');
                            func({}, '', {});
                            return func;
                        } catch (e) {
                        }
                    }());

                    /** Mocked built-ins. */
                    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
                        ctxNow = Date && Date.now !== root.Date.now && Date.now,
                        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

                    /* Built-in method references for those with the same name as other `lodash` methods. */
                    var nativeCeil = Math.ceil,
                        nativeFloor = Math.floor,
                        nativeGetSymbols = Object.getOwnPropertySymbols,
                        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                        nativeIsFinite = context.isFinite,
                        nativeJoin = arrayProto.join,
                        nativeKeys = overArg(Object.keys, Object),
                        nativeMax = Math.max,
                        nativeMin = Math.min,
                        nativeNow = Date.now,
                        nativeParseInt = context.parseInt,
                        nativeRandom = Math.random,
                        nativeReverse = arrayProto.reverse;

                    /* Built-in method references that are verified to be native. */
                    var DataView = getNative(context, 'DataView'),
                        Map = getNative(context, 'Map'),
                        Promise = getNative(context, 'Promise'),
                        Set = getNative(context, 'Set'),
                        WeakMap = getNative(context, 'WeakMap'),
                        nativeCreate = getNative(Object, 'create');

                    /** Used to store function metadata. */
                    var metaMap = WeakMap && new WeakMap;

                    /** Used to lookup unminified function names. */
                    var realNames = {};

                    /** Used to detect maps, sets, and weakmaps. */
                    var dataViewCtorString = toSource(DataView),
                        mapCtorString = toSource(Map),
                        promiseCtorString = toSource(Promise),
                        setCtorString = toSource(Set),
                        weakMapCtorString = toSource(WeakMap);

                    /** Used to convert symbols to primitives and strings. */
                    var symbolProto = Symbol ? Symbol.prototype : undefined,
                        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
                        symbolToString = symbolProto ? symbolProto.toString : undefined;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a `lodash` object which wraps `value` to enable implicit method
                     * chain sequences. Methods that operate on and return arrays, collections,
                     * and functions can be chained together. Methods that retrieve a single value
                     * or may return a primitive value will automatically end the chain sequence
                     * and return the unwrapped value. Otherwise, the value must be unwrapped
                     * with `_#value`.
                     *
                     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                     * enabled using `_.chain`.
                     *
                     * The execution of chained methods is lazy, that is, it's deferred until
                     * `_#value` is implicitly or explicitly called.
                     *
                     * Lazy evaluation allows several methods to support shortcut fusion.
                     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                     * the creation of intermediate arrays and can greatly reduce the number of
                     * iteratee executions. Sections of a chain sequence qualify for shortcut
                     * fusion if the section is applied to an array and iteratees accept only
                     * one argument. The heuristic for whether a section qualifies for shortcut
                     * fusion is subject to change.
                     *
                     * Chaining is supported in custom builds as long as the `_#value` method is
                     * directly or indirectly included in the build.
                     *
                     * In addition to lodash methods, wrappers have `Array` and `String` methods.
                     *
                     * The wrapper `Array` methods are:
                     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                     *
                     * The wrapper `String` methods are:
                     * `replace` and `split`
                     *
                     * The wrapper methods that support shortcut fusion are:
                     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                     *
                     * The chainable wrapper methods are:
                     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                     * `zipObject`, `zipObjectDeep`, and `zipWith`
                     *
                     * The wrapper methods that are **not** chainable by default are:
                     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                     * `upperFirst`, `value`, and `words`
                     *
                     * @name _
                     * @constructor
                     * @category Seq
                     * @param {*} value The value to wrap in a `lodash` instance.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * var wrapped = _([1, 2, 3]);
                     *
                     * // Returns an unwrapped value.
                     * wrapped.reduce(_.add);
                     * // => 6
                     *
                     * // Returns a wrapped value.
                     * var squares = wrapped.map(square);
                     *
                     * _.isArray(squares);
                     * // => false
                     *
                     * _.isArray(squares.value());
                     * // => true
                     */
                    function lodash(value) {
                        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                            if (value instanceof LodashWrapper) {
                                return value;
                            }
                            if (hasOwnProperty.call(value, '__wrapped__')) {
                                return wrapperClone(value);
                            }
                        }
                        return new LodashWrapper(value);
                    }

                    /**
                     * The base implementation of `_.create` without support for assigning
                     * properties to the created object.
                     *
                     * @private
                     * @param {Object} proto The object to inherit from.
                     * @returns {Object} Returns the new object.
                     */
                    var baseCreate = (function () {
                        function object() {
                        }

                        return function (proto) {
                            if (!isObject(proto)) {
                                return {};
                            }
                            if (objectCreate) {
                                return objectCreate(proto);
                            }
                            object.prototype = proto;
                            var result = new object;
                            object.prototype = undefined;
                            return result;
                        };
                    }());

                    /**
                     * The function whose prototype chain sequence wrappers inherit from.
                     *
                     * @private
                     */
                    function baseLodash() {
                        // No operation performed.
                    }

                    /**
                     * The base constructor for creating `lodash` wrapper objects.
                     *
                     * @private
                     * @param {*} value The value to wrap.
                     * @param {boolean} [chainAll] Enable explicit method chain sequences.
                     */
                    function LodashWrapper(value, chainAll) {
                        this.__wrapped__ = value;
                        this.__actions__ = [];
                        this.__chain__ = !!chainAll;
                        this.__index__ = 0;
                        this.__values__ = undefined;
                    }

                    /**
                     * By default, the template delimiters used by lodash are like those in
                     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
                     * following template settings to use alternative delimiters.
                     *
                     * @static
                     * @memberOf _
                     * @type {Object}
                     */
                    lodash.templateSettings = {

                        /**
                         * Used to detect `data` property values to be HTML-escaped.
                         *
                         * @memberOf _.templateSettings
                         * @type {RegExp}
                         */
                        'escape': reEscape,

                        /**
                         * Used to detect code to be evaluated.
                         *
                         * @memberOf _.templateSettings
                         * @type {RegExp}
                         */
                        'evaluate': reEvaluate,

                        /**
                         * Used to detect `data` property values to inject.
                         *
                         * @memberOf _.templateSettings
                         * @type {RegExp}
                         */
                        'interpolate': reInterpolate,

                        /**
                         * Used to reference the data object in the template text.
                         *
                         * @memberOf _.templateSettings
                         * @type {string}
                         */
                        'variable': '',

                        /**
                         * Used to import variables into the compiled template.
                         *
                         * @memberOf _.templateSettings
                         * @type {Object}
                         */
                        'imports': {

                            /**
                             * A reference to the `lodash` function.
                             *
                             * @memberOf _.templateSettings.imports
                             * @type {Function}
                             */
                            '_': lodash
                        }
                    };

                    // Ensure wrappers are instances of `baseLodash`.
                    lodash.prototype = baseLodash.prototype;
                    lodash.prototype.constructor = lodash;

                    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
                    LodashWrapper.prototype.constructor = LodashWrapper;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
                     *
                     * @private
                     * @constructor
                     * @param {*} value The value to wrap.
                     */
                    function LazyWrapper(value) {
                        this.__wrapped__ = value;
                        this.__actions__ = [];
                        this.__dir__ = 1;
                        this.__filtered__ = false;
                        this.__iteratees__ = [];
                        this.__takeCount__ = MAX_ARRAY_LENGTH;
                        this.__views__ = [];
                    }

                    /**
                     * Creates a clone of the lazy wrapper object.
                     *
                     * @private
                     * @name clone
                     * @memberOf LazyWrapper
                     * @returns {Object} Returns the cloned `LazyWrapper` object.
                     */
                    function lazyClone() {
                        var result = new LazyWrapper(this.__wrapped__);
                        result.__actions__ = copyArray(this.__actions__);
                        result.__dir__ = this.__dir__;
                        result.__filtered__ = this.__filtered__;
                        result.__iteratees__ = copyArray(this.__iteratees__);
                        result.__takeCount__ = this.__takeCount__;
                        result.__views__ = copyArray(this.__views__);
                        return result;
                    }

                    /**
                     * Reverses the direction of lazy iteration.
                     *
                     * @private
                     * @name reverse
                     * @memberOf LazyWrapper
                     * @returns {Object} Returns the new reversed `LazyWrapper` object.
                     */
                    function lazyReverse() {
                        if (this.__filtered__) {
                            var result = new LazyWrapper(this);
                            result.__dir__ = -1;
                            result.__filtered__ = true;
                        } else {
                            result = this.clone();
                            result.__dir__ *= -1;
                        }
                        return result;
                    }

                    /**
                     * Extracts the unwrapped value from its lazy wrapper.
                     *
                     * @private
                     * @name value
                     * @memberOf LazyWrapper
                     * @returns {*} Returns the unwrapped value.
                     */
                    function lazyValue() {
                        var array = this.__wrapped__.value(),
                            dir = this.__dir__,
                            isArr = isArray(array),
                            isRight = dir < 0,
                            arrLength = isArr ? array.length : 0,
                            view = getView(0, arrLength, this.__views__),
                            start = view.start,
                            end = view.end,
                            length = end - start,
                            index = isRight ? end : (start - 1),
                            iteratees = this.__iteratees__,
                            iterLength = iteratees.length,
                            resIndex = 0,
                            takeCount = nativeMin(length, this.__takeCount__);

                        if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
                            return baseWrapperValue(array, this.__actions__);
                        }
                        var result = [];

                        outer:
                            while (length-- && resIndex < takeCount) {
                                index += dir;

                                var iterIndex = -1,
                                    value = array[index];

                                while (++iterIndex < iterLength) {
                                    var data = iteratees[iterIndex],
                                        iteratee = data.iteratee,
                                        type = data.type,
                                        computed = iteratee(value);

                                    if (type == LAZY_MAP_FLAG) {
                                        value = computed;
                                    } else if (!computed) {
                                        if (type == LAZY_FILTER_FLAG) {
                                            continue outer;
                                        } else {
                                            break outer;
                                        }
                                    }
                                }
                                result[resIndex++] = value;
                            }
                        return result;
                    }

                    // Ensure `LazyWrapper` is an instance of `baseLodash`.
                    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
                    LazyWrapper.prototype.constructor = LazyWrapper;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a hash object.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function Hash(entries) {
                        var index = -1,
                            length = entries == null ? 0 : entries.length;

                        this.clear();
                        while (++index < length) {
                            var entry = entries[index];
                            this.set(entry[0], entry[1]);
                        }
                    }

                    /**
                     * Removes all key-value entries from the hash.
                     *
                     * @private
                     * @name clear
                     * @memberOf Hash
                     */
                    function hashClear() {
                        this.__data__ = nativeCreate ? nativeCreate(null) : {};
                        this.size = 0;
                    }

                    /**
                     * Removes `key` and its value from the hash.
                     *
                     * @private
                     * @name delete
                     * @memberOf Hash
                     * @param {Object} hash The hash to modify.
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function hashDelete(key) {
                        var result = this.has(key) && delete this.__data__[key];
                        this.size -= result ? 1 : 0;
                        return result;
                    }

                    /**
                     * Gets the hash value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf Hash
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function hashGet(key) {
                        var data = this.__data__;
                        if (nativeCreate) {
                            var result = data[key];
                            return result === HASH_UNDEFINED ? undefined : result;
                        }
                        return hasOwnProperty.call(data, key) ? data[key] : undefined;
                    }

                    /**
                     * Checks if a hash value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf Hash
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function hashHas(key) {
                        var data = this.__data__;
                        return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
                    }

                    /**
                     * Sets the hash `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf Hash
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the hash instance.
                     */
                    function hashSet(key, value) {
                        var data = this.__data__;
                        this.size += this.has(key) ? 0 : 1;
                        data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
                        return this;
                    }

                    // Add methods to `Hash`.
                    Hash.prototype.clear = hashClear;
                    Hash.prototype['delete'] = hashDelete;
                    Hash.prototype.get = hashGet;
                    Hash.prototype.has = hashHas;
                    Hash.prototype.set = hashSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an list cache object.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function ListCache(entries) {
                        var index = -1,
                            length = entries == null ? 0 : entries.length;

                        this.clear();
                        while (++index < length) {
                            var entry = entries[index];
                            this.set(entry[0], entry[1]);
                        }
                    }

                    /**
                     * Removes all key-value entries from the list cache.
                     *
                     * @private
                     * @name clear
                     * @memberOf ListCache
                     */
                    function listCacheClear() {
                        this.__data__ = [];
                        this.size = 0;
                    }

                    /**
                     * Removes `key` and its value from the list cache.
                     *
                     * @private
                     * @name delete
                     * @memberOf ListCache
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function listCacheDelete(key) {
                        var data = this.__data__,
                            index = assocIndexOf(data, key);

                        if (index < 0) {
                            return false;
                        }
                        var lastIndex = data.length - 1;
                        if (index == lastIndex) {
                            data.pop();
                        } else {
                            splice.call(data, index, 1);
                        }
                        --this.size;
                        return true;
                    }

                    /**
                     * Gets the list cache value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf ListCache
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function listCacheGet(key) {
                        var data = this.__data__,
                            index = assocIndexOf(data, key);

                        return index < 0 ? undefined : data[index][1];
                    }

                    /**
                     * Checks if a list cache value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf ListCache
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function listCacheHas(key) {
                        return assocIndexOf(this.__data__, key) > -1;
                    }

                    /**
                     * Sets the list cache `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf ListCache
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the list cache instance.
                     */
                    function listCacheSet(key, value) {
                        var data = this.__data__,
                            index = assocIndexOf(data, key);

                        if (index < 0) {
                            ++this.size;
                            data.push([key, value]);
                        } else {
                            data[index][1] = value;
                        }
                        return this;
                    }

                    // Add methods to `ListCache`.
                    ListCache.prototype.clear = listCacheClear;
                    ListCache.prototype['delete'] = listCacheDelete;
                    ListCache.prototype.get = listCacheGet;
                    ListCache.prototype.has = listCacheHas;
                    ListCache.prototype.set = listCacheSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a map cache object to store key-value pairs.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function MapCache(entries) {
                        var index = -1,
                            length = entries == null ? 0 : entries.length;

                        this.clear();
                        while (++index < length) {
                            var entry = entries[index];
                            this.set(entry[0], entry[1]);
                        }
                    }

                    /**
                     * Removes all key-value entries from the map.
                     *
                     * @private
                     * @name clear
                     * @memberOf MapCache
                     */
                    function mapCacheClear() {
                        this.size = 0;
                        this.__data__ = {
                            'hash': new Hash,
                            'map': new (Map || ListCache),
                            'string': new Hash
                        };
                    }

                    /**
                     * Removes `key` and its value from the map.
                     *
                     * @private
                     * @name delete
                     * @memberOf MapCache
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function mapCacheDelete(key) {
                        var result = getMapData(this, key)['delete'](key);
                        this.size -= result ? 1 : 0;
                        return result;
                    }

                    /**
                     * Gets the map value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf MapCache
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function mapCacheGet(key) {
                        return getMapData(this, key).get(key);
                    }

                    /**
                     * Checks if a map value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf MapCache
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function mapCacheHas(key) {
                        return getMapData(this, key).has(key);
                    }

                    /**
                     * Sets the map `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf MapCache
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the map cache instance.
                     */
                    function mapCacheSet(key, value) {
                        var data = getMapData(this, key),
                            size = data.size;

                        data.set(key, value);
                        this.size += data.size == size ? 0 : 1;
                        return this;
                    }

                    // Add methods to `MapCache`.
                    MapCache.prototype.clear = mapCacheClear;
                    MapCache.prototype['delete'] = mapCacheDelete;
                    MapCache.prototype.get = mapCacheGet;
                    MapCache.prototype.has = mapCacheHas;
                    MapCache.prototype.set = mapCacheSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     *
                     * Creates an array cache object to store unique values.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [values] The values to cache.
                     */
                    function SetCache(values) {
                        var index = -1,
                            length = values == null ? 0 : values.length;

                        this.__data__ = new MapCache;
                        while (++index < length) {
                            this.add(values[index]);
                        }
                    }

                    /**
                     * Adds `value` to the array cache.
                     *
                     * @private
                     * @name add
                     * @memberOf SetCache
                     * @alias push
                     * @param {*} value The value to cache.
                     * @returns {Object} Returns the cache instance.
                     */
                    function setCacheAdd(value) {
                        this.__data__.set(value, HASH_UNDEFINED);
                        return this;
                    }

                    /**
                     * Checks if `value` is in the array cache.
                     *
                     * @private
                     * @name has
                     * @memberOf SetCache
                     * @param {*} value The value to search for.
                     * @returns {number} Returns `true` if `value` is found, else `false`.
                     */
                    function setCacheHas(value) {
                        return this.__data__.has(value);
                    }

                    // Add methods to `SetCache`.
                    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
                    SetCache.prototype.has = setCacheHas;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a stack cache object to store key-value pairs.
                     *
                     * @private
                     * @constructor
                     * @param {Array} [entries] The key-value pairs to cache.
                     */
                    function Stack(entries) {
                        var data = this.__data__ = new ListCache(entries);
                        this.size = data.size;
                    }

                    /**
                     * Removes all key-value entries from the stack.
                     *
                     * @private
                     * @name clear
                     * @memberOf Stack
                     */
                    function stackClear() {
                        this.__data__ = new ListCache;
                        this.size = 0;
                    }

                    /**
                     * Removes `key` and its value from the stack.
                     *
                     * @private
                     * @name delete
                     * @memberOf Stack
                     * @param {string} key The key of the value to remove.
                     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                     */
                    function stackDelete(key) {
                        var data = this.__data__,
                            result = data['delete'](key);

                        this.size = data.size;
                        return result;
                    }

                    /**
                     * Gets the stack value for `key`.
                     *
                     * @private
                     * @name get
                     * @memberOf Stack
                     * @param {string} key The key of the value to get.
                     * @returns {*} Returns the entry value.
                     */
                    function stackGet(key) {
                        return this.__data__.get(key);
                    }

                    /**
                     * Checks if a stack value for `key` exists.
                     *
                     * @private
                     * @name has
                     * @memberOf Stack
                     * @param {string} key The key of the entry to check.
                     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                     */
                    function stackHas(key) {
                        return this.__data__.has(key);
                    }

                    /**
                     * Sets the stack `key` to `value`.
                     *
                     * @private
                     * @name set
                     * @memberOf Stack
                     * @param {string} key The key of the value to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns the stack cache instance.
                     */
                    function stackSet(key, value) {
                        var data = this.__data__;
                        if (data instanceof ListCache) {
                            var pairs = data.__data__;
                            if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
                                pairs.push([key, value]);
                                this.size = ++data.size;
                                return this;
                            }
                            data = this.__data__ = new MapCache(pairs);
                        }
                        data.set(key, value);
                        this.size = data.size;
                        return this;
                    }

                    // Add methods to `Stack`.
                    Stack.prototype.clear = stackClear;
                    Stack.prototype['delete'] = stackDelete;
                    Stack.prototype.get = stackGet;
                    Stack.prototype.has = stackHas;
                    Stack.prototype.set = stackSet;

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an array of the enumerable property names of the array-like `value`.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @param {boolean} inherited Specify returning inherited property names.
                     * @returns {Array} Returns the array of property names.
                     */
                    function arrayLikeKeys(value, inherited) {
                        var isArr = isArray(value),
                            isArg = !isArr && isArguments(value),
                            isBuff = !isArr && !isArg && isBuffer(value),
                            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                            skipIndexes = isArr || isArg || isBuff || isType,
                            result = skipIndexes ? baseTimes(value.length, String) : [],
                            length = result.length;

                        for (var key in value) {
                            if ((inherited || hasOwnProperty.call(value, key)) &&
                                !(skipIndexes && (
                                    // Safari 9 has enumerable `arguments.length` in strict mode.
                                    key == 'length' ||
                                    // Node.js 0.10 has enumerable non-index properties on buffers.
                                    (isBuff && (key == 'offset' || key == 'parent')) ||
                                    // PhantomJS 2 has enumerable non-index properties on typed arrays.
                                    (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                                    // Skip index properties.
                                    isIndex(key, length)
                                ))) {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * A specialized version of `_.sample` for arrays.
                     *
                     * @private
                     * @param {Array} array The array to sample.
                     * @returns {*} Returns the random element.
                     */
                    function arraySample(array) {
                        var length = array.length;
                        return length ? array[baseRandom(0, length - 1)] : undefined;
                    }

                    /**
                     * A specialized version of `_.sampleSize` for arrays.
                     *
                     * @private
                     * @param {Array} array The array to sample.
                     * @param {number} n The number of elements to sample.
                     * @returns {Array} Returns the random elements.
                     */
                    function arraySampleSize(array, n) {
                        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
                    }

                    /**
                     * A specialized version of `_.shuffle` for arrays.
                     *
                     * @private
                     * @param {Array} array The array to shuffle.
                     * @returns {Array} Returns the new shuffled array.
                     */
                    function arrayShuffle(array) {
                        return shuffleSelf(copyArray(array));
                    }

                    /**
                     * This function is like `assignValue` except that it doesn't assign
                     * `undefined` values.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {string} key The key of the property to assign.
                     * @param {*} value The value to assign.
                     */
                    function assignMergeValue(object, key, value) {
                        if ((value !== undefined && !eq(object[key], value)) ||
                            (value === undefined && !(key in object))) {
                            baseAssignValue(object, key, value);
                        }
                    }

                    /**
                     * Assigns `value` to `key` of `object` if the existing value is not equivalent
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {string} key The key of the property to assign.
                     * @param {*} value The value to assign.
                     */
                    function assignValue(object, key, value) {
                        var objValue = object[key];
                        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
                            (value === undefined && !(key in object))) {
                            baseAssignValue(object, key, value);
                        }
                    }

                    /**
                     * Gets the index at which the `key` is found in `array` of key-value pairs.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {*} key The key to search for.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     */
                    function assocIndexOf(array, key) {
                        var length = array.length;
                        while (length--) {
                            if (eq(array[length][0], key)) {
                                return length;
                            }
                        }
                        return -1;
                    }

                    /**
                     * Aggregates elements of `collection` on `accumulator` with keys transformed
                     * by `iteratee` and values set by `setter`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} setter The function to set `accumulator` values.
                     * @param {Function} iteratee The iteratee to transform keys.
                     * @param {Object} accumulator The initial aggregated object.
                     * @returns {Function} Returns `accumulator`.
                     */
                    function baseAggregator(collection, setter, iteratee, accumulator) {
                        baseEach(collection, function (value, key, collection) {
                            setter(accumulator, value, iteratee(value), collection);
                        });
                        return accumulator;
                    }

                    /**
                     * The base implementation of `_.assign` without support for multiple sources
                     * or `customizer` functions.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @returns {Object} Returns `object`.
                     */
                    function baseAssign(object, source) {
                        return object && copyObject(source, keys(source), object);
                    }

                    /**
                     * The base implementation of `_.assignIn` without support for multiple sources
                     * or `customizer` functions.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @returns {Object} Returns `object`.
                     */
                    function baseAssignIn(object, source) {
                        return object && copyObject(source, keysIn(source), object);
                    }

                    /**
                     * The base implementation of `assignValue` and `assignMergeValue` without
                     * value checks.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {string} key The key of the property to assign.
                     * @param {*} value The value to assign.
                     */
                    function baseAssignValue(object, key, value) {
                        if (key == '__proto__' && defineProperty) {
                            defineProperty(object, key, {
                                'configurable': true,
                                'enumerable': true,
                                'value': value,
                                'writable': true
                            });
                        } else {
                            object[key] = value;
                        }
                    }

                    /**
                     * The base implementation of `_.at` without support for individual paths.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {string[]} paths The property paths to pick.
                     * @returns {Array} Returns the picked elements.
                     */
                    function baseAt(object, paths) {
                        var index = -1,
                            length = paths.length,
                            result = Array(length),
                            skip = object == null;

                        while (++index < length) {
                            result[index] = skip ? undefined : get(object, paths[index]);
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.clamp` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {number} number The number to clamp.
                     * @param {number} [lower] The lower bound.
                     * @param {number} upper The upper bound.
                     * @returns {number} Returns the clamped number.
                     */
                    function baseClamp(number, lower, upper) {
                        if (number === number) {
                            if (upper !== undefined) {
                                number = number <= upper ? number : upper;
                            }
                            if (lower !== undefined) {
                                number = number >= lower ? number : lower;
                            }
                        }
                        return number;
                    }

                    /**
                     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                     * traversed objects.
                     *
                     * @private
                     * @param {*} value The value to clone.
                     * @param {boolean} bitmask The bitmask flags.
                     *  1 - Deep clone
                     *  2 - Flatten inherited properties
                     *  4 - Clone symbols
                     * @param {Function} [customizer] The function to customize cloning.
                     * @param {string} [key] The key of `value`.
                     * @param {Object} [object] The parent object of `value`.
                     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                     * @returns {*} Returns the cloned value.
                     */
                    function baseClone(value, bitmask, customizer, key, object, stack) {
                        var result,
                            isDeep = bitmask & CLONE_DEEP_FLAG,
                            isFlat = bitmask & CLONE_FLAT_FLAG,
                            isFull = bitmask & CLONE_SYMBOLS_FLAG;

                        if (customizer) {
                            result = object ? customizer(value, key, object, stack) : customizer(value);
                        }
                        if (result !== undefined) {
                            return result;
                        }
                        if (!isObject(value)) {
                            return value;
                        }
                        var isArr = isArray(value);
                        if (isArr) {
                            result = initCloneArray(value);
                            if (!isDeep) {
                                return copyArray(value, result);
                            }
                        } else {
                            var tag = getTag(value),
                                isFunc = tag == funcTag || tag == genTag;

                            if (isBuffer(value)) {
                                return cloneBuffer(value, isDeep);
                            }
                            if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                                result = (isFlat || isFunc) ? {} : initCloneObject(value);
                                if (!isDeep) {
                                    return isFlat
                                        ? copySymbolsIn(value, baseAssignIn(result, value))
                                        : copySymbols(value, baseAssign(result, value));
                                }
                            } else {
                                if (!cloneableTags[tag]) {
                                    return object ? value : {};
                                }
                                result = initCloneByTag(value, tag, isDeep);
                            }
                        }
                        // Check for circular references and return its corresponding clone.
                        stack || (stack = new Stack);
                        var stacked = stack.get(value);
                        if (stacked) {
                            return stacked;
                        }
                        stack.set(value, result);

                        if (isSet(value)) {
                            value.forEach(function (subValue) {
                                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
                            });
                        } else if (isMap(value)) {
                            value.forEach(function (subValue, key) {
                                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
                            });
                        }

                        var keysFunc = isFull
                            ? (isFlat ? getAllKeysIn : getAllKeys)
                            : (isFlat ? keysIn : keys);

                        var props = isArr ? undefined : keysFunc(value);
                        arrayEach(props || value, function (subValue, key) {
                            if (props) {
                                key = subValue;
                                subValue = value[key];
                            }
                            // Recursively populate clone (susceptible to call stack limits).
                            assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
                        });
                        return result;
                    }

                    /**
                     * The base implementation of `_.conforms` which doesn't clone `source`.
                     *
                     * @private
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {Function} Returns the new spec function.
                     */
                    function baseConforms(source) {
                        var props = keys(source);
                        return function (object) {
                            return baseConformsTo(object, source, props);
                        };
                    }

                    /**
                     * The base implementation of `_.conformsTo` which accepts `props` to check.
                     *
                     * @private
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                     */
                    function baseConformsTo(object, source, props) {
                        var length = props.length;
                        if (object == null) {
                            return !length;
                        }
                        object = Object(object);
                        while (length--) {
                            var key = props[length],
                                predicate = source[key],
                                value = object[key];

                            if ((value === undefined && !(key in object)) || !predicate(value)) {
                                return false;
                            }
                        }
                        return true;
                    }

                    /**
                     * The base implementation of `_.delay` and `_.defer` which accepts `args`
                     * to provide to `func`.
                     *
                     * @private
                     * @param {Function} func The function to delay.
                     * @param {number} wait The number of milliseconds to delay invocation.
                     * @param {Array} args The arguments to provide to `func`.
                     * @returns {number|Object} Returns the timer id or timeout object.
                     */
                    function baseDelay(func, wait, args) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        return setTimeout(function () {
                            func.apply(undefined, args);
                        }, wait);
                    }

                    /**
                     * The base implementation of methods like `_.difference` without support
                     * for excluding multiple arrays or iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Array} values The values to exclude.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     */
                    function baseDifference(array, values, iteratee, comparator) {
                        var index = -1,
                            includes = arrayIncludes,
                            isCommon = true,
                            length = array.length,
                            result = [],
                            valuesLength = values.length;

                        if (!length) {
                            return result;
                        }
                        if (iteratee) {
                            values = arrayMap(values, baseUnary(iteratee));
                        }
                        if (comparator) {
                            includes = arrayIncludesWith;
                            isCommon = false;
                        } else if (values.length >= LARGE_ARRAY_SIZE) {
                            includes = cacheHas;
                            isCommon = false;
                            values = new SetCache(values);
                        }
                        outer:
                            while (++index < length) {
                                var value = array[index],
                                    computed = iteratee == null ? value : iteratee(value);

                                value = (comparator || value !== 0) ? value : 0;
                                if (isCommon && computed === computed) {
                                    var valuesIndex = valuesLength;
                                    while (valuesIndex--) {
                                        if (values[valuesIndex] === computed) {
                                            continue outer;
                                        }
                                    }
                                    result.push(value);
                                } else if (!includes(values, computed, comparator)) {
                                    result.push(value);
                                }
                            }
                        return result;
                    }

                    /**
                     * The base implementation of `_.forEach` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     */
                    var baseEach = createBaseEach(baseForOwn);

                    /**
                     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     */
                    var baseEachRight = createBaseEach(baseForOwnRight, true);

                    /**
                     * The base implementation of `_.every` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {boolean} Returns `true` if all elements pass the predicate check,
                     *  else `false`
                     */
                    function baseEvery(collection, predicate) {
                        var result = true;
                        baseEach(collection, function (value, index, collection) {
                            result = !!predicate(value, index, collection);
                            return result;
                        });
                        return result;
                    }

                    /**
                     * The base implementation of methods like `_.max` and `_.min` which accepts a
                     * `comparator` to determine the extremum value.
                     *
                     * @private
                     * @param {Array} array The array to iterate over.
                     * @param {Function} iteratee The iteratee invoked per iteration.
                     * @param {Function} comparator The comparator used to compare values.
                     * @returns {*} Returns the extremum value.
                     */
                    function baseExtremum(array, iteratee, comparator) {
                        var index = -1,
                            length = array.length;

                        while (++index < length) {
                            var value = array[index],
                                current = iteratee(value);

                            if (current != null && (computed === undefined
                                    ? (current === current && !isSymbol(current))
                                    : comparator(current, computed)
                            )) {
                                var computed = current,
                                    result = value;
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.fill` without an iteratee call guard.
                     *
                     * @private
                     * @param {Array} array The array to fill.
                     * @param {*} value The value to fill `array` with.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns `array`.
                     */
                    function baseFill(array, value, start, end) {
                        var length = array.length;

                        start = toInteger(start);
                        if (start < 0) {
                            start = -start > length ? 0 : (length + start);
                        }
                        end = (end === undefined || end > length) ? length : toInteger(end);
                        if (end < 0) {
                            end += length;
                        }
                        end = start > end ? 0 : toLength(end);
                        while (start < end) {
                            array[start++] = value;
                        }
                        return array;
                    }

                    /**
                     * The base implementation of `_.filter` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     */
                    function baseFilter(collection, predicate) {
                        var result = [];
                        baseEach(collection, function (value, index, collection) {
                            if (predicate(value, index, collection)) {
                                result.push(value);
                            }
                        });
                        return result;
                    }

                    /**
                     * The base implementation of `_.flatten` with support for restricting flattening.
                     *
                     * @private
                     * @param {Array} array The array to flatten.
                     * @param {number} depth The maximum recursion depth.
                     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
                     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
                     * @param {Array} [result=[]] The initial result value.
                     * @returns {Array} Returns the new flattened array.
                     */
                    function baseFlatten(array, depth, predicate, isStrict, result) {
                        var index = -1,
                            length = array.length;

                        predicate || (predicate = isFlattenable);
                        result || (result = []);

                        while (++index < length) {
                            var value = array[index];
                            if (depth > 0 && predicate(value)) {
                                if (depth > 1) {
                                    // Recursively flatten arrays (susceptible to call stack limits).
                                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                                } else {
                                    arrayPush(result, value);
                                }
                            } else if (!isStrict) {
                                result[result.length] = value;
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `baseForOwn` which iterates over `object`
                     * properties returned by `keysFunc` and invokes `iteratee` for each property.
                     * Iteratee functions may exit iteration early by explicitly returning `false`.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {Function} keysFunc The function to get the keys of `object`.
                     * @returns {Object} Returns `object`.
                     */
                    var baseFor = createBaseFor();

                    /**
                     * This function is like `baseFor` except that it iterates over properties
                     * in the opposite order.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @param {Function} keysFunc The function to get the keys of `object`.
                     * @returns {Object} Returns `object`.
                     */
                    var baseForRight = createBaseFor(true);

                    /**
                     * The base implementation of `_.forOwn` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     */
                    function baseForOwn(object, iteratee) {
                        return object && baseFor(object, iteratee, keys);
                    }

                    /**
                     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     */
                    function baseForOwnRight(object, iteratee) {
                        return object && baseForRight(object, iteratee, keys);
                    }

                    /**
                     * The base implementation of `_.functions` which creates an array of
                     * `object` function property names filtered from `props`.
                     *
                     * @private
                     * @param {Object} object The object to inspect.
                     * @param {Array} props The property names to filter.
                     * @returns {Array} Returns the function names.
                     */
                    function baseFunctions(object, props) {
                        return arrayFilter(props, function (key) {
                            return isFunction(object[key]);
                        });
                    }

                    /**
                     * The base implementation of `_.get` without support for default values.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the property to get.
                     * @returns {*} Returns the resolved value.
                     */
                    function baseGet(object, path) {
                        path = castPath(path, object);

                        var index = 0,
                            length = path.length;

                        while (object != null && index < length) {
                            object = object[toKey(path[index++])];
                        }
                        return (index && index == length) ? object : undefined;
                    }

                    /**
                     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                     * symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Function} keysFunc The function to get the keys of `object`.
                     * @param {Function} symbolsFunc The function to get the symbols of `object`.
                     * @returns {Array} Returns the array of property names and symbols.
                     */
                    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                        var result = keysFunc(object);
                        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
                    }

                    /**
                     * The base implementation of `getTag` without fallbacks for buggy environments.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @returns {string} Returns the `toStringTag`.
                     */
                    function baseGetTag(value) {
                        if (value == null) {
                            return value === undefined ? undefinedTag : nullTag;
                        }
                        return (symToStringTag && symToStringTag in Object(value))
                            ? getRawTag(value)
                            : objectToString(value);
                    }

                    /**
                     * The base implementation of `_.gt` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is greater than `other`,
                     *  else `false`.
                     */
                    function baseGt(value, other) {
                        return value > other;
                    }

                    /**
                     * The base implementation of `_.has` without support for deep paths.
                     *
                     * @private
                     * @param {Object} [object] The object to query.
                     * @param {Array|string} key The key to check.
                     * @returns {boolean} Returns `true` if `key` exists, else `false`.
                     */
                    function baseHas(object, key) {
                        return object != null && hasOwnProperty.call(object, key);
                    }

                    /**
                     * The base implementation of `_.hasIn` without support for deep paths.
                     *
                     * @private
                     * @param {Object} [object] The object to query.
                     * @param {Array|string} key The key to check.
                     * @returns {boolean} Returns `true` if `key` exists, else `false`.
                     */
                    function baseHasIn(object, key) {
                        return object != null && key in Object(object);
                    }

                    /**
                     * The base implementation of `_.inRange` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {number} number The number to check.
                     * @param {number} start The start of the range.
                     * @param {number} end The end of the range.
                     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                     */
                    function baseInRange(number, start, end) {
                        return number >= nativeMin(start, end) && number < nativeMax(start, end);
                    }

                    /**
                     * The base implementation of methods like `_.intersection`, without support
                     * for iteratee shorthands, that accepts an array of arrays to inspect.
                     *
                     * @private
                     * @param {Array} arrays The arrays to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of shared values.
                     */
                    function baseIntersection(arrays, iteratee, comparator) {
                        var includes = comparator ? arrayIncludesWith : arrayIncludes,
                            length = arrays[0].length,
                            othLength = arrays.length,
                            othIndex = othLength,
                            caches = Array(othLength),
                            maxLength = Infinity,
                            result = [];

                        while (othIndex--) {
                            var array = arrays[othIndex];
                            if (othIndex && iteratee) {
                                array = arrayMap(array, baseUnary(iteratee));
                            }
                            maxLength = nativeMin(array.length, maxLength);
                            caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
                                ? new SetCache(othIndex && array)
                                : undefined;
                        }
                        array = arrays[0];

                        var index = -1,
                            seen = caches[0];

                        outer:
                            while (++index < length && result.length < maxLength) {
                                var value = array[index],
                                    computed = iteratee ? iteratee(value) : value;

                                value = (comparator || value !== 0) ? value : 0;
                                if (!(seen
                                        ? cacheHas(seen, computed)
                                        : includes(result, computed, comparator)
                                )) {
                                    othIndex = othLength;
                                    while (--othIndex) {
                                        var cache = caches[othIndex];
                                        if (!(cache
                                            ? cacheHas(cache, computed)
                                            : includes(arrays[othIndex], computed, comparator))
                                        ) {
                                            continue outer;
                                        }
                                    }
                                    if (seen) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                }
                            }
                        return result;
                    }

                    /**
                     * The base implementation of `_.invert` and `_.invertBy` which inverts
                     * `object` with values transformed by `iteratee` and set by `setter`.
                     *
                     * @private
                     * @param {Object} object The object to iterate over.
                     * @param {Function} setter The function to set `accumulator` values.
                     * @param {Function} iteratee The iteratee to transform values.
                     * @param {Object} accumulator The initial inverted object.
                     * @returns {Function} Returns `accumulator`.
                     */
                    function baseInverter(object, setter, iteratee, accumulator) {
                        baseForOwn(object, function (value, key, object) {
                            setter(accumulator, iteratee(value), key, object);
                        });
                        return accumulator;
                    }

                    /**
                     * The base implementation of `_.invoke` without support for individual
                     * method arguments.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the method to invoke.
                     * @param {Array} args The arguments to invoke the method with.
                     * @returns {*} Returns the result of the invoked method.
                     */
                    function baseInvoke(object, path, args) {
                        path = castPath(path, object);
                        object = parent(object, path);
                        var func = object == null ? object : object[toKey(last(path))];
                        return func == null ? undefined : apply(func, object, args);
                    }

                    /**
                     * The base implementation of `_.isArguments`.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                     */
                    function baseIsArguments(value) {
                        return isObjectLike(value) && baseGetTag(value) == argsTag;
                    }

                    /**
                     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                     */
                    function baseIsArrayBuffer(value) {
                        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
                    }

                    /**
                     * The base implementation of `_.isDate` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                     */
                    function baseIsDate(value) {
                        return isObjectLike(value) && baseGetTag(value) == dateTag;
                    }

                    /**
                     * The base implementation of `_.isEqual` which supports partial comparisons
                     * and tracks traversed objects.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @param {boolean} bitmask The bitmask flags.
                     *  1 - Unordered comparison
                     *  2 - Partial comparison
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     */
                    function baseIsEqual(value, other, bitmask, customizer, stack) {
                        if (value === other) {
                            return true;
                        }
                        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
                            return value !== value && other !== other;
                        }
                        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
                    }

                    /**
                     * A specialized version of `baseIsEqual` for arrays and objects which performs
                     * deep comparisons and tracks traversed objects enabling objects with circular
                     * references to be compared.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
                     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                     */
                    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
                        var objIsArr = isArray(object),
                            othIsArr = isArray(other),
                            objTag = objIsArr ? arrayTag : getTag(object),
                            othTag = othIsArr ? arrayTag : getTag(other);

                        objTag = objTag == argsTag ? objectTag : objTag;
                        othTag = othTag == argsTag ? objectTag : othTag;

                        var objIsObj = objTag == objectTag,
                            othIsObj = othTag == objectTag,
                            isSameTag = objTag == othTag;

                        if (isSameTag && isBuffer(object)) {
                            if (!isBuffer(other)) {
                                return false;
                            }
                            objIsArr = true;
                            objIsObj = false;
                        }
                        if (isSameTag && !objIsObj) {
                            stack || (stack = new Stack);
                            return (objIsArr || isTypedArray(object))
                                ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
                                : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
                        }
                        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                            var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                                othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

                            if (objIsWrapped || othIsWrapped) {
                                var objUnwrapped = objIsWrapped ? object.value() : object,
                                    othUnwrapped = othIsWrapped ? other.value() : other;

                                stack || (stack = new Stack);
                                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                            }
                        }
                        if (!isSameTag) {
                            return false;
                        }
                        stack || (stack = new Stack);
                        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
                    }

                    /**
                     * The base implementation of `_.isMap` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                     */
                    function baseIsMap(value) {
                        return isObjectLike(value) && getTag(value) == mapTag;
                    }

                    /**
                     * The base implementation of `_.isMatch` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property values to match.
                     * @param {Array} matchData The property names, values, and compare flags to match.
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                     */
                    function baseIsMatch(object, source, matchData, customizer) {
                        var index = matchData.length,
                            length = index,
                            noCustomizer = !customizer;

                        if (object == null) {
                            return !length;
                        }
                        object = Object(object);
                        while (index--) {
                            var data = matchData[index];
                            if ((noCustomizer && data[2])
                                ? data[1] !== object[data[0]]
                                : !(data[0] in object)
                            ) {
                                return false;
                            }
                        }
                        while (++index < length) {
                            data = matchData[index];
                            var key = data[0],
                                objValue = object[key],
                                srcValue = data[1];

                            if (noCustomizer && data[2]) {
                                if (objValue === undefined && !(key in object)) {
                                    return false;
                                }
                            } else {
                                var stack = new Stack;
                                if (customizer) {
                                    var result = customizer(objValue, srcValue, key, object, source, stack);
                                }
                                if (!(result === undefined
                                        ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                                        : result
                                )) {
                                    return false;
                                }
                            }
                        }
                        return true;
                    }

                    /**
                     * The base implementation of `_.isNative` without bad shim checks.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a native function,
                     *  else `false`.
                     */
                    function baseIsNative(value) {
                        if (!isObject(value) || isMasked(value)) {
                            return false;
                        }
                        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                        return pattern.test(toSource(value));
                    }

                    /**
                     * The base implementation of `_.isRegExp` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                     */
                    function baseIsRegExp(value) {
                        return isObjectLike(value) && baseGetTag(value) == regexpTag;
                    }

                    /**
                     * The base implementation of `_.isSet` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                     */
                    function baseIsSet(value) {
                        return isObjectLike(value) && getTag(value) == setTag;
                    }

                    /**
                     * The base implementation of `_.isTypedArray` without Node.js optimizations.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                     */
                    function baseIsTypedArray(value) {
                        return isObjectLike(value) &&
                            isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                    }

                    /**
                     * The base implementation of `_.iteratee`.
                     *
                     * @private
                     * @param {*} [value=_.identity] The value to convert to an iteratee.
                     * @returns {Function} Returns the iteratee.
                     */
                    function baseIteratee(value) {
                        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
                        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
                        if (typeof value == 'function') {
                            return value;
                        }
                        if (value == null) {
                            return identity;
                        }
                        if (typeof value == 'object') {
                            return isArray(value)
                                ? baseMatchesProperty(value[0], value[1])
                                : baseMatches(value);
                        }
                        return property(value);
                    }

                    /**
                     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     */
                    function baseKeys(object) {
                        if (!isPrototype(object)) {
                            return nativeKeys(object);
                        }
                        var result = [];
                        for (var key in Object(object)) {
                            if (hasOwnProperty.call(object, key) && key != 'constructor') {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     */
                    function baseKeysIn(object) {
                        if (!isObject(object)) {
                            return nativeKeysIn(object);
                        }
                        var isProto = isPrototype(object),
                            result = [];

                        for (var key in object) {
                            if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.lt` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is less than `other`,
                     *  else `false`.
                     */
                    function baseLt(value, other) {
                        return value < other;
                    }

                    /**
                     * The base implementation of `_.map` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} iteratee The function invoked per iteration.
                     * @returns {Array} Returns the new mapped array.
                     */
                    function baseMap(collection, iteratee) {
                        var index = -1,
                            result = isArrayLike(collection) ? Array(collection.length) : [];

                        baseEach(collection, function (value, key, collection) {
                            result[++index] = iteratee(value, key, collection);
                        });
                        return result;
                    }

                    /**
                     * The base implementation of `_.matches` which doesn't clone `source`.
                     *
                     * @private
                     * @param {Object} source The object of property values to match.
                     * @returns {Function} Returns the new spec function.
                     */
                    function baseMatches(source) {
                        var matchData = getMatchData(source);
                        if (matchData.length == 1 && matchData[0][2]) {
                            return matchesStrictComparable(matchData[0][0], matchData[0][1]);
                        }
                        return function (object) {
                            return object === source || baseIsMatch(object, source, matchData);
                        };
                    }

                    /**
                     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
                     *
                     * @private
                     * @param {string} path The path of the property to get.
                     * @param {*} srcValue The value to match.
                     * @returns {Function} Returns the new spec function.
                     */
                    function baseMatchesProperty(path, srcValue) {
                        if (isKey(path) && isStrictComparable(srcValue)) {
                            return matchesStrictComparable(toKey(path), srcValue);
                        }
                        return function (object) {
                            var objValue = get(object, path);
                            return (objValue === undefined && objValue === srcValue)
                                ? hasIn(object, path)
                                : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
                        };
                    }

                    /**
                     * The base implementation of `_.merge` without support for multiple sources.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @param {number} srcIndex The index of `source`.
                     * @param {Function} [customizer] The function to customize merged values.
                     * @param {Object} [stack] Tracks traversed source values and their merged
                     *  counterparts.
                     */
                    function baseMerge(object, source, srcIndex, customizer, stack) {
                        if (object === source) {
                            return;
                        }
                        baseFor(source, function (srcValue, key) {
                            stack || (stack = new Stack);
                            if (isObject(srcValue)) {
                                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                            } else {
                                var newValue = customizer
                                    ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
                                    : undefined;

                                if (newValue === undefined) {
                                    newValue = srcValue;
                                }
                                assignMergeValue(object, key, newValue);
                            }
                        }, keysIn);
                    }

                    /**
                     * A specialized version of `baseMerge` for arrays and objects which performs
                     * deep merges and tracks traversed objects enabling objects with circular
                     * references to be merged.
                     *
                     * @private
                     * @param {Object} object The destination object.
                     * @param {Object} source The source object.
                     * @param {string} key The key of the value to merge.
                     * @param {number} srcIndex The index of `source`.
                     * @param {Function} mergeFunc The function to merge values.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @param {Object} [stack] Tracks traversed source values and their merged
                     *  counterparts.
                     */
                    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                        var objValue = safeGet(object, key),
                            srcValue = safeGet(source, key),
                            stacked = stack.get(srcValue);

                        if (stacked) {
                            assignMergeValue(object, key, stacked);
                            return;
                        }
                        var newValue = customizer
                            ? customizer(objValue, srcValue, (key + ''), object, source, stack)
                            : undefined;

                        var isCommon = newValue === undefined;

                        if (isCommon) {
                            var isArr = isArray(srcValue),
                                isBuff = !isArr && isBuffer(srcValue),
                                isTyped = !isArr && !isBuff && isTypedArray(srcValue);

                            newValue = srcValue;
                            if (isArr || isBuff || isTyped) {
                                if (isArray(objValue)) {
                                    newValue = objValue;
                                } else if (isArrayLikeObject(objValue)) {
                                    newValue = copyArray(objValue);
                                } else if (isBuff) {
                                    isCommon = false;
                                    newValue = cloneBuffer(srcValue, true);
                                } else if (isTyped) {
                                    isCommon = false;
                                    newValue = cloneTypedArray(srcValue, true);
                                } else {
                                    newValue = [];
                                }
                            } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                                newValue = objValue;
                                if (isArguments(objValue)) {
                                    newValue = toPlainObject(objValue);
                                } else if (!isObject(objValue) || isFunction(objValue)) {
                                    newValue = initCloneObject(srcValue);
                                }
                            } else {
                                isCommon = false;
                            }
                        }
                        if (isCommon) {
                            // Recursively merge objects and arrays (susceptible to call stack limits).
                            stack.set(srcValue, newValue);
                            mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                            stack['delete'](srcValue);
                        }
                        assignMergeValue(object, key, newValue);
                    }

                    /**
                     * The base implementation of `_.nth` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {Array} array The array to query.
                     * @param {number} n The index of the element to return.
                     * @returns {*} Returns the nth element of `array`.
                     */
                    function baseNth(array, n) {
                        var length = array.length;
                        if (!length) {
                            return;
                        }
                        n += n < 0 ? length : 0;
                        return isIndex(n, length) ? array[n] : undefined;
                    }

                    /**
                     * The base implementation of `_.orderBy` without param guards.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
                     * @param {string[]} orders The sort orders of `iteratees`.
                     * @returns {Array} Returns the new sorted array.
                     */
                    function baseOrderBy(collection, iteratees, orders) {
                        var index = -1;
                        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

                        var result = baseMap(collection, function (value, key, collection) {
                            var criteria = arrayMap(iteratees, function (iteratee) {
                                return iteratee(value);
                            });
                            return {'criteria': criteria, 'index': ++index, 'value': value};
                        });

                        return baseSortBy(result, function (object, other) {
                            return compareMultiple(object, other, orders);
                        });
                    }

                    /**
                     * The base implementation of `_.pick` without support for individual
                     * property identifiers.
                     *
                     * @private
                     * @param {Object} object The source object.
                     * @param {string[]} paths The property paths to pick.
                     * @returns {Object} Returns the new object.
                     */
                    function basePick(object, paths) {
                        return basePickBy(object, paths, function (value, path) {
                            return hasIn(object, path);
                        });
                    }

                    /**
                     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Object} object The source object.
                     * @param {string[]} paths The property paths to pick.
                     * @param {Function} predicate The function invoked per property.
                     * @returns {Object} Returns the new object.
                     */
                    function basePickBy(object, paths, predicate) {
                        var index = -1,
                            length = paths.length,
                            result = {};

                        while (++index < length) {
                            var path = paths[index],
                                value = baseGet(object, path);

                            if (predicate(value, path)) {
                                baseSet(result, castPath(path, object), value);
                            }
                        }
                        return result;
                    }

                    /**
                     * A specialized version of `baseProperty` which supports deep paths.
                     *
                     * @private
                     * @param {Array|string} path The path of the property to get.
                     * @returns {Function} Returns the new accessor function.
                     */
                    function basePropertyDeep(path) {
                        return function (object) {
                            return baseGet(object, path);
                        };
                    }

                    /**
                     * The base implementation of `_.pullAllBy` without support for iteratee
                     * shorthands.
                     *
                     * @private
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns `array`.
                     */
                    function basePullAll(array, values, iteratee, comparator) {
                        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
                            index = -1,
                            length = values.length,
                            seen = array;

                        if (array === values) {
                            values = copyArray(values);
                        }
                        if (iteratee) {
                            seen = arrayMap(array, baseUnary(iteratee));
                        }
                        while (++index < length) {
                            var fromIndex = 0,
                                value = values[index],
                                computed = iteratee ? iteratee(value) : value;

                            while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
                                if (seen !== array) {
                                    splice.call(seen, fromIndex, 1);
                                }
                                splice.call(array, fromIndex, 1);
                            }
                        }
                        return array;
                    }

                    /**
                     * The base implementation of `_.pullAt` without support for individual
                     * indexes or capturing the removed elements.
                     *
                     * @private
                     * @param {Array} array The array to modify.
                     * @param {number[]} indexes The indexes of elements to remove.
                     * @returns {Array} Returns `array`.
                     */
                    function basePullAt(array, indexes) {
                        var length = array ? indexes.length : 0,
                            lastIndex = length - 1;

                        while (length--) {
                            var index = indexes[length];
                            if (length == lastIndex || index !== previous) {
                                var previous = index;
                                if (isIndex(index)) {
                                    splice.call(array, index, 1);
                                } else {
                                    baseUnset(array, index);
                                }
                            }
                        }
                        return array;
                    }

                    /**
                     * The base implementation of `_.random` without support for returning
                     * floating-point numbers.
                     *
                     * @private
                     * @param {number} lower The lower bound.
                     * @param {number} upper The upper bound.
                     * @returns {number} Returns the random number.
                     */
                    function baseRandom(lower, upper) {
                        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
                    }

                    /**
                     * The base implementation of `_.range` and `_.rangeRight` which doesn't
                     * coerce arguments.
                     *
                     * @private
                     * @param {number} start The start of the range.
                     * @param {number} end The end of the range.
                     * @param {number} step The value to increment or decrement by.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Array} Returns the range of numbers.
                     */
                    function baseRange(start, end, step, fromRight) {
                        var index = -1,
                            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
                            result = Array(length);

                        while (length--) {
                            result[fromRight ? length : ++index] = start;
                            start += step;
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.repeat` which doesn't coerce arguments.
                     *
                     * @private
                     * @param {string} string The string to repeat.
                     * @param {number} n The number of times to repeat the string.
                     * @returns {string} Returns the repeated string.
                     */
                    function baseRepeat(string, n) {
                        var result = '';
                        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
                            return result;
                        }
                        // Leverage the exponentiation by squaring algorithm for a faster repeat.
                        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
                        do {
                            if (n % 2) {
                                result += string;
                            }
                            n = nativeFloor(n / 2);
                            if (n) {
                                string += string;
                            }
                        } while (n);

                        return result;
                    }

                    /**
                     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                     *
                     * @private
                     * @param {Function} func The function to apply a rest parameter to.
                     * @param {number} [start=func.length-1] The start position of the rest parameter.
                     * @returns {Function} Returns the new function.
                     */
                    function baseRest(func, start) {
                        return setToString(overRest(func, start, identity), func + '');
                    }

                    /**
                     * The base implementation of `_.sample`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to sample.
                     * @returns {*} Returns the random element.
                     */
                    function baseSample(collection) {
                        return arraySample(values(collection));
                    }

                    /**
                     * The base implementation of `_.sampleSize` without param guards.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to sample.
                     * @param {number} n The number of elements to sample.
                     * @returns {Array} Returns the random elements.
                     */
                    function baseSampleSize(collection, n) {
                        var array = values(collection);
                        return shuffleSelf(array, baseClamp(n, 0, array.length));
                    }

                    /**
                     * The base implementation of `_.set`.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {*} value The value to set.
                     * @param {Function} [customizer] The function to customize path creation.
                     * @returns {Object} Returns `object`.
                     */
                    function baseSet(object, path, value, customizer) {
                        if (!isObject(object)) {
                            return object;
                        }
                        path = castPath(path, object);

                        var index = -1,
                            length = path.length,
                            lastIndex = length - 1,
                            nested = object;

                        while (nested != null && ++index < length) {
                            var key = toKey(path[index]),
                                newValue = value;

                            if (index != lastIndex) {
                                var objValue = nested[key];
                                newValue = customizer ? customizer(objValue, key, nested) : undefined;
                                if (newValue === undefined) {
                                    newValue = isObject(objValue)
                                        ? objValue
                                        : (isIndex(path[index + 1]) ? [] : {});
                                }
                            }
                            assignValue(nested, key, newValue);
                            nested = nested[key];
                        }
                        return object;
                    }

                    /**
                     * The base implementation of `setData` without support for hot loop shorting.
                     *
                     * @private
                     * @param {Function} func The function to associate metadata with.
                     * @param {*} data The metadata.
                     * @returns {Function} Returns `func`.
                     */
                    var baseSetData = !metaMap ? identity : function (func, data) {
                        metaMap.set(func, data);
                        return func;
                    };

                    /**
                     * The base implementation of `setToString` without support for hot loop shorting.
                     *
                     * @private
                     * @param {Function} func The function to modify.
                     * @param {Function} string The `toString` result.
                     * @returns {Function} Returns `func`.
                     */
                    var baseSetToString = !defineProperty ? identity : function (func, string) {
                        return defineProperty(func, 'toString', {
                            'configurable': true,
                            'enumerable': false,
                            'value': constant(string),
                            'writable': true
                        });
                    };

                    /**
                     * The base implementation of `_.shuffle`.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to shuffle.
                     * @returns {Array} Returns the new shuffled array.
                     */
                    function baseShuffle(collection) {
                        return shuffleSelf(values(collection));
                    }

                    /**
                     * The base implementation of `_.slice` without an iteratee call guard.
                     *
                     * @private
                     * @param {Array} array The array to slice.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns the slice of `array`.
                     */
                    function baseSlice(array, start, end) {
                        var index = -1,
                            length = array.length;

                        if (start < 0) {
                            start = -start > length ? 0 : (length + start);
                        }
                        end = end > length ? length : end;
                        if (end < 0) {
                            end += length;
                        }
                        length = start > end ? 0 : ((end - start) >>> 0);
                        start >>>= 0;

                        var result = Array(length);
                        while (++index < length) {
                            result[index] = array[index + start];
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.some` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} predicate The function invoked per iteration.
                     * @returns {boolean} Returns `true` if any element passes the predicate check,
                     *  else `false`.
                     */
                    function baseSome(collection, predicate) {
                        var result;

                        baseEach(collection, function (value, index, collection) {
                            result = predicate(value, index, collection);
                            return !result;
                        });
                        return !!result;
                    }

                    /**
                     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
                     * performs a binary search of `array` to determine the index at which `value`
                     * should be inserted into `array` in order to maintain its sort order.
                     *
                     * @private
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {boolean} [retHighest] Specify returning the highest qualified index.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     */
                    function baseSortedIndex(array, value, retHighest) {
                        var low = 0,
                            high = array == null ? low : array.length;

                        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                            while (low < high) {
                                var mid = (low + high) >>> 1,
                                    computed = array[mid];

                                if (computed !== null && !isSymbol(computed) &&
                                    (retHighest ? (computed <= value) : (computed < value))) {
                                    low = mid + 1;
                                } else {
                                    high = mid;
                                }
                            }
                            return high;
                        }
                        return baseSortedIndexBy(array, value, identity, retHighest);
                    }

                    /**
                     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
                     * which invokes `iteratee` for `value` and each element of `array` to compute
                     * their sort ranking. The iteratee is invoked with one argument; (value).
                     *
                     * @private
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {Function} iteratee The iteratee invoked per element.
                     * @param {boolean} [retHighest] Specify returning the highest qualified index.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     */
                    function baseSortedIndexBy(array, value, iteratee, retHighest) {
                        value = iteratee(value);

                        var low = 0,
                            high = array == null ? 0 : array.length,
                            valIsNaN = value !== value,
                            valIsNull = value === null,
                            valIsSymbol = isSymbol(value),
                            valIsUndefined = value === undefined;

                        while (low < high) {
                            var mid = nativeFloor((low + high) / 2),
                                computed = iteratee(array[mid]),
                                othIsDefined = computed !== undefined,
                                othIsNull = computed === null,
                                othIsReflexive = computed === computed,
                                othIsSymbol = isSymbol(computed);

                            if (valIsNaN) {
                                var setLow = retHighest || othIsReflexive;
                            } else if (valIsUndefined) {
                                setLow = othIsReflexive && (retHighest || othIsDefined);
                            } else if (valIsNull) {
                                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                            } else if (valIsSymbol) {
                                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                            } else if (othIsNull || othIsSymbol) {
                                setLow = false;
                            } else {
                                setLow = retHighest ? (computed <= value) : (computed < value);
                            }
                            if (setLow) {
                                low = mid + 1;
                            } else {
                                high = mid;
                            }
                        }
                        return nativeMin(high, MAX_ARRAY_INDEX);
                    }

                    /**
                     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
                     * support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     */
                    function baseSortedUniq(array, iteratee) {
                        var index = -1,
                            length = array.length,
                            resIndex = 0,
                            result = [];

                        while (++index < length) {
                            var value = array[index],
                                computed = iteratee ? iteratee(value) : value;

                            if (!index || !eq(computed, seen)) {
                                var seen = computed;
                                result[resIndex++] = value === 0 ? 0 : value;
                            }
                        }
                        return result;
                    }

                    /**
                     * The base implementation of `_.toNumber` which doesn't ensure correct
                     * conversions of binary, hexadecimal, or octal string values.
                     *
                     * @private
                     * @param {*} value The value to process.
                     * @returns {number} Returns the number.
                     */
                    function baseToNumber(value) {
                        if (typeof value == 'number') {
                            return value;
                        }
                        if (isSymbol(value)) {
                            return NAN;
                        }
                        return +value;
                    }

                    /**
                     * The base implementation of `_.toString` which doesn't convert nullish
                     * values to empty strings.
                     *
                     * @private
                     * @param {*} value The value to process.
                     * @returns {string} Returns the string.
                     */
                    function baseToString(value) {
                        // Exit early for strings to avoid a performance hit in some environments.
                        if (typeof value == 'string') {
                            return value;
                        }
                        if (isArray(value)) {
                            // Recursively convert values (susceptible to call stack limits).
                            return arrayMap(value, baseToString) + '';
                        }
                        if (isSymbol(value)) {
                            return symbolToString ? symbolToString.call(value) : '';
                        }
                        var result = (value + '');
                        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                    }

                    /**
                     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     */
                    function baseUniq(array, iteratee, comparator) {
                        var index = -1,
                            includes = arrayIncludes,
                            length = array.length,
                            isCommon = true,
                            result = [],
                            seen = result;

                        if (comparator) {
                            isCommon = false;
                            includes = arrayIncludesWith;
                        } else if (length >= LARGE_ARRAY_SIZE) {
                            var set = iteratee ? null : createSet(array);
                            if (set) {
                                return setToArray(set);
                            }
                            isCommon = false;
                            includes = cacheHas;
                            seen = new SetCache;
                        } else {
                            seen = iteratee ? [] : result;
                        }
                        outer:
                            while (++index < length) {
                                var value = array[index],
                                    computed = iteratee ? iteratee(value) : value;

                                value = (comparator || value !== 0) ? value : 0;
                                if (isCommon && computed === computed) {
                                    var seenIndex = seen.length;
                                    while (seenIndex--) {
                                        if (seen[seenIndex] === computed) {
                                            continue outer;
                                        }
                                    }
                                    if (iteratee) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                } else if (!includes(seen, computed, comparator)) {
                                    if (seen !== result) {
                                        seen.push(computed);
                                    }
                                    result.push(value);
                                }
                            }
                        return result;
                    }

                    /**
                     * The base implementation of `_.unset`.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The property path to unset.
                     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                     */
                    function baseUnset(object, path) {
                        path = castPath(path, object);
                        object = parent(object, path);
                        return object == null || delete object[toKey(last(path))];
                    }

                    /**
                     * The base implementation of `_.update`.
                     *
                     * @private
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to update.
                     * @param {Function} updater The function to produce the updated value.
                     * @param {Function} [customizer] The function to customize path creation.
                     * @returns {Object} Returns `object`.
                     */
                    function baseUpdate(object, path, updater, customizer) {
                        return baseSet(object, path, updater(baseGet(object, path)), customizer);
                    }

                    /**
                     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
                     * without support for iteratee shorthands.
                     *
                     * @private
                     * @param {Array} array The array to query.
                     * @param {Function} predicate The function invoked per iteration.
                     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Array} Returns the slice of `array`.
                     */
                    function baseWhile(array, predicate, isDrop, fromRight) {
                        var length = array.length,
                            index = fromRight ? length : -1;

                        while ((fromRight ? index-- : ++index < length) &&
                        predicate(array[index], index, array)) {
                        }

                        return isDrop
                            ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
                            : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
                    }

                    /**
                     * The base implementation of `wrapperValue` which returns the result of
                     * performing a sequence of actions on the unwrapped `value`, where each
                     * successive action is supplied the return value of the previous.
                     *
                     * @private
                     * @param {*} value The unwrapped value.
                     * @param {Array} actions Actions to perform to resolve the unwrapped value.
                     * @returns {*} Returns the resolved value.
                     */
                    function baseWrapperValue(value, actions) {
                        var result = value;
                        if (result instanceof LazyWrapper) {
                            result = result.value();
                        }
                        return arrayReduce(actions, function (result, action) {
                            return action.func.apply(action.thisArg, arrayPush([result], action.args));
                        }, result);
                    }

                    /**
                     * The base implementation of methods like `_.xor`, without support for
                     * iteratee shorthands, that accepts an array of arrays to inspect.
                     *
                     * @private
                     * @param {Array} arrays The arrays to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of values.
                     */
                    function baseXor(arrays, iteratee, comparator) {
                        var length = arrays.length;
                        if (length < 2) {
                            return length ? baseUniq(arrays[0]) : [];
                        }
                        var index = -1,
                            result = Array(length);

                        while (++index < length) {
                            var array = arrays[index],
                                othIndex = -1;

                            while (++othIndex < length) {
                                if (othIndex != index) {
                                    result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
                                }
                            }
                        }
                        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
                    }

                    /**
                     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
                     *
                     * @private
                     * @param {Array} props The property identifiers.
                     * @param {Array} values The property values.
                     * @param {Function} assignFunc The function to assign values.
                     * @returns {Object} Returns the new object.
                     */
                    function baseZipObject(props, values, assignFunc) {
                        var index = -1,
                            length = props.length,
                            valsLength = values.length,
                            result = {};

                        while (++index < length) {
                            var value = index < valsLength ? values[index] : undefined;
                            assignFunc(result, props[index], value);
                        }
                        return result;
                    }

                    /**
                     * Casts `value` to an empty array if it's not an array like object.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @returns {Array|Object} Returns the cast array-like object.
                     */
                    function castArrayLikeObject(value) {
                        return isArrayLikeObject(value) ? value : [];
                    }

                    /**
                     * Casts `value` to `identity` if it's not a function.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @returns {Function} Returns cast function.
                     */
                    function castFunction(value) {
                        return typeof value == 'function' ? value : identity;
                    }

                    /**
                     * Casts `value` to a path array if it's not one.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @param {Object} [object] The object to query keys on.
                     * @returns {Array} Returns the cast property path array.
                     */
                    function castPath(value, object) {
                        if (isArray(value)) {
                            return value;
                        }
                        return isKey(value, object) ? [value] : stringToPath(toString(value));
                    }

                    /**
                     * A `baseRest` alias which can be replaced with `identity` by module
                     * replacement plugins.
                     *
                     * @private
                     * @type {Function}
                     * @param {Function} func The function to apply a rest parameter to.
                     * @returns {Function} Returns the new function.
                     */
                    var castRest = baseRest;

                    /**
                     * Casts `array` to a slice if it's needed.
                     *
                     * @private
                     * @param {Array} array The array to inspect.
                     * @param {number} start The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns the cast slice.
                     */
                    function castSlice(array, start, end) {
                        var length = array.length;
                        end = end === undefined ? length : end;
                        return (!start && end >= length) ? array : baseSlice(array, start, end);
                    }

                    /**
                     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
                     *
                     * @private
                     * @param {number|Object} id The timer id or timeout object of the timer to clear.
                     */
                    var clearTimeout = ctxClearTimeout || function (id) {
                        return root.clearTimeout(id);
                    };

                    /**
                     * Creates a clone of  `buffer`.
                     *
                     * @private
                     * @param {Buffer} buffer The buffer to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Buffer} Returns the cloned buffer.
                     */
                    function cloneBuffer(buffer, isDeep) {
                        if (isDeep) {
                            return buffer.slice();
                        }
                        var length = buffer.length,
                            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

                        buffer.copy(result);
                        return result;
                    }

                    /**
                     * Creates a clone of `arrayBuffer`.
                     *
                     * @private
                     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                     * @returns {ArrayBuffer} Returns the cloned array buffer.
                     */
                    function cloneArrayBuffer(arrayBuffer) {
                        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                        return result;
                    }

                    /**
                     * Creates a clone of `dataView`.
                     *
                     * @private
                     * @param {Object} dataView The data view to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the cloned data view.
                     */
                    function cloneDataView(dataView, isDeep) {
                        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                    }

                    /**
                     * Creates a clone of `regexp`.
                     *
                     * @private
                     * @param {Object} regexp The regexp to clone.
                     * @returns {Object} Returns the cloned regexp.
                     */
                    function cloneRegExp(regexp) {
                        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                        result.lastIndex = regexp.lastIndex;
                        return result;
                    }

                    /**
                     * Creates a clone of the `symbol` object.
                     *
                     * @private
                     * @param {Object} symbol The symbol object to clone.
                     * @returns {Object} Returns the cloned symbol object.
                     */
                    function cloneSymbol(symbol) {
                        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                    }

                    /**
                     * Creates a clone of `typedArray`.
                     *
                     * @private
                     * @param {Object} typedArray The typed array to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the cloned typed array.
                     */
                    function cloneTypedArray(typedArray, isDeep) {
                        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                    }

                    /**
                     * Compares values to sort them in ascending order.
                     *
                     * @private
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {number} Returns the sort order indicator for `value`.
                     */
                    function compareAscending(value, other) {
                        if (value !== other) {
                            var valIsDefined = value !== undefined,
                                valIsNull = value === null,
                                valIsReflexive = value === value,
                                valIsSymbol = isSymbol(value);

                            var othIsDefined = other !== undefined,
                                othIsNull = other === null,
                                othIsReflexive = other === other,
                                othIsSymbol = isSymbol(other);

                            if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
                                (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
                                (valIsNull && othIsDefined && othIsReflexive) ||
                                (!valIsDefined && othIsReflexive) ||
                                !valIsReflexive) {
                                return 1;
                            }
                            if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
                                (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
                                (othIsNull && valIsDefined && valIsReflexive) ||
                                (!othIsDefined && valIsReflexive) ||
                                !othIsReflexive) {
                                return -1;
                            }
                        }
                        return 0;
                    }

                    /**
                     * Used by `_.orderBy` to compare multiple properties of a value to another
                     * and stable sort them.
                     *
                     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
                     * specify an order of "desc" for descending or "asc" for ascending sort order
                     * of corresponding values.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {boolean[]|string[]} orders The order to sort by for each property.
                     * @returns {number} Returns the sort order indicator for `object`.
                     */
                    function compareMultiple(object, other, orders) {
                        var index = -1,
                            objCriteria = object.criteria,
                            othCriteria = other.criteria,
                            length = objCriteria.length,
                            ordersLength = orders.length;

                        while (++index < length) {
                            var result = compareAscending(objCriteria[index], othCriteria[index]);
                            if (result) {
                                if (index >= ordersLength) {
                                    return result;
                                }
                                var order = orders[index];
                                return result * (order == 'desc' ? -1 : 1);
                            }
                        }
                        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
                        // that causes it, under certain circumstances, to provide the same value for
                        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
                        // for more details.
                        //
                        // This also ensures a stable sort in V8 and other engines.
                        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
                        return object.index - other.index;
                    }

                    /**
                     * Creates an array that is the composition of partially applied arguments,
                     * placeholders, and provided arguments into a single array of arguments.
                     *
                     * @private
                     * @param {Array} args The provided arguments.
                     * @param {Array} partials The arguments to prepend to those provided.
                     * @param {Array} holders The `partials` placeholder indexes.
                     * @params {boolean} [isCurried] Specify composing for a curried function.
                     * @returns {Array} Returns the new array of composed arguments.
                     */
                    function composeArgs(args, partials, holders, isCurried) {
                        var argsIndex = -1,
                            argsLength = args.length,
                            holdersLength = holders.length,
                            leftIndex = -1,
                            leftLength = partials.length,
                            rangeLength = nativeMax(argsLength - holdersLength, 0),
                            result = Array(leftLength + rangeLength),
                            isUncurried = !isCurried;

                        while (++leftIndex < leftLength) {
                            result[leftIndex] = partials[leftIndex];
                        }
                        while (++argsIndex < holdersLength) {
                            if (isUncurried || argsIndex < argsLength) {
                                result[holders[argsIndex]] = args[argsIndex];
                            }
                        }
                        while (rangeLength--) {
                            result[leftIndex++] = args[argsIndex++];
                        }
                        return result;
                    }

                    /**
                     * This function is like `composeArgs` except that the arguments composition
                     * is tailored for `_.partialRight`.
                     *
                     * @private
                     * @param {Array} args The provided arguments.
                     * @param {Array} partials The arguments to append to those provided.
                     * @param {Array} holders The `partials` placeholder indexes.
                     * @params {boolean} [isCurried] Specify composing for a curried function.
                     * @returns {Array} Returns the new array of composed arguments.
                     */
                    function composeArgsRight(args, partials, holders, isCurried) {
                        var argsIndex = -1,
                            argsLength = args.length,
                            holdersIndex = -1,
                            holdersLength = holders.length,
                            rightIndex = -1,
                            rightLength = partials.length,
                            rangeLength = nativeMax(argsLength - holdersLength, 0),
                            result = Array(rangeLength + rightLength),
                            isUncurried = !isCurried;

                        while (++argsIndex < rangeLength) {
                            result[argsIndex] = args[argsIndex];
                        }
                        var offset = argsIndex;
                        while (++rightIndex < rightLength) {
                            result[offset + rightIndex] = partials[rightIndex];
                        }
                        while (++holdersIndex < holdersLength) {
                            if (isUncurried || argsIndex < argsLength) {
                                result[offset + holders[holdersIndex]] = args[argsIndex++];
                            }
                        }
                        return result;
                    }

                    /**
                     * Copies the values of `source` to `array`.
                     *
                     * @private
                     * @param {Array} source The array to copy values from.
                     * @param {Array} [array=[]] The array to copy values to.
                     * @returns {Array} Returns `array`.
                     */
                    function copyArray(source, array) {
                        var index = -1,
                            length = source.length;

                        array || (array = Array(length));
                        while (++index < length) {
                            array[index] = source[index];
                        }
                        return array;
                    }

                    /**
                     * Copies properties of `source` to `object`.
                     *
                     * @private
                     * @param {Object} source The object to copy properties from.
                     * @param {Array} props The property identifiers to copy.
                     * @param {Object} [object={}] The object to copy properties to.
                     * @param {Function} [customizer] The function to customize copied values.
                     * @returns {Object} Returns `object`.
                     */
                    function copyObject(source, props, object, customizer) {
                        var isNew = !object;
                        object || (object = {});

                        var index = -1,
                            length = props.length;

                        while (++index < length) {
                            var key = props[index];

                            var newValue = customizer
                                ? customizer(object[key], source[key], key, object, source)
                                : undefined;

                            if (newValue === undefined) {
                                newValue = source[key];
                            }
                            if (isNew) {
                                baseAssignValue(object, key, newValue);
                            } else {
                                assignValue(object, key, newValue);
                            }
                        }
                        return object;
                    }

                    /**
                     * Copies own symbols of `source` to `object`.
                     *
                     * @private
                     * @param {Object} source The object to copy symbols from.
                     * @param {Object} [object={}] The object to copy symbols to.
                     * @returns {Object} Returns `object`.
                     */
                    function copySymbols(source, object) {
                        return copyObject(source, getSymbols(source), object);
                    }

                    /**
                     * Copies own and inherited symbols of `source` to `object`.
                     *
                     * @private
                     * @param {Object} source The object to copy symbols from.
                     * @param {Object} [object={}] The object to copy symbols to.
                     * @returns {Object} Returns `object`.
                     */
                    function copySymbolsIn(source, object) {
                        return copyObject(source, getSymbolsIn(source), object);
                    }

                    /**
                     * Creates a function like `_.groupBy`.
                     *
                     * @private
                     * @param {Function} setter The function to set accumulator values.
                     * @param {Function} [initializer] The accumulator object initializer.
                     * @returns {Function} Returns the new aggregator function.
                     */
                    function createAggregator(setter, initializer) {
                        return function (collection, iteratee) {
                            var func = isArray(collection) ? arrayAggregator : baseAggregator,
                                accumulator = initializer ? initializer() : {};

                            return func(collection, setter, getIteratee(iteratee, 2), accumulator);
                        };
                    }

                    /**
                     * Creates a function like `_.assign`.
                     *
                     * @private
                     * @param {Function} assigner The function to assign values.
                     * @returns {Function} Returns the new assigner function.
                     */
                    function createAssigner(assigner) {
                        return baseRest(function (object, sources) {
                            var index = -1,
                                length = sources.length,
                                customizer = length > 1 ? sources[length - 1] : undefined,
                                guard = length > 2 ? sources[2] : undefined;

                            customizer = (assigner.length > 3 && typeof customizer == 'function')
                                ? (length--, customizer)
                                : undefined;

                            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                                customizer = length < 3 ? undefined : customizer;
                                length = 1;
                            }
                            object = Object(object);
                            while (++index < length) {
                                var source = sources[index];
                                if (source) {
                                    assigner(object, source, index, customizer);
                                }
                            }
                            return object;
                        });
                    }

                    /**
                     * Creates a `baseEach` or `baseEachRight` function.
                     *
                     * @private
                     * @param {Function} eachFunc The function to iterate over a collection.
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new base function.
                     */
                    function createBaseEach(eachFunc, fromRight) {
                        return function (collection, iteratee) {
                            if (collection == null) {
                                return collection;
                            }
                            if (!isArrayLike(collection)) {
                                return eachFunc(collection, iteratee);
                            }
                            var length = collection.length,
                                index = fromRight ? length : -1,
                                iterable = Object(collection);

                            while ((fromRight ? index-- : ++index < length)) {
                                if (iteratee(iterable[index], index, iterable) === false) {
                                    break;
                                }
                            }
                            return collection;
                        };
                    }

                    /**
                     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                     *
                     * @private
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new base function.
                     */
                    function createBaseFor(fromRight) {
                        return function (object, iteratee, keysFunc) {
                            var index = -1,
                                iterable = Object(object),
                                props = keysFunc(object),
                                length = props.length;

                            while (length--) {
                                var key = props[fromRight ? length : ++index];
                                if (iteratee(iterable[key], key, iterable) === false) {
                                    break;
                                }
                            }
                            return object;
                        };
                    }

                    /**
                     * Creates a function that wraps `func` to invoke it with the optional `this`
                     * binding of `thisArg`.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createBind(func, bitmask, thisArg) {
                        var isBind = bitmask & WRAP_BIND_FLAG,
                            Ctor = createCtor(func);

                        function wrapper() {
                            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                            return fn.apply(isBind ? thisArg : this, arguments);
                        }

                        return wrapper;
                    }

                    /**
                     * Creates a function like `_.lowerFirst`.
                     *
                     * @private
                     * @param {string} methodName The name of the `String` case method to use.
                     * @returns {Function} Returns the new case function.
                     */
                    function createCaseFirst(methodName) {
                        return function (string) {
                            string = toString(string);

                            var strSymbols = hasUnicode(string)
                                ? stringToArray(string)
                                : undefined;

                            var chr = strSymbols
                                ? strSymbols[0]
                                : string.charAt(0);

                            var trailing = strSymbols
                                ? castSlice(strSymbols, 1).join('')
                                : string.slice(1);

                            return chr[methodName]() + trailing;
                        };
                    }

                    /**
                     * Creates a function like `_.camelCase`.
                     *
                     * @private
                     * @param {Function} callback The function to combine each word.
                     * @returns {Function} Returns the new compounder function.
                     */
                    function createCompounder(callback) {
                        return function (string) {
                            return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
                        };
                    }

                    /**
                     * Creates a function that produces an instance of `Ctor` regardless of
                     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
                     *
                     * @private
                     * @param {Function} Ctor The constructor to wrap.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createCtor(Ctor) {
                        return function () {
                            // Use a `switch` statement to work with class constructors. See
                            // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                            // for more details.
                            var args = arguments;
                            switch (args.length) {
                                case 0:
                                    return new Ctor;
                                case 1:
                                    return new Ctor(args[0]);
                                case 2:
                                    return new Ctor(args[0], args[1]);
                                case 3:
                                    return new Ctor(args[0], args[1], args[2]);
                                case 4:
                                    return new Ctor(args[0], args[1], args[2], args[3]);
                                case 5:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                                case 6:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                                case 7:
                                    return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                            }
                            var thisBinding = baseCreate(Ctor.prototype),
                                result = Ctor.apply(thisBinding, args);

                            // Mimic the constructor's `return` behavior.
                            // See https://es5.github.io/#x13.2.2 for more details.
                            return isObject(result) ? result : thisBinding;
                        };
                    }

                    /**
                     * Creates a function that wraps `func` to enable currying.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {number} arity The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createCurry(func, bitmask, arity) {
                        var Ctor = createCtor(func);

                        function wrapper() {
                            var length = arguments.length,
                                args = Array(length),
                                index = length,
                                placeholder = getHolder(wrapper);

                            while (index--) {
                                args[index] = arguments[index];
                            }
                            var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
                                ? []
                                : replaceHolders(args, placeholder);

                            length -= holders.length;
                            if (length < arity) {
                                return createRecurry(
                                    func, bitmask, createHybrid, wrapper.placeholder, undefined,
                                    args, holders, undefined, undefined, arity - length);
                            }
                            var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
                            return apply(fn, this, args);
                        }

                        return wrapper;
                    }

                    /**
                     * Creates a `_.find` or `_.findLast` function.
                     *
                     * @private
                     * @param {Function} findIndexFunc The function to find the collection index.
                     * @returns {Function} Returns the new find function.
                     */
                    function createFind(findIndexFunc) {
                        return function (collection, predicate, fromIndex) {
                            var iterable = Object(collection);
                            if (!isArrayLike(collection)) {
                                var iteratee = getIteratee(predicate, 3);
                                collection = keys(collection);
                                predicate = function (key) {
                                    return iteratee(iterable[key], key, iterable);
                                };
                            }
                            var index = findIndexFunc(collection, predicate, fromIndex);
                            return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
                        };
                    }

                    /**
                     * Creates a `_.flow` or `_.flowRight` function.
                     *
                     * @private
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new flow function.
                     */
                    function createFlow(fromRight) {
                        return flatRest(function (funcs) {
                            var length = funcs.length,
                                index = length,
                                prereq = LodashWrapper.prototype.thru;

                            if (fromRight) {
                                funcs.reverse();
                            }
                            while (index--) {
                                var func = funcs[index];
                                if (typeof func != 'function') {
                                    throw new TypeError(FUNC_ERROR_TEXT);
                                }
                                if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
                                    var wrapper = new LodashWrapper([], true);
                                }
                            }
                            index = wrapper ? index : length;
                            while (++index < length) {
                                func = funcs[index];

                                var funcName = getFuncName(func),
                                    data = funcName == 'wrapper' ? getData(func) : undefined;

                                if (data && isLaziable(data[0]) &&
                                    data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                                    !data[4].length && data[9] == 1
                                ) {
                                    wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                                } else {
                                    wrapper = (func.length == 1 && isLaziable(func))
                                        ? wrapper[funcName]()
                                        : wrapper.thru(func);
                                }
                            }
                            return function () {
                                var args = arguments,
                                    value = args[0];

                                if (wrapper && args.length == 1 && isArray(value)) {
                                    return wrapper.plant(value).value();
                                }
                                var index = 0,
                                    result = length ? funcs[index].apply(this, args) : value;

                                while (++index < length) {
                                    result = funcs[index].call(this, result);
                                }
                                return result;
                            };
                        });
                    }

                    /**
                     * Creates a function that wraps `func` to invoke it with optional `this`
                     * binding of `thisArg`, partial application, and currying.
                     *
                     * @private
                     * @param {Function|string} func The function or method name to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @param {Array} [partials] The arguments to prepend to those provided to
                     *  the new function.
                     * @param {Array} [holders] The `partials` placeholder indexes.
                     * @param {Array} [partialsRight] The arguments to append to those provided
                     *  to the new function.
                     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
                     * @param {Array} [argPos] The argument positions of the new function.
                     * @param {number} [ary] The arity cap of `func`.
                     * @param {number} [arity] The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
                        var isAry = bitmask & WRAP_ARY_FLAG,
                            isBind = bitmask & WRAP_BIND_FLAG,
                            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
                            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
                            isFlip = bitmask & WRAP_FLIP_FLAG,
                            Ctor = isBindKey ? undefined : createCtor(func);

                        function wrapper() {
                            var length = arguments.length,
                                args = Array(length),
                                index = length;

                            while (index--) {
                                args[index] = arguments[index];
                            }
                            if (isCurried) {
                                var placeholder = getHolder(wrapper),
                                    holdersCount = countHolders(args, placeholder);
                            }
                            if (partials) {
                                args = composeArgs(args, partials, holders, isCurried);
                            }
                            if (partialsRight) {
                                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                            }
                            length -= holdersCount;
                            if (isCurried && length < arity) {
                                var newHolders = replaceHolders(args, placeholder);
                                return createRecurry(
                                    func, bitmask, createHybrid, wrapper.placeholder, thisArg,
                                    args, newHolders, argPos, ary, arity - length
                                );
                            }
                            var thisBinding = isBind ? thisArg : this,
                                fn = isBindKey ? thisBinding[func] : func;

                            length = args.length;
                            if (argPos) {
                                args = reorder(args, argPos);
                            } else if (isFlip && length > 1) {
                                args.reverse();
                            }
                            if (isAry && ary < length) {
                                args.length = ary;
                            }
                            if (this && this !== root && this instanceof wrapper) {
                                fn = Ctor || createCtor(fn);
                            }
                            return fn.apply(thisBinding, args);
                        }

                        return wrapper;
                    }

                    /**
                     * Creates a function like `_.invertBy`.
                     *
                     * @private
                     * @param {Function} setter The function to set accumulator values.
                     * @param {Function} toIteratee The function to resolve iteratees.
                     * @returns {Function} Returns the new inverter function.
                     */
                    function createInverter(setter, toIteratee) {
                        return function (object, iteratee) {
                            return baseInverter(object, setter, toIteratee(iteratee), {});
                        };
                    }

                    /**
                     * Creates a function that performs a mathematical operation on two values.
                     *
                     * @private
                     * @param {Function} operator The function to perform the operation.
                     * @param {number} [defaultValue] The value used for `undefined` arguments.
                     * @returns {Function} Returns the new mathematical operation function.
                     */
                    function createMathOperation(operator, defaultValue) {
                        return function (value, other) {
                            var result;
                            if (value === undefined && other === undefined) {
                                return defaultValue;
                            }
                            if (value !== undefined) {
                                result = value;
                            }
                            if (other !== undefined) {
                                if (result === undefined) {
                                    return other;
                                }
                                if (typeof value == 'string' || typeof other == 'string') {
                                    value = baseToString(value);
                                    other = baseToString(other);
                                } else {
                                    value = baseToNumber(value);
                                    other = baseToNumber(other);
                                }
                                result = operator(value, other);
                            }
                            return result;
                        };
                    }

                    /**
                     * Creates a function like `_.over`.
                     *
                     * @private
                     * @param {Function} arrayFunc The function to iterate over iteratees.
                     * @returns {Function} Returns the new over function.
                     */
                    function createOver(arrayFunc) {
                        return flatRest(function (iteratees) {
                            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                            return baseRest(function (args) {
                                var thisArg = this;
                                return arrayFunc(iteratees, function (iteratee) {
                                    return apply(iteratee, thisArg, args);
                                });
                            });
                        });
                    }

                    /**
                     * Creates the padding for `string` based on `length`. The `chars` string
                     * is truncated if the number of characters exceeds `length`.
                     *
                     * @private
                     * @param {number} length The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padding for `string`.
                     */
                    function createPadding(length, chars) {
                        chars = chars === undefined ? ' ' : baseToString(chars);

                        var charsLength = chars.length;
                        if (charsLength < 2) {
                            return charsLength ? baseRepeat(chars, length) : chars;
                        }
                        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
                        return hasUnicode(chars)
                            ? castSlice(stringToArray(result), 0, length).join('')
                            : result.slice(0, length);
                    }

                    /**
                     * Creates a function that wraps `func` to invoke it with the `this` binding
                     * of `thisArg` and `partials` prepended to the arguments it receives.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {*} thisArg The `this` binding of `func`.
                     * @param {Array} partials The arguments to prepend to those provided to
                     *  the new function.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createPartial(func, bitmask, thisArg, partials) {
                        var isBind = bitmask & WRAP_BIND_FLAG,
                            Ctor = createCtor(func);

                        function wrapper() {
                            var argsIndex = -1,
                                argsLength = arguments.length,
                                leftIndex = -1,
                                leftLength = partials.length,
                                args = Array(leftLength + argsLength),
                                fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

                            while (++leftIndex < leftLength) {
                                args[leftIndex] = partials[leftIndex];
                            }
                            while (argsLength--) {
                                args[leftIndex++] = arguments[++argsIndex];
                            }
                            return apply(fn, isBind ? thisArg : this, args);
                        }

                        return wrapper;
                    }

                    /**
                     * Creates a `_.range` or `_.rangeRight` function.
                     *
                     * @private
                     * @param {boolean} [fromRight] Specify iterating from right to left.
                     * @returns {Function} Returns the new range function.
                     */
                    function createRange(fromRight) {
                        return function (start, end, step) {
                            if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
                                end = step = undefined;
                            }
                            // Ensure the sign of `-0` is preserved.
                            start = toFinite(start);
                            if (end === undefined) {
                                end = start;
                                start = 0;
                            } else {
                                end = toFinite(end);
                            }
                            step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
                            return baseRange(start, end, step, fromRight);
                        };
                    }

                    /**
                     * Creates a function that performs a relational operation on two values.
                     *
                     * @private
                     * @param {Function} operator The function to perform the operation.
                     * @returns {Function} Returns the new relational operation function.
                     */
                    function createRelationalOperation(operator) {
                        return function (value, other) {
                            if (!(typeof value == 'string' && typeof other == 'string')) {
                                value = toNumber(value);
                                other = toNumber(other);
                            }
                            return operator(value, other);
                        };
                    }

                    /**
                     * Creates a function that wraps `func` to continue currying.
                     *
                     * @private
                     * @param {Function} func The function to wrap.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @param {Function} wrapFunc The function to create the `func` wrapper.
                     * @param {*} placeholder The placeholder value.
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @param {Array} [partials] The arguments to prepend to those provided to
                     *  the new function.
                     * @param {Array} [holders] The `partials` placeholder indexes.
                     * @param {Array} [argPos] The argument positions of the new function.
                     * @param {number} [ary] The arity cap of `func`.
                     * @param {number} [arity] The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
                        var isCurry = bitmask & WRAP_CURRY_FLAG,
                            newHolders = isCurry ? holders : undefined,
                            newHoldersRight = isCurry ? undefined : holders,
                            newPartials = isCurry ? partials : undefined,
                            newPartialsRight = isCurry ? undefined : partials;

                        bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
                        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

                        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
                            bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
                        }
                        var newData = [
                            func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
                            newHoldersRight, argPos, ary, arity
                        ];

                        var result = wrapFunc.apply(undefined, newData);
                        if (isLaziable(func)) {
                            setData(result, newData);
                        }
                        result.placeholder = placeholder;
                        return setWrapToString(result, func, bitmask);
                    }

                    /**
                     * Creates a function like `_.round`.
                     *
                     * @private
                     * @param {string} methodName The name of the `Math` method to use when rounding.
                     * @returns {Function} Returns the new round function.
                     */
                    function createRound(methodName) {
                        var func = Math[methodName];
                        return function (number, precision) {
                            number = toNumber(number);
                            precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                            if (precision && nativeIsFinite(number)) {
                                // Shift with exponential notation to avoid floating-point issues.
                                // See [MDN](https://mdn.io/round#Examples) for more details.
                                var pair = (toString(number) + 'e').split('e'),
                                    value = func(pair[0] + 'e' + (+pair[1] + precision));

                                pair = (toString(value) + 'e').split('e');
                                return +(pair[0] + 'e' + (+pair[1] - precision));
                            }
                            return func(number);
                        };
                    }

                    /**
                     * Creates a set object of `values`.
                     *
                     * @private
                     * @param {Array} values The values to add to the set.
                     * @returns {Object} Returns the new set.
                     */
                    var createSet = !(Set && (1 / setToArray(new Set([, -0]))[1]) == INFINITY) ? noop : function (values) {
                        return new Set(values);
                    };

                    /**
                     * Creates a `_.toPairs` or `_.toPairsIn` function.
                     *
                     * @private
                     * @param {Function} keysFunc The function to get the keys of a given object.
                     * @returns {Function} Returns the new pairs function.
                     */
                    function createToPairs(keysFunc) {
                        return function (object) {
                            var tag = getTag(object);
                            if (tag == mapTag) {
                                return mapToArray(object);
                            }
                            if (tag == setTag) {
                                return setToPairs(object);
                            }
                            return baseToPairs(object, keysFunc(object));
                        };
                    }

                    /**
                     * Creates a function that either curries or invokes `func` with optional
                     * `this` binding and partially applied arguments.
                     *
                     * @private
                     * @param {Function|string} func The function or method name to wrap.
                     * @param {number} bitmask The bitmask flags.
                     *    1 - `_.bind`
                     *    2 - `_.bindKey`
                     *    4 - `_.curry` or `_.curryRight` of a bound function
                     *    8 - `_.curry`
                     *   16 - `_.curryRight`
                     *   32 - `_.partial`
                     *   64 - `_.partialRight`
                     *  128 - `_.rearg`
                     *  256 - `_.ary`
                     *  512 - `_.flip`
                     * @param {*} [thisArg] The `this` binding of `func`.
                     * @param {Array} [partials] The arguments to be partially applied.
                     * @param {Array} [holders] The `partials` placeholder indexes.
                     * @param {Array} [argPos] The argument positions of the new function.
                     * @param {number} [ary] The arity cap of `func`.
                     * @param {number} [arity] The arity of `func`.
                     * @returns {Function} Returns the new wrapped function.
                     */
                    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
                        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
                        if (!isBindKey && typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        var length = partials ? partials.length : 0;
                        if (!length) {
                            bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                            partials = holders = undefined;
                        }
                        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
                        arity = arity === undefined ? arity : toInteger(arity);
                        length -= holders ? holders.length : 0;

                        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                            var partialsRight = partials,
                                holdersRight = holders;

                            partials = holders = undefined;
                        }
                        var data = isBindKey ? undefined : getData(func);

                        var newData = [
                            func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
                            argPos, ary, arity
                        ];

                        if (data) {
                            mergeData(newData, data);
                        }
                        func = newData[0];
                        bitmask = newData[1];
                        thisArg = newData[2];
                        partials = newData[3];
                        holders = newData[4];
                        arity = newData[9] = newData[9] === undefined
                            ? (isBindKey ? 0 : func.length)
                            : nativeMax(newData[9] - length, 0);

                        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
                            bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
                        }
                        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
                            var result = createBind(func, bitmask, thisArg);
                        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
                            result = createCurry(func, bitmask, arity);
                        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
                            result = createPartial(func, bitmask, thisArg, partials);
                        } else {
                            result = createHybrid.apply(undefined, newData);
                        }
                        var setter = data ? baseSetData : setData;
                        return setWrapToString(setter(result, newData), func, bitmask);
                    }

                    /**
                     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
                     * of source objects to the destination object for all destination properties
                     * that resolve to `undefined`.
                     *
                     * @private
                     * @param {*} objValue The destination value.
                     * @param {*} srcValue The source value.
                     * @param {string} key The key of the property to assign.
                     * @param {Object} object The parent object of `objValue`.
                     * @returns {*} Returns the value to assign.
                     */
                    function customDefaultsAssignIn(objValue, srcValue, key, object) {
                        if (objValue === undefined ||
                            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                            return srcValue;
                        }
                        return objValue;
                    }

                    /**
                     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
                     * objects into destination objects that are passed thru.
                     *
                     * @private
                     * @param {*} objValue The destination value.
                     * @param {*} srcValue The source value.
                     * @param {string} key The key of the property to merge.
                     * @param {Object} object The parent object of `objValue`.
                     * @param {Object} source The parent object of `srcValue`.
                     * @param {Object} [stack] Tracks traversed source values and their merged
                     *  counterparts.
                     * @returns {*} Returns the value to assign.
                     */
                    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
                        if (isObject(objValue) && isObject(srcValue)) {
                            // Recursively merge objects and arrays (susceptible to call stack limits).
                            stack.set(srcValue, objValue);
                            baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                            stack['delete'](srcValue);
                        }
                        return objValue;
                    }

                    /**
                     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
                     * objects.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @param {string} key The key of the property to inspect.
                     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
                     */
                    function customOmitClone(value) {
                        return isPlainObject(value) ? undefined : value;
                    }

                    /**
                     * A specialized version of `baseIsEqualDeep` for arrays with support for
                     * partial deep comparisons.
                     *
                     * @private
                     * @param {Array} array The array to compare.
                     * @param {Array} other The other array to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} stack Tracks traversed `array` and `other` objects.
                     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
                     */
                    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                            arrLength = array.length,
                            othLength = other.length;

                        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
                            return false;
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(array);
                        if (stacked && stack.get(other)) {
                            return stacked == other;
                        }
                        var index = -1,
                            result = true,
                            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

                        stack.set(array, other);
                        stack.set(other, array);

                        // Ignore non-index properties.
                        while (++index < arrLength) {
                            var arrValue = array[index],
                                othValue = other[index];

                            if (customizer) {
                                var compared = isPartial
                                    ? customizer(othValue, arrValue, index, other, array, stack)
                                    : customizer(arrValue, othValue, index, array, other, stack);
                            }
                            if (compared !== undefined) {
                                if (compared) {
                                    continue;
                                }
                                result = false;
                                break;
                            }
                            // Recursively compare arrays (susceptible to call stack limits).
                            if (seen) {
                                if (!arraySome(other, function (othValue, othIndex) {
                                    if (!cacheHas(seen, othIndex) &&
                                        (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                                        return seen.push(othIndex);
                                    }
                                })) {
                                    result = false;
                                    break;
                                }
                            } else if (!(
                                arrValue === othValue ||
                                equalFunc(arrValue, othValue, bitmask, customizer, stack)
                            )) {
                                result = false;
                                break;
                            }
                        }
                        stack['delete'](array);
                        stack['delete'](other);
                        return result;
                    }

                    /**
                     * A specialized version of `baseIsEqualDeep` for comparing objects of
                     * the same `toStringTag`.
                     *
                     * **Note:** This function only supports comparing values with tags of
                     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {string} tag The `toStringTag` of the objects to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} stack Tracks traversed `object` and `other` objects.
                     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                     */
                    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
                        switch (tag) {
                            case dataViewTag:
                                if ((object.byteLength != other.byteLength) ||
                                    (object.byteOffset != other.byteOffset)) {
                                    return false;
                                }
                                object = object.buffer;
                                other = other.buffer;

                            case arrayBufferTag:
                                if ((object.byteLength != other.byteLength) ||
                                    !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
                                    return false;
                                }
                                return true;

                            case boolTag:
                            case dateTag:
                            case numberTag:
                                // Coerce booleans to `1` or `0` and dates to milliseconds.
                                // Invalid dates are coerced to `NaN`.
                                return eq(+object, +other);

                            case errorTag:
                                return object.name == other.name && object.message == other.message;

                            case regexpTag:
                            case stringTag:
                                // Coerce regexes to strings and treat strings, primitives and objects,
                                // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                                // for more details.
                                return object == (other + '');

                            case mapTag:
                                var convert = mapToArray;

                            case setTag:
                                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                                convert || (convert = setToArray);

                                if (object.size != other.size && !isPartial) {
                                    return false;
                                }
                                // Assume cyclic values are equal.
                                var stacked = stack.get(object);
                                if (stacked) {
                                    return stacked == other;
                                }
                                bitmask |= COMPARE_UNORDERED_FLAG;

                                // Recursively compare objects (susceptible to call stack limits).
                                stack.set(object, other);
                                var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                                stack['delete'](object);
                                return result;

                            case symbolTag:
                                if (symbolValueOf) {
                                    return symbolValueOf.call(object) == symbolValueOf.call(other);
                                }
                        }
                        return false;
                    }

                    /**
                     * A specialized version of `baseIsEqualDeep` for objects with support for
                     * partial deep comparisons.
                     *
                     * @private
                     * @param {Object} object The object to compare.
                     * @param {Object} other The other object to compare.
                     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
                     * @param {Function} customizer The function to customize comparisons.
                     * @param {Function} equalFunc The function to determine equivalents of values.
                     * @param {Object} stack Tracks traversed `object` and `other` objects.
                     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
                     */
                    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
                        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
                            objProps = getAllKeys(object),
                            objLength = objProps.length,
                            othProps = getAllKeys(other),
                            othLength = othProps.length;

                        if (objLength != othLength && !isPartial) {
                            return false;
                        }
                        var index = objLength;
                        while (index--) {
                            var key = objProps[index];
                            if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                                return false;
                            }
                        }
                        // Assume cyclic values are equal.
                        var stacked = stack.get(object);
                        if (stacked && stack.get(other)) {
                            return stacked == other;
                        }
                        var result = true;
                        stack.set(object, other);
                        stack.set(other, object);

                        var skipCtor = isPartial;
                        while (++index < objLength) {
                            key = objProps[index];
                            var objValue = object[key],
                                othValue = other[key];

                            if (customizer) {
                                var compared = isPartial
                                    ? customizer(othValue, objValue, key, other, object, stack)
                                    : customizer(objValue, othValue, key, object, other, stack);
                            }
                            // Recursively compare objects (susceptible to call stack limits).
                            if (!(compared === undefined
                                    ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                                    : compared
                            )) {
                                result = false;
                                break;
                            }
                            skipCtor || (skipCtor = key == 'constructor');
                        }
                        if (result && !skipCtor) {
                            var objCtor = object.constructor,
                                othCtor = other.constructor;

                            // Non `Object` object instances with different constructors are not equal.
                            if (objCtor != othCtor &&
                                ('constructor' in object && 'constructor' in other) &&
                                !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                                    typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                                result = false;
                            }
                        }
                        stack['delete'](object);
                        stack['delete'](other);
                        return result;
                    }

                    /**
                     * A specialized version of `baseRest` which flattens the rest array.
                     *
                     * @private
                     * @param {Function} func The function to apply a rest parameter to.
                     * @returns {Function} Returns the new function.
                     */
                    function flatRest(func) {
                        return setToString(overRest(func, undefined, flatten), func + '');
                    }

                    /**
                     * Creates an array of own enumerable property names and symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names and symbols.
                     */
                    function getAllKeys(object) {
                        return baseGetAllKeys(object, keys, getSymbols);
                    }

                    /**
                     * Creates an array of own and inherited enumerable property names and
                     * symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names and symbols.
                     */
                    function getAllKeysIn(object) {
                        return baseGetAllKeys(object, keysIn, getSymbolsIn);
                    }

                    /**
                     * Gets metadata for `func`.
                     *
                     * @private
                     * @param {Function} func The function to query.
                     * @returns {*} Returns the metadata for `func`.
                     */
                    var getData = !metaMap ? noop : function (func) {
                        return metaMap.get(func);
                    };

                    /**
                     * Gets the name of `func`.
                     *
                     * @private
                     * @param {Function} func The function to query.
                     * @returns {string} Returns the function name.
                     */
                    function getFuncName(func) {
                        var result = (func.name + ''),
                            array = realNames[result],
                            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

                        while (length--) {
                            var data = array[length],
                                otherFunc = data.func;
                            if (otherFunc == null || otherFunc == func) {
                                return data.name;
                            }
                        }
                        return result;
                    }

                    /**
                     * Gets the argument placeholder value for `func`.
                     *
                     * @private
                     * @param {Function} func The function to inspect.
                     * @returns {*} Returns the placeholder value.
                     */
                    function getHolder(func) {
                        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
                        return object.placeholder;
                    }

                    /**
                     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
                     * this function returns the custom method, otherwise it returns `baseIteratee`.
                     * If arguments are provided, the chosen function is invoked with them and
                     * its result is returned.
                     *
                     * @private
                     * @param {*} [value] The value to convert to an iteratee.
                     * @param {number} [arity] The arity of the created iteratee.
                     * @returns {Function} Returns the chosen function or its result.
                     */
                    function getIteratee() {
                        var result = lodash.iteratee || iteratee;
                        result = result === iteratee ? baseIteratee : result;
                        return arguments.length ? result(arguments[0], arguments[1]) : result;
                    }

                    /**
                     * Gets the data for `map`.
                     *
                     * @private
                     * @param {Object} map The map to query.
                     * @param {string} key The reference key.
                     * @returns {*} Returns the map data.
                     */
                    function getMapData(map, key) {
                        var data = map.__data__;
                        return isKeyable(key)
                            ? data[typeof key == 'string' ? 'string' : 'hash']
                            : data.map;
                    }

                    /**
                     * Gets the property names, values, and compare flags of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the match data of `object`.
                     */
                    function getMatchData(object) {
                        var result = keys(object),
                            length = result.length;

                        while (length--) {
                            var key = result[length],
                                value = object[key];

                            result[length] = [key, value, isStrictComparable(value)];
                        }
                        return result;
                    }

                    /**
                     * Gets the native function at `key` of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {string} key The key of the method to get.
                     * @returns {*} Returns the function if it's native, else `undefined`.
                     */
                    function getNative(object, key) {
                        var value = getValue(object, key);
                        return baseIsNative(value) ? value : undefined;
                    }

                    /**
                     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @returns {string} Returns the raw `toStringTag`.
                     */
                    function getRawTag(value) {
                        var isOwn = hasOwnProperty.call(value, symToStringTag),
                            tag = value[symToStringTag];

                        try {
                            value[symToStringTag] = undefined;
                            var unmasked = true;
                        } catch (e) {
                        }

                        var result = nativeObjectToString.call(value);
                        if (unmasked) {
                            if (isOwn) {
                                value[symToStringTag] = tag;
                            } else {
                                delete value[symToStringTag];
                            }
                        }
                        return result;
                    }

                    /**
                     * Creates an array of the own enumerable symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of symbols.
                     */
                    var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
                        if (object == null) {
                            return [];
                        }
                        object = Object(object);
                        return arrayFilter(nativeGetSymbols(object), function (symbol) {
                            return propertyIsEnumerable.call(object, symbol);
                        });
                    };

                    /**
                     * Creates an array of the own and inherited enumerable symbols of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of symbols.
                     */
                    var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
                        var result = [];
                        while (object) {
                            arrayPush(result, getSymbols(object));
                            object = getPrototype(object);
                        }
                        return result;
                    };

                    /**
                     * Gets the `toStringTag` of `value`.
                     *
                     * @private
                     * @param {*} value The value to query.
                     * @returns {string} Returns the `toStringTag`.
                     */
                    var getTag = baseGetTag;

                    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
                    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
                        (Map && getTag(new Map) != mapTag) ||
                        (Promise && getTag(Promise.resolve()) != promiseTag) ||
                        (Set && getTag(new Set) != setTag) ||
                        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
                        getTag = function (value) {
                            var result = baseGetTag(value),
                                Ctor = result == objectTag ? value.constructor : undefined,
                                ctorString = Ctor ? toSource(Ctor) : '';

                            if (ctorString) {
                                switch (ctorString) {
                                    case dataViewCtorString:
                                        return dataViewTag;
                                    case mapCtorString:
                                        return mapTag;
                                    case promiseCtorString:
                                        return promiseTag;
                                    case setCtorString:
                                        return setTag;
                                    case weakMapCtorString:
                                        return weakMapTag;
                                }
                            }
                            return result;
                        };
                    }

                    /**
                     * Gets the view, applying any `transforms` to the `start` and `end` positions.
                     *
                     * @private
                     * @param {number} start The start of the view.
                     * @param {number} end The end of the view.
                     * @param {Array} transforms The transformations to apply to the view.
                     * @returns {Object} Returns an object containing the `start` and `end`
                     *  positions of the view.
                     */
                    function getView(start, end, transforms) {
                        var index = -1,
                            length = transforms.length;

                        while (++index < length) {
                            var data = transforms[index],
                                size = data.size;

                            switch (data.type) {
                                case 'drop':
                                    start += size;
                                    break;
                                case 'dropRight':
                                    end -= size;
                                    break;
                                case 'take':
                                    end = nativeMin(end, start + size);
                                    break;
                                case 'takeRight':
                                    start = nativeMax(start, end - size);
                                    break;
                            }
                        }
                        return {'start': start, 'end': end};
                    }

                    /**
                     * Extracts wrapper details from the `source` body comment.
                     *
                     * @private
                     * @param {string} source The source to inspect.
                     * @returns {Array} Returns the wrapper details.
                     */
                    function getWrapDetails(source) {
                        var match = source.match(reWrapDetails);
                        return match ? match[1].split(reSplitDetails) : [];
                    }

                    /**
                     * Checks if `path` exists on `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path to check.
                     * @param {Function} hasFunc The function to check properties.
                     * @returns {boolean} Returns `true` if `path` exists, else `false`.
                     */
                    function hasPath(object, path, hasFunc) {
                        path = castPath(path, object);

                        var index = -1,
                            length = path.length,
                            result = false;

                        while (++index < length) {
                            var key = toKey(path[index]);
                            if (!(result = object != null && hasFunc(object, key))) {
                                break;
                            }
                            object = object[key];
                        }
                        if (result || ++index != length) {
                            return result;
                        }
                        length = object == null ? 0 : object.length;
                        return !!length && isLength(length) && isIndex(key, length) &&
                            (isArray(object) || isArguments(object));
                    }

                    /**
                     * Initializes an array clone.
                     *
                     * @private
                     * @param {Array} array The array to clone.
                     * @returns {Array} Returns the initialized clone.
                     */
                    function initCloneArray(array) {
                        var length = array.length,
                            result = new array.constructor(length);

                        // Add properties assigned by `RegExp#exec`.
                        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                            result.index = array.index;
                            result.input = array.input;
                        }
                        return result;
                    }

                    /**
                     * Initializes an object clone.
                     *
                     * @private
                     * @param {Object} object The object to clone.
                     * @returns {Object} Returns the initialized clone.
                     */
                    function initCloneObject(object) {
                        return (typeof object.constructor == 'function' && !isPrototype(object))
                            ? baseCreate(getPrototype(object))
                            : {};
                    }

                    /**
                     * Initializes an object clone based on its `toStringTag`.
                     *
                     * **Note:** This function only supports cloning values with tags of
                     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
                     *
                     * @private
                     * @param {Object} object The object to clone.
                     * @param {string} tag The `toStringTag` of the object to clone.
                     * @param {boolean} [isDeep] Specify a deep clone.
                     * @returns {Object} Returns the initialized clone.
                     */
                    function initCloneByTag(object, tag, isDeep) {
                        var Ctor = object.constructor;
                        switch (tag) {
                            case arrayBufferTag:
                                return cloneArrayBuffer(object);

                            case boolTag:
                            case dateTag:
                                return new Ctor(+object);

                            case dataViewTag:
                                return cloneDataView(object, isDeep);

                            case float32Tag:
                            case float64Tag:
                            case int8Tag:
                            case int16Tag:
                            case int32Tag:
                            case uint8Tag:
                            case uint8ClampedTag:
                            case uint16Tag:
                            case uint32Tag:
                                return cloneTypedArray(object, isDeep);

                            case mapTag:
                                return new Ctor;

                            case numberTag:
                            case stringTag:
                                return new Ctor(object);

                            case regexpTag:
                                return cloneRegExp(object);

                            case setTag:
                                return new Ctor;

                            case symbolTag:
                                return cloneSymbol(object);
                        }
                    }

                    /**
                     * Inserts wrapper `details` in a comment at the top of the `source` body.
                     *
                     * @private
                     * @param {string} source The source to modify.
                     * @returns {Array} details The details to insert.
                     * @returns {string} Returns the modified source.
                     */
                    function insertWrapDetails(source, details) {
                        var length = details.length;
                        if (!length) {
                            return source;
                        }
                        var lastIndex = length - 1;
                        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
                        details = details.join(length > 2 ? ', ' : ' ');
                        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
                    }

                    /**
                     * Checks if `value` is a flattenable `arguments` object or array.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
                     */
                    function isFlattenable(value) {
                        return isArray(value) || isArguments(value) ||
                            !!(spreadableSymbol && value && value[spreadableSymbol]);
                    }

                    /**
                     * Checks if `value` is a valid array-like index.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                     */
                    function isIndex(value, length) {
                        var type = typeof value;
                        length = length == null ? MAX_SAFE_INTEGER : length;

                        return !!length &&
                            (type == 'number' ||
                                (type != 'symbol' && reIsUint.test(value))) &&
                            (value > -1 && value % 1 == 0 && value < length);
                    }

                    /**
                     * Checks if the given arguments are from an iteratee call.
                     *
                     * @private
                     * @param {*} value The potential iteratee value argument.
                     * @param {*} index The potential iteratee index or key argument.
                     * @param {*} object The potential iteratee object argument.
                     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                     *  else `false`.
                     */
                    function isIterateeCall(value, index, object) {
                        if (!isObject(object)) {
                            return false;
                        }
                        var type = typeof index;
                        if (type == 'number'
                            ? (isArrayLike(object) && isIndex(index, object.length))
                            : (type == 'string' && index in object)
                        ) {
                            return eq(object[index], value);
                        }
                        return false;
                    }

                    /**
                     * Checks if `value` is a property name and not a property path.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @param {Object} [object] The object to query keys on.
                     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
                     */
                    function isKey(value, object) {
                        if (isArray(value)) {
                            return false;
                        }
                        var type = typeof value;
                        if (type == 'number' || type == 'symbol' || type == 'boolean' ||
                            value == null || isSymbol(value)) {
                            return true;
                        }
                        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
                            (object != null && value in Object(object));
                    }

                    /**
                     * Checks if `value` is suitable for use as unique object key.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                     */
                    function isKeyable(value) {
                        var type = typeof value;
                        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
                            ? (value !== '__proto__')
                            : (value === null);
                    }

                    /**
                     * Checks if `func` has a lazy counterpart.
                     *
                     * @private
                     * @param {Function} func The function to check.
                     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
                     *  else `false`.
                     */
                    function isLaziable(func) {
                        var funcName = getFuncName(func),
                            other = lodash[funcName];

                        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
                            return false;
                        }
                        if (func === other) {
                            return true;
                        }
                        var data = getData(other);
                        return !!data && func === data[0];
                    }

                    /**
                     * Checks if `func` has its source masked.
                     *
                     * @private
                     * @param {Function} func The function to check.
                     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                     */
                    function isMasked(func) {
                        return !!maskSrcKey && (maskSrcKey in func);
                    }

                    /**
                     * Checks if `func` is capable of being masked.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
                     */
                    var isMaskable = coreJsData ? isFunction : stubFalse;

                    /**
                     * Checks if `value` is likely a prototype object.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                     */
                    function isPrototype(value) {
                        var Ctor = value && value.constructor,
                            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

                        return value === proto;
                    }

                    /**
                     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
                     *
                     * @private
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` if suitable for strict
                     *  equality comparisons, else `false`.
                     */
                    function isStrictComparable(value) {
                        return value === value && !isObject(value);
                    }

                    /**
                     * A specialized version of `matchesProperty` for source values suitable
                     * for strict equality comparisons, i.e. `===`.
                     *
                     * @private
                     * @param {string} key The key of the property to get.
                     * @param {*} srcValue The value to match.
                     * @returns {Function} Returns the new spec function.
                     */
                    function matchesStrictComparable(key, srcValue) {
                        return function (object) {
                            if (object == null) {
                                return false;
                            }
                            return object[key] === srcValue &&
                                (srcValue !== undefined || (key in Object(object)));
                        };
                    }

                    /**
                     * A specialized version of `_.memoize` which clears the memoized function's
                     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
                     *
                     * @private
                     * @param {Function} func The function to have its output memoized.
                     * @returns {Function} Returns the new memoized function.
                     */
                    function memoizeCapped(func) {
                        var result = memoize(func, function (key) {
                            if (cache.size === MAX_MEMOIZE_SIZE) {
                                cache.clear();
                            }
                            return key;
                        });

                        var cache = result.cache;
                        return result;
                    }

                    /**
                     * Merges the function metadata of `source` into `data`.
                     *
                     * Merging metadata reduces the number of wrappers used to invoke a function.
                     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
                     * may be applied regardless of execution order. Methods like `_.ary` and
                     * `_.rearg` modify function arguments, making the order in which they are
                     * executed important, preventing the merging of metadata. However, we make
                     * an exception for a safe combined case where curried functions have `_.ary`
                     * and or `_.rearg` applied.
                     *
                     * @private
                     * @param {Array} data The destination metadata.
                     * @param {Array} source The source metadata.
                     * @returns {Array} Returns `data`.
                     */
                    function mergeData(data, source) {
                        var bitmask = data[1],
                            srcBitmask = source[1],
                            newBitmask = bitmask | srcBitmask,
                            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

                        var isCombo =
                            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
                            ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
                            ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

                        // Exit early if metadata can't be merged.
                        if (!(isCommon || isCombo)) {
                            return data;
                        }
                        // Use source `thisArg` if available.
                        if (srcBitmask & WRAP_BIND_FLAG) {
                            data[2] = source[2];
                            // Set when currying a bound function.
                            newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
                        }
                        // Compose partial arguments.
                        var value = source[3];
                        if (value) {
                            var partials = data[3];
                            data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                            data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
                        }
                        // Compose partial right arguments.
                        value = source[5];
                        if (value) {
                            partials = data[5];
                            data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                            data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
                        }
                        // Use source `argPos` if available.
                        value = source[7];
                        if (value) {
                            data[7] = value;
                        }
                        // Use source `ary` if it's smaller.
                        if (srcBitmask & WRAP_ARY_FLAG) {
                            data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
                        }
                        // Use source `arity` if one is not provided.
                        if (data[9] == null) {
                            data[9] = source[9];
                        }
                        // Use source `func` and merge bitmasks.
                        data[0] = source[0];
                        data[1] = newBitmask;

                        return data;
                    }

                    /**
                     * This function is like
                     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                     * except that it includes inherited enumerable properties.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     */
                    function nativeKeysIn(object) {
                        var result = [];
                        if (object != null) {
                            for (var key in Object(object)) {
                                result.push(key);
                            }
                        }
                        return result;
                    }

                    /**
                     * Converts `value` to a string using `Object.prototype.toString`.
                     *
                     * @private
                     * @param {*} value The value to convert.
                     * @returns {string} Returns the converted string.
                     */
                    function objectToString(value) {
                        return nativeObjectToString.call(value);
                    }

                    /**
                     * A specialized version of `baseRest` which transforms the rest array.
                     *
                     * @private
                     * @param {Function} func The function to apply a rest parameter to.
                     * @param {number} [start=func.length-1] The start position of the rest parameter.
                     * @param {Function} transform The rest array transform.
                     * @returns {Function} Returns the new function.
                     */
                    function overRest(func, start, transform) {
                        start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
                        return function () {
                            var args = arguments,
                                index = -1,
                                length = nativeMax(args.length - start, 0),
                                array = Array(length);

                            while (++index < length) {
                                array[index] = args[start + index];
                            }
                            index = -1;
                            var otherArgs = Array(start + 1);
                            while (++index < start) {
                                otherArgs[index] = args[index];
                            }
                            otherArgs[start] = transform(array);
                            return apply(func, this, otherArgs);
                        };
                    }

                    /**
                     * Gets the parent value at `path` of `object`.
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {Array} path The path to get the parent value of.
                     * @returns {*} Returns the parent value.
                     */
                    function parent(object, path) {
                        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
                    }

                    /**
                     * Reorder `array` according to the specified indexes where the element at
                     * the first index is assigned as the first element, the element at
                     * the second index is assigned as the second element, and so on.
                     *
                     * @private
                     * @param {Array} array The array to reorder.
                     * @param {Array} indexes The arranged array indexes.
                     * @returns {Array} Returns `array`.
                     */
                    function reorder(array, indexes) {
                        var arrLength = array.length,
                            length = nativeMin(indexes.length, arrLength),
                            oldArray = copyArray(array);

                        while (length--) {
                            var index = indexes[length];
                            array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
                        }
                        return array;
                    }

                    /**
                     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
                     *
                     * @private
                     * @param {Object} object The object to query.
                     * @param {string} key The key of the property to get.
                     * @returns {*} Returns the property value.
                     */
                    function safeGet(object, key) {
                        if (key === 'constructor' && typeof object[key] === 'function') {
                            return;
                        }

                        if (key == '__proto__') {
                            return;
                        }

                        return object[key];
                    }

                    /**
                     * Sets metadata for `func`.
                     *
                     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
                     * period of time, it will trip its breaker and transition to an identity
                     * function to avoid garbage collection pauses in V8. See
                     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
                     * for more details.
                     *
                     * @private
                     * @param {Function} func The function to associate metadata with.
                     * @param {*} data The metadata.
                     * @returns {Function} Returns `func`.
                     */
                    var setData = shortOut(baseSetData);

                    /**
                     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
                     *
                     * @private
                     * @param {Function} func The function to delay.
                     * @param {number} wait The number of milliseconds to delay invocation.
                     * @returns {number|Object} Returns the timer id or timeout object.
                     */
                    var setTimeout = ctxSetTimeout || function (func, wait) {
                        return root.setTimeout(func, wait);
                    };

                    /**
                     * Sets the `toString` method of `func` to return `string`.
                     *
                     * @private
                     * @param {Function} func The function to modify.
                     * @param {Function} string The `toString` result.
                     * @returns {Function} Returns `func`.
                     */
                    var setToString = shortOut(baseSetToString);

                    /**
                     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
                     * with wrapper details in a comment at the top of the source body.
                     *
                     * @private
                     * @param {Function} wrapper The function to modify.
                     * @param {Function} reference The reference function.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @returns {Function} Returns `wrapper`.
                     */
                    function setWrapToString(wrapper, reference, bitmask) {
                        var source = (reference + '');
                        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
                    }

                    /**
                     * Creates a function that'll short out and invoke `identity` instead
                     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                     * milliseconds.
                     *
                     * @private
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new shortable function.
                     */
                    function shortOut(func) {
                        var count = 0,
                            lastCalled = 0;

                        return function () {
                            var stamp = nativeNow(),
                                remaining = HOT_SPAN - (stamp - lastCalled);

                            lastCalled = stamp;
                            if (remaining > 0) {
                                if (++count >= HOT_COUNT) {
                                    return arguments[0];
                                }
                            } else {
                                count = 0;
                            }
                            return func.apply(undefined, arguments);
                        };
                    }

                    /**
                     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
                     *
                     * @private
                     * @param {Array} array The array to shuffle.
                     * @param {number} [size=array.length] The size of `array`.
                     * @returns {Array} Returns `array`.
                     */
                    function shuffleSelf(array, size) {
                        var index = -1,
                            length = array.length,
                            lastIndex = length - 1;

                        size = size === undefined ? length : size;
                        while (++index < size) {
                            var rand = baseRandom(index, lastIndex),
                                value = array[rand];

                            array[rand] = array[index];
                            array[index] = value;
                        }
                        array.length = size;
                        return array;
                    }

                    /**
                     * Converts `string` to a property path array.
                     *
                     * @private
                     * @param {string} string The string to convert.
                     * @returns {Array} Returns the property path array.
                     */
                    var stringToPath = memoizeCapped(function (string) {
                        var result = [];
                        if (string.charCodeAt(0) === 46 /* . */) {
                            result.push('');
                        }
                        string.replace(rePropName, function (match, number, quote, subString) {
                            result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
                        });
                        return result;
                    });

                    /**
                     * Converts `value` to a string key if it's not a string or symbol.
                     *
                     * @private
                     * @param {*} value The value to inspect.
                     * @returns {string|symbol} Returns the key.
                     */
                    function toKey(value) {
                        if (typeof value == 'string' || isSymbol(value)) {
                            return value;
                        }
                        var result = (value + '');
                        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
                    }

                    /**
                     * Converts `func` to its source code.
                     *
                     * @private
                     * @param {Function} func The function to convert.
                     * @returns {string} Returns the source code.
                     */
                    function toSource(func) {
                        if (func != null) {
                            try {
                                return funcToString.call(func);
                            } catch (e) {
                            }
                            try {
                                return (func + '');
                            } catch (e) {
                            }
                        }
                        return '';
                    }

                    /**
                     * Updates wrapper `details` based on `bitmask` flags.
                     *
                     * @private
                     * @returns {Array} details The details to modify.
                     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
                     * @returns {Array} Returns `details`.
                     */
                    function updateWrapDetails(details, bitmask) {
                        arrayEach(wrapFlags, function (pair) {
                            var value = '_.' + pair[0];
                            if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
                                details.push(value);
                            }
                        });
                        return details.sort();
                    }

                    /**
                     * Creates a clone of `wrapper`.
                     *
                     * @private
                     * @param {Object} wrapper The wrapper to clone.
                     * @returns {Object} Returns the cloned wrapper.
                     */
                    function wrapperClone(wrapper) {
                        if (wrapper instanceof LazyWrapper) {
                            return wrapper.clone();
                        }
                        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
                        result.__actions__ = copyArray(wrapper.__actions__);
                        result.__index__ = wrapper.__index__;
                        result.__values__ = wrapper.__values__;
                        return result;
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an array of elements split into groups the length of `size`.
                     * If `array` can't be split evenly, the final chunk will be the remaining
                     * elements.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to process.
                     * @param {number} [size=1] The length of each chunk
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the new array of chunks.
                     * @example
                     *
                     * _.chunk(['a', 'b', 'c', 'd'], 2);
                     * // => [['a', 'b'], ['c', 'd']]
                     *
                     * _.chunk(['a', 'b', 'c', 'd'], 3);
                     * // => [['a', 'b', 'c'], ['d']]
                     */
                    function chunk(array, size, guard) {
                        if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
                            size = 1;
                        } else {
                            size = nativeMax(toInteger(size), 0);
                        }
                        var length = array == null ? 0 : array.length;
                        if (!length || size < 1) {
                            return [];
                        }
                        var index = 0,
                            resIndex = 0,
                            result = Array(nativeCeil(length / size));

                        while (index < length) {
                            result[resIndex++] = baseSlice(array, index, (index += size));
                        }
                        return result;
                    }

                    /**
                     * Creates an array with all falsey values removed. The values `false`, `null`,
                     * `0`, `""`, `undefined`, and `NaN` are falsey.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to compact.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * _.compact([0, 1, false, 2, '', 3]);
                     * // => [1, 2, 3]
                     */
                    function compact(array) {
                        var index = -1,
                            length = array == null ? 0 : array.length,
                            resIndex = 0,
                            result = [];

                        while (++index < length) {
                            var value = array[index];
                            if (value) {
                                result[resIndex++] = value;
                            }
                        }
                        return result;
                    }

                    /**
                     * Creates a new array concatenating `array` with any additional arrays
                     * and/or values.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to concatenate.
                     * @param {...*} [values] The values to concatenate.
                     * @returns {Array} Returns the new concatenated array.
                     * @example
                     *
                     * var array = [1];
                     * var other = _.concat(array, 2, [3], [[4]]);
                     *
                     * console.log(other);
                     * // => [1, 2, 3, [4]]
                     *
                     * console.log(array);
                     * // => [1]
                     */
                    function concat() {
                        var length = arguments.length;
                        if (!length) {
                            return [];
                        }
                        var args = Array(length - 1),
                            array = arguments[0],
                            index = length;

                        while (index--) {
                            args[index - 1] = arguments[index];
                        }
                        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
                    }

                    /**
                     * Creates an array of `array` values not included in the other given arrays
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons. The order and references of result values are
                     * determined by the first array.
                     *
                     * **Note:** Unlike `_.pullAll`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...Array} [values] The values to exclude.
                     * @returns {Array} Returns the new array of filtered values.
                     * @see _.without, _.xor
                     * @example
                     *
                     * _.difference([2, 1], [2, 3]);
                     * // => [1]
                     */
                    var difference = baseRest(function (array, values) {
                        return isArrayLikeObject(array)
                            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
                            : [];
                    });

                    /**
                     * This method is like `_.difference` except that it accepts `iteratee` which
                     * is invoked for each element of `array` and `values` to generate the criterion
                     * by which they're compared. The order and references of result values are
                     * determined by the first array. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...Array} [values] The values to exclude.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                     * // => [1.2]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
                     * // => [{ 'x': 2 }]
                     */
                    var differenceBy = baseRest(function (array, values) {
                        var iteratee = last(values);
                        if (isArrayLikeObject(iteratee)) {
                            iteratee = undefined;
                        }
                        return isArrayLikeObject(array)
                            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
                            : [];
                    });

                    /**
                     * This method is like `_.difference` except that it accepts `comparator`
                     * which is invoked to compare elements of `array` to `values`. The order and
                     * references of result values are determined by the first array. The comparator
                     * is invoked with two arguments: (arrVal, othVal).
                     *
                     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...Array} [values] The values to exclude.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     *
                     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
                     * // => [{ 'x': 2, 'y': 1 }]
                     */
                    var differenceWith = baseRest(function (array, values) {
                        var comparator = last(values);
                        if (isArrayLikeObject(comparator)) {
                            comparator = undefined;
                        }
                        return isArrayLikeObject(array)
                            ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
                            : [];
                    });

                    /**
                     * Creates a slice of `array` with `n` elements dropped from the beginning.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.5.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to drop.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.drop([1, 2, 3]);
                     * // => [2, 3]
                     *
                     * _.drop([1, 2, 3], 2);
                     * // => [3]
                     *
                     * _.drop([1, 2, 3], 5);
                     * // => []
                     *
                     * _.drop([1, 2, 3], 0);
                     * // => [1, 2, 3]
                     */
                    function drop(array, n, guard) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        return baseSlice(array, n < 0 ? 0 : n, length);
                    }

                    /**
                     * Creates a slice of `array` with `n` elements dropped from the end.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to drop.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.dropRight([1, 2, 3]);
                     * // => [1, 2]
                     *
                     * _.dropRight([1, 2, 3], 2);
                     * // => [1]
                     *
                     * _.dropRight([1, 2, 3], 5);
                     * // => []
                     *
                     * _.dropRight([1, 2, 3], 0);
                     * // => [1, 2, 3]
                     */
                    function dropRight(array, n, guard) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        n = length - n;
                        return baseSlice(array, 0, n < 0 ? 0 : n);
                    }

                    /**
                     * Creates a slice of `array` excluding elements dropped from the end.
                     * Elements are dropped until `predicate` returns falsey. The predicate is
                     * invoked with three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': true },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': false }
                     * ];
                     *
                     * _.dropRightWhile(users, function(o) { return !o.active; });
                     * // => objects for ['barney']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
                     * // => objects for ['barney', 'fred']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.dropRightWhile(users, ['active', false]);
                     * // => objects for ['barney']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.dropRightWhile(users, 'active');
                     * // => objects for ['barney', 'fred', 'pebbles']
                     */
                    function dropRightWhile(array, predicate) {
                        return (array && array.length)
                            ? baseWhile(array, getIteratee(predicate, 3), true, true)
                            : [];
                    }

                    /**
                     * Creates a slice of `array` excluding elements dropped from the beginning.
                     * Elements are dropped until `predicate` returns falsey. The predicate is
                     * invoked with three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': false },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': true }
                     * ];
                     *
                     * _.dropWhile(users, function(o) { return !o.active; });
                     * // => objects for ['pebbles']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.dropWhile(users, { 'user': 'barney', 'active': false });
                     * // => objects for ['fred', 'pebbles']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.dropWhile(users, ['active', false]);
                     * // => objects for ['pebbles']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.dropWhile(users, 'active');
                     * // => objects for ['barney', 'fred', 'pebbles']
                     */
                    function dropWhile(array, predicate) {
                        return (array && array.length)
                            ? baseWhile(array, getIteratee(predicate, 3), true)
                            : [];
                    }

                    /**
                     * Fills elements of `array` with `value` from `start` up to, but not
                     * including, `end`.
                     *
                     * **Note:** This method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.2.0
                     * @category Array
                     * @param {Array} array The array to fill.
                     * @param {*} value The value to fill `array` with.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [1, 2, 3];
                     *
                     * _.fill(array, 'a');
                     * console.log(array);
                     * // => ['a', 'a', 'a']
                     *
                     * _.fill(Array(3), 2);
                     * // => [2, 2, 2]
                     *
                     * _.fill([4, 6, 8, 10], '*', 1, 3);
                     * // => [4, '*', '*', 10]
                     */
                    function fill(array, value, start, end) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                            start = 0;
                            end = length;
                        }
                        return baseFill(array, value, start, end);
                    }

                    /**
                     * This method is like `_.find` except that it returns the index of the first
                     * element `predicate` returns truthy for instead of the element itself.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @returns {number} Returns the index of the found element, else `-1`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': false },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': true }
                     * ];
                     *
                     * _.findIndex(users, function(o) { return o.user == 'barney'; });
                     * // => 0
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findIndex(users, { 'user': 'fred', 'active': false });
                     * // => 1
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findIndex(users, ['active', false]);
                     * // => 0
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findIndex(users, 'active');
                     * // => 2
                     */
                    function findIndex(array, predicate, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = fromIndex == null ? 0 : toInteger(fromIndex);
                        if (index < 0) {
                            index = nativeMax(length + index, 0);
                        }
                        return baseFindIndex(array, getIteratee(predicate, 3), index);
                    }

                    /**
                     * This method is like `_.findIndex` except that it iterates over elements
                     * of `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=array.length-1] The index to search from.
                     * @returns {number} Returns the index of the found element, else `-1`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': true },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': false }
                     * ];
                     *
                     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
                     * // => 2
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
                     * // => 0
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findLastIndex(users, ['active', false]);
                     * // => 2
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findLastIndex(users, 'active');
                     * // => 0
                     */
                    function findLastIndex(array, predicate, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = length - 1;
                        if (fromIndex !== undefined) {
                            index = toInteger(fromIndex);
                            index = fromIndex < 0
                                ? nativeMax(length + index, 0)
                                : nativeMin(index, length - 1);
                        }
                        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
                    }

                    /**
                     * Flattens `array` a single level deep.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to flatten.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * _.flatten([1, [2, [3, [4]], 5]]);
                     * // => [1, 2, [3, [4]], 5]
                     */
                    function flatten(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseFlatten(array, 1) : [];
                    }

                    /**
                     * Recursively flattens `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to flatten.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * _.flattenDeep([1, [2, [3, [4]], 5]]);
                     * // => [1, 2, 3, 4, 5]
                     */
                    function flattenDeep(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseFlatten(array, INFINITY) : [];
                    }

                    /**
                     * Recursively flatten `array` up to `depth` times.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.4.0
                     * @category Array
                     * @param {Array} array The array to flatten.
                     * @param {number} [depth=1] The maximum recursion depth.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * var array = [1, [2, [3, [4]], 5]];
                     *
                     * _.flattenDepth(array, 1);
                     * // => [1, 2, [3, [4]], 5]
                     *
                     * _.flattenDepth(array, 2);
                     * // => [1, 2, 3, [4], 5]
                     */
                    function flattenDepth(array, depth) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        depth = depth === undefined ? 1 : toInteger(depth);
                        return baseFlatten(array, depth);
                    }

                    /**
                     * The inverse of `_.toPairs`; this method returns an object composed
                     * from key-value `pairs`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} pairs The key-value pairs.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * _.fromPairs([['a', 1], ['b', 2]]);
                     * // => { 'a': 1, 'b': 2 }
                     */
                    function fromPairs(pairs) {
                        var index = -1,
                            length = pairs == null ? 0 : pairs.length,
                            result = {};

                        while (++index < length) {
                            var pair = pairs[index];
                            result[pair[0]] = pair[1];
                        }
                        return result;
                    }

                    /**
                     * Gets the first element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @alias first
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {*} Returns the first element of `array`.
                     * @example
                     *
                     * _.head([1, 2, 3]);
                     * // => 1
                     *
                     * _.head([]);
                     * // => undefined
                     */
                    function head(array) {
                        return (array && array.length) ? array[0] : undefined;
                    }

                    /**
                     * Gets the index at which the first occurrence of `value` is found in `array`
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons. If `fromIndex` is negative, it's used as the
                     * offset from the end of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.indexOf([1, 2, 1, 2], 2);
                     * // => 1
                     *
                     * // Search from the `fromIndex`.
                     * _.indexOf([1, 2, 1, 2], 2, 2);
                     * // => 3
                     */
                    function indexOf(array, value, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = fromIndex == null ? 0 : toInteger(fromIndex);
                        if (index < 0) {
                            index = nativeMax(length + index, 0);
                        }
                        return baseIndexOf(array, value, index);
                    }

                    /**
                     * Gets all but the last element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.initial([1, 2, 3]);
                     * // => [1, 2]
                     */
                    function initial(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseSlice(array, 0, -1) : [];
                    }

                    /**
                     * Creates an array of unique values that are included in all given arrays
                     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons. The order and references of result values are
                     * determined by the first array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @returns {Array} Returns the new array of intersecting values.
                     * @example
                     *
                     * _.intersection([2, 1], [2, 3]);
                     * // => [2]
                     */
                    var intersection = baseRest(function (arrays) {
                        var mapped = arrayMap(arrays, castArrayLikeObject);
                        return (mapped.length && mapped[0] === arrays[0])
                            ? baseIntersection(mapped)
                            : [];
                    });

                    /**
                     * This method is like `_.intersection` except that it accepts `iteratee`
                     * which is invoked for each element of each `arrays` to generate the criterion
                     * by which they're compared. The order and references of result values are
                     * determined by the first array. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of intersecting values.
                     * @example
                     *
                     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                     * // => [2.1]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 1 }]
                     */
                    var intersectionBy = baseRest(function (arrays) {
                        var iteratee = last(arrays),
                            mapped = arrayMap(arrays, castArrayLikeObject);

                        if (iteratee === last(mapped)) {
                            iteratee = undefined;
                        } else {
                            mapped.pop();
                        }
                        return (mapped.length && mapped[0] === arrays[0])
                            ? baseIntersection(mapped, getIteratee(iteratee, 2))
                            : [];
                    });

                    /**
                     * This method is like `_.intersection` except that it accepts `comparator`
                     * which is invoked to compare elements of `arrays`. The order and references
                     * of result values are determined by the first array. The comparator is
                     * invoked with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of intersecting values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.intersectionWith(objects, others, _.isEqual);
                     * // => [{ 'x': 1, 'y': 2 }]
                     */
                    var intersectionWith = baseRest(function (arrays) {
                        var comparator = last(arrays),
                            mapped = arrayMap(arrays, castArrayLikeObject);

                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        if (comparator) {
                            mapped.pop();
                        }
                        return (mapped.length && mapped[0] === arrays[0])
                            ? baseIntersection(mapped, undefined, comparator)
                            : [];
                    });

                    /**
                     * Converts all elements in `array` into a string separated by `separator`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to convert.
                     * @param {string} [separator=','] The element separator.
                     * @returns {string} Returns the joined string.
                     * @example
                     *
                     * _.join(['a', 'b', 'c'], '~');
                     * // => 'a~b~c'
                     */
                    function join(array, separator) {
                        return array == null ? '' : nativeJoin.call(array, separator);
                    }

                    /**
                     * Gets the last element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {*} Returns the last element of `array`.
                     * @example
                     *
                     * _.last([1, 2, 3]);
                     * // => 3
                     */
                    function last(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? array[length - 1] : undefined;
                    }

                    /**
                     * This method is like `_.indexOf` except that it iterates over elements of
                     * `array` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} [fromIndex=array.length-1] The index to search from.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.lastIndexOf([1, 2, 1, 2], 2);
                     * // => 3
                     *
                     * // Search from the `fromIndex`.
                     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
                     * // => 1
                     */
                    function lastIndexOf(array, value, fromIndex) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return -1;
                        }
                        var index = length;
                        if (fromIndex !== undefined) {
                            index = toInteger(fromIndex);
                            index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
                        }
                        return value === value
                            ? strictLastIndexOf(array, value, index)
                            : baseFindIndex(array, baseIsNaN, index, true);
                    }

                    /**
                     * Gets the element at index `n` of `array`. If `n` is negative, the nth
                     * element from the end is returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.11.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=0] The index of the element to return.
                     * @returns {*} Returns the nth element of `array`.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'd'];
                     *
                     * _.nth(array, 1);
                     * // => 'b'
                     *
                     * _.nth(array, -2);
                     * // => 'c';
                     */
                    function nth(array, n) {
                        return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
                    }

                    /**
                     * Removes all given values from `array` using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
                     * to remove elements from an array by predicate.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {...*} [values] The values to remove.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                     *
                     * _.pull(array, 'a', 'c');
                     * console.log(array);
                     * // => ['b', 'b']
                     */
                    var pull = baseRest(pullAll);

                    /**
                     * This method is like `_.pull` except that it accepts an array of values to remove.
                     *
                     * **Note:** Unlike `_.difference`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
                     *
                     * _.pullAll(array, ['a', 'c']);
                     * console.log(array);
                     * // => ['b', 'b']
                     */
                    function pullAll(array, values) {
                        return (array && array.length && values && values.length)
                            ? basePullAll(array, values)
                            : array;
                    }

                    /**
                     * This method is like `_.pullAll` except that it accepts `iteratee` which is
                     * invoked for each element of `array` and `values` to generate the criterion
                     * by which they're compared. The iteratee is invoked with one argument: (value).
                     *
                     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
                     *
                     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
                     * console.log(array);
                     * // => [{ 'x': 2 }]
                     */
                    function pullAllBy(array, values, iteratee) {
                        return (array && array.length && values && values.length)
                            ? basePullAll(array, values, getIteratee(iteratee, 2))
                            : array;
                    }

                    /**
                     * This method is like `_.pullAll` except that it accepts `comparator` which
                     * is invoked to compare elements of `array` to `values`. The comparator is
                     * invoked with two arguments: (arrVal, othVal).
                     *
                     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.6.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Array} values The values to remove.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
                     *
                     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
                     * console.log(array);
                     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
                     */
                    function pullAllWith(array, values, comparator) {
                        return (array && array.length && values && values.length)
                            ? basePullAll(array, values, undefined, comparator)
                            : array;
                    }

                    /**
                     * Removes elements from `array` corresponding to `indexes` and returns an
                     * array of removed elements.
                     *
                     * **Note:** Unlike `_.at`, this method mutates `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
                     * @returns {Array} Returns the new array of removed elements.
                     * @example
                     *
                     * var array = ['a', 'b', 'c', 'd'];
                     * var pulled = _.pullAt(array, [1, 3]);
                     *
                     * console.log(array);
                     * // => ['a', 'c']
                     *
                     * console.log(pulled);
                     * // => ['b', 'd']
                     */
                    var pullAt = flatRest(function (array, indexes) {
                        var length = array == null ? 0 : array.length,
                            result = baseAt(array, indexes);

                        basePullAt(array, arrayMap(indexes, function (index) {
                            return isIndex(index, length) ? +index : index;
                        }).sort(compareAscending));

                        return result;
                    });

                    /**
                     * Removes all elements from `array` that `predicate` returns truthy for
                     * and returns an array of the removed elements. The predicate is invoked
                     * with three arguments: (value, index, array).
                     *
                     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
                     * to pull elements from an array by value.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new array of removed elements.
                     * @example
                     *
                     * var array = [1, 2, 3, 4];
                     * var evens = _.remove(array, function(n) {
                     *   return n % 2 == 0;
                     * });
                     *
                     * console.log(array);
                     * // => [1, 3]
                     *
                     * console.log(evens);
                     * // => [2, 4]
                     */
                    function remove(array, predicate) {
                        var result = [];
                        if (!(array && array.length)) {
                            return result;
                        }
                        var index = -1,
                            indexes = [],
                            length = array.length;

                        predicate = getIteratee(predicate, 3);
                        while (++index < length) {
                            var value = array[index];
                            if (predicate(value, index, array)) {
                                result.push(value);
                                indexes.push(index);
                            }
                        }
                        basePullAt(array, indexes);
                        return result;
                    }

                    /**
                     * Reverses `array` so that the first element becomes the last, the second
                     * element becomes the second to last, and so on.
                     *
                     * **Note:** This method mutates `array` and is based on
                     * [`Array#reverse`](https://mdn.io/Array/reverse).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to modify.
                     * @returns {Array} Returns `array`.
                     * @example
                     *
                     * var array = [1, 2, 3];
                     *
                     * _.reverse(array);
                     * // => [3, 2, 1]
                     *
                     * console.log(array);
                     * // => [3, 2, 1]
                     */
                    function reverse(array) {
                        return array == null ? array : nativeReverse.call(array);
                    }

                    /**
                     * Creates a slice of `array` from `start` up to, but not including, `end`.
                     *
                     * **Note:** This method is used instead of
                     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
                     * returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to slice.
                     * @param {number} [start=0] The start position.
                     * @param {number} [end=array.length] The end position.
                     * @returns {Array} Returns the slice of `array`.
                     */
                    function slice(array, start, end) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                            start = 0;
                            end = length;
                        } else {
                            start = start == null ? 0 : toInteger(start);
                            end = end === undefined ? length : toInteger(end);
                        }
                        return baseSlice(array, start, end);
                    }

                    /**
                     * Uses a binary search to determine the lowest index at which `value`
                     * should be inserted into `array` in order to maintain its sort order.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * _.sortedIndex([30, 50], 40);
                     * // => 1
                     */
                    function sortedIndex(array, value) {
                        return baseSortedIndex(array, value);
                    }

                    /**
                     * This method is like `_.sortedIndex` except that it accepts `iteratee`
                     * which is invoked for `value` and each element of `array` to compute their
                     * sort ranking. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * var objects = [{ 'x': 4 }, { 'x': 5 }];
                     *
                     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                     * // => 0
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
                     * // => 0
                     */
                    function sortedIndexBy(array, value, iteratee) {
                        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
                    }

                    /**
                     * This method is like `_.indexOf` except that it performs a binary
                     * search on a sorted `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
                     * // => 1
                     */
                    function sortedIndexOf(array, value) {
                        var length = array == null ? 0 : array.length;
                        if (length) {
                            var index = baseSortedIndex(array, value);
                            if (index < length && eq(array[index], value)) {
                                return index;
                            }
                        }
                        return -1;
                    }

                    /**
                     * This method is like `_.sortedIndex` except that it returns the highest
                     * index at which `value` should be inserted into `array` in order to
                     * maintain its sort order.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
                     * // => 4
                     */
                    function sortedLastIndex(array, value) {
                        return baseSortedIndex(array, value, true);
                    }

                    /**
                     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
                     * which is invoked for `value` and each element of `array` to compute their
                     * sort ranking. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The sorted array to inspect.
                     * @param {*} value The value to evaluate.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the index at which `value` should be inserted
                     *  into `array`.
                     * @example
                     *
                     * var objects = [{ 'x': 4 }, { 'x': 5 }];
                     *
                     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
                     * // => 1
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
                     * // => 1
                     */
                    function sortedLastIndexBy(array, value, iteratee) {
                        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
                    }

                    /**
                     * This method is like `_.lastIndexOf` except that it performs a binary
                     * search on a sorted `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {*} value The value to search for.
                     * @returns {number} Returns the index of the matched value, else `-1`.
                     * @example
                     *
                     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
                     * // => 3
                     */
                    function sortedLastIndexOf(array, value) {
                        var length = array == null ? 0 : array.length;
                        if (length) {
                            var index = baseSortedIndex(array, value, true) - 1;
                            if (eq(array[index], value)) {
                                return index;
                            }
                        }
                        return -1;
                    }

                    /**
                     * This method is like `_.uniq` except that it's designed and optimized
                     * for sorted arrays.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.sortedUniq([1, 1, 2]);
                     * // => [1, 2]
                     */
                    function sortedUniq(array) {
                        return (array && array.length)
                            ? baseSortedUniq(array)
                            : [];
                    }

                    /**
                     * This method is like `_.uniqBy` except that it's designed and optimized
                     * for sorted arrays.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee] The iteratee invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
                     * // => [1.1, 2.3]
                     */
                    function sortedUniqBy(array, iteratee) {
                        return (array && array.length)
                            ? baseSortedUniq(array, getIteratee(iteratee, 2))
                            : [];
                    }

                    /**
                     * Gets all but the first element of `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.tail([1, 2, 3]);
                     * // => [2, 3]
                     */
                    function tail(array) {
                        var length = array == null ? 0 : array.length;
                        return length ? baseSlice(array, 1, length) : [];
                    }

                    /**
                     * Creates a slice of `array` with `n` elements taken from the beginning.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to take.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.take([1, 2, 3]);
                     * // => [1]
                     *
                     * _.take([1, 2, 3], 2);
                     * // => [1, 2]
                     *
                     * _.take([1, 2, 3], 5);
                     * // => [1, 2, 3]
                     *
                     * _.take([1, 2, 3], 0);
                     * // => []
                     */
                    function take(array, n, guard) {
                        if (!(array && array.length)) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        return baseSlice(array, 0, n < 0 ? 0 : n);
                    }

                    /**
                     * Creates a slice of `array` with `n` elements taken from the end.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {number} [n=1] The number of elements to take.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * _.takeRight([1, 2, 3]);
                     * // => [3]
                     *
                     * _.takeRight([1, 2, 3], 2);
                     * // => [2, 3]
                     *
                     * _.takeRight([1, 2, 3], 5);
                     * // => [1, 2, 3]
                     *
                     * _.takeRight([1, 2, 3], 0);
                     * // => []
                     */
                    function takeRight(array, n, guard) {
                        var length = array == null ? 0 : array.length;
                        if (!length) {
                            return [];
                        }
                        n = (guard || n === undefined) ? 1 : toInteger(n);
                        n = length - n;
                        return baseSlice(array, n < 0 ? 0 : n, length);
                    }

                    /**
                     * Creates a slice of `array` with elements taken from the end. Elements are
                     * taken until `predicate` returns falsey. The predicate is invoked with
                     * three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': true },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': false }
                     * ];
                     *
                     * _.takeRightWhile(users, function(o) { return !o.active; });
                     * // => objects for ['fred', 'pebbles']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
                     * // => objects for ['pebbles']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.takeRightWhile(users, ['active', false]);
                     * // => objects for ['fred', 'pebbles']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.takeRightWhile(users, 'active');
                     * // => []
                     */
                    function takeRightWhile(array, predicate) {
                        return (array && array.length)
                            ? baseWhile(array, getIteratee(predicate, 3), false, true)
                            : [];
                    }

                    /**
                     * Creates a slice of `array` with elements taken from the beginning. Elements
                     * are taken until `predicate` returns falsey. The predicate is invoked with
                     * three arguments: (value, index, array).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Array
                     * @param {Array} array The array to query.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the slice of `array`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'active': false },
                     *   { 'user': 'fred',    'active': false },
                     *   { 'user': 'pebbles', 'active': true }
                     * ];
                     *
                     * _.takeWhile(users, function(o) { return !o.active; });
                     * // => objects for ['barney', 'fred']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.takeWhile(users, { 'user': 'barney', 'active': false });
                     * // => objects for ['barney']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.takeWhile(users, ['active', false]);
                     * // => objects for ['barney', 'fred']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.takeWhile(users, 'active');
                     * // => []
                     */
                    function takeWhile(array, predicate) {
                        return (array && array.length)
                            ? baseWhile(array, getIteratee(predicate, 3))
                            : [];
                    }

                    /**
                     * Creates an array of unique values, in order, from all given arrays using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @returns {Array} Returns the new array of combined values.
                     * @example
                     *
                     * _.union([2], [1, 2]);
                     * // => [2, 1]
                     */
                    var union = baseRest(function (arrays) {
                        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
                    });

                    /**
                     * This method is like `_.union` except that it accepts `iteratee` which is
                     * invoked for each element of each `arrays` to generate the criterion by
                     * which uniqueness is computed. Result values are chosen from the first
                     * array in which the value occurs. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of combined values.
                     * @example
                     *
                     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
                     * // => [2.1, 1.2]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 1 }, { 'x': 2 }]
                     */
                    var unionBy = baseRest(function (arrays) {
                        var iteratee = last(arrays);
                        if (isArrayLikeObject(iteratee)) {
                            iteratee = undefined;
                        }
                        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
                    });

                    /**
                     * This method is like `_.union` except that it accepts `comparator` which
                     * is invoked to compare elements of `arrays`. Result values are chosen from
                     * the first array in which the value occurs. The comparator is invoked
                     * with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of combined values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.unionWith(objects, others, _.isEqual);
                     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                     */
                    var unionWith = baseRest(function (arrays) {
                        var comparator = last(arrays);
                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
                    });

                    /**
                     * Creates a duplicate-free version of an array, using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons, in which only the first occurrence of each element
                     * is kept. The order of result values is determined by the order they occur
                     * in the array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.uniq([2, 1, 2]);
                     * // => [2, 1]
                     */
                    function uniq(array) {
                        return (array && array.length) ? baseUniq(array) : [];
                    }

                    /**
                     * This method is like `_.uniq` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the criterion by which
                     * uniqueness is computed. The order of result values is determined by the
                     * order they occur in the array. The iteratee is invoked with one argument:
                     * (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
                     * // => [2.1, 1.2]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 1 }, { 'x': 2 }]
                     */
                    function uniqBy(array, iteratee) {
                        return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
                    }

                    /**
                     * This method is like `_.uniq` except that it accepts `comparator` which
                     * is invoked to compare elements of `array`. The order of result values is
                     * determined by the order they occur in the array.The comparator is invoked
                     * with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new duplicate free array.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.uniqWith(objects, _.isEqual);
                     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
                     */
                    function uniqWith(array, comparator) {
                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
                    }

                    /**
                     * This method is like `_.zip` except that it accepts an array of grouped
                     * elements and creates an array regrouping the elements to their pre-zip
                     * configuration.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.2.0
                     * @category Array
                     * @param {Array} array The array of grouped elements to process.
                     * @returns {Array} Returns the new array of regrouped elements.
                     * @example
                     *
                     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
                     * // => [['a', 1, true], ['b', 2, false]]
                     *
                     * _.unzip(zipped);
                     * // => [['a', 'b'], [1, 2], [true, false]]
                     */
                    function unzip(array) {
                        if (!(array && array.length)) {
                            return [];
                        }
                        var length = 0;
                        array = arrayFilter(array, function (group) {
                            if (isArrayLikeObject(group)) {
                                length = nativeMax(group.length, length);
                                return true;
                            }
                        });
                        return baseTimes(length, function (index) {
                            return arrayMap(array, baseProperty(index));
                        });
                    }

                    /**
                     * This method is like `_.unzip` except that it accepts `iteratee` to specify
                     * how regrouped values should be combined. The iteratee is invoked with the
                     * elements of each group: (...group).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.8.0
                     * @category Array
                     * @param {Array} array The array of grouped elements to process.
                     * @param {Function} [iteratee=_.identity] The function to combine
                     *  regrouped values.
                     * @returns {Array} Returns the new array of regrouped elements.
                     * @example
                     *
                     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
                     * // => [[1, 10, 100], [2, 20, 200]]
                     *
                     * _.unzipWith(zipped, _.add);
                     * // => [3, 30, 300]
                     */
                    function unzipWith(array, iteratee) {
                        if (!(array && array.length)) {
                            return [];
                        }
                        var result = unzip(array);
                        if (iteratee == null) {
                            return result;
                        }
                        return arrayMap(result, function (group) {
                            return apply(iteratee, undefined, group);
                        });
                    }

                    /**
                     * Creates an array excluding all given values using
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * for equality comparisons.
                     *
                     * **Note:** Unlike `_.pull`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {Array} array The array to inspect.
                     * @param {...*} [values] The values to exclude.
                     * @returns {Array} Returns the new array of filtered values.
                     * @see _.difference, _.xor
                     * @example
                     *
                     * _.without([2, 1, 2, 3], 1, 2);
                     * // => [3]
                     */
                    var without = baseRest(function (array, values) {
                        return isArrayLikeObject(array)
                            ? baseDifference(array, values)
                            : [];
                    });

                    /**
                     * Creates an array of unique values that is the
                     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
                     * of the given arrays. The order of result values is determined by the order
                     * they occur in the arrays.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @returns {Array} Returns the new array of filtered values.
                     * @see _.difference, _.without
                     * @example
                     *
                     * _.xor([2, 1], [2, 3]);
                     * // => [1, 3]
                     */
                    var xor = baseRest(function (arrays) {
                        return baseXor(arrayFilter(arrays, isArrayLikeObject));
                    });

                    /**
                     * This method is like `_.xor` except that it accepts `iteratee` which is
                     * invoked for each element of each `arrays` to generate the criterion by
                     * which by which they're compared. The order of result values is determined
                     * by the order they occur in the arrays. The iteratee is invoked with one
                     * argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
                     * // => [1.2, 3.4]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
                     * // => [{ 'x': 2 }]
                     */
                    var xorBy = baseRest(function (arrays) {
                        var iteratee = last(arrays);
                        if (isArrayLikeObject(iteratee)) {
                            iteratee = undefined;
                        }
                        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
                    });

                    /**
                     * This method is like `_.xor` except that it accepts `comparator` which is
                     * invoked to compare elements of `arrays`. The order of result values is
                     * determined by the order they occur in the arrays. The comparator is invoked
                     * with two arguments: (arrVal, othVal).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to inspect.
                     * @param {Function} [comparator] The comparator invoked per element.
                     * @returns {Array} Returns the new array of filtered values.
                     * @example
                     *
                     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
                     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
                     *
                     * _.xorWith(objects, others, _.isEqual);
                     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
                     */
                    var xorWith = baseRest(function (arrays) {
                        var comparator = last(arrays);
                        comparator = typeof comparator == 'function' ? comparator : undefined;
                        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
                    });

                    /**
                     * Creates an array of grouped elements, the first of which contains the
                     * first elements of the given arrays, the second of which contains the
                     * second elements of the given arrays, and so on.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to process.
                     * @returns {Array} Returns the new array of grouped elements.
                     * @example
                     *
                     * _.zip(['a', 'b'], [1, 2], [true, false]);
                     * // => [['a', 1, true], ['b', 2, false]]
                     */
                    var zip = baseRest(unzip);

                    /**
                     * This method is like `_.fromPairs` except that it accepts two arrays,
                     * one of property identifiers and one of corresponding values.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.4.0
                     * @category Array
                     * @param {Array} [props=[]] The property identifiers.
                     * @param {Array} [values=[]] The property values.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * _.zipObject(['a', 'b'], [1, 2]);
                     * // => { 'a': 1, 'b': 2 }
                     */
                    function zipObject(props, values) {
                        return baseZipObject(props || [], values || [], assignValue);
                    }

                    /**
                     * This method is like `_.zipObject` except that it supports property paths.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.1.0
                     * @category Array
                     * @param {Array} [props=[]] The property identifiers.
                     * @param {Array} [values=[]] The property values.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
                     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
                     */
                    function zipObjectDeep(props, values) {
                        return baseZipObject(props || [], values || [], baseSet);
                    }

                    /**
                     * This method is like `_.zip` except that it accepts `iteratee` to specify
                     * how grouped values should be combined. The iteratee is invoked with the
                     * elements of each group: (...group).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.8.0
                     * @category Array
                     * @param {...Array} [arrays] The arrays to process.
                     * @param {Function} [iteratee=_.identity] The function to combine
                     *  grouped values.
                     * @returns {Array} Returns the new array of grouped elements.
                     * @example
                     *
                     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
                     *   return a + b + c;
                     * });
                     * // => [111, 222]
                     */
                    var zipWith = baseRest(function (arrays) {
                        var length = arrays.length,
                            iteratee = length > 1 ? arrays[length - 1] : undefined;

                        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
                        return unzipWith(arrays, iteratee);
                    });

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
                     * chain sequences enabled. The result of such sequences must be unwrapped
                     * with `_#value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.3.0
                     * @category Seq
                     * @param {*} value The value to wrap.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'age': 36 },
                     *   { 'user': 'fred',    'age': 40 },
                     *   { 'user': 'pebbles', 'age': 1 }
                     * ];
                     *
                     * var youngest = _
                     *   .chain(users)
                     *   .sortBy('age')
                     *   .map(function(o) {
                     *     return o.user + ' is ' + o.age;
                     *   })
                     *   .head()
                     *   .value();
                     * // => 'pebbles is 1'
                     */
                    function chain(value) {
                        var result = lodash(value);
                        result.__chain__ = true;
                        return result;
                    }

                    /**
                     * This method invokes `interceptor` and returns `value`. The interceptor
                     * is invoked with one argument; (value). The purpose of this method is to
                     * "tap into" a method chain sequence in order to modify intermediate results.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Seq
                     * @param {*} value The value to provide to `interceptor`.
                     * @param {Function} interceptor The function to invoke.
                     * @returns {*} Returns `value`.
                     * @example
                     *
                     * _([1, 2, 3])
                     *  .tap(function(array) {
                     *    // Mutate input array.
                     *    array.pop();
                     *  })
                     *  .reverse()
                     *  .value();
                     * // => [2, 1]
                     */
                    function tap(value, interceptor) {
                        interceptor(value);
                        return value;
                    }

                    /**
                     * This method is like `_.tap` except that it returns the result of `interceptor`.
                     * The purpose of this method is to "pass thru" values replacing intermediate
                     * results in a method chain sequence.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Seq
                     * @param {*} value The value to provide to `interceptor`.
                     * @param {Function} interceptor The function to invoke.
                     * @returns {*} Returns the result of `interceptor`.
                     * @example
                     *
                     * _('  abc  ')
                     *  .chain()
                     *  .trim()
                     *  .thru(function(value) {
                     *    return [value];
                     *  })
                     *  .value();
                     * // => ['abc']
                     */
                    function thru(value, interceptor) {
                        return interceptor(value);
                    }

                    /**
                     * This method is the wrapper version of `_.at`.
                     *
                     * @name at
                     * @memberOf _
                     * @since 1.0.0
                     * @category Seq
                     * @param {...(string|string[])} [paths] The property paths to pick.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                     *
                     * _(object).at(['a[0].b.c', 'a[1]']).value();
                     * // => [3, 4]
                     */
                    var wrapperAt = flatRest(function (paths) {
                        var length = paths.length,
                            start = length ? paths[0] : 0,
                            value = this.__wrapped__,
                            interceptor = function (object) {
                                return baseAt(object, paths);
                            };

                        if (length > 1 || this.__actions__.length ||
                            !(value instanceof LazyWrapper) || !isIndex(start)) {
                            return this.thru(interceptor);
                        }
                        value = value.slice(start, +start + (length ? 1 : 0));
                        value.__actions__.push({
                            'func': thru,
                            'args': [interceptor],
                            'thisArg': undefined
                        });
                        return new LodashWrapper(value, this.__chain__).thru(function (array) {
                            if (length && !array.length) {
                                array.push(undefined);
                            }
                            return array;
                        });
                    });

                    /**
                     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
                     *
                     * @name chain
                     * @memberOf _
                     * @since 0.1.0
                     * @category Seq
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36 },
                     *   { 'user': 'fred',   'age': 40 }
                     * ];
                     *
                     * // A sequence without explicit chaining.
                     * _(users).head();
                     * // => { 'user': 'barney', 'age': 36 }
                     *
                     * // A sequence with explicit chaining.
                     * _(users)
                     *   .chain()
                     *   .head()
                     *   .pick('user')
                     *   .value();
                     * // => { 'user': 'barney' }
                     */
                    function wrapperChain() {
                        return chain(this);
                    }

                    /**
                     * Executes the chain sequence and returns the wrapped result.
                     *
                     * @name commit
                     * @memberOf _
                     * @since 3.2.0
                     * @category Seq
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var array = [1, 2];
                     * var wrapped = _(array).push(3);
                     *
                     * console.log(array);
                     * // => [1, 2]
                     *
                     * wrapped = wrapped.commit();
                     * console.log(array);
                     * // => [1, 2, 3]
                     *
                     * wrapped.last();
                     * // => 3
                     *
                     * console.log(array);
                     * // => [1, 2, 3]
                     */
                    function wrapperCommit() {
                        return new LodashWrapper(this.value(), this.__chain__);
                    }

                    /**
                     * Gets the next value on a wrapped object following the
                     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
                     *
                     * @name next
                     * @memberOf _
                     * @since 4.0.0
                     * @category Seq
                     * @returns {Object} Returns the next iterator value.
                     * @example
                     *
                     * var wrapped = _([1, 2]);
                     *
                     * wrapped.next();
                     * // => { 'done': false, 'value': 1 }
                     *
                     * wrapped.next();
                     * // => { 'done': false, 'value': 2 }
                     *
                     * wrapped.next();
                     * // => { 'done': true, 'value': undefined }
                     */
                    function wrapperNext() {
                        if (this.__values__ === undefined) {
                            this.__values__ = toArray(this.value());
                        }
                        var done = this.__index__ >= this.__values__.length,
                            value = done ? undefined : this.__values__[this.__index__++];

                        return {'done': done, 'value': value};
                    }

                    /**
                     * Enables the wrapper to be iterable.
                     *
                     * @name Symbol.iterator
                     * @memberOf _
                     * @since 4.0.0
                     * @category Seq
                     * @returns {Object} Returns the wrapper object.
                     * @example
                     *
                     * var wrapped = _([1, 2]);
                     *
                     * wrapped[Symbol.iterator]() === wrapped;
                     * // => true
                     *
                     * Array.from(wrapped);
                     * // => [1, 2]
                     */
                    function wrapperToIterator() {
                        return this;
                    }

                    /**
                     * Creates a clone of the chain sequence planting `value` as the wrapped value.
                     *
                     * @name plant
                     * @memberOf _
                     * @since 3.2.0
                     * @category Seq
                     * @param {*} value The value to plant.
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * var wrapped = _([1, 2]).map(square);
                     * var other = wrapped.plant([3, 4]);
                     *
                     * other.value();
                     * // => [9, 16]
                     *
                     * wrapped.value();
                     * // => [1, 4]
                     */
                    function wrapperPlant(value) {
                        var result,
                            parent = this;

                        while (parent instanceof baseLodash) {
                            var clone = wrapperClone(parent);
                            clone.__index__ = 0;
                            clone.__values__ = undefined;
                            if (result) {
                                previous.__wrapped__ = clone;
                            } else {
                                result = clone;
                            }
                            var previous = clone;
                            parent = parent.__wrapped__;
                        }
                        previous.__wrapped__ = value;
                        return result;
                    }

                    /**
                     * This method is the wrapper version of `_.reverse`.
                     *
                     * **Note:** This method mutates the wrapped array.
                     *
                     * @name reverse
                     * @memberOf _
                     * @since 0.1.0
                     * @category Seq
                     * @returns {Object} Returns the new `lodash` wrapper instance.
                     * @example
                     *
                     * var array = [1, 2, 3];
                     *
                     * _(array).reverse().value()
                     * // => [3, 2, 1]
                     *
                     * console.log(array);
                     * // => [3, 2, 1]
                     */
                    function wrapperReverse() {
                        var value = this.__wrapped__;
                        if (value instanceof LazyWrapper) {
                            var wrapped = value;
                            if (this.__actions__.length) {
                                wrapped = new LazyWrapper(this);
                            }
                            wrapped = wrapped.reverse();
                            wrapped.__actions__.push({
                                'func': thru,
                                'args': [reverse],
                                'thisArg': undefined
                            });
                            return new LodashWrapper(wrapped, this.__chain__);
                        }
                        return this.thru(reverse);
                    }

                    /**
                     * Executes the chain sequence to resolve the unwrapped value.
                     *
                     * @name value
                     * @memberOf _
                     * @since 0.1.0
                     * @alias toJSON, valueOf
                     * @category Seq
                     * @returns {*} Returns the resolved unwrapped value.
                     * @example
                     *
                     * _([1, 2, 3]).value();
                     * // => [1, 2, 3]
                     */
                    function wrapperValue() {
                        return baseWrapperValue(this.__wrapped__, this.__actions__);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Creates an object composed of keys generated from the results of running
                     * each element of `collection` thru `iteratee`. The corresponding value of
                     * each key is the number of times the key was returned by `iteratee`. The
                     * iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.5.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                     * @returns {Object} Returns the composed aggregate object.
                     * @example
                     *
                     * _.countBy([6.1, 4.2, 6.3], Math.floor);
                     * // => { '4': 1, '6': 2 }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.countBy(['one', 'two', 'three'], 'length');
                     * // => { '3': 2, '5': 1 }
                     */
                    var countBy = createAggregator(function (result, value, key) {
                        if (hasOwnProperty.call(result, key)) {
                            ++result[key];
                        } else {
                            baseAssignValue(result, key, 1);
                        }
                    });

                    /**
                     * Checks if `predicate` returns truthy for **all** elements of `collection`.
                     * Iteration is stopped once `predicate` returns falsey. The predicate is
                     * invoked with three arguments: (value, index|key, collection).
                     *
                     * **Note:** This method returns `true` for
                     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
                     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
                     * elements of empty collections.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {boolean} Returns `true` if all elements pass the predicate check,
                     *  else `false`.
                     * @example
                     *
                     * _.every([true, 1, null, 'yes'], Boolean);
                     * // => false
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': false },
                     *   { 'user': 'fred',   'age': 40, 'active': false }
                     * ];
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.every(users, { 'user': 'barney', 'active': false });
                     * // => false
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.every(users, ['active', false]);
                     * // => true
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.every(users, 'active');
                     * // => false
                     */
                    function every(collection, predicate, guard) {
                        var func = isArray(collection) ? arrayEvery : baseEvery;
                        if (guard && isIterateeCall(collection, predicate, guard)) {
                            predicate = undefined;
                        }
                        return func(collection, getIteratee(predicate, 3));
                    }

                    /**
                     * Iterates over elements of `collection`, returning an array of all elements
                     * `predicate` returns truthy for. The predicate is invoked with three
                     * arguments: (value, index|key, collection).
                     *
                     * **Note:** Unlike `_.remove`, this method returns a new array.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     * @see _.reject
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': true },
                     *   { 'user': 'fred',   'age': 40, 'active': false }
                     * ];
                     *
                     * _.filter(users, function(o) { return !o.active; });
                     * // => objects for ['fred']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.filter(users, { 'age': 36, 'active': true });
                     * // => objects for ['barney']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.filter(users, ['active', false]);
                     * // => objects for ['fred']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.filter(users, 'active');
                     * // => objects for ['barney']
                     */
                    function filter(collection, predicate) {
                        var func = isArray(collection) ? arrayFilter : baseFilter;
                        return func(collection, getIteratee(predicate, 3));
                    }

                    /**
                     * Iterates over elements of `collection`, returning the first element
                     * `predicate` returns truthy for. The predicate is invoked with three
                     * arguments: (value, index|key, collection).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @returns {*} Returns the matched element, else `undefined`.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'age': 36, 'active': true },
                     *   { 'user': 'fred',    'age': 40, 'active': false },
                     *   { 'user': 'pebbles', 'age': 1,  'active': true }
                     * ];
                     *
                     * _.find(users, function(o) { return o.age < 40; });
                     * // => object for 'barney'
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.find(users, { 'age': 1, 'active': true });
                     * // => object for 'pebbles'
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.find(users, ['active', false]);
                     * // => object for 'fred'
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.find(users, 'active');
                     * // => object for 'barney'
                     */
                    var find = createFind(findIndex);

                    /**
                     * This method is like `_.find` except that it iterates over elements of
                     * `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param {number} [fromIndex=collection.length-1] The index to search from.
                     * @returns {*} Returns the matched element, else `undefined`.
                     * @example
                     *
                     * _.findLast([1, 2, 3, 4], function(n) {
                     *   return n % 2 == 1;
                     * });
                     * // => 3
                     */
                    var findLast = createFind(findLastIndex);

                    /**
                     * Creates a flattened array of values by running each element in `collection`
                     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
                     * with three arguments: (value, index|key, collection).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * function duplicate(n) {
                     *   return [n, n];
                     * }
                     *
                     * _.flatMap([1, 2], duplicate);
                     * // => [1, 1, 2, 2]
                     */
                    function flatMap(collection, iteratee) {
                        return baseFlatten(map(collection, iteratee), 1);
                    }

                    /**
                     * This method is like `_.flatMap` except that it recursively flattens the
                     * mapped results.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * function duplicate(n) {
                     *   return [[[n, n]]];
                     * }
                     *
                     * _.flatMapDeep([1, 2], duplicate);
                     * // => [1, 1, 2, 2]
                     */
                    function flatMapDeep(collection, iteratee) {
                        return baseFlatten(map(collection, iteratee), INFINITY);
                    }

                    /**
                     * This method is like `_.flatMap` except that it recursively flattens the
                     * mapped results up to `depth` times.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {number} [depth=1] The maximum recursion depth.
                     * @returns {Array} Returns the new flattened array.
                     * @example
                     *
                     * function duplicate(n) {
                     *   return [[[n, n]]];
                     * }
                     *
                     * _.flatMapDepth([1, 2], duplicate, 2);
                     * // => [[1, 1], [2, 2]]
                     */
                    function flatMapDepth(collection, iteratee, depth) {
                        depth = depth === undefined ? 1 : toInteger(depth);
                        return baseFlatten(map(collection, iteratee), depth);
                    }

                    /**
                     * Iterates over elements of `collection` and invokes `iteratee` for each element.
                     * The iteratee is invoked with three arguments: (value, index|key, collection).
                     * Iteratee functions may exit iteration early by explicitly returning `false`.
                     *
                     * **Note:** As with other "Collections" methods, objects with a "length"
                     * property are iterated like arrays. To avoid this behavior use `_.forIn`
                     * or `_.forOwn` for object iteration.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @alias each
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     * @see _.forEachRight
                     * @example
                     *
                     * _.forEach([1, 2], function(value) {
                     *   console.log(value);
                     * });
                     * // => Logs `1` then `2`.
                     *
                     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
                     *   console.log(key);
                     * });
                     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                     */
                    function forEach(collection, iteratee) {
                        var func = isArray(collection) ? arrayEach : baseEach;
                        return func(collection, getIteratee(iteratee, 3));
                    }

                    /**
                     * This method is like `_.forEach` except that it iterates over elements of
                     * `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @alias eachRight
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array|Object} Returns `collection`.
                     * @see _.forEach
                     * @example
                     *
                     * _.forEachRight([1, 2], function(value) {
                     *   console.log(value);
                     * });
                     * // => Logs `2` then `1`.
                     */
                    function forEachRight(collection, iteratee) {
                        var func = isArray(collection) ? arrayEachRight : baseEachRight;
                        return func(collection, getIteratee(iteratee, 3));
                    }

                    /**
                     * Creates an object composed of keys generated from the results of running
                     * each element of `collection` thru `iteratee`. The order of grouped values
                     * is determined by the order they occur in `collection`. The corresponding
                     * value of each key is an array of elements responsible for generating the
                     * key. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                     * @returns {Object} Returns the composed aggregate object.
                     * @example
                     *
                     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
                     * // => { '4': [4.2], '6': [6.1, 6.3] }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.groupBy(['one', 'two', 'three'], 'length');
                     * // => { '3': ['one', 'two'], '5': ['three'] }
                     */
                    var groupBy = createAggregator(function (result, value, key) {
                        if (hasOwnProperty.call(result, key)) {
                            result[key].push(value);
                        } else {
                            baseAssignValue(result, key, [value]);
                        }
                    });

                    /**
                     * Checks if `value` is in `collection`. If `collection` is a string, it's
                     * checked for a substring of `value`, otherwise
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * is used for equality comparisons. If `fromIndex` is negative, it's used as
                     * the offset from the end of `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object|string} collection The collection to inspect.
                     * @param {*} value The value to search for.
                     * @param {number} [fromIndex=0] The index to search from.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                     * @returns {boolean} Returns `true` if `value` is found, else `false`.
                     * @example
                     *
                     * _.includes([1, 2, 3], 1);
                     * // => true
                     *
                     * _.includes([1, 2, 3], 1, 2);
                     * // => false
                     *
                     * _.includes({ 'a': 1, 'b': 2 }, 1);
                     * // => true
                     *
                     * _.includes('abcd', 'bc');
                     * // => true
                     */
                    function includes(collection, value, fromIndex, guard) {
                        collection = isArrayLike(collection) ? collection : values(collection);
                        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

                        var length = collection.length;
                        if (fromIndex < 0) {
                            fromIndex = nativeMax(length + fromIndex, 0);
                        }
                        return isString(collection)
                            ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
                            : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
                    }

                    /**
                     * Invokes the method at `path` of each element in `collection`, returning
                     * an array of the results of each invoked method. Any additional arguments
                     * are provided to each invoked method. If `path` is a function, it's invoked
                     * for, and `this` bound to, each element in `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Array|Function|string} path The path of the method to invoke or
                     *  the function invoked per iteration.
                     * @param {...*} [args] The arguments to invoke each method with.
                     * @returns {Array} Returns the array of results.
                     * @example
                     *
                     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
                     * // => [[1, 5, 7], [1, 2, 3]]
                     *
                     * _.invokeMap([123, 456], String.prototype.split, '');
                     * // => [['1', '2', '3'], ['4', '5', '6']]
                     */
                    var invokeMap = baseRest(function (collection, path, args) {
                        var index = -1,
                            isFunc = typeof path == 'function',
                            result = isArrayLike(collection) ? Array(collection.length) : [];

                        baseEach(collection, function (value) {
                            result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
                        });
                        return result;
                    });

                    /**
                     * Creates an object composed of keys generated from the results of running
                     * each element of `collection` thru `iteratee`. The corresponding value of
                     * each key is the last element responsible for generating the key. The
                     * iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
                     * @returns {Object} Returns the composed aggregate object.
                     * @example
                     *
                     * var array = [
                     *   { 'dir': 'left', 'code': 97 },
                     *   { 'dir': 'right', 'code': 100 }
                     * ];
                     *
                     * _.keyBy(array, function(o) {
                     *   return String.fromCharCode(o.code);
                     * });
                     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
                     *
                     * _.keyBy(array, 'dir');
                     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
                     */
                    var keyBy = createAggregator(function (result, value, key) {
                        baseAssignValue(result, key, value);
                    });

                    /**
                     * Creates an array of values by running each element in `collection` thru
                     * `iteratee`. The iteratee is invoked with three arguments:
                     * (value, index|key, collection).
                     *
                     * Many lodash methods are guarded to work as iteratees for methods like
                     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
                     *
                     * The guarded methods are:
                     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
                     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
                     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
                     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new mapped array.
                     * @example
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * _.map([4, 8], square);
                     * // => [16, 64]
                     *
                     * _.map({ 'a': 4, 'b': 8 }, square);
                     * // => [16, 64] (iteration order is not guaranteed)
                     *
                     * var users = [
                     *   { 'user': 'barney' },
                     *   { 'user': 'fred' }
                     * ];
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.map(users, 'user');
                     * // => ['barney', 'fred']
                     */
                    function map(collection, iteratee) {
                        var func = isArray(collection) ? arrayMap : baseMap;
                        return func(collection, getIteratee(iteratee, 3));
                    }

                    /**
                     * This method is like `_.sortBy` except that it allows specifying the sort
                     * orders of the iteratees to sort by. If `orders` is unspecified, all values
                     * are sorted in ascending order. Otherwise, specify an order of "desc" for
                     * descending or "asc" for ascending sort order of corresponding values.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
                     *  The iteratees to sort by.
                     * @param {string[]} [orders] The sort orders of `iteratees`.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
                     * @returns {Array} Returns the new sorted array.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'fred',   'age': 48 },
                     *   { 'user': 'barney', 'age': 34 },
                     *   { 'user': 'fred',   'age': 40 },
                     *   { 'user': 'barney', 'age': 36 }
                     * ];
                     *
                     * // Sort by `user` in ascending order and by `age` in descending order.
                     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
                     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                     */
                    function orderBy(collection, iteratees, orders, guard) {
                        if (collection == null) {
                            return [];
                        }
                        if (!isArray(iteratees)) {
                            iteratees = iteratees == null ? [] : [iteratees];
                        }
                        orders = guard ? undefined : orders;
                        if (!isArray(orders)) {
                            orders = orders == null ? [] : [orders];
                        }
                        return baseOrderBy(collection, iteratees, orders);
                    }

                    /**
                     * Creates an array of elements split into two groups, the first of which
                     * contains elements `predicate` returns truthy for, the second of which
                     * contains elements `predicate` returns falsey for. The predicate is
                     * invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the array of grouped elements.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney',  'age': 36, 'active': false },
                     *   { 'user': 'fred',    'age': 40, 'active': true },
                     *   { 'user': 'pebbles', 'age': 1,  'active': false }
                     * ];
                     *
                     * _.partition(users, function(o) { return o.active; });
                     * // => objects for [['fred'], ['barney', 'pebbles']]
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.partition(users, { 'age': 1, 'active': false });
                     * // => objects for [['pebbles'], ['barney', 'fred']]
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.partition(users, ['active', false]);
                     * // => objects for [['barney', 'pebbles'], ['fred']]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.partition(users, 'active');
                     * // => objects for [['fred'], ['barney', 'pebbles']]
                     */
                    var partition = createAggregator(function (result, value, key) {
                        result[key ? 0 : 1].push(value);
                    }, function () {
                        return [[], []];
                    });

                    /**
                     * Reduces `collection` to a value which is the accumulated result of running
                     * each element in `collection` thru `iteratee`, where each successive
                     * invocation is supplied the return value of the previous. If `accumulator`
                     * is not given, the first element of `collection` is used as the initial
                     * value. The iteratee is invoked with four arguments:
                     * (accumulator, value, index|key, collection).
                     *
                     * Many lodash methods are guarded to work as iteratees for methods like
                     * `_.reduce`, `_.reduceRight`, and `_.transform`.
                     *
                     * The guarded methods are:
                     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
                     * and `sortBy`
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {*} [accumulator] The initial value.
                     * @returns {*} Returns the accumulated value.
                     * @see _.reduceRight
                     * @example
                     *
                     * _.reduce([1, 2], function(sum, n) {
                     *   return sum + n;
                     * }, 0);
                     * // => 3
                     *
                     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                     *   (result[value] || (result[value] = [])).push(key);
                     *   return result;
                     * }, {});
                     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
                     */
                    function reduce(collection, iteratee, accumulator) {
                        var func = isArray(collection) ? arrayReduce : baseReduce,
                            initAccum = arguments.length < 3;

                        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
                    }

                    /**
                     * This method is like `_.reduce` except that it iterates over elements of
                     * `collection` from right to left.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {*} [accumulator] The initial value.
                     * @returns {*} Returns the accumulated value.
                     * @see _.reduce
                     * @example
                     *
                     * var array = [[0, 1], [2, 3], [4, 5]];
                     *
                     * _.reduceRight(array, function(flattened, other) {
                     *   return flattened.concat(other);
                     * }, []);
                     * // => [4, 5, 2, 3, 0, 1]
                     */
                    function reduceRight(collection, iteratee, accumulator) {
                        var func = isArray(collection) ? arrayReduceRight : baseReduce,
                            initAccum = arguments.length < 3;

                        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
                    }

                    /**
                     * The opposite of `_.filter`; this method returns the elements of `collection`
                     * that `predicate` does **not** return truthy for.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the new filtered array.
                     * @see _.filter
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': false },
                     *   { 'user': 'fred',   'age': 40, 'active': true }
                     * ];
                     *
                     * _.reject(users, function(o) { return !o.active; });
                     * // => objects for ['fred']
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.reject(users, { 'age': 40, 'active': true });
                     * // => objects for ['barney']
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.reject(users, ['active', false]);
                     * // => objects for ['fred']
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.reject(users, 'active');
                     * // => objects for ['barney']
                     */
                    function reject(collection, predicate) {
                        var func = isArray(collection) ? arrayFilter : baseFilter;
                        return func(collection, negate(getIteratee(predicate, 3)));
                    }

                    /**
                     * Gets a random element from `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to sample.
                     * @returns {*} Returns the random element.
                     * @example
                     *
                     * _.sample([1, 2, 3, 4]);
                     * // => 2
                     */
                    function sample(collection) {
                        var func = isArray(collection) ? arraySample : baseSample;
                        return func(collection);
                    }

                    /**
                     * Gets `n` random elements at unique keys from `collection` up to the
                     * size of `collection`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to sample.
                     * @param {number} [n=1] The number of elements to sample.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the random elements.
                     * @example
                     *
                     * _.sampleSize([1, 2, 3], 2);
                     * // => [3, 1]
                     *
                     * _.sampleSize([1, 2, 3], 4);
                     * // => [2, 3, 1]
                     */
                    function sampleSize(collection, n, guard) {
                        if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
                            n = 1;
                        } else {
                            n = toInteger(n);
                        }
                        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
                        return func(collection, n);
                    }

                    /**
                     * Creates an array of shuffled values, using a version of the
                     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to shuffle.
                     * @returns {Array} Returns the new shuffled array.
                     * @example
                     *
                     * _.shuffle([1, 2, 3, 4]);
                     * // => [4, 1, 3, 2]
                     */
                    function shuffle(collection) {
                        var func = isArray(collection) ? arrayShuffle : baseShuffle;
                        return func(collection);
                    }

                    /**
                     * Gets the size of `collection` by returning its length for array-like
                     * values or the number of own enumerable string keyed properties for objects.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object|string} collection The collection to inspect.
                     * @returns {number} Returns the collection size.
                     * @example
                     *
                     * _.size([1, 2, 3]);
                     * // => 3
                     *
                     * _.size({ 'a': 1, 'b': 2 });
                     * // => 2
                     *
                     * _.size('pebbles');
                     * // => 7
                     */
                    function size(collection) {
                        if (collection == null) {
                            return 0;
                        }
                        if (isArrayLike(collection)) {
                            return isString(collection) ? stringSize(collection) : collection.length;
                        }
                        var tag = getTag(collection);
                        if (tag == mapTag || tag == setTag) {
                            return collection.size;
                        }
                        return baseKeys(collection).length;
                    }

                    /**
                     * Checks if `predicate` returns truthy for **any** element of `collection`.
                     * Iteration is stopped once `predicate` returns truthy. The predicate is
                     * invoked with three arguments: (value, index|key, collection).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {boolean} Returns `true` if any element passes the predicate check,
                     *  else `false`.
                     * @example
                     *
                     * _.some([null, 0, 'yes', false], Boolean);
                     * // => true
                     *
                     * var users = [
                     *   { 'user': 'barney', 'active': true },
                     *   { 'user': 'fred',   'active': false }
                     * ];
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.some(users, { 'user': 'barney', 'active': false });
                     * // => false
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.some(users, ['active', false]);
                     * // => true
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.some(users, 'active');
                     * // => true
                     */
                    function some(collection, predicate, guard) {
                        var func = isArray(collection) ? arraySome : baseSome;
                        if (guard && isIterateeCall(collection, predicate, guard)) {
                            predicate = undefined;
                        }
                        return func(collection, getIteratee(predicate, 3));
                    }

                    /**
                     * Creates an array of elements, sorted in ascending order by the results of
                     * running each element in a collection thru each iteratee. This method
                     * performs a stable sort, that is, it preserves the original sort order of
                     * equal elements. The iteratees are invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Collection
                     * @param {Array|Object} collection The collection to iterate over.
                     * @param {...(Function|Function[])} [iteratees=[_.identity]]
                     *  The iteratees to sort by.
                     * @returns {Array} Returns the new sorted array.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'fred',   'age': 48 },
                     *   { 'user': 'barney', 'age': 36 },
                     *   { 'user': 'fred',   'age': 40 },
                     *   { 'user': 'barney', 'age': 34 }
                     * ];
                     *
                     * _.sortBy(users, [function(o) { return o.user; }]);
                     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
                     *
                     * _.sortBy(users, ['user', 'age']);
                     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
                     */
                    var sortBy = baseRest(function (collection, iteratees) {
                        if (collection == null) {
                            return [];
                        }
                        var length = iteratees.length;
                        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
                            iteratees = [];
                        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
                            iteratees = [iteratees[0]];
                        }
                        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
                    });

                    /*------------------------------------------------------------------------*/

                    /**
                     * Gets the timestamp of the number of milliseconds that have elapsed since
                     * the Unix epoch (1 January 1970 00:00:00 UTC).
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Date
                     * @returns {number} Returns the timestamp.
                     * @example
                     *
                     * _.defer(function(stamp) {
                     *   console.log(_.now() - stamp);
                     * }, _.now());
                     * // => Logs the number of milliseconds it took for the deferred invocation.
                     */
                    var now = ctxNow || function () {
                        return root.Date.now();
                    };

                    /*------------------------------------------------------------------------*/

                    /**
                     * The opposite of `_.before`; this method creates a function that invokes
                     * `func` once it's called `n` or more times.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {number} n The number of calls before `func` is invoked.
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new restricted function.
                     * @example
                     *
                     * var saves = ['profile', 'settings'];
                     *
                     * var done = _.after(saves.length, function() {
                     *   console.log('done saving!');
                     * });
                     *
                     * _.forEach(saves, function(type) {
                     *   asyncSave({ 'type': type, 'complete': done });
                     * });
                     * // => Logs 'done saving!' after the two async saves have completed.
                     */
                    function after(n, func) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        n = toInteger(n);
                        return function () {
                            if (--n < 1) {
                                return func.apply(this, arguments);
                            }
                        };
                    }

                    /**
                     * Creates a function that invokes `func`, with up to `n` arguments,
                     * ignoring any additional arguments.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} func The function to cap arguments for.
                     * @param {number} [n=func.length] The arity cap.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the new capped function.
                     * @example
                     *
                     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
                     * // => [6, 8, 10]
                     */
                    function ary(func, n, guard) {
                        n = guard ? undefined : n;
                        n = (func && n == null) ? func.length : n;
                        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
                    }

                    /**
                     * Creates a function that invokes `func`, with the `this` binding and arguments
                     * of the created function, while it's called less than `n` times. Subsequent
                     * calls to the created function return the result of the last `func` invocation.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {number} n The number of calls at which `func` is no longer invoked.
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new restricted function.
                     * @example
                     *
                     * jQuery(element).on('click', _.before(5, addContactToList));
                     * // => Allows adding up to 4 contacts to the list.
                     */
                    function before(n, func) {
                        var result;
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        n = toInteger(n);
                        return function () {
                            if (--n > 0) {
                                result = func.apply(this, arguments);
                            }
                            if (n <= 1) {
                                func = undefined;
                            }
                            return result;
                        };
                    }

                    /**
                     * Creates a function that invokes `func` with the `this` binding of `thisArg`
                     * and `partials` prepended to the arguments it receives.
                     *
                     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
                     * may be used as a placeholder for partially applied arguments.
                     *
                     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
                     * property of bound functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to bind.
                     * @param {*} thisArg The `this` binding of `func`.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new bound function.
                     * @example
                     *
                     * function greet(greeting, punctuation) {
                     *   return greeting + ' ' + this.user + punctuation;
                     * }
                     *
                     * var object = { 'user': 'fred' };
                     *
                     * var bound = _.bind(greet, object, 'hi');
                     * bound('!');
                     * // => 'hi fred!'
                     *
                     * // Bound with placeholders.
                     * var bound = _.bind(greet, object, _, '!');
                     * bound('hi');
                     * // => 'hi fred!'
                     */
                    var bind = baseRest(function (func, thisArg, partials) {
                        var bitmask = WRAP_BIND_FLAG;
                        if (partials.length) {
                            var holders = replaceHolders(partials, getHolder(bind));
                            bitmask |= WRAP_PARTIAL_FLAG;
                        }
                        return createWrap(func, bitmask, thisArg, partials, holders);
                    });

                    /**
                     * Creates a function that invokes the method at `object[key]` with `partials`
                     * prepended to the arguments it receives.
                     *
                     * This method differs from `_.bind` by allowing bound functions to reference
                     * methods that may be redefined or don't yet exist. See
                     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
                     * for more details.
                     *
                     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for partially applied arguments.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.10.0
                     * @category Function
                     * @param {Object} object The object to invoke the method on.
                     * @param {string} key The key of the method.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new bound function.
                     * @example
                     *
                     * var object = {
                     *   'user': 'fred',
                     *   'greet': function(greeting, punctuation) {
                     *     return greeting + ' ' + this.user + punctuation;
                     *   }
                     * };
                     *
                     * var bound = _.bindKey(object, 'greet', 'hi');
                     * bound('!');
                     * // => 'hi fred!'
                     *
                     * object.greet = function(greeting, punctuation) {
                     *   return greeting + 'ya ' + this.user + punctuation;
                     * };
                     *
                     * bound('!');
                     * // => 'hiya fred!'
                     *
                     * // Bound with placeholders.
                     * var bound = _.bindKey(object, 'greet', _, '!');
                     * bound('hi');
                     * // => 'hiya fred!'
                     */
                    var bindKey = baseRest(function (object, key, partials) {
                        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
                        if (partials.length) {
                            var holders = replaceHolders(partials, getHolder(bindKey));
                            bitmask |= WRAP_PARTIAL_FLAG;
                        }
                        return createWrap(key, bitmask, object, partials, holders);
                    });

                    /**
                     * Creates a function that accepts arguments of `func` and either invokes
                     * `func` returning its result, if at least `arity` number of arguments have
                     * been provided, or returns a function that accepts the remaining `func`
                     * arguments, and so on. The arity of `func` may be specified if `func.length`
                     * is not sufficient.
                     *
                     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
                     * may be used as a placeholder for provided arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of curried functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Function
                     * @param {Function} func The function to curry.
                     * @param {number} [arity=func.length] The arity of `func`.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the new curried function.
                     * @example
                     *
                     * var abc = function(a, b, c) {
                     *   return [a, b, c];
                     * };
                     *
                     * var curried = _.curry(abc);
                     *
                     * curried(1)(2)(3);
                     * // => [1, 2, 3]
                     *
                     * curried(1, 2)(3);
                     * // => [1, 2, 3]
                     *
                     * curried(1, 2, 3);
                     * // => [1, 2, 3]
                     *
                     * // Curried with placeholders.
                     * curried(1)(_, 3)(2);
                     * // => [1, 2, 3]
                     */
                    function curry(func, arity, guard) {
                        arity = guard ? undefined : arity;
                        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                        result.placeholder = curry.placeholder;
                        return result;
                    }

                    /**
                     * This method is like `_.curry` except that arguments are applied to `func`
                     * in the manner of `_.partialRight` instead of `_.partial`.
                     *
                     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for provided arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of curried functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} func The function to curry.
                     * @param {number} [arity=func.length] The arity of `func`.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the new curried function.
                     * @example
                     *
                     * var abc = function(a, b, c) {
                     *   return [a, b, c];
                     * };
                     *
                     * var curried = _.curryRight(abc);
                     *
                     * curried(3)(2)(1);
                     * // => [1, 2, 3]
                     *
                     * curried(2, 3)(1);
                     * // => [1, 2, 3]
                     *
                     * curried(1, 2, 3);
                     * // => [1, 2, 3]
                     *
                     * // Curried with placeholders.
                     * curried(3)(1, _)(2);
                     * // => [1, 2, 3]
                     */
                    function curryRight(func, arity, guard) {
                        arity = guard ? undefined : arity;
                        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
                        result.placeholder = curryRight.placeholder;
                        return result;
                    }

                    /**
                     * Creates a debounced function that delays invoking `func` until after `wait`
                     * milliseconds have elapsed since the last time the debounced function was
                     * invoked. The debounced function comes with a `cancel` method to cancel
                     * delayed `func` invocations and a `flush` method to immediately invoke them.
                     * Provide `options` to indicate whether `func` should be invoked on the
                     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                     * with the last arguments provided to the debounced function. Subsequent
                     * calls to the debounced function return the result of the last `func`
                     * invocation.
                     *
                     * **Note:** If `leading` and `trailing` options are `true`, `func` is
                     * invoked on the trailing edge of the timeout only if the debounced function
                     * is invoked more than once during the `wait` timeout.
                     *
                     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                     *
                     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                     * for details over the differences between `_.debounce` and `_.throttle`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to debounce.
                     * @param {number} [wait=0] The number of milliseconds to delay.
                     * @param {Object} [options={}] The options object.
                     * @param {boolean} [options.leading=false]
                     *  Specify invoking on the leading edge of the timeout.
                     * @param {number} [options.maxWait]
                     *  The maximum time `func` is allowed to be delayed before it's invoked.
                     * @param {boolean} [options.trailing=true]
                     *  Specify invoking on the trailing edge of the timeout.
                     * @returns {Function} Returns the new debounced function.
                     * @example
                     *
                     * // Avoid costly calculations while the window size is in flux.
                     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                     *
                     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                     * jQuery(element).on('click', _.debounce(sendMail, 300, {
                     *   'leading': true,
                     *   'trailing': false
                     * }));
                     *
                     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                     * var source = new EventSource('/stream');
                     * jQuery(source).on('message', debounced);
                     *
                     * // Cancel the trailing debounced invocation.
                     * jQuery(window).on('popstate', debounced.cancel);
                     */
                    function debounce(func, wait, options) {
                        var lastArgs,
                            lastThis,
                            maxWait,
                            result,
                            timerId,
                            lastCallTime,
                            lastInvokeTime = 0,
                            leading = false,
                            maxing = false,
                            trailing = true;

                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        wait = toNumber(wait) || 0;
                        if (isObject(options)) {
                            leading = !!options.leading;
                            maxing = 'maxWait' in options;
                            maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                            trailing = 'trailing' in options ? !!options.trailing : trailing;
                        }

                        function invokeFunc(time) {
                            var args = lastArgs,
                                thisArg = lastThis;

                            lastArgs = lastThis = undefined;
                            lastInvokeTime = time;
                            result = func.apply(thisArg, args);
                            return result;
                        }

                        function leadingEdge(time) {
                            // Reset any `maxWait` timer.
                            lastInvokeTime = time;
                            // Start the timer for the trailing edge.
                            timerId = setTimeout(timerExpired, wait);
                            // Invoke the leading edge.
                            return leading ? invokeFunc(time) : result;
                        }

                        function remainingWait(time) {
                            var timeSinceLastCall = time - lastCallTime,
                                timeSinceLastInvoke = time - lastInvokeTime,
                                timeWaiting = wait - timeSinceLastCall;

                            return maxing
                                ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
                                : timeWaiting;
                        }

                        function shouldInvoke(time) {
                            var timeSinceLastCall = time - lastCallTime,
                                timeSinceLastInvoke = time - lastInvokeTime;

                            // Either this is the first call, activity has stopped and we're at the
                            // trailing edge, the system time has gone backwards and we're treating
                            // it as the trailing edge, or we've hit the `maxWait` limit.
                            return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
                                (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
                        }

                        function timerExpired() {
                            var time = now();
                            if (shouldInvoke(time)) {
                                return trailingEdge(time);
                            }
                            // Restart the timer.
                            timerId = setTimeout(timerExpired, remainingWait(time));
                        }

                        function trailingEdge(time) {
                            timerId = undefined;

                            // Only invoke if we have `lastArgs` which means `func` has been
                            // debounced at least once.
                            if (trailing && lastArgs) {
                                return invokeFunc(time);
                            }
                            lastArgs = lastThis = undefined;
                            return result;
                        }

                        function cancel() {
                            if (timerId !== undefined) {
                                clearTimeout(timerId);
                            }
                            lastInvokeTime = 0;
                            lastArgs = lastCallTime = lastThis = timerId = undefined;
                        }

                        function flush() {
                            return timerId === undefined ? result : trailingEdge(now());
                        }

                        function debounced() {
                            var time = now(),
                                isInvoking = shouldInvoke(time);

                            lastArgs = arguments;
                            lastThis = this;
                            lastCallTime = time;

                            if (isInvoking) {
                                if (timerId === undefined) {
                                    return leadingEdge(lastCallTime);
                                }
                                if (maxing) {
                                    // Handle invocations in a tight loop.
                                    clearTimeout(timerId);
                                    timerId = setTimeout(timerExpired, wait);
                                    return invokeFunc(lastCallTime);
                                }
                            }
                            if (timerId === undefined) {
                                timerId = setTimeout(timerExpired, wait);
                            }
                            return result;
                        }

                        debounced.cancel = cancel;
                        debounced.flush = flush;
                        return debounced;
                    }

                    /**
                     * Defers invoking the `func` until the current call stack has cleared. Any
                     * additional arguments are provided to `func` when it's invoked.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to defer.
                     * @param {...*} [args] The arguments to invoke `func` with.
                     * @returns {number} Returns the timer id.
                     * @example
                     *
                     * _.defer(function(text) {
                     *   console.log(text);
                     * }, 'deferred');
                     * // => Logs 'deferred' after one millisecond.
                     */
                    var defer = baseRest(function (func, args) {
                        return baseDelay(func, 1, args);
                    });

                    /**
                     * Invokes `func` after `wait` milliseconds. Any additional arguments are
                     * provided to `func` when it's invoked.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to delay.
                     * @param {number} wait The number of milliseconds to delay invocation.
                     * @param {...*} [args] The arguments to invoke `func` with.
                     * @returns {number} Returns the timer id.
                     * @example
                     *
                     * _.delay(function(text) {
                     *   console.log(text);
                     * }, 1000, 'later');
                     * // => Logs 'later' after one second.
                     */
                    var delay = baseRest(function (func, wait, args) {
                        return baseDelay(func, toNumber(wait) || 0, args);
                    });

                    /**
                     * Creates a function that invokes `func` with arguments reversed.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Function
                     * @param {Function} func The function to flip arguments for.
                     * @returns {Function} Returns the new flipped function.
                     * @example
                     *
                     * var flipped = _.flip(function() {
                     *   return _.toArray(arguments);
                     * });
                     *
                     * flipped('a', 'b', 'c', 'd');
                     * // => ['d', 'c', 'b', 'a']
                     */
                    function flip(func) {
                        return createWrap(func, WRAP_FLIP_FLAG);
                    }

                    /**
                     * Creates a function that memoizes the result of `func`. If `resolver` is
                     * provided, it determines the cache key for storing the result based on the
                     * arguments provided to the memoized function. By default, the first argument
                     * provided to the memoized function is used as the map cache key. The `func`
                     * is invoked with the `this` binding of the memoized function.
                     *
                     * **Note:** The cache is exposed as the `cache` property on the memoized
                     * function. Its creation may be customized by replacing the `_.memoize.Cache`
                     * constructor with one whose instances implement the
                     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
                     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to have its output memoized.
                     * @param {Function} [resolver] The function to resolve the cache key.
                     * @returns {Function} Returns the new memoized function.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2 };
                     * var other = { 'c': 3, 'd': 4 };
                     *
                     * var values = _.memoize(_.values);
                     * values(object);
                     * // => [1, 2]
                     *
                     * values(other);
                     * // => [3, 4]
                     *
                     * object.a = 2;
                     * values(object);
                     * // => [1, 2]
                     *
                     * // Modify the result cache.
                     * values.cache.set(object, ['a', 'b']);
                     * values(object);
                     * // => ['a', 'b']
                     *
                     * // Replace `_.memoize.Cache`.
                     * _.memoize.Cache = WeakMap;
                     */
                    function memoize(func, resolver) {
                        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        var memoized = function () {
                            var args = arguments,
                                key = resolver ? resolver.apply(this, args) : args[0],
                                cache = memoized.cache;

                            if (cache.has(key)) {
                                return cache.get(key);
                            }
                            var result = func.apply(this, args);
                            memoized.cache = cache.set(key, result) || cache;
                            return result;
                        };
                        memoized.cache = new (memoize.Cache || MapCache);
                        return memoized;
                    }

                    // Expose `MapCache`.
                    memoize.Cache = MapCache;

                    /**
                     * Creates a function that negates the result of the predicate `func`. The
                     * `func` predicate is invoked with the `this` binding and arguments of the
                     * created function.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} predicate The predicate to negate.
                     * @returns {Function} Returns the new negated function.
                     * @example
                     *
                     * function isEven(n) {
                     *   return n % 2 == 0;
                     * }
                     *
                     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
                     * // => [1, 3, 5]
                     */
                    function negate(predicate) {
                        if (typeof predicate != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        return function () {
                            var args = arguments;
                            switch (args.length) {
                                case 0:
                                    return !predicate.call(this);
                                case 1:
                                    return !predicate.call(this, args[0]);
                                case 2:
                                    return !predicate.call(this, args[0], args[1]);
                                case 3:
                                    return !predicate.call(this, args[0], args[1], args[2]);
                            }
                            return !predicate.apply(this, args);
                        };
                    }

                    /**
                     * Creates a function that is restricted to invoking `func` once. Repeat calls
                     * to the function return the value of the first invocation. The `func` is
                     * invoked with the `this` binding and arguments of the created function.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to restrict.
                     * @returns {Function} Returns the new restricted function.
                     * @example
                     *
                     * var initialize = _.once(createApplication);
                     * initialize();
                     * initialize();
                     * // => `createApplication` is invoked once
                     */
                    function once(func) {
                        return before(2, func);
                    }

                    /**
                     * Creates a function that invokes `func` with its arguments transformed.
                     *
                     * @static
                     * @since 4.0.0
                     * @memberOf _
                     * @category Function
                     * @param {Function} func The function to wrap.
                     * @param {...(Function|Function[])} [transforms=[_.identity]]
                     *  The argument transforms.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * function doubled(n) {
                     *   return n * 2;
                     * }
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * var func = _.overArgs(function(x, y) {
                     *   return [x, y];
                     * }, [square, doubled]);
                     *
                     * func(9, 3);
                     * // => [81, 6]
                     *
                     * func(10, 5);
                     * // => [100, 10]
                     */
                    var overArgs = castRest(function (func, transforms) {
                        transforms = (transforms.length == 1 && isArray(transforms[0]))
                            ? arrayMap(transforms[0], baseUnary(getIteratee()))
                            : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

                        var funcsLength = transforms.length;
                        return baseRest(function (args) {
                            var index = -1,
                                length = nativeMin(args.length, funcsLength);

                            while (++index < length) {
                                args[index] = transforms[index].call(this, args[index]);
                            }
                            return apply(func, this, args);
                        });
                    });

                    /**
                     * Creates a function that invokes `func` with `partials` prepended to the
                     * arguments it receives. This method is like `_.bind` except it does **not**
                     * alter the `this` binding.
                     *
                     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for partially applied arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of partially
                     * applied functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.2.0
                     * @category Function
                     * @param {Function} func The function to partially apply arguments to.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new partially applied function.
                     * @example
                     *
                     * function greet(greeting, name) {
                     *   return greeting + ' ' + name;
                     * }
                     *
                     * var sayHelloTo = _.partial(greet, 'hello');
                     * sayHelloTo('fred');
                     * // => 'hello fred'
                     *
                     * // Partially applied with placeholders.
                     * var greetFred = _.partial(greet, _, 'fred');
                     * greetFred('hi');
                     * // => 'hi fred'
                     */
                    var partial = baseRest(function (func, partials) {
                        var holders = replaceHolders(partials, getHolder(partial));
                        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
                    });

                    /**
                     * This method is like `_.partial` except that partially applied arguments
                     * are appended to the arguments it receives.
                     *
                     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
                     * builds, may be used as a placeholder for partially applied arguments.
                     *
                     * **Note:** This method doesn't set the "length" property of partially
                     * applied functions.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.0.0
                     * @category Function
                     * @param {Function} func The function to partially apply arguments to.
                     * @param {...*} [partials] The arguments to be partially applied.
                     * @returns {Function} Returns the new partially applied function.
                     * @example
                     *
                     * function greet(greeting, name) {
                     *   return greeting + ' ' + name;
                     * }
                     *
                     * var greetFred = _.partialRight(greet, 'fred');
                     * greetFred('hi');
                     * // => 'hi fred'
                     *
                     * // Partially applied with placeholders.
                     * var sayHelloTo = _.partialRight(greet, 'hello', _);
                     * sayHelloTo('fred');
                     * // => 'hello fred'
                     */
                    var partialRight = baseRest(function (func, partials) {
                        var holders = replaceHolders(partials, getHolder(partialRight));
                        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
                    });

                    /**
                     * Creates a function that invokes `func` with arguments arranged according
                     * to the specified `indexes` where the argument value at the first index is
                     * provided as the first argument, the argument value at the second index is
                     * provided as the second argument, and so on.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Function
                     * @param {Function} func The function to rearrange arguments for.
                     * @param {...(number|number[])} indexes The arranged argument indexes.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var rearged = _.rearg(function(a, b, c) {
                     *   return [a, b, c];
                     * }, [2, 0, 1]);
                     *
                     * rearged('b', 'c', 'a')
                     * // => ['a', 'b', 'c']
                     */
                    var rearg = flatRest(function (func, indexes) {
                        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
                    });

                    /**
                     * Creates a function that invokes `func` with the `this` binding of the
                     * created function and arguments from `start` and beyond provided as
                     * an array.
                     *
                     * **Note:** This method is based on the
                     * [rest parameter](https://mdn.io/rest_parameters).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Function
                     * @param {Function} func The function to apply a rest parameter to.
                     * @param {number} [start=func.length-1] The start position of the rest parameter.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var say = _.rest(function(what, names) {
                     *   return what + ' ' + _.initial(names).join(', ') +
                     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
                     * });
                     *
                     * say('hello', 'fred', 'barney', 'pebbles');
                     * // => 'hello fred, barney, & pebbles'
                     */
                    function rest(func, start) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        start = start === undefined ? start : toInteger(start);
                        return baseRest(func, start);
                    }

                    /**
                     * Creates a function that invokes `func` with the `this` binding of the
                     * create function and an array of arguments much like
                     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
                     *
                     * **Note:** This method is based on the
                     * [spread operator](https://mdn.io/spread_operator).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.2.0
                     * @category Function
                     * @param {Function} func The function to spread arguments over.
                     * @param {number} [start=0] The start position of the spread.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var say = _.spread(function(who, what) {
                     *   return who + ' says ' + what;
                     * });
                     *
                     * say(['fred', 'hello']);
                     * // => 'fred says hello'
                     *
                     * var numbers = Promise.all([
                     *   Promise.resolve(40),
                     *   Promise.resolve(36)
                     * ]);
                     *
                     * numbers.then(_.spread(function(x, y) {
                     *   return x + y;
                     * }));
                     * // => a Promise of 76
                     */
                    function spread(func, start) {
                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        start = start == null ? 0 : nativeMax(toInteger(start), 0);
                        return baseRest(function (args) {
                            var array = args[start],
                                otherArgs = castSlice(args, 0, start);

                            if (array) {
                                arrayPush(otherArgs, array);
                            }
                            return apply(func, this, otherArgs);
                        });
                    }

                    /**
                     * Creates a throttled function that only invokes `func` at most once per
                     * every `wait` milliseconds. The throttled function comes with a `cancel`
                     * method to cancel delayed `func` invocations and a `flush` method to
                     * immediately invoke them. Provide `options` to indicate whether `func`
                     * should be invoked on the leading and/or trailing edge of the `wait`
                     * timeout. The `func` is invoked with the last arguments provided to the
                     * throttled function. Subsequent calls to the throttled function return the
                     * result of the last `func` invocation.
                     *
                     * **Note:** If `leading` and `trailing` options are `true`, `func` is
                     * invoked on the trailing edge of the timeout only if the throttled function
                     * is invoked more than once during the `wait` timeout.
                     *
                     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                     *
                     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                     * for details over the differences between `_.throttle` and `_.debounce`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {Function} func The function to throttle.
                     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
                     * @param {Object} [options={}] The options object.
                     * @param {boolean} [options.leading=true]
                     *  Specify invoking on the leading edge of the timeout.
                     * @param {boolean} [options.trailing=true]
                     *  Specify invoking on the trailing edge of the timeout.
                     * @returns {Function} Returns the new throttled function.
                     * @example
                     *
                     * // Avoid excessively updating the position while scrolling.
                     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
                     *
                     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
                     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
                     * jQuery(element).on('click', throttled);
                     *
                     * // Cancel the trailing throttled invocation.
                     * jQuery(window).on('popstate', throttled.cancel);
                     */
                    function throttle(func, wait, options) {
                        var leading = true,
                            trailing = true;

                        if (typeof func != 'function') {
                            throw new TypeError(FUNC_ERROR_TEXT);
                        }
                        if (isObject(options)) {
                            leading = 'leading' in options ? !!options.leading : leading;
                            trailing = 'trailing' in options ? !!options.trailing : trailing;
                        }
                        return debounce(func, wait, {
                            'leading': leading,
                            'maxWait': wait,
                            'trailing': trailing
                        });
                    }

                    /**
                     * Creates a function that accepts up to one argument, ignoring any
                     * additional arguments.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Function
                     * @param {Function} func The function to cap arguments for.
                     * @returns {Function} Returns the new capped function.
                     * @example
                     *
                     * _.map(['6', '8', '10'], _.unary(parseInt));
                     * // => [6, 8, 10]
                     */
                    function unary(func) {
                        return ary(func, 1);
                    }

                    /**
                     * Creates a function that provides `value` to `wrapper` as its first
                     * argument. Any additional arguments provided to the function are appended
                     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
                     * binding of the created function.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Function
                     * @param {*} value The value to wrap.
                     * @param {Function} [wrapper=identity] The wrapper function.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var p = _.wrap(_.escape, function(func, text) {
                     *   return '<p>' + func(text) + '</p>';
                     * });
                     *
                     * p('fred, barney, & pebbles');
                     * // => '<p>fred, barney, &amp; pebbles</p>'
                     */
                    function wrap(value, wrapper) {
                        return partial(castFunction(wrapper), value);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Casts `value` as an array if it's not one.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.4.0
                     * @category Lang
                     * @param {*} value The value to inspect.
                     * @returns {Array} Returns the cast array.
                     * @example
                     *
                     * _.castArray(1);
                     * // => [1]
                     *
                     * _.castArray({ 'a': 1 });
                     * // => [{ 'a': 1 }]
                     *
                     * _.castArray('abc');
                     * // => ['abc']
                     *
                     * _.castArray(null);
                     * // => [null]
                     *
                     * _.castArray(undefined);
                     * // => [undefined]
                     *
                     * _.castArray();
                     * // => []
                     *
                     * var array = [1, 2, 3];
                     * console.log(_.castArray(array) === array);
                     * // => true
                     */
                    function castArray() {
                        if (!arguments.length) {
                            return [];
                        }
                        var value = arguments[0];
                        return isArray(value) ? value : [value];
                    }

                    /**
                     * Creates a shallow clone of `value`.
                     *
                     * **Note:** This method is loosely based on the
                     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
                     * and supports cloning arrays, array buffers, booleans, date objects, maps,
                     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
                     * arrays. The own enumerable properties of `arguments` objects are cloned
                     * as plain objects. An empty object is returned for uncloneable values such
                     * as error objects, functions, DOM nodes, and WeakMaps.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to clone.
                     * @returns {*} Returns the cloned value.
                     * @see _.cloneDeep
                     * @example
                     *
                     * var objects = [{ 'a': 1 }, { 'b': 2 }];
                     *
                     * var shallow = _.clone(objects);
                     * console.log(shallow[0] === objects[0]);
                     * // => true
                     */
                    function clone(value) {
                        return baseClone(value, CLONE_SYMBOLS_FLAG);
                    }

                    /**
                     * This method is like `_.clone` except that it accepts `customizer` which
                     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
                     * cloning is handled by the method instead. The `customizer` is invoked with
                     * up to four arguments; (value [, index|key, object, stack]).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to clone.
                     * @param {Function} [customizer] The function to customize cloning.
                     * @returns {*} Returns the cloned value.
                     * @see _.cloneDeepWith
                     * @example
                     *
                     * function customizer(value) {
                     *   if (_.isElement(value)) {
                     *     return value.cloneNode(false);
                     *   }
                     * }
                     *
                     * var el = _.cloneWith(document.body, customizer);
                     *
                     * console.log(el === document.body);
                     * // => false
                     * console.log(el.nodeName);
                     * // => 'BODY'
                     * console.log(el.childNodes.length);
                     * // => 0
                     */
                    function cloneWith(value, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
                    }

                    /**
                     * This method is like `_.clone` except that it recursively clones `value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.0.0
                     * @category Lang
                     * @param {*} value The value to recursively clone.
                     * @returns {*} Returns the deep cloned value.
                     * @see _.clone
                     * @example
                     *
                     * var objects = [{ 'a': 1 }, { 'b': 2 }];
                     *
                     * var deep = _.cloneDeep(objects);
                     * console.log(deep[0] === objects[0]);
                     * // => false
                     */
                    function cloneDeep(value) {
                        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
                    }

                    /**
                     * This method is like `_.cloneWith` except that it recursively clones `value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to recursively clone.
                     * @param {Function} [customizer] The function to customize cloning.
                     * @returns {*} Returns the deep cloned value.
                     * @see _.cloneWith
                     * @example
                     *
                     * function customizer(value) {
                     *   if (_.isElement(value)) {
                     *     return value.cloneNode(true);
                     *   }
                     * }
                     *
                     * var el = _.cloneDeepWith(document.body, customizer);
                     *
                     * console.log(el === document.body);
                     * // => false
                     * console.log(el.nodeName);
                     * // => 'BODY'
                     * console.log(el.childNodes.length);
                     * // => 20
                     */
                    function cloneDeepWith(value, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
                    }

                    /**
                     * Checks if `object` conforms to `source` by invoking the predicate
                     * properties of `source` with the corresponding property values of `object`.
                     *
                     * **Note:** This method is equivalent to `_.conforms` when `source` is
                     * partially applied.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.14.0
                     * @category Lang
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2 };
                     *
                     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
                     * // => true
                     *
                     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
                     * // => false
                     */
                    function conformsTo(object, source) {
                        return source == null || baseConformsTo(object, source, keys(source));
                    }

                    /**
                     * Performs a
                     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                     * comparison between two values to determine if they are equivalent.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1 };
                     * var other = { 'a': 1 };
                     *
                     * _.eq(object, object);
                     * // => true
                     *
                     * _.eq(object, other);
                     * // => false
                     *
                     * _.eq('a', 'a');
                     * // => true
                     *
                     * _.eq('a', Object('a'));
                     * // => false
                     *
                     * _.eq(NaN, NaN);
                     * // => true
                     */
                    function eq(value, other) {
                        return value === other || (value !== value && other !== other);
                    }

                    /**
                     * Checks if `value` is greater than `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is greater than `other`,
                     *  else `false`.
                     * @see _.lt
                     * @example
                     *
                     * _.gt(3, 1);
                     * // => true
                     *
                     * _.gt(3, 3);
                     * // => false
                     *
                     * _.gt(1, 3);
                     * // => false
                     */
                    var gt = createRelationalOperation(baseGt);

                    /**
                     * Checks if `value` is greater than or equal to `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is greater than or equal to
                     *  `other`, else `false`.
                     * @see _.lte
                     * @example
                     *
                     * _.gte(3, 1);
                     * // => true
                     *
                     * _.gte(3, 3);
                     * // => true
                     *
                     * _.gte(1, 3);
                     * // => false
                     */
                    var gte = createRelationalOperation(function (value, other) {
                        return value >= other;
                    });

                    /**
                     * Checks if `value` is likely an `arguments` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                     *  else `false`.
                     * @example
                     *
                     * _.isArguments(function() { return arguments; }());
                     * // => true
                     *
                     * _.isArguments([1, 2, 3]);
                     * // => false
                     */
                    var isArguments = baseIsArguments(function () {
                        return arguments;
                    }()) ? baseIsArguments : function (value) {
                        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
                            !propertyIsEnumerable.call(value, 'callee');
                    };

                    /**
                     * Checks if `value` is classified as an `Array` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                     * @example
                     *
                     * _.isArray([1, 2, 3]);
                     * // => true
                     *
                     * _.isArray(document.body.children);
                     * // => false
                     *
                     * _.isArray('abc');
                     * // => false
                     *
                     * _.isArray(_.noop);
                     * // => false
                     */
                    var isArray = Array.isArray;

                    /**
                     * Checks if `value` is classified as an `ArrayBuffer` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
                     * @example
                     *
                     * _.isArrayBuffer(new ArrayBuffer(2));
                     * // => true
                     *
                     * _.isArrayBuffer(new Array(2));
                     * // => false
                     */
                    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

                    /**
                     * Checks if `value` is array-like. A value is considered array-like if it's
                     * not a function and has a `value.length` that's an integer greater than or
                     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                     * @example
                     *
                     * _.isArrayLike([1, 2, 3]);
                     * // => true
                     *
                     * _.isArrayLike(document.body.children);
                     * // => true
                     *
                     * _.isArrayLike('abc');
                     * // => true
                     *
                     * _.isArrayLike(_.noop);
                     * // => false
                     */
                    function isArrayLike(value) {
                        return value != null && isLength(value.length) && !isFunction(value);
                    }

                    /**
                     * This method is like `_.isArrayLike` except that it also checks if `value`
                     * is an object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an array-like object,
                     *  else `false`.
                     * @example
                     *
                     * _.isArrayLikeObject([1, 2, 3]);
                     * // => true
                     *
                     * _.isArrayLikeObject(document.body.children);
                     * // => true
                     *
                     * _.isArrayLikeObject('abc');
                     * // => false
                     *
                     * _.isArrayLikeObject(_.noop);
                     * // => false
                     */
                    function isArrayLikeObject(value) {
                        return isObjectLike(value) && isArrayLike(value);
                    }

                    /**
                     * Checks if `value` is classified as a boolean primitive or object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
                     * @example
                     *
                     * _.isBoolean(false);
                     * // => true
                     *
                     * _.isBoolean(null);
                     * // => false
                     */
                    function isBoolean(value) {
                        return value === true || value === false ||
                            (isObjectLike(value) && baseGetTag(value) == boolTag);
                    }

                    /**
                     * Checks if `value` is a buffer.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                     * @example
                     *
                     * _.isBuffer(new Buffer(2));
                     * // => true
                     *
                     * _.isBuffer(new Uint8Array(2));
                     * // => false
                     */
                    var isBuffer = nativeIsBuffer || stubFalse;

                    /**
                     * Checks if `value` is classified as a `Date` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
                     * @example
                     *
                     * _.isDate(new Date);
                     * // => true
                     *
                     * _.isDate('Mon April 23 2012');
                     * // => false
                     */
                    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

                    /**
                     * Checks if `value` is likely a DOM element.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
                     * @example
                     *
                     * _.isElement(document.body);
                     * // => true
                     *
                     * _.isElement('<body>');
                     * // => false
                     */
                    function isElement(value) {
                        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
                    }

                    /**
                     * Checks if `value` is an empty object, collection, map, or set.
                     *
                     * Objects are considered empty if they have no own enumerable string keyed
                     * properties.
                     *
                     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
                     * jQuery-like collections are considered empty if they have a `length` of `0`.
                     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
                     * @example
                     *
                     * _.isEmpty(null);
                     * // => true
                     *
                     * _.isEmpty(true);
                     * // => true
                     *
                     * _.isEmpty(1);
                     * // => true
                     *
                     * _.isEmpty([1, 2, 3]);
                     * // => false
                     *
                     * _.isEmpty({ 'a': 1 });
                     * // => false
                     */
                    function isEmpty(value) {
                        if (value == null) {
                            return true;
                        }
                        if (isArrayLike(value) &&
                            (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
                                isBuffer(value) || isTypedArray(value) || isArguments(value))) {
                            return !value.length;
                        }
                        var tag = getTag(value);
                        if (tag == mapTag || tag == setTag) {
                            return !value.size;
                        }
                        if (isPrototype(value)) {
                            return !baseKeys(value).length;
                        }
                        for (var key in value) {
                            if (hasOwnProperty.call(value, key)) {
                                return false;
                            }
                        }
                        return true;
                    }

                    /**
                     * Performs a deep comparison between two values to determine if they are
                     * equivalent.
                     *
                     * **Note:** This method supports comparing arrays, array buffers, booleans,
                     * date objects, error objects, maps, numbers, `Object` objects, regexes,
                     * sets, strings, symbols, and typed arrays. `Object` objects are compared
                     * by their own, not inherited, enumerable properties. Functions and DOM
                     * nodes are compared by strict equality, i.e. `===`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1 };
                     * var other = { 'a': 1 };
                     *
                     * _.isEqual(object, other);
                     * // => true
                     *
                     * object === other;
                     * // => false
                     */
                    function isEqual(value, other) {
                        return baseIsEqual(value, other);
                    }

                    /**
                     * This method is like `_.isEqual` except that it accepts `customizer` which
                     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                     * are handled by the method instead. The `customizer` is invoked with up to
                     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                     * @example
                     *
                     * function isGreeting(value) {
                     *   return /^h(?:i|ello)$/.test(value);
                     * }
                     *
                     * function customizer(objValue, othValue) {
                     *   if (isGreeting(objValue) && isGreeting(othValue)) {
                     *     return true;
                     *   }
                     * }
                     *
                     * var array = ['hello', 'goodbye'];
                     * var other = ['hi', 'goodbye'];
                     *
                     * _.isEqualWith(array, other, customizer);
                     * // => true
                     */
                    function isEqualWith(value, other, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        var result = customizer ? customizer(value, other) : undefined;
                        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
                    }

                    /**
                     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
                     * `SyntaxError`, `TypeError`, or `URIError` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
                     * @example
                     *
                     * _.isError(new Error);
                     * // => true
                     *
                     * _.isError(Error);
                     * // => false
                     */
                    function isError(value) {
                        if (!isObjectLike(value)) {
                            return false;
                        }
                        var tag = baseGetTag(value);
                        return tag == errorTag || tag == domExcTag ||
                            (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
                    }

                    /**
                     * Checks if `value` is a finite primitive number.
                     *
                     * **Note:** This method is based on
                     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
                     * @example
                     *
                     * _.isFinite(3);
                     * // => true
                     *
                     * _.isFinite(Number.MIN_VALUE);
                     * // => true
                     *
                     * _.isFinite(Infinity);
                     * // => false
                     *
                     * _.isFinite('3');
                     * // => false
                     */
                    function isFinite(value) {
                        return typeof value == 'number' && nativeIsFinite(value);
                    }

                    /**
                     * Checks if `value` is classified as a `Function` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                     * @example
                     *
                     * _.isFunction(_);
                     * // => true
                     *
                     * _.isFunction(/abc/);
                     * // => false
                     */
                    function isFunction(value) {
                        if (!isObject(value)) {
                            return false;
                        }
                        // The use of `Object#toString` avoids issues with the `typeof` operator
                        // in Safari 9 which returns 'object' for typed arrays and other constructors.
                        var tag = baseGetTag(value);
                        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                    }

                    /**
                     * Checks if `value` is an integer.
                     *
                     * **Note:** This method is based on
                     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
                     * @example
                     *
                     * _.isInteger(3);
                     * // => true
                     *
                     * _.isInteger(Number.MIN_VALUE);
                     * // => false
                     *
                     * _.isInteger(Infinity);
                     * // => false
                     *
                     * _.isInteger('3');
                     * // => false
                     */
                    function isInteger(value) {
                        return typeof value == 'number' && value == toInteger(value);
                    }

                    /**
                     * Checks if `value` is a valid array-like length.
                     *
                     * **Note:** This method is loosely based on
                     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                     * @example
                     *
                     * _.isLength(3);
                     * // => true
                     *
                     * _.isLength(Number.MIN_VALUE);
                     * // => false
                     *
                     * _.isLength(Infinity);
                     * // => false
                     *
                     * _.isLength('3');
                     * // => false
                     */
                    function isLength(value) {
                        return typeof value == 'number' &&
                            value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                    }

                    /**
                     * Checks if `value` is the
                     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                     * @example
                     *
                     * _.isObject({});
                     * // => true
                     *
                     * _.isObject([1, 2, 3]);
                     * // => true
                     *
                     * _.isObject(_.noop);
                     * // => true
                     *
                     * _.isObject(null);
                     * // => false
                     */
                    function isObject(value) {
                        var type = typeof value;
                        return value != null && (type == 'object' || type == 'function');
                    }

                    /**
                     * Checks if `value` is object-like. A value is object-like if it's not `null`
                     * and has a `typeof` result of "object".
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                     * @example
                     *
                     * _.isObjectLike({});
                     * // => true
                     *
                     * _.isObjectLike([1, 2, 3]);
                     * // => true
                     *
                     * _.isObjectLike(_.noop);
                     * // => false
                     *
                     * _.isObjectLike(null);
                     * // => false
                     */
                    function isObjectLike(value) {
                        return value != null && typeof value == 'object';
                    }

                    /**
                     * Checks if `value` is classified as a `Map` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
                     * @example
                     *
                     * _.isMap(new Map);
                     * // => true
                     *
                     * _.isMap(new WeakMap);
                     * // => false
                     */
                    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

                    /**
                     * Performs a partial deep comparison between `object` and `source` to
                     * determine if `object` contains equivalent property values.
                     *
                     * **Note:** This method is equivalent to `_.matches` when `source` is
                     * partially applied.
                     *
                     * Partial comparisons will match empty array and empty object `source`
                     * values against any array or object value, respectively. See `_.isEqual`
                     * for a list of supported value comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property values to match.
                     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2 };
                     *
                     * _.isMatch(object, { 'b': 2 });
                     * // => true
                     *
                     * _.isMatch(object, { 'b': 1 });
                     * // => false
                     */
                    function isMatch(object, source) {
                        return object === source || baseIsMatch(object, source, getMatchData(source));
                    }

                    /**
                     * This method is like `_.isMatch` except that it accepts `customizer` which
                     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
                     * are handled by the method instead. The `customizer` is invoked with five
                     * arguments: (objValue, srcValue, index|key, object, source).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {Object} object The object to inspect.
                     * @param {Object} source The object of property values to match.
                     * @param {Function} [customizer] The function to customize comparisons.
                     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
                     * @example
                     *
                     * function isGreeting(value) {
                     *   return /^h(?:i|ello)$/.test(value);
                     * }
                     *
                     * function customizer(objValue, srcValue) {
                     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
                     *     return true;
                     *   }
                     * }
                     *
                     * var object = { 'greeting': 'hello' };
                     * var source = { 'greeting': 'hi' };
                     *
                     * _.isMatchWith(object, source, customizer);
                     * // => true
                     */
                    function isMatchWith(object, source, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return baseIsMatch(object, source, getMatchData(source), customizer);
                    }

                    /**
                     * Checks if `value` is `NaN`.
                     *
                     * **Note:** This method is based on
                     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
                     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
                     * `undefined` and other non-number values.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
                     * @example
                     *
                     * _.isNaN(NaN);
                     * // => true
                     *
                     * _.isNaN(new Number(NaN));
                     * // => true
                     *
                     * isNaN(undefined);
                     * // => true
                     *
                     * _.isNaN(undefined);
                     * // => false
                     */
                    function isNaN(value) {
                        // An `NaN` primitive is the only value that is not equal to itself.
                        // Perform the `toStringTag` check first to avoid errors with some
                        // ActiveX objects in IE.
                        return isNumber(value) && value != +value;
                    }

                    /**
                     * Checks if `value` is a pristine native function.
                     *
                     * **Note:** This method can't reliably detect native functions in the presence
                     * of the core-js package because core-js circumvents this kind of detection.
                     * Despite multiple requests, the core-js maintainer has made it clear: any
                     * attempt to fix the detection will be obstructed. As a result, we're left
                     * with little choice but to throw an error. Unfortunately, this also affects
                     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
                     * which rely on core-js.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a native function,
                     *  else `false`.
                     * @example
                     *
                     * _.isNative(Array.prototype.push);
                     * // => true
                     *
                     * _.isNative(_);
                     * // => false
                     */
                    function isNative(value) {
                        if (isMaskable(value)) {
                            throw new Error(CORE_ERROR_TEXT);
                        }
                        return baseIsNative(value);
                    }

                    /**
                     * Checks if `value` is `null`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
                     * @example
                     *
                     * _.isNull(null);
                     * // => true
                     *
                     * _.isNull(void 0);
                     * // => false
                     */
                    function isNull(value) {
                        return value === null;
                    }

                    /**
                     * Checks if `value` is `null` or `undefined`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
                     * @example
                     *
                     * _.isNil(null);
                     * // => true
                     *
                     * _.isNil(void 0);
                     * // => true
                     *
                     * _.isNil(NaN);
                     * // => false
                     */
                    function isNil(value) {
                        return value == null;
                    }

                    /**
                     * Checks if `value` is classified as a `Number` primitive or object.
                     *
                     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
                     * classified as numbers, use the `_.isFinite` method.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
                     * @example
                     *
                     * _.isNumber(3);
                     * // => true
                     *
                     * _.isNumber(Number.MIN_VALUE);
                     * // => true
                     *
                     * _.isNumber(Infinity);
                     * // => true
                     *
                     * _.isNumber('3');
                     * // => false
                     */
                    function isNumber(value) {
                        return typeof value == 'number' ||
                            (isObjectLike(value) && baseGetTag(value) == numberTag);
                    }

                    /**
                     * Checks if `value` is a plain object, that is, an object created by the
                     * `Object` constructor or one with a `[[Prototype]]` of `null`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.8.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     * }
                     *
                     * _.isPlainObject(new Foo);
                     * // => false
                     *
                     * _.isPlainObject([1, 2, 3]);
                     * // => false
                     *
                     * _.isPlainObject({ 'x': 0, 'y': 0 });
                     * // => true
                     *
                     * _.isPlainObject(Object.create(null));
                     * // => true
                     */
                    function isPlainObject(value) {
                        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                            return false;
                        }
                        var proto = getPrototype(value);
                        if (proto === null) {
                            return true;
                        }
                        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                        return typeof Ctor == 'function' && Ctor instanceof Ctor &&
                            funcToString.call(Ctor) == objectCtorString;
                    }

                    /**
                     * Checks if `value` is classified as a `RegExp` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.1.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
                     * @example
                     *
                     * _.isRegExp(/abc/);
                     * // => true
                     *
                     * _.isRegExp('/abc/');
                     * // => false
                     */
                    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

                    /**
                     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
                     * double precision number which isn't the result of a rounded unsafe integer.
                     *
                     * **Note:** This method is based on
                     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
                     * @example
                     *
                     * _.isSafeInteger(3);
                     * // => true
                     *
                     * _.isSafeInteger(Number.MIN_VALUE);
                     * // => false
                     *
                     * _.isSafeInteger(Infinity);
                     * // => false
                     *
                     * _.isSafeInteger('3');
                     * // => false
                     */
                    function isSafeInteger(value) {
                        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
                    }

                    /**
                     * Checks if `value` is classified as a `Set` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
                     * @example
                     *
                     * _.isSet(new Set);
                     * // => true
                     *
                     * _.isSet(new WeakSet);
                     * // => false
                     */
                    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

                    /**
                     * Checks if `value` is classified as a `String` primitive or object.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
                     * @example
                     *
                     * _.isString('abc');
                     * // => true
                     *
                     * _.isString(1);
                     * // => false
                     */
                    function isString(value) {
                        return typeof value == 'string' ||
                            (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
                    }

                    /**
                     * Checks if `value` is classified as a `Symbol` primitive or object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                     * @example
                     *
                     * _.isSymbol(Symbol.iterator);
                     * // => true
                     *
                     * _.isSymbol('abc');
                     * // => false
                     */
                    function isSymbol(value) {
                        return typeof value == 'symbol' ||
                            (isObjectLike(value) && baseGetTag(value) == symbolTag);
                    }

                    /**
                     * Checks if `value` is classified as a typed array.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                     * @example
                     *
                     * _.isTypedArray(new Uint8Array);
                     * // => true
                     *
                     * _.isTypedArray([]);
                     * // => false
                     */
                    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

                    /**
                     * Checks if `value` is `undefined`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
                     * @example
                     *
                     * _.isUndefined(void 0);
                     * // => true
                     *
                     * _.isUndefined(null);
                     * // => false
                     */
                    function isUndefined(value) {
                        return value === undefined;
                    }

                    /**
                     * Checks if `value` is classified as a `WeakMap` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
                     * @example
                     *
                     * _.isWeakMap(new WeakMap);
                     * // => true
                     *
                     * _.isWeakMap(new Map);
                     * // => false
                     */
                    function isWeakMap(value) {
                        return isObjectLike(value) && getTag(value) == weakMapTag;
                    }

                    /**
                     * Checks if `value` is classified as a `WeakSet` object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.3.0
                     * @category Lang
                     * @param {*} value The value to check.
                     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
                     * @example
                     *
                     * _.isWeakSet(new WeakSet);
                     * // => true
                     *
                     * _.isWeakSet(new Set);
                     * // => false
                     */
                    function isWeakSet(value) {
                        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
                    }

                    /**
                     * Checks if `value` is less than `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is less than `other`,
                     *  else `false`.
                     * @see _.gt
                     * @example
                     *
                     * _.lt(1, 3);
                     * // => true
                     *
                     * _.lt(3, 3);
                     * // => false
                     *
                     * _.lt(3, 1);
                     * // => false
                     */
                    var lt = createRelationalOperation(baseLt);

                    /**
                     * Checks if `value` is less than or equal to `other`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.9.0
                     * @category Lang
                     * @param {*} value The value to compare.
                     * @param {*} other The other value to compare.
                     * @returns {boolean} Returns `true` if `value` is less than or equal to
                     *  `other`, else `false`.
                     * @see _.gte
                     * @example
                     *
                     * _.lte(1, 3);
                     * // => true
                     *
                     * _.lte(3, 3);
                     * // => true
                     *
                     * _.lte(3, 1);
                     * // => false
                     */
                    var lte = createRelationalOperation(function (value, other) {
                        return value <= other;
                    });

                    /**
                     * Converts `value` to an array.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {Array} Returns the converted array.
                     * @example
                     *
                     * _.toArray({ 'a': 1, 'b': 2 });
                     * // => [1, 2]
                     *
                     * _.toArray('abc');
                     * // => ['a', 'b', 'c']
                     *
                     * _.toArray(1);
                     * // => []
                     *
                     * _.toArray(null);
                     * // => []
                     */
                    function toArray(value) {
                        if (!value) {
                            return [];
                        }
                        if (isArrayLike(value)) {
                            return isString(value) ? stringToArray(value) : copyArray(value);
                        }
                        if (symIterator && value[symIterator]) {
                            return iteratorToArray(value[symIterator]());
                        }
                        var tag = getTag(value),
                            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

                        return func(value);
                    }

                    /**
                     * Converts `value` to a finite number.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.12.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted number.
                     * @example
                     *
                     * _.toFinite(3.2);
                     * // => 3.2
                     *
                     * _.toFinite(Number.MIN_VALUE);
                     * // => 5e-324
                     *
                     * _.toFinite(Infinity);
                     * // => 1.7976931348623157e+308
                     *
                     * _.toFinite('3.2');
                     * // => 3.2
                     */
                    function toFinite(value) {
                        if (!value) {
                            return value === 0 ? value : 0;
                        }
                        value = toNumber(value);
                        if (value === INFINITY || value === -INFINITY) {
                            var sign = (value < 0 ? -1 : 1);
                            return sign * MAX_INTEGER;
                        }
                        return value === value ? value : 0;
                    }

                    /**
                     * Converts `value` to an integer.
                     *
                     * **Note:** This method is loosely based on
                     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.toInteger(3.2);
                     * // => 3
                     *
                     * _.toInteger(Number.MIN_VALUE);
                     * // => 0
                     *
                     * _.toInteger(Infinity);
                     * // => 1.7976931348623157e+308
                     *
                     * _.toInteger('3.2');
                     * // => 3
                     */
                    function toInteger(value) {
                        var result = toFinite(value),
                            remainder = result % 1;

                        return result === result ? (remainder ? result - remainder : result) : 0;
                    }

                    /**
                     * Converts `value` to an integer suitable for use as the length of an
                     * array-like object.
                     *
                     * **Note:** This method is based on
                     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.toLength(3.2);
                     * // => 3
                     *
                     * _.toLength(Number.MIN_VALUE);
                     * // => 0
                     *
                     * _.toLength(Infinity);
                     * // => 4294967295
                     *
                     * _.toLength('3.2');
                     * // => 3
                     */
                    function toLength(value) {
                        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
                    }

                    /**
                     * Converts `value` to a number.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to process.
                     * @returns {number} Returns the number.
                     * @example
                     *
                     * _.toNumber(3.2);
                     * // => 3.2
                     *
                     * _.toNumber(Number.MIN_VALUE);
                     * // => 5e-324
                     *
                     * _.toNumber(Infinity);
                     * // => Infinity
                     *
                     * _.toNumber('3.2');
                     * // => 3.2
                     */
                    function toNumber(value) {
                        if (typeof value == 'number') {
                            return value;
                        }
                        if (isSymbol(value)) {
                            return NAN;
                        }
                        if (isObject(value)) {
                            var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                            value = isObject(other) ? (other + '') : other;
                        }
                        if (typeof value != 'string') {
                            return value === 0 ? value : +value;
                        }
                        value = value.replace(reTrim, '');
                        var isBinary = reIsBinary.test(value);
                        return (isBinary || reIsOctal.test(value))
                            ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
                            : (reIsBadHex.test(value) ? NAN : +value);
                    }

                    /**
                     * Converts `value` to a plain object flattening inherited enumerable string
                     * keyed properties of `value` to own properties of the plain object.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {Object} Returns the converted plain object.
                     * @example
                     *
                     * function Foo() {
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.assign({ 'a': 1 }, new Foo);
                     * // => { 'a': 1, 'b': 2 }
                     *
                     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                     * // => { 'a': 1, 'b': 2, 'c': 3 }
                     */
                    function toPlainObject(value) {
                        return copyObject(value, keysIn(value));
                    }

                    /**
                     * Converts `value` to a safe integer. A safe integer can be compared and
                     * represented correctly.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.toSafeInteger(3.2);
                     * // => 3
                     *
                     * _.toSafeInteger(Number.MIN_VALUE);
                     * // => 0
                     *
                     * _.toSafeInteger(Infinity);
                     * // => 9007199254740991
                     *
                     * _.toSafeInteger('3.2');
                     * // => 3
                     */
                    function toSafeInteger(value) {
                        return value
                            ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
                            : (value === 0 ? value : 0);
                    }

                    /**
                     * Converts `value` to a string. An empty string is returned for `null`
                     * and `undefined` values. The sign of `-0` is preserved.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Lang
                     * @param {*} value The value to convert.
                     * @returns {string} Returns the converted string.
                     * @example
                     *
                     * _.toString(null);
                     * // => ''
                     *
                     * _.toString(-0);
                     * // => '-0'
                     *
                     * _.toString([1, 2, 3]);
                     * // => '1,2,3'
                     */
                    function toString(value) {
                        return value == null ? '' : baseToString(value);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Assigns own enumerable string keyed properties of source objects to the
                     * destination object. Source objects are applied from left to right.
                     * Subsequent sources overwrite property assignments of previous sources.
                     *
                     * **Note:** This method mutates `object` and is loosely based on
                     * [`Object.assign`](https://mdn.io/Object/assign).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.10.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.assignIn
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     * }
                     *
                     * function Bar() {
                     *   this.c = 3;
                     * }
                     *
                     * Foo.prototype.b = 2;
                     * Bar.prototype.d = 4;
                     *
                     * _.assign({ 'a': 0 }, new Foo, new Bar);
                     * // => { 'a': 1, 'c': 3 }
                     */
                    var assign = createAssigner(function (object, source) {
                        if (isPrototype(source) || isArrayLike(source)) {
                            copyObject(source, keys(source), object);
                            return;
                        }
                        for (var key in source) {
                            if (hasOwnProperty.call(source, key)) {
                                assignValue(object, key, source[key]);
                            }
                        }
                    });

                    /**
                     * This method is like `_.assign` except that it iterates over own and
                     * inherited source properties.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias extend
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.assign
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     * }
                     *
                     * function Bar() {
                     *   this.c = 3;
                     * }
                     *
                     * Foo.prototype.b = 2;
                     * Bar.prototype.d = 4;
                     *
                     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
                     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
                     */
                    var assignIn = createAssigner(function (object, source) {
                        copyObject(source, keysIn(source), object);
                    });

                    /**
                     * This method is like `_.assignIn` except that it accepts `customizer`
                     * which is invoked to produce the assigned values. If `customizer` returns
                     * `undefined`, assignment is handled by the method instead. The `customizer`
                     * is invoked with five arguments: (objValue, srcValue, key, object, source).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias extendWith
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} sources The source objects.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @see _.assignWith
                     * @example
                     *
                     * function customizer(objValue, srcValue) {
                     *   return _.isUndefined(objValue) ? srcValue : objValue;
                     * }
                     *
                     * var defaults = _.partialRight(_.assignInWith, customizer);
                     *
                     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                     * // => { 'a': 1, 'b': 2 }
                     */
                    var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {
                        copyObject(source, keysIn(source), object, customizer);
                    });

                    /**
                     * This method is like `_.assign` except that it accepts `customizer`
                     * which is invoked to produce the assigned values. If `customizer` returns
                     * `undefined`, assignment is handled by the method instead. The `customizer`
                     * is invoked with five arguments: (objValue, srcValue, key, object, source).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} sources The source objects.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @see _.assignInWith
                     * @example
                     *
                     * function customizer(objValue, srcValue) {
                     *   return _.isUndefined(objValue) ? srcValue : objValue;
                     * }
                     *
                     * var defaults = _.partialRight(_.assignWith, customizer);
                     *
                     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                     * // => { 'a': 1, 'b': 2 }
                     */
                    var assignWith = createAssigner(function (object, source, srcIndex, customizer) {
                        copyObject(source, keys(source), object, customizer);
                    });

                    /**
                     * Creates an array of values corresponding to `paths` of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.0.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {...(string|string[])} [paths] The property paths to pick.
                     * @returns {Array} Returns the picked values.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
                     *
                     * _.at(object, ['a[0].b.c', 'a[1]']);
                     * // => [3, 4]
                     */
                    var at = flatRest(baseAt);

                    /**
                     * Creates an object that inherits from the `prototype` object. If a
                     * `properties` object is given, its own enumerable string keyed properties
                     * are assigned to the created object.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.3.0
                     * @category Object
                     * @param {Object} prototype The object to inherit from.
                     * @param {Object} [properties] The properties to assign to the object.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * function Shape() {
                     *   this.x = 0;
                     *   this.y = 0;
                     * }
                     *
                     * function Circle() {
                     *   Shape.call(this);
                     * }
                     *
                     * Circle.prototype = _.create(Shape.prototype, {
                     *   'constructor': Circle
                     * });
                     *
                     * var circle = new Circle;
                     * circle instanceof Circle;
                     * // => true
                     *
                     * circle instanceof Shape;
                     * // => true
                     */
                    function create(prototype, properties) {
                        var result = baseCreate(prototype);
                        return properties == null ? result : baseAssign(result, properties);
                    }

                    /**
                     * Assigns own and inherited enumerable string keyed properties of source
                     * objects to the destination object for all destination properties that
                     * resolve to `undefined`. Source objects are applied from left to right.
                     * Once a property is set, additional values of the same property are ignored.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.defaultsDeep
                     * @example
                     *
                     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
                     * // => { 'a': 1, 'b': 2 }
                     */
                    var defaults = baseRest(function (object, sources) {
                        object = Object(object);

                        var index = -1;
                        var length = sources.length;
                        var guard = length > 2 ? sources[2] : undefined;

                        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                            length = 1;
                        }

                        while (++index < length) {
                            var source = sources[index];
                            var props = keysIn(source);
                            var propsIndex = -1;
                            var propsLength = props.length;

                            while (++propsIndex < propsLength) {
                                var key = props[propsIndex];
                                var value = object[key];

                                if (value === undefined ||
                                    (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
                                    object[key] = source[key];
                                }
                            }
                        }

                        return object;
                    });

                    /**
                     * This method is like `_.defaults` except that it recursively assigns
                     * default properties.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @see _.defaults
                     * @example
                     *
                     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
                     * // => { 'a': { 'b': 2, 'c': 3 } }
                     */
                    var defaultsDeep = baseRest(function (args) {
                        args.push(undefined, customDefaultsMerge);
                        return apply(mergeWith, undefined, args);
                    });

                    /**
                     * This method is like `_.find` except that it returns the key of the first
                     * element `predicate` returns truthy for instead of the element itself.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {string|undefined} Returns the key of the matched element,
                     *  else `undefined`.
                     * @example
                     *
                     * var users = {
                     *   'barney':  { 'age': 36, 'active': true },
                     *   'fred':    { 'age': 40, 'active': false },
                     *   'pebbles': { 'age': 1,  'active': true }
                     * };
                     *
                     * _.findKey(users, function(o) { return o.age < 40; });
                     * // => 'barney' (iteration order is not guaranteed)
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findKey(users, { 'age': 1, 'active': true });
                     * // => 'pebbles'
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findKey(users, ['active', false]);
                     * // => 'fred'
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findKey(users, 'active');
                     * // => 'barney'
                     */
                    function findKey(object, predicate) {
                        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
                    }

                    /**
                     * This method is like `_.findKey` except that it iterates over elements of
                     * a collection in the opposite order.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @param {Function} [predicate=_.identity] The function invoked per iteration.
                     * @returns {string|undefined} Returns the key of the matched element,
                     *  else `undefined`.
                     * @example
                     *
                     * var users = {
                     *   'barney':  { 'age': 36, 'active': true },
                     *   'fred':    { 'age': 40, 'active': false },
                     *   'pebbles': { 'age': 1,  'active': true }
                     * };
                     *
                     * _.findLastKey(users, function(o) { return o.age < 40; });
                     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.findLastKey(users, { 'age': 36, 'active': true });
                     * // => 'barney'
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.findLastKey(users, ['active', false]);
                     * // => 'fred'
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.findLastKey(users, 'active');
                     * // => 'pebbles'
                     */
                    function findLastKey(object, predicate) {
                        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
                    }

                    /**
                     * Iterates over own and inherited enumerable string keyed properties of an
                     * object and invokes `iteratee` for each property. The iteratee is invoked
                     * with three arguments: (value, key, object). Iteratee functions may exit
                     * iteration early by explicitly returning `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.3.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forInRight
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forIn(new Foo, function(value, key) {
                     *   console.log(key);
                     * });
                     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
                     */
                    function forIn(object, iteratee) {
                        return object == null
                            ? object
                            : baseFor(object, getIteratee(iteratee, 3), keysIn);
                    }

                    /**
                     * This method is like `_.forIn` except that it iterates over properties of
                     * `object` in the opposite order.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forIn
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forInRight(new Foo, function(value, key) {
                     *   console.log(key);
                     * });
                     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
                     */
                    function forInRight(object, iteratee) {
                        return object == null
                            ? object
                            : baseForRight(object, getIteratee(iteratee, 3), keysIn);
                    }

                    /**
                     * Iterates over own enumerable string keyed properties of an object and
                     * invokes `iteratee` for each property. The iteratee is invoked with three
                     * arguments: (value, key, object). Iteratee functions may exit iteration
                     * early by explicitly returning `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.3.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forOwnRight
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forOwn(new Foo, function(value, key) {
                     *   console.log(key);
                     * });
                     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
                     */
                    function forOwn(object, iteratee) {
                        return object && baseForOwn(object, getIteratee(iteratee, 3));
                    }

                    /**
                     * This method is like `_.forOwn` except that it iterates over properties of
                     * `object` in the opposite order.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.0.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns `object`.
                     * @see _.forOwn
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.forOwnRight(new Foo, function(value, key) {
                     *   console.log(key);
                     * });
                     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
                     */
                    function forOwnRight(object, iteratee) {
                        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
                    }

                    /**
                     * Creates an array of function property names from own enumerable properties
                     * of `object`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @returns {Array} Returns the function names.
                     * @see _.functionsIn
                     * @example
                     *
                     * function Foo() {
                     *   this.a = _.constant('a');
                     *   this.b = _.constant('b');
                     * }
                     *
                     * Foo.prototype.c = _.constant('c');
                     *
                     * _.functions(new Foo);
                     * // => ['a', 'b']
                     */
                    function functions(object) {
                        return object == null ? [] : baseFunctions(object, keys(object));
                    }

                    /**
                     * Creates an array of function property names from own and inherited
                     * enumerable properties of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to inspect.
                     * @returns {Array} Returns the function names.
                     * @see _.functions
                     * @example
                     *
                     * function Foo() {
                     *   this.a = _.constant('a');
                     *   this.b = _.constant('b');
                     * }
                     *
                     * Foo.prototype.c = _.constant('c');
                     *
                     * _.functionsIn(new Foo);
                     * // => ['a', 'b', 'c']
                     */
                    function functionsIn(object) {
                        return object == null ? [] : baseFunctions(object, keysIn(object));
                    }

                    /**
                     * Gets the value at `path` of `object`. If the resolved value is
                     * `undefined`, the `defaultValue` is returned in its place.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the property to get.
                     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                     * @returns {*} Returns the resolved value.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                     *
                     * _.get(object, 'a[0].b.c');
                     * // => 3
                     *
                     * _.get(object, ['a', '0', 'b', 'c']);
                     * // => 3
                     *
                     * _.get(object, 'a.b.c', 'default');
                     * // => 'default'
                     */
                    function get(object, path, defaultValue) {
                        var result = object == null ? undefined : baseGet(object, path);
                        return result === undefined ? defaultValue : result;
                    }

                    /**
                     * Checks if `path` is a direct property of `object`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path to check.
                     * @returns {boolean} Returns `true` if `path` exists, else `false`.
                     * @example
                     *
                     * var object = { 'a': { 'b': 2 } };
                     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
                     *
                     * _.has(object, 'a');
                     * // => true
                     *
                     * _.has(object, 'a.b');
                     * // => true
                     *
                     * _.has(object, ['a', 'b']);
                     * // => true
                     *
                     * _.has(other, 'a');
                     * // => false
                     */
                    function has(object, path) {
                        return object != null && hasPath(object, path, baseHas);
                    }

                    /**
                     * Checks if `path` is a direct or inherited property of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path to check.
                     * @returns {boolean} Returns `true` if `path` exists, else `false`.
                     * @example
                     *
                     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
                     *
                     * _.hasIn(object, 'a');
                     * // => true
                     *
                     * _.hasIn(object, 'a.b');
                     * // => true
                     *
                     * _.hasIn(object, ['a', 'b']);
                     * // => true
                     *
                     * _.hasIn(object, 'b');
                     * // => false
                     */
                    function hasIn(object, path) {
                        return object != null && hasPath(object, path, baseHasIn);
                    }

                    /**
                     * Creates an object composed of the inverted keys and values of `object`.
                     * If `object` contains duplicate values, subsequent values overwrite
                     * property assignments of previous values.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.7.0
                     * @category Object
                     * @param {Object} object The object to invert.
                     * @returns {Object} Returns the new inverted object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2, 'c': 1 };
                     *
                     * _.invert(object);
                     * // => { '1': 'c', '2': 'b' }
                     */
                    var invert = createInverter(function (result, value, key) {
                        if (value != null &&
                            typeof value.toString != 'function') {
                            value = nativeObjectToString.call(value);
                        }

                        result[value] = key;
                    }, constant(identity));

                    /**
                     * This method is like `_.invert` except that the inverted object is generated
                     * from the results of running each element of `object` thru `iteratee`. The
                     * corresponding inverted value of each inverted key is an array of keys
                     * responsible for generating the inverted value. The iteratee is invoked
                     * with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.1.0
                     * @category Object
                     * @param {Object} object The object to invert.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {Object} Returns the new inverted object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': 2, 'c': 1 };
                     *
                     * _.invertBy(object);
                     * // => { '1': ['a', 'c'], '2': ['b'] }
                     *
                     * _.invertBy(object, function(value) {
                     *   return 'group' + value;
                     * });
                     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
                     */
                    var invertBy = createInverter(function (result, value, key) {
                        if (value != null &&
                            typeof value.toString != 'function') {
                            value = nativeObjectToString.call(value);
                        }

                        if (hasOwnProperty.call(result, value)) {
                            result[value].push(key);
                        } else {
                            result[value] = [key];
                        }
                    }, getIteratee);

                    /**
                     * Invokes the method at `path` of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the method to invoke.
                     * @param {...*} [args] The arguments to invoke the method with.
                     * @returns {*} Returns the result of the invoked method.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
                     *
                     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
                     * // => [2, 3]
                     */
                    var invoke = baseRest(baseInvoke);

                    /**
                     * Creates an array of the own enumerable property names of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects. See the
                     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                     * for more details.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.keys(new Foo);
                     * // => ['a', 'b'] (iteration order is not guaranteed)
                     *
                     * _.keys('hi');
                     * // => ['0', '1']
                     */
                    function keys(object) {
                        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                    }

                    /**
                     * Creates an array of the own and inherited enumerable property names of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property names.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.keysIn(new Foo);
                     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                     */
                    function keysIn(object) {
                        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                    }

                    /**
                     * The opposite of `_.mapValues`; this method creates an object with the
                     * same values as `object` and keys generated by running each own enumerable
                     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
                     * with three arguments: (value, key, object).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.8.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns the new mapped object.
                     * @see _.mapValues
                     * @example
                     *
                     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
                     *   return key + value;
                     * });
                     * // => { 'a1': 1, 'b2': 2 }
                     */
                    function mapKeys(object, iteratee) {
                        var result = {};
                        iteratee = getIteratee(iteratee, 3);

                        baseForOwn(object, function (value, key, object) {
                            baseAssignValue(result, iteratee(value, key, object), value);
                        });
                        return result;
                    }

                    /**
                     * Creates an object with the same keys as `object` and values generated
                     * by running each own enumerable string keyed property of `object` thru
                     * `iteratee`. The iteratee is invoked with three arguments:
                     * (value, key, object).
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Object} Returns the new mapped object.
                     * @see _.mapKeys
                     * @example
                     *
                     * var users = {
                     *   'fred':    { 'user': 'fred',    'age': 40 },
                     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
                     * };
                     *
                     * _.mapValues(users, function(o) { return o.age; });
                     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.mapValues(users, 'age');
                     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
                     */
                    function mapValues(object, iteratee) {
                        var result = {};
                        iteratee = getIteratee(iteratee, 3);

                        baseForOwn(object, function (value, key, object) {
                            baseAssignValue(result, key, iteratee(value, key, object));
                        });
                        return result;
                    }

                    /**
                     * This method is like `_.assign` except that it recursively merges own and
                     * inherited enumerable string keyed properties of source objects into the
                     * destination object. Source properties that resolve to `undefined` are
                     * skipped if a destination value exists. Array and plain object properties
                     * are merged recursively. Other objects and value types are overridden by
                     * assignment. Source objects are applied from left to right. Subsequent
                     * sources overwrite property assignments of previous sources.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.5.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} [sources] The source objects.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = {
                     *   'a': [{ 'b': 2 }, { 'd': 4 }]
                     * };
                     *
                     * var other = {
                     *   'a': [{ 'c': 3 }, { 'e': 5 }]
                     * };
                     *
                     * _.merge(object, other);
                     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
                     */
                    var merge = createAssigner(function (object, source, srcIndex) {
                        baseMerge(object, source, srcIndex);
                    });

                    /**
                     * This method is like `_.merge` except that it accepts `customizer` which
                     * is invoked to produce the merged values of the destination and source
                     * properties. If `customizer` returns `undefined`, merging is handled by the
                     * method instead. The `customizer` is invoked with six arguments:
                     * (objValue, srcValue, key, object, source, stack).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The destination object.
                     * @param {...Object} sources The source objects.
                     * @param {Function} customizer The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * function customizer(objValue, srcValue) {
                     *   if (_.isArray(objValue)) {
                     *     return objValue.concat(srcValue);
                     *   }
                     * }
                     *
                     * var object = { 'a': [1], 'b': [2] };
                     * var other = { 'a': [3], 'b': [4] };
                     *
                     * _.mergeWith(object, other, customizer);
                     * // => { 'a': [1, 3], 'b': [2, 4] }
                     */
                    var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
                        baseMerge(object, source, srcIndex, customizer);
                    });

                    /**
                     * The opposite of `_.pick`; this method creates an object composed of the
                     * own and inherited enumerable property paths of `object` that are not omitted.
                     *
                     * **Note:** This method is considerably slower than `_.pick`.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {...(string|string[])} [paths] The property paths to omit.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.omit(object, ['a', 'c']);
                     * // => { 'b': '2' }
                     */
                    var omit = flatRest(function (object, paths) {
                        var result = {};
                        if (object == null) {
                            return result;
                        }
                        var isDeep = false;
                        paths = arrayMap(paths, function (path) {
                            path = castPath(path, object);
                            isDeep || (isDeep = path.length > 1);
                            return path;
                        });
                        copyObject(object, getAllKeysIn(object), result);
                        if (isDeep) {
                            result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
                        }
                        var length = paths.length;
                        while (length--) {
                            baseUnset(result, paths[length]);
                        }
                        return result;
                    });

                    /**
                     * The opposite of `_.pickBy`; this method creates an object composed of
                     * the own and inherited enumerable string keyed properties of `object` that
                     * `predicate` doesn't return truthy for. The predicate is invoked with two
                     * arguments: (value, key).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {Function} [predicate=_.identity] The function invoked per property.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.omitBy(object, _.isNumber);
                     * // => { 'b': '2' }
                     */
                    function omitBy(object, predicate) {
                        return pickBy(object, negate(getIteratee(predicate)));
                    }

                    /**
                     * Creates an object composed of the picked `object` properties.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {...(string|string[])} [paths] The property paths to pick.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.pick(object, ['a', 'c']);
                     * // => { 'a': 1, 'c': 3 }
                     */
                    var pick = flatRest(function (object, paths) {
                        return object == null ? {} : basePick(object, paths);
                    });

                    /**
                     * Creates an object composed of the `object` properties `predicate` returns
                     * truthy for. The predicate is invoked with two arguments: (value, key).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The source object.
                     * @param {Function} [predicate=_.identity] The function invoked per property.
                     * @returns {Object} Returns the new object.
                     * @example
                     *
                     * var object = { 'a': 1, 'b': '2', 'c': 3 };
                     *
                     * _.pickBy(object, _.isNumber);
                     * // => { 'a': 1, 'c': 3 }
                     */
                    function pickBy(object, predicate) {
                        if (object == null) {
                            return {};
                        }
                        var props = arrayMap(getAllKeysIn(object), function (prop) {
                            return [prop];
                        });
                        predicate = getIteratee(predicate);
                        return basePickBy(object, props, function (value, path) {
                            return predicate(value, path[0]);
                        });
                    }

                    /**
                     * This method is like `_.get` except that if the resolved value is a
                     * function it's invoked with the `this` binding of its parent object and
                     * its result is returned.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @param {Array|string} path The path of the property to resolve.
                     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
                     * @returns {*} Returns the resolved value.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
                     *
                     * _.result(object, 'a[0].b.c1');
                     * // => 3
                     *
                     * _.result(object, 'a[0].b.c2');
                     * // => 4
                     *
                     * _.result(object, 'a[0].b.c3', 'default');
                     * // => 'default'
                     *
                     * _.result(object, 'a[0].b.c3', _.constant('default'));
                     * // => 'default'
                     */
                    function result(object, path, defaultValue) {
                        path = castPath(path, object);

                        var index = -1,
                            length = path.length;

                        // Ensure the loop is entered when path is empty.
                        if (!length) {
                            length = 1;
                            object = undefined;
                        }
                        while (++index < length) {
                            var value = object == null ? undefined : object[toKey(path[index])];
                            if (value === undefined) {
                                index = length;
                                value = defaultValue;
                            }
                            object = isFunction(value) ? value.call(object) : value;
                        }
                        return object;
                    }

                    /**
                     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
                     * it's created. Arrays are created for missing index properties while objects
                     * are created for all other missing properties. Use `_.setWith` to customize
                     * `path` creation.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {*} value The value to set.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                     *
                     * _.set(object, 'a[0].b.c', 4);
                     * console.log(object.a[0].b.c);
                     * // => 4
                     *
                     * _.set(object, ['x', '0', 'y', 'z'], 5);
                     * console.log(object.x[0].y.z);
                     * // => 5
                     */
                    function set(object, path, value) {
                        return object == null ? object : baseSet(object, path, value);
                    }

                    /**
                     * This method is like `_.set` except that it accepts `customizer` which is
                     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                     * path creation is handled by the method instead. The `customizer` is invoked
                     * with three arguments: (nsValue, key, nsObject).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {*} value The value to set.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = {};
                     *
                     * _.setWith(object, '[0][1]', 'a', Object);
                     * // => { '0': { '1': 'a' } }
                     */
                    function setWith(object, path, value, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return object == null ? object : baseSet(object, path, value, customizer);
                    }

                    /**
                     * Creates an array of own enumerable string keyed-value pairs for `object`
                     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
                     * entries are returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias entries
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the key-value pairs.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.toPairs(new Foo);
                     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
                     */
                    var toPairs = createToPairs(keys);

                    /**
                     * Creates an array of own and inherited enumerable string keyed-value pairs
                     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
                     * or set, its entries are returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @alias entriesIn
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the key-value pairs.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.toPairsIn(new Foo);
                     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
                     */
                    var toPairsIn = createToPairs(keysIn);

                    /**
                     * An alternative to `_.reduce`; this method transforms `object` to a new
                     * `accumulator` object which is the result of running each of its own
                     * enumerable string keyed properties thru `iteratee`, with each invocation
                     * potentially mutating the `accumulator` object. If `accumulator` is not
                     * provided, a new object with the same `[[Prototype]]` will be used. The
                     * iteratee is invoked with four arguments: (accumulator, value, key, object).
                     * Iteratee functions may exit iteration early by explicitly returning `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.3.0
                     * @category Object
                     * @param {Object} object The object to iterate over.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @param {*} [accumulator] The custom accumulator value.
                     * @returns {*} Returns the accumulated value.
                     * @example
                     *
                     * _.transform([2, 3, 4], function(result, n) {
                     *   result.push(n *= n);
                     *   return n % 2 == 0;
                     * }, []);
                     * // => [4, 9]
                     *
                     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
                     *   (result[value] || (result[value] = [])).push(key);
                     * }, {});
                     * // => { '1': ['a', 'c'], '2': ['b'] }
                     */
                    function transform(object, iteratee, accumulator) {
                        var isArr = isArray(object),
                            isArrLike = isArr || isBuffer(object) || isTypedArray(object);

                        iteratee = getIteratee(iteratee, 4);
                        if (accumulator == null) {
                            var Ctor = object && object.constructor;
                            if (isArrLike) {
                                accumulator = isArr ? new Ctor : [];
                            } else if (isObject(object)) {
                                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
                            } else {
                                accumulator = {};
                            }
                        }
                        (isArrLike ? arrayEach : baseForOwn)(object, function (value, index, object) {
                            return iteratee(accumulator, value, index, object);
                        });
                        return accumulator;
                    }

                    /**
                     * Removes the property at `path` of `object`.
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to unset.
                     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
                     * _.unset(object, 'a[0].b.c');
                     * // => true
                     *
                     * console.log(object);
                     * // => { 'a': [{ 'b': {} }] };
                     *
                     * _.unset(object, ['a', '0', 'b', 'c']);
                     * // => true
                     *
                     * console.log(object);
                     * // => { 'a': [{ 'b': {} }] };
                     */
                    function unset(object, path) {
                        return object == null ? true : baseUnset(object, path);
                    }

                    /**
                     * This method is like `_.set` except that accepts `updater` to produce the
                     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
                     * is invoked with one argument: (value).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.6.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {Function} updater The function to produce the updated value.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
                     *
                     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
                     * console.log(object.a[0].b.c);
                     * // => 9
                     *
                     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
                     * console.log(object.x[0].y.z);
                     * // => 0
                     */
                    function update(object, path, updater) {
                        return object == null ? object : baseUpdate(object, path, castFunction(updater));
                    }

                    /**
                     * This method is like `_.update` except that it accepts `customizer` which is
                     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
                     * path creation is handled by the method instead. The `customizer` is invoked
                     * with three arguments: (nsValue, key, nsObject).
                     *
                     * **Note:** This method mutates `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.6.0
                     * @category Object
                     * @param {Object} object The object to modify.
                     * @param {Array|string} path The path of the property to set.
                     * @param {Function} updater The function to produce the updated value.
                     * @param {Function} [customizer] The function to customize assigned values.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var object = {};
                     *
                     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
                     * // => { '0': { '1': 'a' } }
                     */
                    function updateWith(object, path, updater, customizer) {
                        customizer = typeof customizer == 'function' ? customizer : undefined;
                        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
                    }

                    /**
                     * Creates an array of the own enumerable string keyed property values of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property values.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.values(new Foo);
                     * // => [1, 2] (iteration order is not guaranteed)
                     *
                     * _.values('hi');
                     * // => ['h', 'i']
                     */
                    function values(object) {
                        return object == null ? [] : baseValues(object, keys(object));
                    }

                    /**
                     * Creates an array of the own and inherited enumerable string keyed property
                     * values of `object`.
                     *
                     * **Note:** Non-object values are coerced to objects.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Object
                     * @param {Object} object The object to query.
                     * @returns {Array} Returns the array of property values.
                     * @example
                     *
                     * function Foo() {
                     *   this.a = 1;
                     *   this.b = 2;
                     * }
                     *
                     * Foo.prototype.c = 3;
                     *
                     * _.valuesIn(new Foo);
                     * // => [1, 2, 3] (iteration order is not guaranteed)
                     */
                    function valuesIn(object) {
                        return object == null ? [] : baseValues(object, keysIn(object));
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Clamps `number` within the inclusive `lower` and `upper` bounds.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Number
                     * @param {number} number The number to clamp.
                     * @param {number} [lower] The lower bound.
                     * @param {number} upper The upper bound.
                     * @returns {number} Returns the clamped number.
                     * @example
                     *
                     * _.clamp(-10, -5, 5);
                     * // => -5
                     *
                     * _.clamp(10, -5, 5);
                     * // => 5
                     */
                    function clamp(number, lower, upper) {
                        if (upper === undefined) {
                            upper = lower;
                            lower = undefined;
                        }
                        if (upper !== undefined) {
                            upper = toNumber(upper);
                            upper = upper === upper ? upper : 0;
                        }
                        if (lower !== undefined) {
                            lower = toNumber(lower);
                            lower = lower === lower ? lower : 0;
                        }
                        return baseClamp(toNumber(number), lower, upper);
                    }

                    /**
                     * Checks if `n` is between `start` and up to, but not including, `end`. If
                     * `end` is not specified, it's set to `start` with `start` then set to `0`.
                     * If `start` is greater than `end` the params are swapped to support
                     * negative ranges.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.3.0
                     * @category Number
                     * @param {number} number The number to check.
                     * @param {number} [start=0] The start of the range.
                     * @param {number} end The end of the range.
                     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
                     * @see _.range, _.rangeRight
                     * @example
                     *
                     * _.inRange(3, 2, 4);
                     * // => true
                     *
                     * _.inRange(4, 8);
                     * // => true
                     *
                     * _.inRange(4, 2);
                     * // => false
                     *
                     * _.inRange(2, 2);
                     * // => false
                     *
                     * _.inRange(1.2, 2);
                     * // => true
                     *
                     * _.inRange(5.2, 4);
                     * // => false
                     *
                     * _.inRange(-3, -2, -6);
                     * // => true
                     */
                    function inRange(number, start, end) {
                        start = toFinite(start);
                        if (end === undefined) {
                            end = start;
                            start = 0;
                        } else {
                            end = toFinite(end);
                        }
                        number = toNumber(number);
                        return baseInRange(number, start, end);
                    }

                    /**
                     * Produces a random number between the inclusive `lower` and `upper` bounds.
                     * If only one argument is provided a number between `0` and the given number
                     * is returned. If `floating` is `true`, or either `lower` or `upper` are
                     * floats, a floating-point number is returned instead of an integer.
                     *
                     * **Note:** JavaScript follows the IEEE-754 standard for resolving
                     * floating-point values which can produce unexpected results.
                     *
                     * @static
                     * @memberOf _
                     * @since 0.7.0
                     * @category Number
                     * @param {number} [lower=0] The lower bound.
                     * @param {number} [upper=1] The upper bound.
                     * @param {boolean} [floating] Specify returning a floating-point number.
                     * @returns {number} Returns the random number.
                     * @example
                     *
                     * _.random(0, 5);
                     * // => an integer between 0 and 5
                     *
                     * _.random(5);
                     * // => also an integer between 0 and 5
                     *
                     * _.random(5, true);
                     * // => a floating-point number between 0 and 5
                     *
                     * _.random(1.2, 5.2);
                     * // => a floating-point number between 1.2 and 5.2
                     */
                    function random(lower, upper, floating) {
                        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
                            upper = floating = undefined;
                        }
                        if (floating === undefined) {
                            if (typeof upper == 'boolean') {
                                floating = upper;
                                upper = undefined;
                            } else if (typeof lower == 'boolean') {
                                floating = lower;
                                lower = undefined;
                            }
                        }
                        if (lower === undefined && upper === undefined) {
                            lower = 0;
                            upper = 1;
                        } else {
                            lower = toFinite(lower);
                            if (upper === undefined) {
                                upper = lower;
                                lower = 0;
                            } else {
                                upper = toFinite(upper);
                            }
                        }
                        if (lower > upper) {
                            var temp = lower;
                            lower = upper;
                            upper = temp;
                        }
                        if (floating || lower % 1 || upper % 1) {
                            var rand = nativeRandom();
                            return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
                        }
                        return baseRandom(lower, upper);
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the camel cased string.
                     * @example
                     *
                     * _.camelCase('Foo Bar');
                     * // => 'fooBar'
                     *
                     * _.camelCase('--foo-bar--');
                     * // => 'fooBar'
                     *
                     * _.camelCase('__FOO_BAR__');
                     * // => 'fooBar'
                     */
                    var camelCase = createCompounder(function (result, word, index) {
                        word = word.toLowerCase();
                        return result + (index ? capitalize(word) : word);
                    });

                    /**
                     * Converts the first character of `string` to upper case and the remaining
                     * to lower case.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to capitalize.
                     * @returns {string} Returns the capitalized string.
                     * @example
                     *
                     * _.capitalize('FRED');
                     * // => 'Fred'
                     */
                    function capitalize(string) {
                        return upperFirst(toString(string).toLowerCase());
                    }

                    /**
                     * Deburrs `string` by converting
                     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
                     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
                     * letters to basic Latin letters and removing
                     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to deburr.
                     * @returns {string} Returns the deburred string.
                     * @example
                     *
                     * _.deburr('déjà vu');
                     * // => 'deja vu'
                     */
                    function deburr(string) {
                        string = toString(string);
                        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
                    }

                    /**
                     * Checks if `string` ends with the given target string.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to inspect.
                     * @param {string} [target] The string to search for.
                     * @param {number} [position=string.length] The position to search up to.
                     * @returns {boolean} Returns `true` if `string` ends with `target`,
                     *  else `false`.
                     * @example
                     *
                     * _.endsWith('abc', 'c');
                     * // => true
                     *
                     * _.endsWith('abc', 'b');
                     * // => false
                     *
                     * _.endsWith('abc', 'b', 2);
                     * // => true
                     */
                    function endsWith(string, target, position) {
                        string = toString(string);
                        target = baseToString(target);

                        var length = string.length;
                        position = position === undefined
                            ? length
                            : baseClamp(toInteger(position), 0, length);

                        var end = position;
                        position -= target.length;
                        return position >= 0 && string.slice(position, end) == target;
                    }

                    /**
                     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
                     * corresponding HTML entities.
                     *
                     * **Note:** No other characters are escaped. To escape additional
                     * characters use a third-party library like [_he_](https://mths.be/he).
                     *
                     * Though the ">" character is escaped for symmetry, characters like
                     * ">" and "/" don't need escaping in HTML and have no special meaning
                     * unless they're part of a tag or unquoted attribute value. See
                     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
                     * (under "semi-related fun fact") for more details.
                     *
                     * When working with HTML you should always
                     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
                     * XSS vectors.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category String
                     * @param {string} [string=''] The string to escape.
                     * @returns {string} Returns the escaped string.
                     * @example
                     *
                     * _.escape('fred, barney, & pebbles');
                     * // => 'fred, barney, &amp; pebbles'
                     */
                    function escape(string) {
                        string = toString(string);
                        return (string && reHasUnescapedHtml.test(string))
                            ? string.replace(reUnescapedHtml, escapeHtmlChar)
                            : string;
                    }

                    /**
                     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to escape.
                     * @returns {string} Returns the escaped string.
                     * @example
                     *
                     * _.escapeRegExp('[lodash](https://lodash.com/)');
                     * // => '\[lodash\]\(https://lodash\.com/\)'
                     */
                    function escapeRegExp(string) {
                        string = toString(string);
                        return (string && reHasRegExpChar.test(string))
                            ? string.replace(reRegExpChar, '\\$&')
                            : string;
                    }

                    /**
                     * Converts `string` to
                     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the kebab cased string.
                     * @example
                     *
                     * _.kebabCase('Foo Bar');
                     * // => 'foo-bar'
                     *
                     * _.kebabCase('fooBar');
                     * // => 'foo-bar'
                     *
                     * _.kebabCase('__FOO_BAR__');
                     * // => 'foo-bar'
                     */
                    var kebabCase = createCompounder(function (result, word, index) {
                        return result + (index ? '-' : '') + word.toLowerCase();
                    });

                    /**
                     * Converts `string`, as space separated words, to lower case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the lower cased string.
                     * @example
                     *
                     * _.lowerCase('--Foo-Bar--');
                     * // => 'foo bar'
                     *
                     * _.lowerCase('fooBar');
                     * // => 'foo bar'
                     *
                     * _.lowerCase('__FOO_BAR__');
                     * // => 'foo bar'
                     */
                    var lowerCase = createCompounder(function (result, word, index) {
                        return result + (index ? ' ' : '') + word.toLowerCase();
                    });

                    /**
                     * Converts the first character of `string` to lower case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the converted string.
                     * @example
                     *
                     * _.lowerFirst('Fred');
                     * // => 'fred'
                     *
                     * _.lowerFirst('FRED');
                     * // => 'fRED'
                     */
                    var lowerFirst = createCaseFirst('toLowerCase');

                    /**
                     * Pads `string` on the left and right sides if it's shorter than `length`.
                     * Padding characters are truncated if they can't be evenly divided by `length`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to pad.
                     * @param {number} [length=0] The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padded string.
                     * @example
                     *
                     * _.pad('abc', 8);
                     * // => '  abc   '
                     *
                     * _.pad('abc', 8, '_-');
                     * // => '_-abc_-_'
                     *
                     * _.pad('abc', 3);
                     * // => 'abc'
                     */
                    function pad(string, length, chars) {
                        string = toString(string);
                        length = toInteger(length);

                        var strLength = length ? stringSize(string) : 0;
                        if (!length || strLength >= length) {
                            return string;
                        }
                        var mid = (length - strLength) / 2;
                        return (
                            createPadding(nativeFloor(mid), chars) +
                            string +
                            createPadding(nativeCeil(mid), chars)
                        );
                    }

                    /**
                     * Pads `string` on the right side if it's shorter than `length`. Padding
                     * characters are truncated if they exceed `length`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to pad.
                     * @param {number} [length=0] The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padded string.
                     * @example
                     *
                     * _.padEnd('abc', 6);
                     * // => 'abc   '
                     *
                     * _.padEnd('abc', 6, '_-');
                     * // => 'abc_-_'
                     *
                     * _.padEnd('abc', 3);
                     * // => 'abc'
                     */
                    function padEnd(string, length, chars) {
                        string = toString(string);
                        length = toInteger(length);

                        var strLength = length ? stringSize(string) : 0;
                        return (length && strLength < length)
                            ? (string + createPadding(length - strLength, chars))
                            : string;
                    }

                    /**
                     * Pads `string` on the left side if it's shorter than `length`. Padding
                     * characters are truncated if they exceed `length`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to pad.
                     * @param {number} [length=0] The padding length.
                     * @param {string} [chars=' '] The string used as padding.
                     * @returns {string} Returns the padded string.
                     * @example
                     *
                     * _.padStart('abc', 6);
                     * // => '   abc'
                     *
                     * _.padStart('abc', 6, '_-');
                     * // => '_-_abc'
                     *
                     * _.padStart('abc', 3);
                     * // => 'abc'
                     */
                    function padStart(string, length, chars) {
                        string = toString(string);
                        length = toInteger(length);

                        var strLength = length ? stringSize(string) : 0;
                        return (length && strLength < length)
                            ? (createPadding(length - strLength, chars) + string)
                            : string;
                    }

                    /**
                     * Converts `string` to an integer of the specified radix. If `radix` is
                     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
                     * hexadecimal, in which case a `radix` of `16` is used.
                     *
                     * **Note:** This method aligns with the
                     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
                     *
                     * @static
                     * @memberOf _
                     * @since 1.1.0
                     * @category String
                     * @param {string} string The string to convert.
                     * @param {number} [radix=10] The radix to interpret `value` by.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {number} Returns the converted integer.
                     * @example
                     *
                     * _.parseInt('08');
                     * // => 8
                     *
                     * _.map(['6', '08', '10'], _.parseInt);
                     * // => [6, 8, 10]
                     */
                    function parseInt(string, radix, guard) {
                        if (guard || radix == null) {
                            radix = 0;
                        } else if (radix) {
                            radix = +radix;
                        }
                        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
                    }

                    /**
                     * Repeats the given string `n` times.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to repeat.
                     * @param {number} [n=1] The number of times to repeat the string.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the repeated string.
                     * @example
                     *
                     * _.repeat('*', 3);
                     * // => '***'
                     *
                     * _.repeat('abc', 2);
                     * // => 'abcabc'
                     *
                     * _.repeat('abc', 0);
                     * // => ''
                     */
                    function repeat(string, n, guard) {
                        if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
                            n = 1;
                        } else {
                            n = toInteger(n);
                        }
                        return baseRepeat(toString(string), n);
                    }

                    /**
                     * Replaces matches for `pattern` in `string` with `replacement`.
                     *
                     * **Note:** This method is based on
                     * [`String#replace`](https://mdn.io/String/replace).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to modify.
                     * @param {RegExp|string} pattern The pattern to replace.
                     * @param {Function|string} replacement The match replacement.
                     * @returns {string} Returns the modified string.
                     * @example
                     *
                     * _.replace('Hi Fred', 'Fred', 'Barney');
                     * // => 'Hi Barney'
                     */
                    function replace() {
                        var args = arguments,
                            string = toString(args[0]);

                        return args.length < 3 ? string : string.replace(args[1], args[2]);
                    }

                    /**
                     * Converts `string` to
                     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the snake cased string.
                     * @example
                     *
                     * _.snakeCase('Foo Bar');
                     * // => 'foo_bar'
                     *
                     * _.snakeCase('fooBar');
                     * // => 'foo_bar'
                     *
                     * _.snakeCase('--FOO-BAR--');
                     * // => 'foo_bar'
                     */
                    var snakeCase = createCompounder(function (result, word, index) {
                        return result + (index ? '_' : '') + word.toLowerCase();
                    });

                    /**
                     * Splits `string` by `separator`.
                     *
                     * **Note:** This method is based on
                     * [`String#split`](https://mdn.io/String/split).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to split.
                     * @param {RegExp|string} separator The separator pattern to split by.
                     * @param {number} [limit] The length to truncate results to.
                     * @returns {Array} Returns the string segments.
                     * @example
                     *
                     * _.split('a-b-c', '-', 2);
                     * // => ['a', 'b']
                     */
                    function split(string, separator, limit) {
                        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
                            separator = limit = undefined;
                        }
                        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
                        if (!limit) {
                            return [];
                        }
                        string = toString(string);
                        if (string && (
                            typeof separator == 'string' ||
                            (separator != null && !isRegExp(separator))
                        )) {
                            separator = baseToString(separator);
                            if (!separator && hasUnicode(string)) {
                                return castSlice(stringToArray(string), 0, limit);
                            }
                        }
                        return string.split(separator, limit);
                    }

                    /**
                     * Converts `string` to
                     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
                     *
                     * @static
                     * @memberOf _
                     * @since 3.1.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the start cased string.
                     * @example
                     *
                     * _.startCase('--foo-bar--');
                     * // => 'Foo Bar'
                     *
                     * _.startCase('fooBar');
                     * // => 'Foo Bar'
                     *
                     * _.startCase('__FOO_BAR__');
                     * // => 'FOO BAR'
                     */
                    var startCase = createCompounder(function (result, word, index) {
                        return result + (index ? ' ' : '') + upperFirst(word);
                    });

                    /**
                     * Checks if `string` starts with the given target string.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to inspect.
                     * @param {string} [target] The string to search for.
                     * @param {number} [position=0] The position to search from.
                     * @returns {boolean} Returns `true` if `string` starts with `target`,
                     *  else `false`.
                     * @example
                     *
                     * _.startsWith('abc', 'a');
                     * // => true
                     *
                     * _.startsWith('abc', 'b');
                     * // => false
                     *
                     * _.startsWith('abc', 'b', 1);
                     * // => true
                     */
                    function startsWith(string, target, position) {
                        string = toString(string);
                        position = position == null
                            ? 0
                            : baseClamp(toInteger(position), 0, string.length);

                        target = baseToString(target);
                        return string.slice(position, position + target.length) == target;
                    }

                    /**
                     * Creates a compiled template function that can interpolate data properties
                     * in "interpolate" delimiters, HTML-escape interpolated data properties in
                     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
                     * properties may be accessed as free variables in the template. If a setting
                     * object is given, it takes precedence over `_.templateSettings` values.
                     *
                     * **Note:** In the development build `_.template` utilizes
                     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
                     * for easier debugging.
                     *
                     * For more information on precompiling templates see
                     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
                     *
                     * For more information on Chrome extension sandboxes see
                     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category String
                     * @param {string} [string=''] The template string.
                     * @param {Object} [options={}] The options object.
                     * @param {RegExp} [options.escape=_.templateSettings.escape]
                     *  The HTML "escape" delimiter.
                     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
                     *  The "evaluate" delimiter.
                     * @param {Object} [options.imports=_.templateSettings.imports]
                     *  An object to import into the template as free variables.
                     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
                     *  The "interpolate" delimiter.
                     * @param {string} [options.sourceURL='lodash.templateSources[n]']
                     *  The sourceURL of the compiled template.
                     * @param {string} [options.variable='obj']
                     *  The data object variable name.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Function} Returns the compiled template function.
                     * @example
                     *
                     * // Use the "interpolate" delimiter to create a compiled template.
                     * var compiled = _.template('hello <%= user %>!');
                     * compiled({ 'user': 'fred' });
                     * // => 'hello fred!'
                     *
                     * // Use the HTML "escape" delimiter to escape data property values.
                     * var compiled = _.template('<b><%- value %></b>');
                     * compiled({ 'value': '<script>' });
                     * // => '<b>&lt;script&gt;</b>'
                     *
                     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
                     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
                     * compiled({ 'users': ['fred', 'barney'] });
                     * // => '<li>fred</li><li>barney</li>'
                     *
                     * // Use the internal `print` function in "evaluate" delimiters.
                     * var compiled = _.template('<% print("hello " + user); %>!');
                     * compiled({ 'user': 'barney' });
                     * // => 'hello barney!'
                     *
                     * // Use the ES template literal delimiter as an "interpolate" delimiter.
                     * // Disable support by replacing the "interpolate" delimiter.
                     * var compiled = _.template('hello ${ user }!');
                     * compiled({ 'user': 'pebbles' });
                     * // => 'hello pebbles!'
                     *
                     * // Use backslashes to treat delimiters as plain text.
                     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
                     * compiled({ 'value': 'ignored' });
                     * // => '<%- value %>'
                     *
                     * // Use the `imports` option to import `jQuery` as `jq`.
                     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
                     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
                     * compiled({ 'users': ['fred', 'barney'] });
                     * // => '<li>fred</li><li>barney</li>'
                     *
                     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
                     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
                     * compiled(data);
                     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
                     *
                     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
                     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
                     * compiled.source;
                     * // => function(data) {
                     * //   var __t, __p = '';
                     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
                     * //   return __p;
                     * // }
                     *
                     * // Use custom template delimiters.
                     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
                     * var compiled = _.template('hello {{ user }}!');
                     * compiled({ 'user': 'mustache' });
                     * // => 'hello mustache!'
                     *
                     * // Use the `source` property to inline compiled templates for meaningful
                     * // line numbers in error messages and stack traces.
                     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
                     *   var JST = {\
                     *     "main": ' + _.template(mainText).source + '\
                     *   };\
                     * ');
                     */
                    function template(string, options, guard) {
                        // Based on John Resig's `tmpl` implementation
                        // (http://ejohn.org/blog/javascript-micro-templating/)
                        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
                        var settings = lodash.templateSettings;

                        if (guard && isIterateeCall(string, options, guard)) {
                            options = undefined;
                        }
                        string = toString(string);
                        options = assignInWith({}, options, settings, customDefaultsAssignIn);

                        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
                            importsKeys = keys(imports),
                            importsValues = baseValues(imports, importsKeys);

                        var isEscaping,
                            isEvaluating,
                            index = 0,
                            interpolate = options.interpolate || reNoMatch,
                            source = "__p += '";

                        // Compile the regexp to match each delimiter.
                        var reDelimiters = RegExp(
                            (options.escape || reNoMatch).source + '|' +
                            interpolate.source + '|' +
                            (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
                            (options.evaluate || reNoMatch).source + '|$'
                            , 'g');

                        // Use a sourceURL for easier debugging.
                        // The sourceURL gets injected into the source that's eval-ed, so be careful
                        // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
                        // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
                        var sourceURL = '//# sourceURL=' +
                            (hasOwnProperty.call(options, 'sourceURL')
                                    ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
                                    : ('lodash.templateSources[' + (++templateCounter) + ']')
                            ) + '\n';

                        string.replace(reDelimiters, function (match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                            interpolateValue || (interpolateValue = esTemplateValue);

                            // Escape characters that can't be included in string literals.
                            source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

                            // Replace delimiters with snippets.
                            if (escapeValue) {
                                isEscaping = true;
                                source += "' +\n__e(" + escapeValue + ") +\n'";
                            }
                            if (evaluateValue) {
                                isEvaluating = true;
                                source += "';\n" + evaluateValue + ";\n__p += '";
                            }
                            if (interpolateValue) {
                                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                            }
                            index = offset + match.length;

                            // The JS engine embedded in Adobe products needs `match` returned in
                            // order to produce the correct `offset` value.
                            return match;
                        });

                        source += "';\n";

                        // If `variable` is not specified wrap a with-statement around the generated
                        // code to add the data object to the top of the scope chain.
                        // Like with sourceURL, we take care to not check the option's prototype,
                        // as this configuration is a code injection vector.
                        var variable = hasOwnProperty.call(options, 'variable') && options.variable;
                        if (!variable) {
                            source = 'with (obj) {\n' + source + '\n}\n';
                        }
                        // Cleanup code by stripping empty strings.
                        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
                            .replace(reEmptyStringMiddle, '$1')
                            .replace(reEmptyStringTrailing, '$1;');

                        // Frame code as the function body.
                        source = 'function(' + (variable || 'obj') + ') {\n' +
                            (variable
                                    ? ''
                                    : 'obj || (obj = {});\n'
                            ) +
                            "var __t, __p = ''" +
                            (isEscaping
                                    ? ', __e = _.escape'
                                    : ''
                            ) +
                            (isEvaluating
                                    ? ', __j = Array.prototype.join;\n' +
                                    "function print() { __p += __j.call(arguments, '') }\n"
                                    : ';\n'
                            ) +
                            source +
                            'return __p\n}';

                        var result = attempt(function () {
                            return Function(importsKeys, sourceURL + 'return ' + source)
                                .apply(undefined, importsValues);
                        });

                        // Provide the compiled function's source by its `toString` method or
                        // the `source` property as a convenience for inlining compiled templates.
                        result.source = source;
                        if (isError(result)) {
                            throw result;
                        }
                        return result;
                    }

                    /**
                     * Converts `string`, as a whole, to lower case just like
                     * [String#toLowerCase](https://mdn.io/toLowerCase).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the lower cased string.
                     * @example
                     *
                     * _.toLower('--Foo-Bar--');
                     * // => '--foo-bar--'
                     *
                     * _.toLower('fooBar');
                     * // => 'foobar'
                     *
                     * _.toLower('__FOO_BAR__');
                     * // => '__foo_bar__'
                     */
                    function toLower(value) {
                        return toString(value).toLowerCase();
                    }

                    /**
                     * Converts `string`, as a whole, to upper case just like
                     * [String#toUpperCase](https://mdn.io/toUpperCase).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the upper cased string.
                     * @example
                     *
                     * _.toUpper('--foo-bar--');
                     * // => '--FOO-BAR--'
                     *
                     * _.toUpper('fooBar');
                     * // => 'FOOBAR'
                     *
                     * _.toUpper('__foo_bar__');
                     * // => '__FOO_BAR__'
                     */
                    function toUpper(value) {
                        return toString(value).toUpperCase();
                    }

                    /**
                     * Removes leading and trailing whitespace or specified characters from `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to trim.
                     * @param {string} [chars=whitespace] The characters to trim.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the trimmed string.
                     * @example
                     *
                     * _.trim('  abc  ');
                     * // => 'abc'
                     *
                     * _.trim('-_-abc-_-', '_-');
                     * // => 'abc'
                     *
                     * _.map(['  foo  ', '  bar  '], _.trim);
                     * // => ['foo', 'bar']
                     */
                    function trim(string, chars, guard) {
                        string = toString(string);
                        if (string && (guard || chars === undefined)) {
                            return string.replace(reTrim, '');
                        }
                        if (!string || !(chars = baseToString(chars))) {
                            return string;
                        }
                        var strSymbols = stringToArray(string),
                            chrSymbols = stringToArray(chars),
                            start = charsStartIndex(strSymbols, chrSymbols),
                            end = charsEndIndex(strSymbols, chrSymbols) + 1;

                        return castSlice(strSymbols, start, end).join('');
                    }

                    /**
                     * Removes trailing whitespace or specified characters from `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to trim.
                     * @param {string} [chars=whitespace] The characters to trim.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the trimmed string.
                     * @example
                     *
                     * _.trimEnd('  abc  ');
                     * // => '  abc'
                     *
                     * _.trimEnd('-_-abc-_-', '_-');
                     * // => '-_-abc'
                     */
                    function trimEnd(string, chars, guard) {
                        string = toString(string);
                        if (string && (guard || chars === undefined)) {
                            return string.replace(reTrimEnd, '');
                        }
                        if (!string || !(chars = baseToString(chars))) {
                            return string;
                        }
                        var strSymbols = stringToArray(string),
                            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

                        return castSlice(strSymbols, 0, end).join('');
                    }

                    /**
                     * Removes leading whitespace or specified characters from `string`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to trim.
                     * @param {string} [chars=whitespace] The characters to trim.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {string} Returns the trimmed string.
                     * @example
                     *
                     * _.trimStart('  abc  ');
                     * // => 'abc  '
                     *
                     * _.trimStart('-_-abc-_-', '_-');
                     * // => 'abc-_-'
                     */
                    function trimStart(string, chars, guard) {
                        string = toString(string);
                        if (string && (guard || chars === undefined)) {
                            return string.replace(reTrimStart, '');
                        }
                        if (!string || !(chars = baseToString(chars))) {
                            return string;
                        }
                        var strSymbols = stringToArray(string),
                            start = charsStartIndex(strSymbols, stringToArray(chars));

                        return castSlice(strSymbols, start).join('');
                    }

                    /**
                     * Truncates `string` if it's longer than the given maximum string length.
                     * The last characters of the truncated string are replaced with the omission
                     * string which defaults to "...".
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to truncate.
                     * @param {Object} [options={}] The options object.
                     * @param {number} [options.length=30] The maximum string length.
                     * @param {string} [options.omission='...'] The string to indicate text is omitted.
                     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
                     * @returns {string} Returns the truncated string.
                     * @example
                     *
                     * _.truncate('hi-diddly-ho there, neighborino');
                     * // => 'hi-diddly-ho there, neighbo...'
                     *
                     * _.truncate('hi-diddly-ho there, neighborino', {
                     *   'length': 24,
                     *   'separator': ' '
                     * });
                     * // => 'hi-diddly-ho there,...'
                     *
                     * _.truncate('hi-diddly-ho there, neighborino', {
                     *   'length': 24,
                     *   'separator': /,? +/
                     * });
                     * // => 'hi-diddly-ho there...'
                     *
                     * _.truncate('hi-diddly-ho there, neighborino', {
                     *   'omission': ' [...]'
                     * });
                     * // => 'hi-diddly-ho there, neig [...]'
                     */
                    function truncate(string, options) {
                        var length = DEFAULT_TRUNC_LENGTH,
                            omission = DEFAULT_TRUNC_OMISSION;

                        if (isObject(options)) {
                            var separator = 'separator' in options ? options.separator : separator;
                            length = 'length' in options ? toInteger(options.length) : length;
                            omission = 'omission' in options ? baseToString(options.omission) : omission;
                        }
                        string = toString(string);

                        var strLength = string.length;
                        if (hasUnicode(string)) {
                            var strSymbols = stringToArray(string);
                            strLength = strSymbols.length;
                        }
                        if (length >= strLength) {
                            return string;
                        }
                        var end = length - stringSize(omission);
                        if (end < 1) {
                            return omission;
                        }
                        var result = strSymbols
                            ? castSlice(strSymbols, 0, end).join('')
                            : string.slice(0, end);

                        if (separator === undefined) {
                            return result + omission;
                        }
                        if (strSymbols) {
                            end += (result.length - end);
                        }
                        if (isRegExp(separator)) {
                            if (string.slice(end).search(separator)) {
                                var match,
                                    substring = result;

                                if (!separator.global) {
                                    separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                                }
                                separator.lastIndex = 0;
                                while ((match = separator.exec(substring))) {
                                    var newEnd = match.index;
                                }
                                result = result.slice(0, newEnd === undefined ? end : newEnd);
                            }
                        } else if (string.indexOf(baseToString(separator), end) != end) {
                            var index = result.lastIndexOf(separator);
                            if (index > -1) {
                                result = result.slice(0, index);
                            }
                        }
                        return result + omission;
                    }

                    /**
                     * The inverse of `_.escape`; this method converts the HTML entities
                     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
                     * their corresponding characters.
                     *
                     * **Note:** No other HTML entities are unescaped. To unescape additional
                     * HTML entities use a third-party library like [_he_](https://mths.be/he).
                     *
                     * @static
                     * @memberOf _
                     * @since 0.6.0
                     * @category String
                     * @param {string} [string=''] The string to unescape.
                     * @returns {string} Returns the unescaped string.
                     * @example
                     *
                     * _.unescape('fred, barney, &amp; pebbles');
                     * // => 'fred, barney, & pebbles'
                     */
                    function unescape(string) {
                        string = toString(string);
                        return (string && reHasEscapedHtml.test(string))
                            ? string.replace(reEscapedHtml, unescapeHtmlChar)
                            : string;
                    }

                    /**
                     * Converts `string`, as space separated words, to upper case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the upper cased string.
                     * @example
                     *
                     * _.upperCase('--foo-bar');
                     * // => 'FOO BAR'
                     *
                     * _.upperCase('fooBar');
                     * // => 'FOO BAR'
                     *
                     * _.upperCase('__foo_bar__');
                     * // => 'FOO BAR'
                     */
                    var upperCase = createCompounder(function (result, word, index) {
                        return result + (index ? ' ' : '') + word.toUpperCase();
                    });

                    /**
                     * Converts the first character of `string` to upper case.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category String
                     * @param {string} [string=''] The string to convert.
                     * @returns {string} Returns the converted string.
                     * @example
                     *
                     * _.upperFirst('fred');
                     * // => 'Fred'
                     *
                     * _.upperFirst('FRED');
                     * // => 'FRED'
                     */
                    var upperFirst = createCaseFirst('toUpperCase');

                    /**
                     * Splits `string` into an array of its words.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category String
                     * @param {string} [string=''] The string to inspect.
                     * @param {RegExp|string} [pattern] The pattern to match words.
                     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
                     * @returns {Array} Returns the words of `string`.
                     * @example
                     *
                     * _.words('fred, barney, & pebbles');
                     * // => ['fred', 'barney', 'pebbles']
                     *
                     * _.words('fred, barney, & pebbles', /[^, ]+/g);
                     * // => ['fred', 'barney', '&', 'pebbles']
                     */
                    function words(string, pattern, guard) {
                        string = toString(string);
                        pattern = guard ? undefined : pattern;

                        if (pattern === undefined) {
                            return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
                        }
                        return string.match(pattern) || [];
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Attempts to invoke `func`, returning either the result or the caught error
                     * object. Any additional arguments are provided to `func` when it's invoked.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {Function} func The function to attempt.
                     * @param {...*} [args] The arguments to invoke `func` with.
                     * @returns {*} Returns the `func` result or error object.
                     * @example
                     *
                     * // Avoid throwing errors for invalid selectors.
                     * var elements = _.attempt(function(selector) {
                     *   return document.querySelectorAll(selector);
                     * }, '>_>');
                     *
                     * if (_.isError(elements)) {
                     *   elements = [];
                     * }
                     */
                    var attempt = baseRest(function (func, args) {
                        try {
                            return apply(func, undefined, args);
                        } catch (e) {
                            return isError(e) ? e : new Error(e);
                        }
                    });

                    /**
                     * Binds methods of an object to the object itself, overwriting the existing
                     * method.
                     *
                     * **Note:** This method doesn't set the "length" property of bound functions.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {Object} object The object to bind and assign the bound methods to.
                     * @param {...(string|string[])} methodNames The object method names to bind.
                     * @returns {Object} Returns `object`.
                     * @example
                     *
                     * var view = {
                     *   'label': 'docs',
                     *   'click': function() {
                     *     console.log('clicked ' + this.label);
                     *   }
                     * };
                     *
                     * _.bindAll(view, ['click']);
                     * jQuery(element).on('click', view.click);
                     * // => Logs 'clicked docs' when clicked.
                     */
                    var bindAll = flatRest(function (object, methodNames) {
                        arrayEach(methodNames, function (key) {
                            key = toKey(key);
                            baseAssignValue(object, key, bind(object[key], object));
                        });
                        return object;
                    });

                    /**
                     * Creates a function that iterates over `pairs` and invokes the corresponding
                     * function of the first predicate to return truthy. The predicate-function
                     * pairs are invoked with the `this` binding and arguments of the created
                     * function.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {Array} pairs The predicate-function pairs.
                     * @returns {Function} Returns the new composite function.
                     * @example
                     *
                     * var func = _.cond([
                     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
                     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
                     *   [_.stubTrue,                      _.constant('no match')]
                     * ]);
                     *
                     * func({ 'a': 1, 'b': 2 });
                     * // => 'matches A'
                     *
                     * func({ 'a': 0, 'b': 1 });
                     * // => 'matches B'
                     *
                     * func({ 'a': '1', 'b': '2' });
                     * // => 'no match'
                     */
                    function cond(pairs) {
                        var length = pairs == null ? 0 : pairs.length,
                            toIteratee = getIteratee();

                        pairs = !length ? [] : arrayMap(pairs, function (pair) {
                            if (typeof pair[1] != 'function') {
                                throw new TypeError(FUNC_ERROR_TEXT);
                            }
                            return [toIteratee(pair[0]), pair[1]];
                        });

                        return baseRest(function (args) {
                            var index = -1;
                            while (++index < length) {
                                var pair = pairs[index];
                                if (apply(pair[0], this, args)) {
                                    return apply(pair[1], this, args);
                                }
                            }
                        });
                    }

                    /**
                     * Creates a function that invokes the predicate properties of `source` with
                     * the corresponding property values of a given object, returning `true` if
                     * all predicates return truthy, else `false`.
                     *
                     * **Note:** The created function is equivalent to `_.conformsTo` with
                     * `source` partially applied.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {Object} source The object of property predicates to conform to.
                     * @returns {Function} Returns the new spec function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': 2, 'b': 1 },
                     *   { 'a': 1, 'b': 2 }
                     * ];
                     *
                     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
                     * // => [{ 'a': 1, 'b': 2 }]
                     */
                    function conforms(source) {
                        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that returns `value`.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Util
                     * @param {*} value The value to return from the new function.
                     * @returns {Function} Returns the new constant function.
                     * @example
                     *
                     * var objects = _.times(2, _.constant({ 'a': 1 }));
                     *
                     * console.log(objects);
                     * // => [{ 'a': 1 }, { 'a': 1 }]
                     *
                     * console.log(objects[0] === objects[1]);
                     * // => true
                     */
                    function constant(value) {
                        return function () {
                            return value;
                        };
                    }

                    /**
                     * Checks `value` to determine whether a default value should be returned in
                     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
                     * or `undefined`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.14.0
                     * @category Util
                     * @param {*} value The value to check.
                     * @param {*} defaultValue The default value.
                     * @returns {*} Returns the resolved value.
                     * @example
                     *
                     * _.defaultTo(1, 10);
                     * // => 1
                     *
                     * _.defaultTo(undefined, 10);
                     * // => 10
                     */
                    function defaultTo(value, defaultValue) {
                        return (value == null || value !== value) ? defaultValue : value;
                    }

                    /**
                     * Creates a function that returns the result of invoking the given functions
                     * with the `this` binding of the created function, where each successive
                     * invocation is supplied the return value of the previous.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [funcs] The functions to invoke.
                     * @returns {Function} Returns the new composite function.
                     * @see _.flowRight
                     * @example
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * var addSquare = _.flow([_.add, square]);
                     * addSquare(1, 2);
                     * // => 9
                     */
                    var flow = createFlow();

                    /**
                     * This method is like `_.flow` except that it creates a function that
                     * invokes the given functions from right to left.
                     *
                     * @static
                     * @since 3.0.0
                     * @memberOf _
                     * @category Util
                     * @param {...(Function|Function[])} [funcs] The functions to invoke.
                     * @returns {Function} Returns the new composite function.
                     * @see _.flow
                     * @example
                     *
                     * function square(n) {
                     *   return n * n;
                     * }
                     *
                     * var addSquare = _.flowRight([square, _.add]);
                     * addSquare(1, 2);
                     * // => 9
                     */
                    var flowRight = createFlow(true);

                    /**
                     * This method returns the first argument it receives.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {*} value Any value.
                     * @returns {*} Returns `value`.
                     * @example
                     *
                     * var object = { 'a': 1 };
                     *
                     * console.log(_.identity(object) === object);
                     * // => true
                     */
                    function identity(value) {
                        return value;
                    }

                    /**
                     * Creates a function that invokes `func` with the arguments of the created
                     * function. If `func` is a property name, the created function returns the
                     * property value for a given element. If `func` is an array or object, the
                     * created function returns `true` for elements that contain the equivalent
                     * source properties, otherwise it returns `false`.
                     *
                     * @static
                     * @since 4.0.0
                     * @memberOf _
                     * @category Util
                     * @param {*} [func=_.identity] The value to convert to a callback.
                     * @returns {Function} Returns the callback.
                     * @example
                     *
                     * var users = [
                     *   { 'user': 'barney', 'age': 36, 'active': true },
                     *   { 'user': 'fred',   'age': 40, 'active': false }
                     * ];
                     *
                     * // The `_.matches` iteratee shorthand.
                     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
                     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
                     *
                     * // The `_.matchesProperty` iteratee shorthand.
                     * _.filter(users, _.iteratee(['user', 'fred']));
                     * // => [{ 'user': 'fred', 'age': 40 }]
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.map(users, _.iteratee('user'));
                     * // => ['barney', 'fred']
                     *
                     * // Create custom iteratee shorthands.
                     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
                     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
                     *     return func.test(string);
                     *   };
                     * });
                     *
                     * _.filter(['abc', 'def'], /ef/);
                     * // => ['def']
                     */
                    function iteratee(func) {
                        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that performs a partial deep comparison between a given
                     * object and `source`, returning `true` if the given object has equivalent
                     * property values, else `false`.
                     *
                     * **Note:** The created function is equivalent to `_.isMatch` with `source`
                     * partially applied.
                     *
                     * Partial comparisons will match empty array and empty object `source`
                     * values against any array or object value, respectively. See `_.isEqual`
                     * for a list of supported value comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {Object} source The object of property values to match.
                     * @returns {Function} Returns the new spec function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': 1, 'b': 2, 'c': 3 },
                     *   { 'a': 4, 'b': 5, 'c': 6 }
                     * ];
                     *
                     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
                     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
                     */
                    function matches(source) {
                        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that performs a partial deep comparison between the
                     * value at `path` of a given object to `srcValue`, returning `true` if the
                     * object value is equivalent, else `false`.
                     *
                     * **Note:** Partial comparisons will match empty array and empty object
                     * `srcValue` values against any array or object value, respectively. See
                     * `_.isEqual` for a list of supported value comparisons.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.2.0
                     * @category Util
                     * @param {Array|string} path The path of the property to get.
                     * @param {*} srcValue The value to match.
                     * @returns {Function} Returns the new spec function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': 1, 'b': 2, 'c': 3 },
                     *   { 'a': 4, 'b': 5, 'c': 6 }
                     * ];
                     *
                     * _.find(objects, _.matchesProperty('a', 4));
                     * // => { 'a': 4, 'b': 5, 'c': 6 }
                     */
                    function matchesProperty(path, srcValue) {
                        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
                    }

                    /**
                     * Creates a function that invokes the method at `path` of a given object.
                     * Any additional arguments are provided to the invoked method.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Util
                     * @param {Array|string} path The path of the method to invoke.
                     * @param {...*} [args] The arguments to invoke the method with.
                     * @returns {Function} Returns the new invoker function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': { 'b': _.constant(2) } },
                     *   { 'a': { 'b': _.constant(1) } }
                     * ];
                     *
                     * _.map(objects, _.method('a.b'));
                     * // => [2, 1]
                     *
                     * _.map(objects, _.method(['a', 'b']));
                     * // => [2, 1]
                     */
                    var method = baseRest(function (path, args) {
                        return function (object) {
                            return baseInvoke(object, path, args);
                        };
                    });

                    /**
                     * The opposite of `_.method`; this method creates a function that invokes
                     * the method at a given path of `object`. Any additional arguments are
                     * provided to the invoked method.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.7.0
                     * @category Util
                     * @param {Object} object The object to query.
                     * @param {...*} [args] The arguments to invoke the method with.
                     * @returns {Function} Returns the new invoker function.
                     * @example
                     *
                     * var array = _.times(3, _.constant),
                     *     object = { 'a': array, 'b': array, 'c': array };
                     *
                     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
                     * // => [2, 0]
                     *
                     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
                     * // => [2, 0]
                     */
                    var methodOf = baseRest(function (object, args) {
                        return function (path) {
                            return baseInvoke(object, path, args);
                        };
                    });

                    /**
                     * Adds all own enumerable string keyed function properties of a source
                     * object to the destination object. If `object` is a function, then methods
                     * are added to its prototype as well.
                     *
                     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
                     * avoid conflicts caused by modifying the original.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {Function|Object} [object=lodash] The destination object.
                     * @param {Object} source The object of functions to add.
                     * @param {Object} [options={}] The options object.
                     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
                     * @returns {Function|Object} Returns `object`.
                     * @example
                     *
                     * function vowels(string) {
                     *   return _.filter(string, function(v) {
                     *     return /[aeiou]/i.test(v);
                     *   });
                     * }
                     *
                     * _.mixin({ 'vowels': vowels });
                     * _.vowels('fred');
                     * // => ['e']
                     *
                     * _('fred').vowels().value();
                     * // => ['e']
                     *
                     * _.mixin({ 'vowels': vowels }, { 'chain': false });
                     * _('fred').vowels();
                     * // => ['e']
                     */
                    function mixin(object, source, options) {
                        var props = keys(source),
                            methodNames = baseFunctions(source, props);

                        if (options == null &&
                            !(isObject(source) && (methodNames.length || !props.length))) {
                            options = source;
                            source = object;
                            object = this;
                            methodNames = baseFunctions(source, keys(source));
                        }
                        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
                            isFunc = isFunction(object);

                        arrayEach(methodNames, function (methodName) {
                            var func = source[methodName];
                            object[methodName] = func;
                            if (isFunc) {
                                object.prototype[methodName] = function () {
                                    var chainAll = this.__chain__;
                                    if (chain || chainAll) {
                                        var result = object(this.__wrapped__),
                                            actions = result.__actions__ = copyArray(this.__actions__);

                                        actions.push({'func': func, 'args': arguments, 'thisArg': object});
                                        result.__chain__ = chainAll;
                                        return result;
                                    }
                                    return func.apply(object, arrayPush([this.value()], arguments));
                                };
                            }
                        });

                        return object;
                    }

                    /**
                     * Reverts the `_` variable to its previous value and returns a reference to
                     * the `lodash` function.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @returns {Function} Returns the `lodash` function.
                     * @example
                     *
                     * var lodash = _.noConflict();
                     */
                    function noConflict() {
                        if (root._ === this) {
                            root._ = oldDash;
                        }
                        return this;
                    }

                    /**
                     * This method returns `undefined`.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.3.0
                     * @category Util
                     * @example
                     *
                     * _.times(2, _.noop);
                     * // => [undefined, undefined]
                     */
                    function noop() {
                        // No operation performed.
                    }

                    /**
                     * Creates a function that gets the argument at index `n`. If `n` is negative,
                     * the nth argument from the end is returned.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {number} [n=0] The index of the argument to return.
                     * @returns {Function} Returns the new pass-thru function.
                     * @example
                     *
                     * var func = _.nthArg(1);
                     * func('a', 'b', 'c', 'd');
                     * // => 'b'
                     *
                     * var func = _.nthArg(-2);
                     * func('a', 'b', 'c', 'd');
                     * // => 'c'
                     */
                    function nthArg(n) {
                        n = toInteger(n);
                        return baseRest(function (args) {
                            return baseNth(args, n);
                        });
                    }

                    /**
                     * Creates a function that invokes `iteratees` with the arguments it receives
                     * and returns their results.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [iteratees=[_.identity]]
                     *  The iteratees to invoke.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var func = _.over([Math.max, Math.min]);
                     *
                     * func(1, 2, 3, 4);
                     * // => [4, 1]
                     */
                    var over = createOver(arrayMap);

                    /**
                     * Creates a function that checks if **all** of the `predicates` return
                     * truthy when invoked with the arguments it receives.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [predicates=[_.identity]]
                     *  The predicates to check.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var func = _.overEvery([Boolean, isFinite]);
                     *
                     * func('1');
                     * // => true
                     *
                     * func(null);
                     * // => false
                     *
                     * func(NaN);
                     * // => false
                     */
                    var overEvery = createOver(arrayEvery);

                    /**
                     * Creates a function that checks if **any** of the `predicates` return
                     * truthy when invoked with the arguments it receives.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {...(Function|Function[])} [predicates=[_.identity]]
                     *  The predicates to check.
                     * @returns {Function} Returns the new function.
                     * @example
                     *
                     * var func = _.overSome([Boolean, isFinite]);
                     *
                     * func('1');
                     * // => true
                     *
                     * func(null);
                     * // => true
                     *
                     * func(NaN);
                     * // => false
                     */
                    var overSome = createOver(arraySome);

                    /**
                     * Creates a function that returns the value at `path` of a given object.
                     *
                     * @static
                     * @memberOf _
                     * @since 2.4.0
                     * @category Util
                     * @param {Array|string} path The path of the property to get.
                     * @returns {Function} Returns the new accessor function.
                     * @example
                     *
                     * var objects = [
                     *   { 'a': { 'b': 2 } },
                     *   { 'a': { 'b': 1 } }
                     * ];
                     *
                     * _.map(objects, _.property('a.b'));
                     * // => [2, 1]
                     *
                     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
                     * // => [1, 2]
                     */
                    function property(path) {
                        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
                    }

                    /**
                     * The opposite of `_.property`; this method creates a function that returns
                     * the value at a given path of `object`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.0.0
                     * @category Util
                     * @param {Object} object The object to query.
                     * @returns {Function} Returns the new accessor function.
                     * @example
                     *
                     * var array = [0, 1, 2],
                     *     object = { 'a': array, 'b': array, 'c': array };
                     *
                     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
                     * // => [2, 0]
                     *
                     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
                     * // => [2, 0]
                     */
                    function propertyOf(object) {
                        return function (path) {
                            return object == null ? undefined : baseGet(object, path);
                        };
                    }

                    /**
                     * Creates an array of numbers (positive and/or negative) progressing from
                     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
                     * `start` is specified without an `end` or `step`. If `end` is not specified,
                     * it's set to `start` with `start` then set to `0`.
                     *
                     * **Note:** JavaScript follows the IEEE-754 standard for resolving
                     * floating-point values which can produce unexpected results.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {number} [start=0] The start of the range.
                     * @param {number} end The end of the range.
                     * @param {number} [step=1] The value to increment or decrement by.
                     * @returns {Array} Returns the range of numbers.
                     * @see _.inRange, _.rangeRight
                     * @example
                     *
                     * _.range(4);
                     * // => [0, 1, 2, 3]
                     *
                     * _.range(-4);
                     * // => [0, -1, -2, -3]
                     *
                     * _.range(1, 5);
                     * // => [1, 2, 3, 4]
                     *
                     * _.range(0, 20, 5);
                     * // => [0, 5, 10, 15]
                     *
                     * _.range(0, -4, -1);
                     * // => [0, -1, -2, -3]
                     *
                     * _.range(1, 4, 0);
                     * // => [1, 1, 1]
                     *
                     * _.range(0);
                     * // => []
                     */
                    var range = createRange();

                    /**
                     * This method is like `_.range` except that it populates values in
                     * descending order.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {number} [start=0] The start of the range.
                     * @param {number} end The end of the range.
                     * @param {number} [step=1] The value to increment or decrement by.
                     * @returns {Array} Returns the range of numbers.
                     * @see _.inRange, _.range
                     * @example
                     *
                     * _.rangeRight(4);
                     * // => [3, 2, 1, 0]
                     *
                     * _.rangeRight(-4);
                     * // => [-3, -2, -1, 0]
                     *
                     * _.rangeRight(1, 5);
                     * // => [4, 3, 2, 1]
                     *
                     * _.rangeRight(0, 20, 5);
                     * // => [15, 10, 5, 0]
                     *
                     * _.rangeRight(0, -4, -1);
                     * // => [-3, -2, -1, 0]
                     *
                     * _.rangeRight(1, 4, 0);
                     * // => [1, 1, 1]
                     *
                     * _.rangeRight(0);
                     * // => []
                     */
                    var rangeRight = createRange(true);

                    /**
                     * This method returns a new empty array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {Array} Returns the new empty array.
                     * @example
                     *
                     * var arrays = _.times(2, _.stubArray);
                     *
                     * console.log(arrays);
                     * // => [[], []]
                     *
                     * console.log(arrays[0] === arrays[1]);
                     * // => false
                     */
                    function stubArray() {
                        return [];
                    }

                    /**
                     * This method returns `false`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {boolean} Returns `false`.
                     * @example
                     *
                     * _.times(2, _.stubFalse);
                     * // => [false, false]
                     */
                    function stubFalse() {
                        return false;
                    }

                    /**
                     * This method returns a new empty object.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {Object} Returns the new empty object.
                     * @example
                     *
                     * var objects = _.times(2, _.stubObject);
                     *
                     * console.log(objects);
                     * // => [{}, {}]
                     *
                     * console.log(objects[0] === objects[1]);
                     * // => false
                     */
                    function stubObject() {
                        return {};
                    }

                    /**
                     * This method returns an empty string.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {string} Returns the empty string.
                     * @example
                     *
                     * _.times(2, _.stubString);
                     * // => ['', '']
                     */
                    function stubString() {
                        return '';
                    }

                    /**
                     * This method returns `true`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.13.0
                     * @category Util
                     * @returns {boolean} Returns `true`.
                     * @example
                     *
                     * _.times(2, _.stubTrue);
                     * // => [true, true]
                     */
                    function stubTrue() {
                        return true;
                    }

                    /**
                     * Invokes the iteratee `n` times, returning an array of the results of
                     * each invocation. The iteratee is invoked with one argument; (index).
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {number} n The number of times to invoke `iteratee`.
                     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
                     * @returns {Array} Returns the array of results.
                     * @example
                     *
                     * _.times(3, String);
                     * // => ['0', '1', '2']
                     *
                     *  _.times(4, _.constant(0));
                     * // => [0, 0, 0, 0]
                     */
                    function times(n, iteratee) {
                        n = toInteger(n);
                        if (n < 1 || n > MAX_SAFE_INTEGER) {
                            return [];
                        }
                        var index = MAX_ARRAY_LENGTH,
                            length = nativeMin(n, MAX_ARRAY_LENGTH);

                        iteratee = getIteratee(iteratee);
                        n -= MAX_ARRAY_LENGTH;

                        var result = baseTimes(length, iteratee);
                        while (++index < n) {
                            iteratee(index);
                        }
                        return result;
                    }

                    /**
                     * Converts `value` to a property path array.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Util
                     * @param {*} value The value to convert.
                     * @returns {Array} Returns the new property path array.
                     * @example
                     *
                     * _.toPath('a.b.c');
                     * // => ['a', 'b', 'c']
                     *
                     * _.toPath('a[0].b.c');
                     * // => ['a', '0', 'b', 'c']
                     */
                    function toPath(value) {
                        if (isArray(value)) {
                            return arrayMap(value, toKey);
                        }
                        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
                    }

                    /**
                     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Util
                     * @param {string} [prefix=''] The value to prefix the ID with.
                     * @returns {string} Returns the unique ID.
                     * @example
                     *
                     * _.uniqueId('contact_');
                     * // => 'contact_104'
                     *
                     * _.uniqueId();
                     * // => '105'
                     */
                    function uniqueId(prefix) {
                        var id = ++idCounter;
                        return toString(prefix) + id;
                    }

                    /*------------------------------------------------------------------------*/

                    /**
                     * Adds two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.4.0
                     * @category Math
                     * @param {number} augend The first number in an addition.
                     * @param {number} addend The second number in an addition.
                     * @returns {number} Returns the total.
                     * @example
                     *
                     * _.add(6, 4);
                     * // => 10
                     */
                    var add = createMathOperation(function (augend, addend) {
                        return augend + addend;
                    }, 0);

                    /**
                     * Computes `number` rounded up to `precision`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Math
                     * @param {number} number The number to round up.
                     * @param {number} [precision=0] The precision to round up to.
                     * @returns {number} Returns the rounded up number.
                     * @example
                     *
                     * _.ceil(4.006);
                     * // => 5
                     *
                     * _.ceil(6.004, 2);
                     * // => 6.01
                     *
                     * _.ceil(6040, -2);
                     * // => 6100
                     */
                    var ceil = createRound('ceil');

                    /**
                     * Divide two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Math
                     * @param {number} dividend The first number in a division.
                     * @param {number} divisor The second number in a division.
                     * @returns {number} Returns the quotient.
                     * @example
                     *
                     * _.divide(6, 4);
                     * // => 1.5
                     */
                    var divide = createMathOperation(function (dividend, divisor) {
                        return dividend / divisor;
                    }, 1);

                    /**
                     * Computes `number` rounded down to `precision`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Math
                     * @param {number} number The number to round down.
                     * @param {number} [precision=0] The precision to round down to.
                     * @returns {number} Returns the rounded down number.
                     * @example
                     *
                     * _.floor(4.006);
                     * // => 4
                     *
                     * _.floor(0.046, 2);
                     * // => 0.04
                     *
                     * _.floor(4060, -2);
                     * // => 4000
                     */
                    var floor = createRound('floor');

                    /**
                     * Computes the maximum value of `array`. If `array` is empty or falsey,
                     * `undefined` is returned.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {*} Returns the maximum value.
                     * @example
                     *
                     * _.max([4, 2, 8, 6]);
                     * // => 8
                     *
                     * _.max([]);
                     * // => undefined
                     */
                    function max(array) {
                        return (array && array.length)
                            ? baseExtremum(array, identity, baseGt)
                            : undefined;
                    }

                    /**
                     * This method is like `_.max` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the criterion by which
                     * the value is ranked. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {*} Returns the maximum value.
                     * @example
                     *
                     * var objects = [{ 'n': 1 }, { 'n': 2 }];
                     *
                     * _.maxBy(objects, function(o) { return o.n; });
                     * // => { 'n': 2 }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.maxBy(objects, 'n');
                     * // => { 'n': 2 }
                     */
                    function maxBy(array, iteratee) {
                        return (array && array.length)
                            ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
                            : undefined;
                    }

                    /**
                     * Computes the mean of the values in `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {number} Returns the mean.
                     * @example
                     *
                     * _.mean([4, 2, 8, 6]);
                     * // => 5
                     */
                    function mean(array) {
                        return baseMean(array, identity);
                    }

                    /**
                     * This method is like `_.mean` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the value to be averaged.
                     * The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the mean.
                     * @example
                     *
                     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                     *
                     * _.meanBy(objects, function(o) { return o.n; });
                     * // => 5
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.meanBy(objects, 'n');
                     * // => 5
                     */
                    function meanBy(array, iteratee) {
                        return baseMean(array, getIteratee(iteratee, 2));
                    }

                    /**
                     * Computes the minimum value of `array`. If `array` is empty or falsey,
                     * `undefined` is returned.
                     *
                     * @static
                     * @since 0.1.0
                     * @memberOf _
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {*} Returns the minimum value.
                     * @example
                     *
                     * _.min([4, 2, 8, 6]);
                     * // => 2
                     *
                     * _.min([]);
                     * // => undefined
                     */
                    function min(array) {
                        return (array && array.length)
                            ? baseExtremum(array, identity, baseLt)
                            : undefined;
                    }

                    /**
                     * This method is like `_.min` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the criterion by which
                     * the value is ranked. The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {*} Returns the minimum value.
                     * @example
                     *
                     * var objects = [{ 'n': 1 }, { 'n': 2 }];
                     *
                     * _.minBy(objects, function(o) { return o.n; });
                     * // => { 'n': 1 }
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.minBy(objects, 'n');
                     * // => { 'n': 1 }
                     */
                    function minBy(array, iteratee) {
                        return (array && array.length)
                            ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
                            : undefined;
                    }

                    /**
                     * Multiply two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.7.0
                     * @category Math
                     * @param {number} multiplier The first number in a multiplication.
                     * @param {number} multiplicand The second number in a multiplication.
                     * @returns {number} Returns the product.
                     * @example
                     *
                     * _.multiply(6, 4);
                     * // => 24
                     */
                    var multiply = createMathOperation(function (multiplier, multiplicand) {
                        return multiplier * multiplicand;
                    }, 1);

                    /**
                     * Computes `number` rounded to `precision`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.10.0
                     * @category Math
                     * @param {number} number The number to round.
                     * @param {number} [precision=0] The precision to round to.
                     * @returns {number} Returns the rounded number.
                     * @example
                     *
                     * _.round(4.006);
                     * // => 4
                     *
                     * _.round(4.006, 2);
                     * // => 4.01
                     *
                     * _.round(4060, -2);
                     * // => 4100
                     */
                    var round = createRound('round');

                    /**
                     * Subtract two numbers.
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {number} minuend The first number in a subtraction.
                     * @param {number} subtrahend The second number in a subtraction.
                     * @returns {number} Returns the difference.
                     * @example
                     *
                     * _.subtract(6, 4);
                     * // => 2
                     */
                    var subtract = createMathOperation(function (minuend, subtrahend) {
                        return minuend - subtrahend;
                    }, 0);

                    /**
                     * Computes the sum of the values in `array`.
                     *
                     * @static
                     * @memberOf _
                     * @since 3.4.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @returns {number} Returns the sum.
                     * @example
                     *
                     * _.sum([4, 2, 8, 6]);
                     * // => 20
                     */
                    function sum(array) {
                        return (array && array.length)
                            ? baseSum(array, identity)
                            : 0;
                    }

                    /**
                     * This method is like `_.sum` except that it accepts `iteratee` which is
                     * invoked for each element in `array` to generate the value to be summed.
                     * The iteratee is invoked with one argument: (value).
                     *
                     * @static
                     * @memberOf _
                     * @since 4.0.0
                     * @category Math
                     * @param {Array} array The array to iterate over.
                     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
                     * @returns {number} Returns the sum.
                     * @example
                     *
                     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
                     *
                     * _.sumBy(objects, function(o) { return o.n; });
                     * // => 20
                     *
                     * // The `_.property` iteratee shorthand.
                     * _.sumBy(objects, 'n');
                     * // => 20
                     */
                    function sumBy(array, iteratee) {
                        return (array && array.length)
                            ? baseSum(array, getIteratee(iteratee, 2))
                            : 0;
                    }

                    /*------------------------------------------------------------------------*/

                    // Add methods that return wrapped values in chain sequences.
                    lodash.after = after;
                    lodash.ary = ary;
                    lodash.assign = assign;
                    lodash.assignIn = assignIn;
                    lodash.assignInWith = assignInWith;
                    lodash.assignWith = assignWith;
                    lodash.at = at;
                    lodash.before = before;
                    lodash.bind = bind;
                    lodash.bindAll = bindAll;
                    lodash.bindKey = bindKey;
                    lodash.castArray = castArray;
                    lodash.chain = chain;
                    lodash.chunk = chunk;
                    lodash.compact = compact;
                    lodash.concat = concat;
                    lodash.cond = cond;
                    lodash.conforms = conforms;
                    lodash.constant = constant;
                    lodash.countBy = countBy;
                    lodash.create = create;
                    lodash.curry = curry;
                    lodash.curryRight = curryRight;
                    lodash.debounce = debounce;
                    lodash.defaults = defaults;
                    lodash.defaultsDeep = defaultsDeep;
                    lodash.defer = defer;
                    lodash.delay = delay;
                    lodash.difference = difference;
                    lodash.differenceBy = differenceBy;
                    lodash.differenceWith = differenceWith;
                    lodash.drop = drop;
                    lodash.dropRight = dropRight;
                    lodash.dropRightWhile = dropRightWhile;
                    lodash.dropWhile = dropWhile;
                    lodash.fill = fill;
                    lodash.filter = filter;
                    lodash.flatMap = flatMap;
                    lodash.flatMapDeep = flatMapDeep;
                    lodash.flatMapDepth = flatMapDepth;
                    lodash.flatten = flatten;
                    lodash.flattenDeep = flattenDeep;
                    lodash.flattenDepth = flattenDepth;
                    lodash.flip = flip;
                    lodash.flow = flow;
                    lodash.flowRight = flowRight;
                    lodash.fromPairs = fromPairs;
                    lodash.functions = functions;
                    lodash.functionsIn = functionsIn;
                    lodash.groupBy = groupBy;
                    lodash.initial = initial;
                    lodash.intersection = intersection;
                    lodash.intersectionBy = intersectionBy;
                    lodash.intersectionWith = intersectionWith;
                    lodash.invert = invert;
                    lodash.invertBy = invertBy;
                    lodash.invokeMap = invokeMap;
                    lodash.iteratee = iteratee;
                    lodash.keyBy = keyBy;
                    lodash.keys = keys;
                    lodash.keysIn = keysIn;
                    lodash.map = map;
                    lodash.mapKeys = mapKeys;
                    lodash.mapValues = mapValues;
                    lodash.matches = matches;
                    lodash.matchesProperty = matchesProperty;
                    lodash.memoize = memoize;
                    lodash.merge = merge;
                    lodash.mergeWith = mergeWith;
                    lodash.method = method;
                    lodash.methodOf = methodOf;
                    lodash.mixin = mixin;
                    lodash.negate = negate;
                    lodash.nthArg = nthArg;
                    lodash.omit = omit;
                    lodash.omitBy = omitBy;
                    lodash.once = once;
                    lodash.orderBy = orderBy;
                    lodash.over = over;
                    lodash.overArgs = overArgs;
                    lodash.overEvery = overEvery;
                    lodash.overSome = overSome;
                    lodash.partial = partial;
                    lodash.partialRight = partialRight;
                    lodash.partition = partition;
                    lodash.pick = pick;
                    lodash.pickBy = pickBy;
                    lodash.property = property;
                    lodash.propertyOf = propertyOf;
                    lodash.pull = pull;
                    lodash.pullAll = pullAll;
                    lodash.pullAllBy = pullAllBy;
                    lodash.pullAllWith = pullAllWith;
                    lodash.pullAt = pullAt;
                    lodash.range = range;
                    lodash.rangeRight = rangeRight;
                    lodash.rearg = rearg;
                    lodash.reject = reject;
                    lodash.remove = remove;
                    lodash.rest = rest;
                    lodash.reverse = reverse;
                    lodash.sampleSize = sampleSize;
                    lodash.set = set;
                    lodash.setWith = setWith;
                    lodash.shuffle = shuffle;
                    lodash.slice = slice;
                    lodash.sortBy = sortBy;
                    lodash.sortedUniq = sortedUniq;
                    lodash.sortedUniqBy = sortedUniqBy;
                    lodash.split = split;
                    lodash.spread = spread;
                    lodash.tail = tail;
                    lodash.take = take;
                    lodash.takeRight = takeRight;
                    lodash.takeRightWhile = takeRightWhile;
                    lodash.takeWhile = takeWhile;
                    lodash.tap = tap;
                    lodash.throttle = throttle;
                    lodash.thru = thru;
                    lodash.toArray = toArray;
                    lodash.toPairs = toPairs;
                    lodash.toPairsIn = toPairsIn;
                    lodash.toPath = toPath;
                    lodash.toPlainObject = toPlainObject;
                    lodash.transform = transform;
                    lodash.unary = unary;
                    lodash.union = union;
                    lodash.unionBy = unionBy;
                    lodash.unionWith = unionWith;
                    lodash.uniq = uniq;
                    lodash.uniqBy = uniqBy;
                    lodash.uniqWith = uniqWith;
                    lodash.unset = unset;
                    lodash.unzip = unzip;
                    lodash.unzipWith = unzipWith;
                    lodash.update = update;
                    lodash.updateWith = updateWith;
                    lodash.values = values;
                    lodash.valuesIn = valuesIn;
                    lodash.without = without;
                    lodash.words = words;
                    lodash.wrap = wrap;
                    lodash.xor = xor;
                    lodash.xorBy = xorBy;
                    lodash.xorWith = xorWith;
                    lodash.zip = zip;
                    lodash.zipObject = zipObject;
                    lodash.zipObjectDeep = zipObjectDeep;
                    lodash.zipWith = zipWith;

                    // Add aliases.
                    lodash.entries = toPairs;
                    lodash.entriesIn = toPairsIn;
                    lodash.extend = assignIn;
                    lodash.extendWith = assignInWith;

                    // Add methods to `lodash.prototype`.
                    mixin(lodash, lodash);

                    /*------------------------------------------------------------------------*/

                    // Add methods that return unwrapped values in chain sequences.
                    lodash.add = add;
                    lodash.attempt = attempt;
                    lodash.camelCase = camelCase;
                    lodash.capitalize = capitalize;
                    lodash.ceil = ceil;
                    lodash.clamp = clamp;
                    lodash.clone = clone;
                    lodash.cloneDeep = cloneDeep;
                    lodash.cloneDeepWith = cloneDeepWith;
                    lodash.cloneWith = cloneWith;
                    lodash.conformsTo = conformsTo;
                    lodash.deburr = deburr;
                    lodash.defaultTo = defaultTo;
                    lodash.divide = divide;
                    lodash.endsWith = endsWith;
                    lodash.eq = eq;
                    lodash.escape = escape;
                    lodash.escapeRegExp = escapeRegExp;
                    lodash.every = every;
                    lodash.find = find;
                    lodash.findIndex = findIndex;
                    lodash.findKey = findKey;
                    lodash.findLast = findLast;
                    lodash.findLastIndex = findLastIndex;
                    lodash.findLastKey = findLastKey;
                    lodash.floor = floor;
                    lodash.forEach = forEach;
                    lodash.forEachRight = forEachRight;
                    lodash.forIn = forIn;
                    lodash.forInRight = forInRight;
                    lodash.forOwn = forOwn;
                    lodash.forOwnRight = forOwnRight;
                    lodash.get = get;
                    lodash.gt = gt;
                    lodash.gte = gte;
                    lodash.has = has;
                    lodash.hasIn = hasIn;
                    lodash.head = head;
                    lodash.identity = identity;
                    lodash.includes = includes;
                    lodash.indexOf = indexOf;
                    lodash.inRange = inRange;
                    lodash.invoke = invoke;
                    lodash.isArguments = isArguments;
                    lodash.isArray = isArray;
                    lodash.isArrayBuffer = isArrayBuffer;
                    lodash.isArrayLike = isArrayLike;
                    lodash.isArrayLikeObject = isArrayLikeObject;
                    lodash.isBoolean = isBoolean;
                    lodash.isBuffer = isBuffer;
                    lodash.isDate = isDate;
                    lodash.isElement = isElement;
                    lodash.isEmpty = isEmpty;
                    lodash.isEqual = isEqual;
                    lodash.isEqualWith = isEqualWith;
                    lodash.isError = isError;
                    lodash.isFinite = isFinite;
                    lodash.isFunction = isFunction;
                    lodash.isInteger = isInteger;
                    lodash.isLength = isLength;
                    lodash.isMap = isMap;
                    lodash.isMatch = isMatch;
                    lodash.isMatchWith = isMatchWith;
                    lodash.isNaN = isNaN;
                    lodash.isNative = isNative;
                    lodash.isNil = isNil;
                    lodash.isNull = isNull;
                    lodash.isNumber = isNumber;
                    lodash.isObject = isObject;
                    lodash.isObjectLike = isObjectLike;
                    lodash.isPlainObject = isPlainObject;
                    lodash.isRegExp = isRegExp;
                    lodash.isSafeInteger = isSafeInteger;
                    lodash.isSet = isSet;
                    lodash.isString = isString;
                    lodash.isSymbol = isSymbol;
                    lodash.isTypedArray = isTypedArray;
                    lodash.isUndefined = isUndefined;
                    lodash.isWeakMap = isWeakMap;
                    lodash.isWeakSet = isWeakSet;
                    lodash.join = join;
                    lodash.kebabCase = kebabCase;
                    lodash.last = last;
                    lodash.lastIndexOf = lastIndexOf;
                    lodash.lowerCase = lowerCase;
                    lodash.lowerFirst = lowerFirst;
                    lodash.lt = lt;
                    lodash.lte = lte;
                    lodash.max = max;
                    lodash.maxBy = maxBy;
                    lodash.mean = mean;
                    lodash.meanBy = meanBy;
                    lodash.min = min;
                    lodash.minBy = minBy;
                    lodash.stubArray = stubArray;
                    lodash.stubFalse = stubFalse;
                    lodash.stubObject = stubObject;
                    lodash.stubString = stubString;
                    lodash.stubTrue = stubTrue;
                    lodash.multiply = multiply;
                    lodash.nth = nth;
                    lodash.noConflict = noConflict;
                    lodash.noop = noop;
                    lodash.now = now;
                    lodash.pad = pad;
                    lodash.padEnd = padEnd;
                    lodash.padStart = padStart;
                    lodash.parseInt = parseInt;
                    lodash.random = random;
                    lodash.reduce = reduce;
                    lodash.reduceRight = reduceRight;
                    lodash.repeat = repeat;
                    lodash.replace = replace;
                    lodash.result = result;
                    lodash.round = round;
                    lodash.runInContext = runInContext;
                    lodash.sample = sample;
                    lodash.size = size;
                    lodash.snakeCase = snakeCase;
                    lodash.some = some;
                    lodash.sortedIndex = sortedIndex;
                    lodash.sortedIndexBy = sortedIndexBy;
                    lodash.sortedIndexOf = sortedIndexOf;
                    lodash.sortedLastIndex = sortedLastIndex;
                    lodash.sortedLastIndexBy = sortedLastIndexBy;
                    lodash.sortedLastIndexOf = sortedLastIndexOf;
                    lodash.startCase = startCase;
                    lodash.startsWith = startsWith;
                    lodash.subtract = subtract;
                    lodash.sum = sum;
                    lodash.sumBy = sumBy;
                    lodash.template = template;
                    lodash.times = times;
                    lodash.toFinite = toFinite;
                    lodash.toInteger = toInteger;
                    lodash.toLength = toLength;
                    lodash.toLower = toLower;
                    lodash.toNumber = toNumber;
                    lodash.toSafeInteger = toSafeInteger;
                    lodash.toString = toString;
                    lodash.toUpper = toUpper;
                    lodash.trim = trim;
                    lodash.trimEnd = trimEnd;
                    lodash.trimStart = trimStart;
                    lodash.truncate = truncate;
                    lodash.unescape = unescape;
                    lodash.uniqueId = uniqueId;
                    lodash.upperCase = upperCase;
                    lodash.upperFirst = upperFirst;

                    // Add aliases.
                    lodash.each = forEach;
                    lodash.eachRight = forEachRight;
                    lodash.first = head;

                    mixin(lodash, (function () {
                        var source = {};
                        baseForOwn(lodash, function (func, methodName) {
                            if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                                source[methodName] = func;
                            }
                        });
                        return source;
                    }()), {'chain': false});

                    /*------------------------------------------------------------------------*/

                    /**
                     * The semantic version number.
                     *
                     * @static
                     * @memberOf _
                     * @type {string}
                     */
                    lodash.VERSION = VERSION;

                    // Assign default placeholders.
                    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function (methodName) {
                        lodash[methodName].placeholder = lodash;
                    });

                    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
                    arrayEach(['drop', 'take'], function (methodName, index) {
                        LazyWrapper.prototype[methodName] = function (n) {
                            n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

                            var result = (this.__filtered__ && !index)
                                ? new LazyWrapper(this)
                                : this.clone();

                            if (result.__filtered__) {
                                result.__takeCount__ = nativeMin(n, result.__takeCount__);
                            } else {
                                result.__views__.push({
                                    'size': nativeMin(n, MAX_ARRAY_LENGTH),
                                    'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                                });
                            }
                            return result;
                        };

                        LazyWrapper.prototype[methodName + 'Right'] = function (n) {
                            return this.reverse()[methodName](n).reverse();
                        };
                    });

                    // Add `LazyWrapper` methods that accept an `iteratee` value.
                    arrayEach(['filter', 'map', 'takeWhile'], function (methodName, index) {
                        var type = index + 1,
                            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

                        LazyWrapper.prototype[methodName] = function (iteratee) {
                            var result = this.clone();
                            result.__iteratees__.push({
                                'iteratee': getIteratee(iteratee, 3),
                                'type': type
                            });
                            result.__filtered__ = result.__filtered__ || isFilter;
                            return result;
                        };
                    });

                    // Add `LazyWrapper` methods for `_.head` and `_.last`.
                    arrayEach(['head', 'last'], function (methodName, index) {
                        var takeName = 'take' + (index ? 'Right' : '');

                        LazyWrapper.prototype[methodName] = function () {
                            return this[takeName](1).value()[0];
                        };
                    });

                    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
                    arrayEach(['initial', 'tail'], function (methodName, index) {
                        var dropName = 'drop' + (index ? '' : 'Right');

                        LazyWrapper.prototype[methodName] = function () {
                            return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
                        };
                    });

                    LazyWrapper.prototype.compact = function () {
                        return this.filter(identity);
                    };

                    LazyWrapper.prototype.find = function (predicate) {
                        return this.filter(predicate).head();
                    };

                    LazyWrapper.prototype.findLast = function (predicate) {
                        return this.reverse().find(predicate);
                    };

                    LazyWrapper.prototype.invokeMap = baseRest(function (path, args) {
                        if (typeof path == 'function') {
                            return new LazyWrapper(this);
                        }
                        return this.map(function (value) {
                            return baseInvoke(value, path, args);
                        });
                    });

                    LazyWrapper.prototype.reject = function (predicate) {
                        return this.filter(negate(getIteratee(predicate)));
                    };

                    LazyWrapper.prototype.slice = function (start, end) {
                        start = toInteger(start);

                        var result = this;
                        if (result.__filtered__ && (start > 0 || end < 0)) {
                            return new LazyWrapper(result);
                        }
                        if (start < 0) {
                            result = result.takeRight(-start);
                        } else if (start) {
                            result = result.drop(start);
                        }
                        if (end !== undefined) {
                            end = toInteger(end);
                            result = end < 0 ? result.dropRight(-end) : result.take(end - start);
                        }
                        return result;
                    };

                    LazyWrapper.prototype.takeRightWhile = function (predicate) {
                        return this.reverse().takeWhile(predicate).reverse();
                    };

                    LazyWrapper.prototype.toArray = function () {
                        return this.take(MAX_ARRAY_LENGTH);
                    };

                    // Add `LazyWrapper` methods to `lodash.prototype`.
                    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
                            isTaker = /^(?:head|last)$/.test(methodName),
                            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
                            retUnwrapped = isTaker || /^find/.test(methodName);

                        if (!lodashFunc) {
                            return;
                        }
                        lodash.prototype[methodName] = function () {
                            var value = this.__wrapped__,
                                args = isTaker ? [1] : arguments,
                                isLazy = value instanceof LazyWrapper,
                                iteratee = args[0],
                                useLazy = isLazy || isArray(value);

                            var interceptor = function (value) {
                                var result = lodashFunc.apply(lodash, arrayPush([value], args));
                                return (isTaker && chainAll) ? result[0] : result;
                            };

                            if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
                                // Avoid lazy use if the iteratee has a "length" value other than `1`.
                                isLazy = useLazy = false;
                            }
                            var chainAll = this.__chain__,
                                isHybrid = !!this.__actions__.length,
                                isUnwrapped = retUnwrapped && !chainAll,
                                onlyLazy = isLazy && !isHybrid;

                            if (!retUnwrapped && useLazy) {
                                value = onlyLazy ? value : new LazyWrapper(this);
                                var result = func.apply(value, args);
                                result.__actions__.push({'func': thru, 'args': [interceptor], 'thisArg': undefined});
                                return new LodashWrapper(result, chainAll);
                            }
                            if (isUnwrapped && onlyLazy) {
                                return func.apply(this, args);
                            }
                            result = this.thru(interceptor);
                            return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
                        };
                    });

                    // Add `Array` methods to `lodash.prototype`.
                    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function (methodName) {
                        var func = arrayProto[methodName],
                            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
                            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

                        lodash.prototype[methodName] = function () {
                            var args = arguments;
                            if (retUnwrapped && !this.__chain__) {
                                var value = this.value();
                                return func.apply(isArray(value) ? value : [], args);
                            }
                            return this[chainName](function (value) {
                                return func.apply(isArray(value) ? value : [], args);
                            });
                        };
                    });

                    // Map minified method names to their real names.
                    baseForOwn(LazyWrapper.prototype, function (func, methodName) {
                        var lodashFunc = lodash[methodName];
                        if (lodashFunc) {
                            var key = lodashFunc.name + '';
                            if (!hasOwnProperty.call(realNames, key)) {
                                realNames[key] = [];
                            }
                            realNames[key].push({'name': methodName, 'func': lodashFunc});
                        }
                    });

                    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
                        'name': 'wrapper',
                        'func': undefined
                    }];

                    // Add methods to `LazyWrapper`.
                    LazyWrapper.prototype.clone = lazyClone;
                    LazyWrapper.prototype.reverse = lazyReverse;
                    LazyWrapper.prototype.value = lazyValue;

                    // Add chain sequence methods to the `lodash` wrapper.
                    lodash.prototype.at = wrapperAt;
                    lodash.prototype.chain = wrapperChain;
                    lodash.prototype.commit = wrapperCommit;
                    lodash.prototype.next = wrapperNext;
                    lodash.prototype.plant = wrapperPlant;
                    lodash.prototype.reverse = wrapperReverse;
                    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

                    // Add lazy aliases.
                    lodash.prototype.first = lodash.prototype.head;

                    if (symIterator) {
                        lodash.prototype[symIterator] = wrapperToIterator;
                    }
                    return lodash;
                });

                /*--------------------------------------------------------------------------*/

                // Export lodash.
                var _ = runInContext();

                // Some AMD build optimizers, like r.js, check for condition patterns like:
                if (true) {
                    // Expose Lodash on the global object to prevent errors when Lodash is
                    // loaded by a script tag in the presence of an AMD loader.
                    // See http://requirejs.org/docs/errors.html#mismatch for more details.
                    // Use `_.noConflict` to remove Lodash from the global object.
                    root._ = _;

                    // Define as an anonymous module so, through path mapping, it can be
                    // referenced as the "underscore" module.
                    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
                        return _;
                    }).call(exports, __webpack_require__, exports, module),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                }
                // Check for `exports` after `define` in case a build optimizer adds it.
                else {
                }
            }.call(this));

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

        /***/
    }),

    /***/
    "./node_modules/process/browser.js":
    /*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
    /*! no static exports found */
    /***/ (function (module, exports) {

// shim for using process in browser
        var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

        var cachedSetTimeout;
        var cachedClearTimeout;

        function defaultSetTimout() {
            throw new Error('setTimeout has not been defined');
        }

        function defaultClearTimeout() {
            throw new Error('clearTimeout has not been defined');
        }

        (function () {
            try {
                if (typeof setTimeout === 'function') {
                    cachedSetTimeout = setTimeout;
                } else {
                    cachedSetTimeout = defaultSetTimout;
                }
            } catch (e) {
                cachedSetTimeout = defaultSetTimout;
            }
            try {
                if (typeof clearTimeout === 'function') {
                    cachedClearTimeout = clearTimeout;
                } else {
                    cachedClearTimeout = defaultClearTimeout;
                }
            } catch (e) {
                cachedClearTimeout = defaultClearTimeout;
            }
        }())

        function runTimeout(fun) {
            if (cachedSetTimeout === setTimeout) {
                //normal enviroments in sane situations
                return setTimeout(fun, 0);
            }
            // if setTimeout wasn't available but was latter defined
            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                cachedSetTimeout = setTimeout;
                return setTimeout(fun, 0);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedSetTimeout(fun, 0);
            } catch (e) {
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                    return cachedSetTimeout.call(null, fun, 0);
                } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                    return cachedSetTimeout.call(this, fun, 0);
                }
            }


        }

        function runClearTimeout(marker) {
            if (cachedClearTimeout === clearTimeout) {
                //normal enviroments in sane situations
                return clearTimeout(marker);
            }
            // if clearTimeout wasn't available but was latter defined
            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                cachedClearTimeout = clearTimeout;
                return clearTimeout(marker);
            }
            try {
                // when when somebody has screwed with setTimeout but no I.E. maddness
                return cachedClearTimeout(marker);
            } catch (e) {
                try {
                    // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                    return cachedClearTimeout.call(null, marker);
                } catch (e) {
                    // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                    // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                    return cachedClearTimeout.call(this, marker);
                }
            }


        }

        var queue = [];
        var draining = false;
        var currentQueue;
        var queueIndex = -1;

        function cleanUpNextTick() {
            if (!draining || !currentQueue) {
                return;
            }
            draining = false;
            if (currentQueue.length) {
                queue = currentQueue.concat(queue);
            } else {
                queueIndex = -1;
            }
            if (queue.length) {
                drainQueue();
            }
        }

        function drainQueue() {
            if (draining) {
                return;
            }
            var timeout = runTimeout(cleanUpNextTick);
            draining = true;

            var len = queue.length;
            while (len) {
                currentQueue = queue;
                queue = [];
                while (++queueIndex < len) {
                    if (currentQueue) {
                        currentQueue[queueIndex].run();
                    }
                }
                queueIndex = -1;
                len = queue.length;
            }
            currentQueue = null;
            draining = false;
            runClearTimeout(timeout);
        }

        process.nextTick = function (fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
                for (var i = 1; i < arguments.length; i++) {
                    args[i - 1] = arguments[i];
                }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
                runTimeout(drainQueue);
            }
        };

// v8 likes predictible objects
        function Item(fun, array) {
            this.fun = fun;
            this.array = array;
        }

        Item.prototype.run = function () {
            this.fun.apply(null, this.array);
        };
        process.title = 'browser';
        process.browser = true;
        process.env = {};
        process.argv = [];
        process.version = ''; // empty string to avoid regexp issues
        process.versions = {};

        function noop() {
        }

        process.on = noop;
        process.addListener = noop;
        process.once = noop;
        process.off = noop;
        process.removeListener = noop;
        process.removeAllListeners = noop;
        process.emit = noop;
        process.prependListener = noop;
        process.prependOnceListener = noop;

        process.listeners = function (name) {
            return []
        }

        process.binding = function (name) {
            throw new Error('process.binding is not supported');
        };

        process.cwd = function () {
            return '/'
        };
        process.chdir = function (dir) {
            throw new Error('process.chdir is not supported');
        };
        process.umask = function () {
            return 0;
        };


        /***/
    }),

    /***/
    "./node_modules/sanitize-html/dist/sanitize-html.js":
    /*!**********************************************************!*\
  !*** ./node_modules/sanitize-html/dist/sanitize-html.js ***!
  \**********************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */
        (function (global) {
            var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
            var require;
            var require;

            function _toConsumableArray(arr) {
                return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
            }

            function _nonIterableSpread() {
                throw new TypeError("Invalid attempt to spread non-iterable instance");
            }

            function _iterableToArray(iter) {
                if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
            }

            function _arrayWithoutHoles(arr) {
                if (Array.isArray(arr)) {
                    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
                        arr2[i] = arr[i];
                    }
                    return arr2;
                }
            }

            function _typeof(obj) {
                "@babel/helpers - typeof";
                if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                    _typeof = function _typeof(obj) {
                        return typeof obj;
                    };
                } else {
                    _typeof = function _typeof(obj) {
                        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
                    };
                }
                return _typeof(obj);
            }

            (function (f) {
                if ((false ? undefined : _typeof(exports)) === "object" && typeof module !== "undefined") {
                    module.exports = f();
                } else if (true) {
                    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),
                        __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
                            (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
                    __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
                } else {
                    var g;
                }
            })(function () {
                var define, module, exports;
                return function () {
                    function r(e, n, t) {
                        function o(i, f) {
                            if (!n[i]) {
                                if (!e[i]) {
                                    var c = "function" == typeof require && require;
                                    if (!f && c) return require(i, !0);
                                    if (u) return u(i, !0);
                                    var a = new Error("Cannot find module '" + i + "'");
                                    throw a.code = "MODULE_NOT_FOUND", a;
                                }
                                var p = n[i] = {exports: {}};
                                e[i][0].call(p.exports, function (r) {
                                    var n = e[i][1][r];
                                    return o(n || r);
                                }, p, p.exports, r, e, n, t);
                            }
                            return n[i].exports;
                        }

                        for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
                            o(t[i]);
                        }
                        return o;
                    }

                    return r;
                }()({
                    1: [function (require, module, exports) {
                        'use strict';
                        exports.byteLength = byteLength;
                        exports.toByteArray = toByteArray;
                        exports.fromByteArray = fromByteArray;
                        var lookup = [];
                        var revLookup = [];
                        var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
                        var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                        for (var i = 0, len = code.length; i < len; ++i) {
                            lookup[i] = code[i];
                            revLookup[code.charCodeAt(i)] = i;
                        }// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
                        revLookup['-'.charCodeAt(0)] = 62;
                        revLookup['_'.charCodeAt(0)] = 63;

                        function getLens(b64) {
                            var len = b64.length;
                            if (len % 4 > 0) {
                                throw new Error('Invalid string. Length must be a multiple of 4');
                            }// Trim off extra bytes after placeholder bytes are found
// See: https://github.com/beatgammit/base64-js/issues/42
                            var validLen = b64.indexOf('=');
                            if (validLen === -1) validLen = len;
                            var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
                            return [validLen, placeHoldersLen];
                        }// base64 is 4/3 + up to two characters of the original data
                        function byteLength(b64) {
                            var lens = getLens(b64);
                            var validLen = lens[0];
                            var placeHoldersLen = lens[1];
                            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
                        }

                        function _byteLength(b64, validLen, placeHoldersLen) {
                            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
                        }

                        function toByteArray(b64) {
                            var tmp;
                            var lens = getLens(b64);
                            var validLen = lens[0];
                            var placeHoldersLen = lens[1];
                            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
                            var curByte = 0;// if there are placeholders, only get up to the last complete 4 chars
                            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
                            var i;
                            for (i = 0; i < len; i += 4) {
                                tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
                                arr[curByte++] = tmp >> 16 & 0xFF;
                                arr[curByte++] = tmp >> 8 & 0xFF;
                                arr[curByte++] = tmp & 0xFF;
                            }
                            if (placeHoldersLen === 2) {
                                tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
                                arr[curByte++] = tmp & 0xFF;
                            }
                            if (placeHoldersLen === 1) {
                                tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
                                arr[curByte++] = tmp >> 8 & 0xFF;
                                arr[curByte++] = tmp & 0xFF;
                            }
                            return arr;
                        }

                        function tripletToBase64(num) {
                            return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
                        }

                        function encodeChunk(uint8, start, end) {
                            var tmp;
                            var output = [];
                            for (var i = start; i < end; i += 3) {
                                tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
                                output.push(tripletToBase64(tmp));
                            }
                            return output.join('');
                        }

                        function fromByteArray(uint8) {
                            var tmp;
                            var len = uint8.length;
                            var extraBytes = len % 3;// if we have 1 byte left, pad 2 bytes
                            var parts = [];
                            var maxChunkLength = 16383;// must be multiple of 3
// go through the array every three bytes, we'll deal with trailing stuff later
                            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
                                parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
                            }// pad the end with zeros, but make sure to not forget the extra bytes
                            if (extraBytes === 1) {
                                tmp = uint8[len - 1];
                                parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');
                            } else if (extraBytes === 2) {
                                tmp = (uint8[len - 2] << 8) + uint8[len - 1];
                                parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');
                            }
                            return parts.join('');
                        }
                    }, {}],
                    2: [function (require, module, exports) {
                    }, {}],
                    3: [function (require, module, exports) {
                        (function (Buffer) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */
                            'use strict';
                            var base64 = require('base64-js');
                            var ieee754 = require('ieee754');
                            var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol["for"] === 'function' ? Symbol["for"]('nodejs.util.inspect.custom') : null;
                            exports.Buffer = Buffer;
                            exports.SlowBuffer = SlowBuffer;
                            exports.INSPECT_MAX_BYTES = 50;
                            var K_MAX_LENGTH = 0x7fffffff;
                            exports.kMaxLength = K_MAX_LENGTH;
                            /**
                             * If `Buffer.TYPED_ARRAY_SUPPORT`:
                             *   === true    Use Uint8Array implementation (fastest)
                             *   === false   Print warning and recommend using `buffer` v4.x which has an Object
                             *               implementation (most compatible, even IE6)
                             *
                             * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
                             * Opera 11.6+, iOS 4.2+.
                             *
                             * We report that the browser does not support typed arrays if the are not subclassable
                             * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
                             * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
                             * for __proto__ and has a buggy typed array implementation.
                             */Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
                            if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {
                                console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');
                            }

                            function typedArraySupport() {// Can typed array instances can be augmented?
                                try {
                                    var arr = new Uint8Array(1);
                                    var proto = {
                                        foo: function foo() {
                                            return 42;
                                        }
                                    };
                                    Object.setPrototypeOf(proto, Uint8Array.prototype);
                                    Object.setPrototypeOf(arr, proto);
                                    return arr.foo() === 42;
                                } catch (e) {
                                    return false;
                                }
                            }

                            Object.defineProperty(Buffer.prototype, 'parent', {
                                enumerable: true, get: function get() {
                                    if (!Buffer.isBuffer(this)) return undefined;
                                    return this.buffer;
                                }
                            });
                            Object.defineProperty(Buffer.prototype, 'offset', {
                                enumerable: true, get: function get() {
                                    if (!Buffer.isBuffer(this)) return undefined;
                                    return this.byteOffset;
                                }
                            });

                            function createBuffer(length) {
                                if (length > K_MAX_LENGTH) {
                                    throw new RangeError('The value "' + length + '" is invalid for option "size"');
                                }// Return an augmented `Uint8Array` instance
                                var buf = new Uint8Array(length);
                                Object.setPrototypeOf(buf, Buffer.prototype);
                                return buf;
                            }

                            /**
                             * The Buffer constructor returns instances of `Uint8Array` that have their
                             * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
                             * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
                             * and the `Uint8Array` methods. Square bracket notation works as expected -- it
                             * returns a single octet.
                             *
                             * The `Uint8Array` prototype remains unmodified.
                             */function Buffer(arg, encodingOrOffset, length) {// Common case.
                                if (typeof arg === 'number') {
                                    if (typeof encodingOrOffset === 'string') {
                                        throw new TypeError('The "string" argument must be of type string. Received type number');
                                    }
                                    return allocUnsafe(arg);
                                }
                                return from(arg, encodingOrOffset, length);
                            }// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
                            if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {
                                Object.defineProperty(Buffer, Symbol.species, {
                                    value: null,
                                    configurable: true,
                                    enumerable: false,
                                    writable: false
                                });
                            }
                            Buffer.poolSize = 8192;// not used by this implementation
                            function from(value, encodingOrOffset, length) {
                                if (typeof value === 'string') {
                                    return fromString(value, encodingOrOffset);
                                }
                                if (ArrayBuffer.isView(value)) {
                                    return fromArrayLike(value);
                                }
                                if (value == null) {
                                    throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof(value));
                                }
                                if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
                                    return fromArrayBuffer(value, encodingOrOffset, length);
                                }
                                if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
                                    return fromArrayBuffer(value, encodingOrOffset, length);
                                }
                                if (typeof value === 'number') {
                                    throw new TypeError('The "value" argument must not be of type number. Received type number');
                                }
                                var valueOf = value.valueOf && value.valueOf();
                                if (valueOf != null && valueOf !== value) {
                                    return Buffer.from(valueOf, encodingOrOffset, length);
                                }
                                var b = fromObject(value);
                                if (b) return b;
                                if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {
                                    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
                                }
                                throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + _typeof(value));
                            }

                            /**
                             * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
                             * if value is a number.
                             * Buffer.from(str[, encoding])
                             * Buffer.from(array)
                             * Buffer.from(buffer)
                             * Buffer.from(arrayBuffer[, byteOffset[, length]])
                             **/Buffer.from = function (value, encodingOrOffset, length) {
                                return from(value, encodingOrOffset, length);
                            };// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
                            Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
                            Object.setPrototypeOf(Buffer, Uint8Array);

                            function assertSize(size) {
                                if (typeof size !== 'number') {
                                    throw new TypeError('"size" argument must be of type number');
                                } else if (size < 0) {
                                    throw new RangeError('The value "' + size + '" is invalid for option "size"');
                                }
                            }

                            function alloc(size, fill, encoding) {
                                assertSize(size);
                                if (size <= 0) {
                                    return createBuffer(size);
                                }
                                if (fill !== undefined) {// Only pay attention to encoding if it's a string. This
// prevents accidentally sending in a number that would
// be interpretted as a start offset.
                                    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
                                }
                                return createBuffer(size);
                            }

                            /**
                             * Creates a new filled Buffer instance.
                             * alloc(size[, fill[, encoding]])
                             **/Buffer.alloc = function (size, fill, encoding) {
                                return alloc(size, fill, encoding);
                            };

                            function allocUnsafe(size) {
                                assertSize(size);
                                return createBuffer(size < 0 ? 0 : checked(size) | 0);
                            }

                            /**
                             * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
                             * */Buffer.allocUnsafe = function (size) {
                                return allocUnsafe(size);
                            };
                            /**
                             * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
                             */Buffer.allocUnsafeSlow = function (size) {
                                return allocUnsafe(size);
                            };

                            function fromString(string, encoding) {
                                if (typeof encoding !== 'string' || encoding === '') {
                                    encoding = 'utf8';
                                }
                                if (!Buffer.isEncoding(encoding)) {
                                    throw new TypeError('Unknown encoding: ' + encoding);
                                }
                                var length = byteLength(string, encoding) | 0;
                                var buf = createBuffer(length);
                                var actual = buf.write(string, encoding);
                                if (actual !== length) {// Writing a hex string, for example, that contains invalid characters will
// cause everything after the first invalid character to be ignored. (e.g.
// 'abxxcd' will be treated as 'ab')
                                    buf = buf.slice(0, actual);
                                }
                                return buf;
                            }

                            function fromArrayLike(array) {
                                var length = array.length < 0 ? 0 : checked(array.length) | 0;
                                var buf = createBuffer(length);
                                for (var i = 0; i < length; i += 1) {
                                    buf[i] = array[i] & 255;
                                }
                                return buf;
                            }

                            function fromArrayBuffer(array, byteOffset, length) {
                                if (byteOffset < 0 || array.byteLength < byteOffset) {
                                    throw new RangeError('"offset" is outside of buffer bounds');
                                }
                                if (array.byteLength < byteOffset + (length || 0)) {
                                    throw new RangeError('"length" is outside of buffer bounds');
                                }
                                var buf;
                                if (byteOffset === undefined && length === undefined) {
                                    buf = new Uint8Array(array);
                                } else if (length === undefined) {
                                    buf = new Uint8Array(array, byteOffset);
                                } else {
                                    buf = new Uint8Array(array, byteOffset, length);
                                }// Return an augmented `Uint8Array` instance
                                Object.setPrototypeOf(buf, Buffer.prototype);
                                return buf;
                            }

                            function fromObject(obj) {
                                if (Buffer.isBuffer(obj)) {
                                    var len = checked(obj.length) | 0;
                                    var buf = createBuffer(len);
                                    if (buf.length === 0) {
                                        return buf;
                                    }
                                    obj.copy(buf, 0, 0, len);
                                    return buf;
                                }
                                if (obj.length !== undefined) {
                                    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
                                        return createBuffer(0);
                                    }
                                    return fromArrayLike(obj);
                                }
                                if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
                                    return fromArrayLike(obj.data);
                                }
                            }

                            function checked(length) {// Note: cannot use `length < K_MAX_LENGTH` here because that fails when
// length is NaN (which is otherwise coerced to zero.)
                                if (length >= K_MAX_LENGTH) {
                                    throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');
                                }
                                return length | 0;
                            }

                            function SlowBuffer(length) {
                                if (+length != length) {// eslint-disable-line eqeqeq
                                    length = 0;
                                }
                                return Buffer.alloc(+length);
                            }

                            Buffer.isBuffer = function isBuffer(b) {
                                return b != null && b._isBuffer === true && b !== Buffer.prototype;// so Buffer.isBuffer(Buffer.prototype) will be false
                            };
                            Buffer.compare = function compare(a, b) {
                                if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
                                if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
                                if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                                    throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
                                }
                                if (a === b) return 0;
                                var x = a.length;
                                var y = b.length;
                                for (var i = 0, len = Math.min(x, y); i < len; ++i) {
                                    if (a[i] !== b[i]) {
                                        x = a[i];
                                        y = b[i];
                                        break;
                                    }
                                }
                                if (x < y) return -1;
                                if (y < x) return 1;
                                return 0;
                            };
                            Buffer.isEncoding = function isEncoding(encoding) {
                                switch (String(encoding).toLowerCase()) {
                                    case'hex':
                                    case'utf8':
                                    case'utf-8':
                                    case'ascii':
                                    case'latin1':
                                    case'binary':
                                    case'base64':
                                    case'ucs2':
                                    case'ucs-2':
                                    case'utf16le':
                                    case'utf-16le':
                                        return true;
                                    default:
                                        return false;
                                }
                            };
                            Buffer.concat = function concat(list, length) {
                                if (!Array.isArray(list)) {
                                    throw new TypeError('"list" argument must be an Array of Buffers');
                                }
                                if (list.length === 0) {
                                    return Buffer.alloc(0);
                                }
                                var i;
                                if (length === undefined) {
                                    length = 0;
                                    for (i = 0; i < list.length; ++i) {
                                        length += list[i].length;
                                    }
                                }
                                var buffer = Buffer.allocUnsafe(length);
                                var pos = 0;
                                for (i = 0; i < list.length; ++i) {
                                    var buf = list[i];
                                    if (isInstance(buf, Uint8Array)) {
                                        buf = Buffer.from(buf);
                                    }
                                    if (!Buffer.isBuffer(buf)) {
                                        throw new TypeError('"list" argument must be an Array of Buffers');
                                    }
                                    buf.copy(buffer, pos);
                                    pos += buf.length;
                                }
                                return buffer;
                            };

                            function byteLength(string, encoding) {
                                if (Buffer.isBuffer(string)) {
                                    return string.length;
                                }
                                if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
                                    return string.byteLength;
                                }
                                if (typeof string !== 'string') {
                                    throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + _typeof(string));
                                }
                                var len = string.length;
                                var mustMatch = arguments.length > 2 && arguments[2] === true;
                                if (!mustMatch && len === 0) return 0;// Use a for loop to avoid recursion
                                var loweredCase = false;
                                for (; ;) {
                                    switch (encoding) {
                                        case'ascii':
                                        case'latin1':
                                        case'binary':
                                            return len;
                                        case'utf8':
                                        case'utf-8':
                                            return utf8ToBytes(string).length;
                                        case'ucs2':
                                        case'ucs-2':
                                        case'utf16le':
                                        case'utf-16le':
                                            return len * 2;
                                        case'hex':
                                            return len >>> 1;
                                        case'base64':
                                            return base64ToBytes(string).length;
                                        default:
                                            if (loweredCase) {
                                                return mustMatch ? -1 : utf8ToBytes(string).length;// assume utf8
                                            }
                                            encoding = ('' + encoding).toLowerCase();
                                            loweredCase = true;
                                    }
                                }
                            }

                            Buffer.byteLength = byteLength;

                            function slowToString(encoding, start, end) {
                                var loweredCase = false;// No need to verify that "this.length <= MAX_UINT32" since it's a read-only
// property of a typed array.
// This behaves neither like String nor Uint8Array in that we set start/end
// to their upper/lower bounds if the value passed is out of range.
// undefined is handled specially as per ECMA-262 6th Edition,
// Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
                                if (start === undefined || start < 0) {
                                    start = 0;
                                }// Return early if start > this.length. Done here to prevent potential uint32
// coercion fail below.
                                if (start > this.length) {
                                    return '';
                                }
                                if (end === undefined || end > this.length) {
                                    end = this.length;
                                }
                                if (end <= 0) {
                                    return '';
                                }// Force coersion to uint32. This will also coerce falsey/NaN values to 0.
                                end >>>= 0;
                                start >>>= 0;
                                if (end <= start) {
                                    return '';
                                }
                                if (!encoding) encoding = 'utf8';
                                while (true) {
                                    switch (encoding) {
                                        case'hex':
                                            return hexSlice(this, start, end);
                                        case'utf8':
                                        case'utf-8':
                                            return utf8Slice(this, start, end);
                                        case'ascii':
                                            return asciiSlice(this, start, end);
                                        case'latin1':
                                        case'binary':
                                            return latin1Slice(this, start, end);
                                        case'base64':
                                            return base64Slice(this, start, end);
                                        case'ucs2':
                                        case'ucs-2':
                                        case'utf16le':
                                        case'utf-16le':
                                            return utf16leSlice(this, start, end);
                                        default:
                                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                                            encoding = (encoding + '').toLowerCase();
                                            loweredCase = true;
                                    }
                                }
                            }// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
                            Buffer.prototype._isBuffer = true;

                            function swap(b, n, m) {
                                var i = b[n];
                                b[n] = b[m];
                                b[m] = i;
                            }

                            Buffer.prototype.swap16 = function swap16() {
                                var len = this.length;
                                if (len % 2 !== 0) {
                                    throw new RangeError('Buffer size must be a multiple of 16-bits');
                                }
                                for (var i = 0; i < len; i += 2) {
                                    swap(this, i, i + 1);
                                }
                                return this;
                            };
                            Buffer.prototype.swap32 = function swap32() {
                                var len = this.length;
                                if (len % 4 !== 0) {
                                    throw new RangeError('Buffer size must be a multiple of 32-bits');
                                }
                                for (var i = 0; i < len; i += 4) {
                                    swap(this, i, i + 3);
                                    swap(this, i + 1, i + 2);
                                }
                                return this;
                            };
                            Buffer.prototype.swap64 = function swap64() {
                                var len = this.length;
                                if (len % 8 !== 0) {
                                    throw new RangeError('Buffer size must be a multiple of 64-bits');
                                }
                                for (var i = 0; i < len; i += 8) {
                                    swap(this, i, i + 7);
                                    swap(this, i + 1, i + 6);
                                    swap(this, i + 2, i + 5);
                                    swap(this, i + 3, i + 4);
                                }
                                return this;
                            };
                            Buffer.prototype.toString = function toString() {
                                var length = this.length;
                                if (length === 0) return '';
                                if (arguments.length === 0) return utf8Slice(this, 0, length);
                                return slowToString.apply(this, arguments);
                            };
                            Buffer.prototype.toLocaleString = Buffer.prototype.toString;
                            Buffer.prototype.equals = function equals(b) {
                                if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
                                if (this === b) return true;
                                return Buffer.compare(this, b) === 0;
                            };
                            Buffer.prototype.inspect = function inspect() {
                                var str = '';
                                var max = exports.INSPECT_MAX_BYTES;
                                str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
                                if (this.length > max) str += ' ... ';
                                return '<Buffer ' + str + '>';
                            };
                            if (customInspectSymbol) {
                                Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
                            }
                            Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
                                if (isInstance(target, Uint8Array)) {
                                    target = Buffer.from(target, target.offset, target.byteLength);
                                }
                                if (!Buffer.isBuffer(target)) {
                                    throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + _typeof(target));
                                }
                                if (start === undefined) {
                                    start = 0;
                                }
                                if (end === undefined) {
                                    end = target ? target.length : 0;
                                }
                                if (thisStart === undefined) {
                                    thisStart = 0;
                                }
                                if (thisEnd === undefined) {
                                    thisEnd = this.length;
                                }
                                if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
                                    throw new RangeError('out of range index');
                                }
                                if (thisStart >= thisEnd && start >= end) {
                                    return 0;
                                }
                                if (thisStart >= thisEnd) {
                                    return -1;
                                }
                                if (start >= end) {
                                    return 1;
                                }
                                start >>>= 0;
                                end >>>= 0;
                                thisStart >>>= 0;
                                thisEnd >>>= 0;
                                if (this === target) return 0;
                                var x = thisEnd - thisStart;
                                var y = end - start;
                                var len = Math.min(x, y);
                                var thisCopy = this.slice(thisStart, thisEnd);
                                var targetCopy = target.slice(start, end);
                                for (var i = 0; i < len; ++i) {
                                    if (thisCopy[i] !== targetCopy[i]) {
                                        x = thisCopy[i];
                                        y = targetCopy[i];
                                        break;
                                    }
                                }
                                if (x < y) return -1;
                                if (y < x) return 1;
                                return 0;
                            };// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
                            function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {// Empty buffer means no match
                                if (buffer.length === 0) return -1;// Normalize byteOffset
                                if (typeof byteOffset === 'string') {
                                    encoding = byteOffset;
                                    byteOffset = 0;
                                } else if (byteOffset > 0x7fffffff) {
                                    byteOffset = 0x7fffffff;
                                } else if (byteOffset < -0x80000000) {
                                    byteOffset = -0x80000000;
                                }
                                byteOffset = +byteOffset;// Coerce to Number.
                                if (numberIsNaN(byteOffset)) {// byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
                                    byteOffset = dir ? 0 : buffer.length - 1;
                                }// Normalize byteOffset: negative offsets start from the end of the buffer
                                if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
                                if (byteOffset >= buffer.length) {
                                    if (dir) return -1; else byteOffset = buffer.length - 1;
                                } else if (byteOffset < 0) {
                                    if (dir) byteOffset = 0; else return -1;
                                }// Normalize val
                                if (typeof val === 'string') {
                                    val = Buffer.from(val, encoding);
                                }// Finally, search either indexOf (if dir is true) or lastIndexOf
                                if (Buffer.isBuffer(val)) {// Special case: looking for empty string/buffer always fails
                                    if (val.length === 0) {
                                        return -1;
                                    }
                                    return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
                                } else if (typeof val === 'number') {
                                    val = val & 0xFF;// Search for a byte value [0-255]
                                    if (typeof Uint8Array.prototype.indexOf === 'function') {
                                        if (dir) {
                                            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
                                        } else {
                                            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
                                        }
                                    }
                                    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
                                }
                                throw new TypeError('val must be string, number or Buffer');
                            }

                            function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
                                var indexSize = 1;
                                var arrLength = arr.length;
                                var valLength = val.length;
                                if (encoding !== undefined) {
                                    encoding = String(encoding).toLowerCase();
                                    if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
                                        if (arr.length < 2 || val.length < 2) {
                                            return -1;
                                        }
                                        indexSize = 2;
                                        arrLength /= 2;
                                        valLength /= 2;
                                        byteOffset /= 2;
                                    }
                                }

                                function read(buf, i) {
                                    if (indexSize === 1) {
                                        return buf[i];
                                    } else {
                                        return buf.readUInt16BE(i * indexSize);
                                    }
                                }

                                var i;
                                if (dir) {
                                    var foundIndex = -1;
                                    for (i = byteOffset; i < arrLength; i++) {
                                        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
                                            if (foundIndex === -1) foundIndex = i;
                                            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
                                        } else {
                                            if (foundIndex !== -1) i -= i - foundIndex;
                                            foundIndex = -1;
                                        }
                                    }
                                } else {
                                    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
                                    for (i = byteOffset; i >= 0; i--) {
                                        var found = true;
                                        for (var j = 0; j < valLength; j++) {
                                            if (read(arr, i + j) !== read(val, j)) {
                                                found = false;
                                                break;
                                            }
                                        }
                                        if (found) return i;
                                    }
                                }
                                return -1;
                            }

                            Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
                                return this.indexOf(val, byteOffset, encoding) !== -1;
                            };
                            Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
                                return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
                            };
                            Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
                                return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
                            };

                            function hexWrite(buf, string, offset, length) {
                                offset = Number(offset) || 0;
                                var remaining = buf.length - offset;
                                if (!length) {
                                    length = remaining;
                                } else {
                                    length = Number(length);
                                    if (length > remaining) {
                                        length = remaining;
                                    }
                                }
                                var strLen = string.length;
                                if (length > strLen / 2) {
                                    length = strLen / 2;
                                }
                                for (var i = 0; i < length; ++i) {
                                    var parsed = parseInt(string.substr(i * 2, 2), 16);
                                    if (numberIsNaN(parsed)) return i;
                                    buf[offset + i] = parsed;
                                }
                                return i;
                            }

                            function utf8Write(buf, string, offset, length) {
                                return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
                            }

                            function asciiWrite(buf, string, offset, length) {
                                return blitBuffer(asciiToBytes(string), buf, offset, length);
                            }

                            function latin1Write(buf, string, offset, length) {
                                return asciiWrite(buf, string, offset, length);
                            }

                            function base64Write(buf, string, offset, length) {
                                return blitBuffer(base64ToBytes(string), buf, offset, length);
                            }

                            function ucs2Write(buf, string, offset, length) {
                                return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
                            }

                            Buffer.prototype.write = function write(string, offset, length, encoding) {// Buffer#write(string)
                                if (offset === undefined) {
                                    encoding = 'utf8';
                                    length = this.length;
                                    offset = 0;// Buffer#write(string, encoding)
                                } else if (length === undefined && typeof offset === 'string') {
                                    encoding = offset;
                                    length = this.length;
                                    offset = 0;// Buffer#write(string, offset[, length][, encoding])
                                } else if (isFinite(offset)) {
                                    offset = offset >>> 0;
                                    if (isFinite(length)) {
                                        length = length >>> 0;
                                        if (encoding === undefined) encoding = 'utf8';
                                    } else {
                                        encoding = length;
                                        length = undefined;
                                    }
                                } else {
                                    throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
                                }
                                var remaining = this.length - offset;
                                if (length === undefined || length > remaining) length = remaining;
                                if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
                                    throw new RangeError('Attempt to write outside buffer bounds');
                                }
                                if (!encoding) encoding = 'utf8';
                                var loweredCase = false;
                                for (; ;) {
                                    switch (encoding) {
                                        case'hex':
                                            return hexWrite(this, string, offset, length);
                                        case'utf8':
                                        case'utf-8':
                                            return utf8Write(this, string, offset, length);
                                        case'ascii':
                                            return asciiWrite(this, string, offset, length);
                                        case'latin1':
                                        case'binary':
                                            return latin1Write(this, string, offset, length);
                                        case'base64':// Warning: maxLength not taken into account in base64Write
                                            return base64Write(this, string, offset, length);
                                        case'ucs2':
                                        case'ucs-2':
                                        case'utf16le':
                                        case'utf-16le':
                                            return ucs2Write(this, string, offset, length);
                                        default:
                                            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
                                            encoding = ('' + encoding).toLowerCase();
                                            loweredCase = true;
                                    }
                                }
                            };
                            Buffer.prototype.toJSON = function toJSON() {
                                return {type: 'Buffer', data: Array.prototype.slice.call(this._arr || this, 0)};
                            };

                            function base64Slice(buf, start, end) {
                                if (start === 0 && end === buf.length) {
                                    return base64.fromByteArray(buf);
                                } else {
                                    return base64.fromByteArray(buf.slice(start, end));
                                }
                            }

                            function utf8Slice(buf, start, end) {
                                end = Math.min(buf.length, end);
                                var res = [];
                                var i = start;
                                while (i < end) {
                                    var firstByte = buf[i];
                                    var codePoint = null;
                                    var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
                                    if (i + bytesPerSequence <= end) {
                                        var secondByte, thirdByte, fourthByte, tempCodePoint;
                                        switch (bytesPerSequence) {
                                            case 1:
                                                if (firstByte < 0x80) {
                                                    codePoint = firstByte;
                                                }
                                                break;
                                            case 2:
                                                secondByte = buf[i + 1];
                                                if ((secondByte & 0xC0) === 0x80) {
                                                    tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                                                    if (tempCodePoint > 0x7F) {
                                                        codePoint = tempCodePoint;
                                                    }
                                                }
                                                break;
                                            case 3:
                                                secondByte = buf[i + 1];
                                                thirdByte = buf[i + 2];
                                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                                                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                                                    if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                                                        codePoint = tempCodePoint;
                                                    }
                                                }
                                                break;
                                            case 4:
                                                secondByte = buf[i + 1];
                                                thirdByte = buf[i + 2];
                                                fourthByte = buf[i + 3];
                                                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                                                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                                                    if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                                                        codePoint = tempCodePoint;
                                                    }
                                                }
                                        }
                                    }
                                    if (codePoint === null) {// we did not generate a valid codePoint so insert a
// replacement char (U+FFFD) and advance only 1 byte
                                        codePoint = 0xFFFD;
                                        bytesPerSequence = 1;
                                    } else if (codePoint > 0xFFFF) {// encode to utf16 (surrogate pair dance)
                                        codePoint -= 0x10000;
                                        res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                                        codePoint = 0xDC00 | codePoint & 0x3FF;
                                    }
                                    res.push(codePoint);
                                    i += bytesPerSequence;
                                }
                                return decodeCodePointsArray(res);
                            }// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
                            var MAX_ARGUMENTS_LENGTH = 0x1000;

                            function decodeCodePointsArray(codePoints) {
                                var len = codePoints.length;
                                if (len <= MAX_ARGUMENTS_LENGTH) {
                                    return String.fromCharCode.apply(String, codePoints);// avoid extra slice()
                                }// Decode in chunks to avoid "call stack size exceeded".
                                var res = '';
                                var i = 0;
                                while (i < len) {
                                    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
                                }
                                return res;
                            }

                            function asciiSlice(buf, start, end) {
                                var ret = '';
                                end = Math.min(buf.length, end);
                                for (var i = start; i < end; ++i) {
                                    ret += String.fromCharCode(buf[i] & 0x7F);
                                }
                                return ret;
                            }

                            function latin1Slice(buf, start, end) {
                                var ret = '';
                                end = Math.min(buf.length, end);
                                for (var i = start; i < end; ++i) {
                                    ret += String.fromCharCode(buf[i]);
                                }
                                return ret;
                            }

                            function hexSlice(buf, start, end) {
                                var len = buf.length;
                                if (!start || start < 0) start = 0;
                                if (!end || end < 0 || end > len) end = len;
                                var out = '';
                                for (var i = start; i < end; ++i) {
                                    out += hexSliceLookupTable[buf[i]];
                                }
                                return out;
                            }

                            function utf16leSlice(buf, start, end) {
                                var bytes = buf.slice(start, end);
                                var res = '';
                                for (var i = 0; i < bytes.length; i += 2) {
                                    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
                                }
                                return res;
                            }

                            Buffer.prototype.slice = function slice(start, end) {
                                var len = this.length;
                                start = ~~start;
                                end = end === undefined ? len : ~~end;
                                if (start < 0) {
                                    start += len;
                                    if (start < 0) start = 0;
                                } else if (start > len) {
                                    start = len;
                                }
                                if (end < 0) {
                                    end += len;
                                    if (end < 0) end = 0;
                                } else if (end > len) {
                                    end = len;
                                }
                                if (end < start) end = start;
                                var newBuf = this.subarray(start, end);// Return an augmented `Uint8Array` instance
                                Object.setPrototypeOf(newBuf, Buffer.prototype);
                                return newBuf;
                            };/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
                            function checkOffset(offset, ext, length) {
                                if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
                                if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
                            }

                            Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
                                offset = offset >>> 0;
                                byteLength = byteLength >>> 0;
                                if (!noAssert) checkOffset(offset, byteLength, this.length);
                                var val = this[offset];
                                var mul = 1;
                                var i = 0;
                                while (++i < byteLength && (mul *= 0x100)) {
                                    val += this[offset + i] * mul;
                                }
                                return val;
                            };
                            Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
                                offset = offset >>> 0;
                                byteLength = byteLength >>> 0;
                                if (!noAssert) {
                                    checkOffset(offset, byteLength, this.length);
                                }
                                var val = this[offset + --byteLength];
                                var mul = 1;
                                while (byteLength > 0 && (mul *= 0x100)) {
                                    val += this[offset + --byteLength] * mul;
                                }
                                return val;
                            };
                            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 1, this.length);
                                return this[offset];
                            };
                            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 2, this.length);
                                return this[offset] | this[offset + 1] << 8;
                            };
                            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 2, this.length);
                                return this[offset] << 8 | this[offset + 1];
                            };
                            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 4, this.length);
                                return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
                            };
                            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 4, this.length);
                                return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
                            };
                            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
                                offset = offset >>> 0;
                                byteLength = byteLength >>> 0;
                                if (!noAssert) checkOffset(offset, byteLength, this.length);
                                var val = this[offset];
                                var mul = 1;
                                var i = 0;
                                while (++i < byteLength && (mul *= 0x100)) {
                                    val += this[offset + i] * mul;
                                }
                                mul *= 0x80;
                                if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                                return val;
                            };
                            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
                                offset = offset >>> 0;
                                byteLength = byteLength >>> 0;
                                if (!noAssert) checkOffset(offset, byteLength, this.length);
                                var i = byteLength;
                                var mul = 1;
                                var val = this[offset + --i];
                                while (i > 0 && (mul *= 0x100)) {
                                    val += this[offset + --i] * mul;
                                }
                                mul *= 0x80;
                                if (val >= mul) val -= Math.pow(2, 8 * byteLength);
                                return val;
                            };
                            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 1, this.length);
                                if (!(this[offset] & 0x80)) return this[offset];
                                return (0xff - this[offset] + 1) * -1;
                            };
                            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 2, this.length);
                                var val = this[offset] | this[offset + 1] << 8;
                                return val & 0x8000 ? val | 0xFFFF0000 : val;
                            };
                            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 2, this.length);
                                var val = this[offset + 1] | this[offset] << 8;
                                return val & 0x8000 ? val | 0xFFFF0000 : val;
                            };
                            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 4, this.length);
                                return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
                            };
                            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 4, this.length);
                                return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
                            };
                            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 4, this.length);
                                return ieee754.read(this, offset, true, 23, 4);
                            };
                            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 4, this.length);
                                return ieee754.read(this, offset, false, 23, 4);
                            };
                            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 8, this.length);
                                return ieee754.read(this, offset, true, 52, 8);
                            };
                            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
                                offset = offset >>> 0;
                                if (!noAssert) checkOffset(offset, 8, this.length);
                                return ieee754.read(this, offset, false, 52, 8);
                            };

                            function checkInt(buf, value, offset, ext, max, min) {
                                if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
                                if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
                                if (offset + ext > buf.length) throw new RangeError('Index out of range');
                            }

                            Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                byteLength = byteLength >>> 0;
                                if (!noAssert) {
                                    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                                    checkInt(this, value, offset, byteLength, maxBytes, 0);
                                }
                                var mul = 1;
                                var i = 0;
                                this[offset] = value & 0xFF;
                                while (++i < byteLength && (mul *= 0x100)) {
                                    this[offset + i] = value / mul & 0xFF;
                                }
                                return offset + byteLength;
                            };
                            Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                byteLength = byteLength >>> 0;
                                if (!noAssert) {
                                    var maxBytes = Math.pow(2, 8 * byteLength) - 1;
                                    checkInt(this, value, offset, byteLength, maxBytes, 0);
                                }
                                var i = byteLength - 1;
                                var mul = 1;
                                this[offset + i] = value & 0xFF;
                                while (--i >= 0 && (mul *= 0x100)) {
                                    this[offset + i] = value / mul & 0xFF;
                                }
                                return offset + byteLength;
                            };
                            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
                                this[offset] = value & 0xff;
                                return offset + 1;
                            };
                            Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
                                this[offset] = value & 0xff;
                                this[offset + 1] = value >>> 8;
                                return offset + 2;
                            };
                            Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
                                this[offset] = value >>> 8;
                                this[offset + 1] = value & 0xff;
                                return offset + 2;
                            };
                            Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
                                this[offset + 3] = value >>> 24;
                                this[offset + 2] = value >>> 16;
                                this[offset + 1] = value >>> 8;
                                this[offset] = value & 0xff;
                                return offset + 4;
                            };
                            Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
                                this[offset] = value >>> 24;
                                this[offset + 1] = value >>> 16;
                                this[offset + 2] = value >>> 8;
                                this[offset + 3] = value & 0xff;
                                return offset + 4;
                            };
                            Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) {
                                    var limit = Math.pow(2, 8 * byteLength - 1);
                                    checkInt(this, value, offset, byteLength, limit - 1, -limit);
                                }
                                var i = 0;
                                var mul = 1;
                                var sub = 0;
                                this[offset] = value & 0xFF;
                                while (++i < byteLength && (mul *= 0x100)) {
                                    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
                                        sub = 1;
                                    }
                                    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
                                }
                                return offset + byteLength;
                            };
                            Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) {
                                    var limit = Math.pow(2, 8 * byteLength - 1);
                                    checkInt(this, value, offset, byteLength, limit - 1, -limit);
                                }
                                var i = byteLength - 1;
                                var mul = 1;
                                var sub = 0;
                                this[offset + i] = value & 0xFF;
                                while (--i >= 0 && (mul *= 0x100)) {
                                    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
                                        sub = 1;
                                    }
                                    this[offset + i] = (value / mul >> 0) - sub & 0xFF;
                                }
                                return offset + byteLength;
                            };
                            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
                                if (value < 0) value = 0xff + value + 1;
                                this[offset] = value & 0xff;
                                return offset + 1;
                            };
                            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
                                this[offset] = value & 0xff;
                                this[offset + 1] = value >>> 8;
                                return offset + 2;
                            };
                            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
                                this[offset] = value >>> 8;
                                this[offset + 1] = value & 0xff;
                                return offset + 2;
                            };
                            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
                                this[offset] = value & 0xff;
                                this[offset + 1] = value >>> 8;
                                this[offset + 2] = value >>> 16;
                                this[offset + 3] = value >>> 24;
                                return offset + 4;
                            };
                            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
                                if (value < 0) value = 0xffffffff + value + 1;
                                this[offset] = value >>> 24;
                                this[offset + 1] = value >>> 16;
                                this[offset + 2] = value >>> 8;
                                this[offset + 3] = value & 0xff;
                                return offset + 4;
                            };

                            function checkIEEE754(buf, value, offset, ext, max, min) {
                                if (offset + ext > buf.length) throw new RangeError('Index out of range');
                                if (offset < 0) throw new RangeError('Index out of range');
                            }

                            function writeFloat(buf, value, offset, littleEndian, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) {
                                    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
                                }
                                ieee754.write(buf, value, offset, littleEndian, 23, 4);
                                return offset + 4;
                            }

                            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
                                return writeFloat(this, value, offset, true, noAssert);
                            };
                            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
                                return writeFloat(this, value, offset, false, noAssert);
                            };

                            function writeDouble(buf, value, offset, littleEndian, noAssert) {
                                value = +value;
                                offset = offset >>> 0;
                                if (!noAssert) {
                                    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
                                }
                                ieee754.write(buf, value, offset, littleEndian, 52, 8);
                                return offset + 8;
                            }

                            Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
                                return writeDouble(this, value, offset, true, noAssert);
                            };
                            Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
                                return writeDouble(this, value, offset, false, noAssert);
                            };// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
                            Buffer.prototype.copy = function copy(target, targetStart, start, end) {
                                if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
                                if (!start) start = 0;
                                if (!end && end !== 0) end = this.length;
                                if (targetStart >= target.length) targetStart = target.length;
                                if (!targetStart) targetStart = 0;
                                if (end > 0 && end < start) end = start;// Copy 0 bytes; we're done
                                if (end === start) return 0;
                                if (target.length === 0 || this.length === 0) return 0;// Fatal error conditions
                                if (targetStart < 0) {
                                    throw new RangeError('targetStart out of bounds');
                                }
                                if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
                                if (end < 0) throw new RangeError('sourceEnd out of bounds');// Are we oob?
                                if (end > this.length) end = this.length;
                                if (target.length - targetStart < end - start) {
                                    end = target.length - targetStart + start;
                                }
                                var len = end - start;
                                if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {// Use built-in when available, missing from IE11
                                    this.copyWithin(targetStart, start, end);
                                } else if (this === target && start < targetStart && targetStart < end) {// descending copy from end
                                    for (var i = len - 1; i >= 0; --i) {
                                        target[i + targetStart] = this[i + start];
                                    }
                                } else {
                                    Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
                                }
                                return len;
                            };// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
                            Buffer.prototype.fill = function fill(val, start, end, encoding) {// Handle string cases:
                                if (typeof val === 'string') {
                                    if (typeof start === 'string') {
                                        encoding = start;
                                        start = 0;
                                        end = this.length;
                                    } else if (typeof end === 'string') {
                                        encoding = end;
                                        end = this.length;
                                    }
                                    if (encoding !== undefined && typeof encoding !== 'string') {
                                        throw new TypeError('encoding must be a string');
                                    }
                                    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
                                        throw new TypeError('Unknown encoding: ' + encoding);
                                    }
                                    if (val.length === 1) {
                                        var code = val.charCodeAt(0);
                                        if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {// Fast path: If `val` fits into a single byte, use that numeric value.
                                            val = code;
                                        }
                                    }
                                } else if (typeof val === 'number') {
                                    val = val & 255;
                                } else if (typeof val === 'boolean') {
                                    val = Number(val);
                                }// Invalid ranges are not set to a default, so can range check early.
                                if (start < 0 || this.length < start || this.length < end) {
                                    throw new RangeError('Out of range index');
                                }
                                if (end <= start) {
                                    return this;
                                }
                                start = start >>> 0;
                                end = end === undefined ? this.length : end >>> 0;
                                if (!val) val = 0;
                                var i;
                                if (typeof val === 'number') {
                                    for (i = start; i < end; ++i) {
                                        this[i] = val;
                                    }
                                } else {
                                    var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
                                    var len = bytes.length;
                                    if (len === 0) {
                                        throw new TypeError('The value "' + val + '" is invalid for argument "value"');
                                    }
                                    for (i = 0; i < end - start; ++i) {
                                        this[i + start] = bytes[i % len];
                                    }
                                }
                                return this;
                            };// HELPER FUNCTIONS
// ================
                            var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;

                            function base64clean(str) {// Node takes equal signs as end of the Base64 encoding
                                str = str.split('=')[0];// Node strips out invalid characters like \n and \t from the string, base64-js does not
                                str = str.trim().replace(INVALID_BASE64_RE, '');// Node converts strings with length < 2 to ''
                                if (str.length < 2) return '';// Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
                                while (str.length % 4 !== 0) {
                                    str = str + '=';
                                }
                                return str;
                            }

                            function utf8ToBytes(string, units) {
                                units = units || Infinity;
                                var codePoint;
                                var length = string.length;
                                var leadSurrogate = null;
                                var bytes = [];
                                for (var i = 0; i < length; ++i) {
                                    codePoint = string.charCodeAt(i);// is surrogate component
                                    if (codePoint > 0xD7FF && codePoint < 0xE000) {// last char was a lead
                                        if (!leadSurrogate) {// no lead yet
                                            if (codePoint > 0xDBFF) {// unexpected trail
                                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                                                continue;
                                            } else if (i + 1 === length) {// unpaired lead
                                                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                                                continue;
                                            }// valid lead
                                            leadSurrogate = codePoint;
                                            continue;
                                        }// 2 leads in a row
                                        if (codePoint < 0xDC00) {
                                            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                                            leadSurrogate = codePoint;
                                            continue;
                                        }// valid surrogate pair
                                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                                    } else if (leadSurrogate) {// valid bmp char, but last char was a lead
                                        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                                    }
                                    leadSurrogate = null;// encode utf8
                                    if (codePoint < 0x80) {
                                        if ((units -= 1) < 0) break;
                                        bytes.push(codePoint);
                                    } else if (codePoint < 0x800) {
                                        if ((units -= 2) < 0) break;
                                        bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
                                    } else if (codePoint < 0x10000) {
                                        if ((units -= 3) < 0) break;
                                        bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                                    } else if (codePoint < 0x110000) {
                                        if ((units -= 4) < 0) break;
                                        bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                                    } else {
                                        throw new Error('Invalid code point');
                                    }
                                }
                                return bytes;
                            }

                            function asciiToBytes(str) {
                                var byteArray = [];
                                for (var i = 0; i < str.length; ++i) {// Node's code seems to be doing this and not & 0x7F..
                                    byteArray.push(str.charCodeAt(i) & 0xFF);
                                }
                                return byteArray;
                            }

                            function utf16leToBytes(str, units) {
                                var c, hi, lo;
                                var byteArray = [];
                                for (var i = 0; i < str.length; ++i) {
                                    if ((units -= 2) < 0) break;
                                    c = str.charCodeAt(i);
                                    hi = c >> 8;
                                    lo = c % 256;
                                    byteArray.push(lo);
                                    byteArray.push(hi);
                                }
                                return byteArray;
                            }

                            function base64ToBytes(str) {
                                return base64.toByteArray(base64clean(str));
                            }

                            function blitBuffer(src, dst, offset, length) {
                                for (var i = 0; i < length; ++i) {
                                    if (i + offset >= dst.length || i >= src.length) break;
                                    dst[i + offset] = src[i];
                                }
                                return i;
                            }// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
                            function isInstance(obj, type) {
                                return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
                            }

                            function numberIsNaN(obj) {// For IE11 support
                                return obj !== obj;// eslint-disable-line no-self-compare
                            }// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
                            var hexSliceLookupTable = function () {
                                var alphabet = '0123456789abcdef';
                                var table = new Array(256);
                                for (var i = 0; i < 16; ++i) {
                                    var i16 = i * 16;
                                    for (var j = 0; j < 16; ++j) {
                                        table[i16 + j] = alphabet[i] + alphabet[j];
                                    }
                                }
                                return table;
                            }();
                        }).call(this, require("buffer").Buffer);
                    }, {"base64-js": 1, "buffer": 3, "ieee754": 32}],
                    4: [function (require, module, exports) {
                        module.exports = {
                            "elementNames": {
                                "altglyph": "altGlyph",
                                "altglyphdef": "altGlyphDef",
                                "altglyphitem": "altGlyphItem",
                                "animatecolor": "animateColor",
                                "animatemotion": "animateMotion",
                                "animatetransform": "animateTransform",
                                "clippath": "clipPath",
                                "feblend": "feBlend",
                                "fecolormatrix": "feColorMatrix",
                                "fecomponenttransfer": "feComponentTransfer",
                                "fecomposite": "feComposite",
                                "feconvolvematrix": "feConvolveMatrix",
                                "fediffuselighting": "feDiffuseLighting",
                                "fedisplacementmap": "feDisplacementMap",
                                "fedistantlight": "feDistantLight",
                                "fedropshadow": "feDropShadow",
                                "feflood": "feFlood",
                                "fefunca": "feFuncA",
                                "fefuncb": "feFuncB",
                                "fefuncg": "feFuncG",
                                "fefuncr": "feFuncR",
                                "fegaussianblur": "feGaussianBlur",
                                "feimage": "feImage",
                                "femerge": "feMerge",
                                "femergenode": "feMergeNode",
                                "femorphology": "feMorphology",
                                "feoffset": "feOffset",
                                "fepointlight": "fePointLight",
                                "fespecularlighting": "feSpecularLighting",
                                "fespotlight": "feSpotLight",
                                "fetile": "feTile",
                                "feturbulence": "feTurbulence",
                                "foreignobject": "foreignObject",
                                "glyphref": "glyphRef",
                                "lineargradient": "linearGradient",
                                "radialgradient": "radialGradient",
                                "textpath": "textPath"
                            }, "attributeNames": {
                                "definitionurl": "definitionURL",
                                "attributename": "attributeName",
                                "attributetype": "attributeType",
                                "basefrequency": "baseFrequency",
                                "baseprofile": "baseProfile",
                                "calcmode": "calcMode",
                                "clippathunits": "clipPathUnits",
                                "diffuseconstant": "diffuseConstant",
                                "edgemode": "edgeMode",
                                "filterunits": "filterUnits",
                                "glyphref": "glyphRef",
                                "gradienttransform": "gradientTransform",
                                "gradientunits": "gradientUnits",
                                "kernelmatrix": "kernelMatrix",
                                "kernelunitlength": "kernelUnitLength",
                                "keypoints": "keyPoints",
                                "keysplines": "keySplines",
                                "keytimes": "keyTimes",
                                "lengthadjust": "lengthAdjust",
                                "limitingconeangle": "limitingConeAngle",
                                "markerheight": "markerHeight",
                                "markerunits": "markerUnits",
                                "markerwidth": "markerWidth",
                                "maskcontentunits": "maskContentUnits",
                                "maskunits": "maskUnits",
                                "numoctaves": "numOctaves",
                                "pathlength": "pathLength",
                                "patterncontentunits": "patternContentUnits",
                                "patterntransform": "patternTransform",
                                "patternunits": "patternUnits",
                                "pointsatx": "pointsAtX",
                                "pointsaty": "pointsAtY",
                                "pointsatz": "pointsAtZ",
                                "preservealpha": "preserveAlpha",
                                "preserveaspectratio": "preserveAspectRatio",
                                "primitiveunits": "primitiveUnits",
                                "refx": "refX",
                                "refy": "refY",
                                "repeatcount": "repeatCount",
                                "repeatdur": "repeatDur",
                                "requiredextensions": "requiredExtensions",
                                "requiredfeatures": "requiredFeatures",
                                "specularconstant": "specularConstant",
                                "specularexponent": "specularExponent",
                                "spreadmethod": "spreadMethod",
                                "startoffset": "startOffset",
                                "stddeviation": "stdDeviation",
                                "stitchtiles": "stitchTiles",
                                "surfacescale": "surfaceScale",
                                "systemlanguage": "systemLanguage",
                                "tablevalues": "tableValues",
                                "targetx": "targetX",
                                "targety": "targetY",
                                "textlength": "textLength",
                                "viewbox": "viewBox",
                                "viewtarget": "viewTarget",
                                "xchannelselector": "xChannelSelector",
                                "ychannelselector": "yChannelSelector",
                                "zoomandpan": "zoomAndPan"
                            }
                        };
                    }, {}],
                    5: [function (require, module, exports) {/*
  Module dependencies
*/
                        var ElementType = require('domelementtype');
                        var entities = require('entities');/* mixed-case SVG and MathML tags & attributes
   recognized by the HTML parser, see
   https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign
*/
                        var foreignNames = require('./foreignNames.json');
                        foreignNames.elementNames.__proto__ = null;/* use as a simple dictionary */
                        foreignNames.attributeNames.__proto__ = null;
                        var unencodedElements = {
                            __proto__: null,
                            style: true,
                            script: true,
                            xmp: true,
                            iframe: true,
                            noembed: true,
                            noframes: true,
                            plaintext: true,
                            noscript: true
                        };/*
  Format attributes
*/
                        function formatAttrs(attributes, opts) {
                            if (!attributes) return;
                            var output = '';
                            var value;// Loop through the attributes
                            for (var key in attributes) {
                                value = attributes[key];
                                if (output) {
                                    output += ' ';
                                }
                                if (opts.xmlMode === 'foreign') {/* fix up mixed-case attribute names */
                                    key = foreignNames.attributeNames[key] || key;
                                }
                                output += key;
                                if (value !== null && value !== '' || opts.xmlMode) {
                                    output += '="' + (opts.decodeEntities ? entities.encodeXML(value) : value.replace(/\"/g, '&quot;')) + '"';
                                }
                            }
                            return output;
                        }/*
  Self-enclosing tags (stolen from node-htmlparser)
*/
                        var singleTag = {
                            __proto__: null,
                            area: true,
                            base: true,
                            basefont: true,
                            br: true,
                            col: true,
                            command: true,
                            embed: true,
                            frame: true,
                            hr: true,
                            img: true,
                            input: true,
                            isindex: true,
                            keygen: true,
                            link: true,
                            meta: true,
                            param: true,
                            source: true,
                            track: true,
                            wbr: true
                        };
                        var render = module.exports = function (dom, opts) {
                            if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
                            opts = opts || {};
                            var output = '';
                            for (var i = 0; i < dom.length; i++) {
                                var elem = dom[i];
                                if (elem.type === 'root') output += render(elem.children, opts); else if (ElementType.isTag(elem)) output += renderTag(elem, opts); else if (elem.type === ElementType.Directive) output += renderDirective(elem); else if (elem.type === ElementType.Comment) output += renderComment(elem); else if (elem.type === ElementType.CDATA) output += renderCdata(elem); else output += renderText(elem, opts);
                            }
                            return output;
                        };
                        var foreignModeIntegrationPoints = ['mi', 'mo', 'mn', 'ms', 'mtext', 'annotation-xml', 'foreignObject', 'desc', 'title'];

                        function renderTag(elem, opts) {// Handle SVG / MathML in HTML
                            if (opts.xmlMode === 'foreign') {/* fix up mixed-case element names */
                                elem.name = foreignNames.elementNames[elem.name] || elem.name;/* exit foreign mode at integration points */
                                if (elem.parent && foreignModeIntegrationPoints.indexOf(elem.parent.name) >= 0) opts = Object.assign({}, opts, {xmlMode: false});
                            }
                            if (!opts.xmlMode && ['svg', 'math'].indexOf(elem.name) >= 0) {
                                opts = Object.assign({}, opts, {xmlMode: 'foreign'});
                            }
                            var tag = '<' + elem.name;
                            var attribs = formatAttrs(elem.attribs, opts);
                            if (attribs) {
                                tag += ' ' + attribs;
                            }
                            if (opts.xmlMode && (!elem.children || elem.children.length === 0)) {
                                tag += '/>';
                            } else {
                                tag += '>';
                                if (elem.children) {
                                    tag += render(elem.children, opts);
                                }
                                if (!singleTag[elem.name] || opts.xmlMode) {
                                    tag += '</' + elem.name + '>';
                                }
                            }
                            return tag;
                        }

                        function renderDirective(elem) {
                            return '<' + elem.data + '>';
                        }

                        function renderText(elem, opts) {
                            var data = elem.data || '';// if entities weren't decoded, no need to encode them back
                            if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
                                data = entities.encodeXML(data);
                            }
                            return data;
                        }

                        function renderCdata(elem) {
                            return '<![CDATA[' + elem.children[0].data + ']]>';
                        }

                        function renderComment(elem) {
                            return '<!--' + elem.data + '-->';
                        }
                    }, {"./foreignNames.json": 4, "domelementtype": 6, "entities": 20}],
                    6: [function (require, module, exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {value: true});

                        /**
                         * Tests whether an element is a tag or not.
                         *
                         * @param elem Element to test
                         */function isTag(elem) {
                            return elem.type === "tag"/* Tag */ || elem.type === "script"/* Script */ || elem.type === "style"/* Style */;
                        }

                        exports.isTag = isTag;// Exports for backwards compatibility
                        exports.Text = "text"/* Text */;//Text
                        exports.Directive = "directive"/* Directive */;//<? ... ?>
                        exports.Comment = "comment"/* Comment */;//<!-- ... -->
                        exports.Script = "script"/* Script */;//<script> tags
                        exports.Style = "style"/* Style */;//<style> tags
                        exports.Tag = "tag"/* Tag */;//Any tag
                        exports.CDATA = "cdata"/* CDATA */;//<![CDATA[ ... ]]>
                        exports.Doctype = "doctype"/* Doctype */;
                    }, {}],
                    7: [function (require, module, exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var node_1 = require("./node");
                        exports.Node = node_1.Node;
                        exports.Element = node_1.Element;
                        exports.DataNode = node_1.DataNode;
                        exports.NodeWithChildren = node_1.NodeWithChildren;
                        var reWhitespace = /\s+/g;// Default options
                        var defaultOpts = {normalizeWhitespace: false, withStartIndices: false, withEndIndices: false};
                        var DomHandler =/** @class */function () {
                            /**
                             * Initiate a new DomHandler.
                             *
                             * @param callback Called once parsing has completed.
                             * @param options Settings for the handler.
                             * @param elementCB Callback whenever a tag is closed.
                             */function DomHandler(callback, options, elementCB) {
                                /** The constructed DOM */this.dom = [];
                                /** Indicated whether parsing has been completed. */this._done = false;
                                /** Stack of open tags. */this._tagStack = [];
                                /** A data node that is still being written to. */this._lastNode = null;
                                /** Reference to the parser instance. Used for location information. */this._parser = null;// Make it possible to skip arguments, for backwards-compatibility
                                if (typeof options === "function") {
                                    elementCB = options;
                                    options = defaultOpts;
                                }
                                if (_typeof(callback) === "object") {
                                    options = callback;
                                    callback = undefined;
                                }
                                this._callback = callback || null;
                                this._options = options || defaultOpts;
                                this._elementCB = elementCB || null;
                            }

                            DomHandler.prototype.onparserinit = function (parser) {
                                this._parser = parser;
                            };// Resets the handler back to starting state
                            DomHandler.prototype.onreset = function () {
                                this.dom = [];
                                this._done = false;
                                this._tagStack = [];
                                this._lastNode = null;
                                this._parser = this._parser || null;
                            };// Signals the handler that parsing is done
                            DomHandler.prototype.onend = function () {
                                if (this._done) return;
                                this._done = true;
                                this._parser = null;
                                this.handleCallback(null);
                            };
                            DomHandler.prototype.onerror = function (error) {
                                this.handleCallback(error);
                            };
                            DomHandler.prototype.onclosetag = function () {
                                this._lastNode = null;// If(this._tagStack.pop().name !== name) this.handleCallback(Error("Tagname didn't match!"));
                                var elem = this._tagStack.pop();
                                if (!elem || !this._parser) {
                                    return;
                                }
                                if (this._options.withEndIndices) {
                                    elem.endIndex = this._parser.endIndex;
                                }
                                if (this._elementCB) this._elementCB(elem);
                            };
                            DomHandler.prototype.onopentag = function (name, attribs) {
                                var element = new node_1.Element(name, attribs);
                                this.addNode(element);
                                this._tagStack.push(element);
                            };
                            DomHandler.prototype.ontext = function (data) {
                                var normalize = this._options.normalizeWhitespace;
                                var _lastNode = this._lastNode;
                                if (_lastNode && _lastNode.type === "text"/* Text */) {
                                    if (normalize) {
                                        _lastNode.data = (_lastNode.data + data).replace(reWhitespace, " ");
                                    } else {
                                        _lastNode.data += data;
                                    }
                                } else {
                                    if (normalize) {
                                        data = data.replace(reWhitespace, " ");
                                    }
                                    var node = new node_1.DataNode("text"/* Text */, data);
                                    this.addNode(node);
                                    this._lastNode = node;
                                }
                            };
                            DomHandler.prototype.oncomment = function (data) {
                                if (this._lastNode && this._lastNode.type === "comment"/* Comment */) {
                                    this._lastNode.data += data;
                                    return;
                                }
                                var node = new node_1.DataNode("comment"/* Comment */, data);
                                this.addNode(node);
                                this._lastNode = node;
                            };
                            DomHandler.prototype.oncommentend = function () {
                                this._lastNode = null;
                            };
                            DomHandler.prototype.oncdatastart = function () {
                                var text = new node_1.DataNode("text"/* Text */, "");
                                var node = new node_1.NodeWithChildren("cdata"/* CDATA */, [text]);
                                this.addNode(node);
                                text.parent = node;
                                this._lastNode = text;
                            };
                            DomHandler.prototype.oncdataend = function () {
                                this._lastNode = null;
                            };
                            DomHandler.prototype.onprocessinginstruction = function (name, data) {
                                var node = new node_1.ProcessingInstruction(name, data);
                                this.addNode(node);
                            };
                            DomHandler.prototype.handleCallback = function (error) {
                                if (typeof this._callback === "function") {
                                    this._callback(error, this.dom);
                                } else if (error) {
                                    throw error;
                                }
                            };
                            DomHandler.prototype.addNode = function (node) {
                                var parent = this._tagStack[this._tagStack.length - 1];
                                var siblings = parent ? parent.children : this.dom;
                                var previousSibling = siblings[siblings.length - 1];
                                if (this._parser) {
                                    if (this._options.withStartIndices) {
                                        node.startIndex = this._parser.startIndex;
                                    }
                                    if (this._options.withEndIndices) {
                                        node.endIndex = this._parser.endIndex;
                                    }
                                }
                                siblings.push(node);
                                if (previousSibling) {
                                    node.prev = previousSibling;
                                    previousSibling.next = node;
                                }
                                if (parent) {
                                    node.parent = parent;
                                }
                                this._lastNode = null;
                            };
                            DomHandler.prototype.addDataNode = function (node) {
                                this.addNode(node);
                                this._lastNode = node;
                            };
                            return DomHandler;
                        }();
                        exports.DomHandler = DomHandler;
                        exports["default"] = DomHandler;
                    }, {"./node": 8}],
                    8: [function (require, module, exports) {
                        "use strict";
                        var __extends = this && this.__extends || function () {
                            var _extendStatics = function extendStatics(d, b) {
                                _extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (d, b) {
                                    d.__proto__ = b;
                                } || function (d, b) {
                                    for (var p in b) {
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                    }
                                };
                                return _extendStatics(d, b);
                            };
                            return function (d, b) {
                                _extendStatics(d, b);

                                function __() {
                                    this.constructor = d;
                                }

                                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                            };
                        }();
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var nodeTypes = new Map([["tag"/* Tag */, 1], ["script"/* Script */, 1], ["style"/* Style */, 1], ["directive"/* Directive */, 1], ["text"/* Text */, 3], ["cdata"/* CDATA */, 4], ["comment"/* Comment */, 8]]);// This object will be used as the prototype for Nodes when creating a
// DOM-Level-1-compliant structure.
                        var Node =/** @class */function () {
                            /**
                             *
                             * @param type The type of the node.
                             */function Node(type) {
                                this.type = type;
                                /** Parent of the node */this.parent = null;
                                /** Previous sibling */this.prev = null;
                                /** Next sibling */this.next = null;
                                /** The start index of the node. Requires `withStartIndices` on the handler to be `true. */this.startIndex = null;
                                /** The end index of the node. Requires `withEndIndices` on the handler to be `true. */this.endIndex = null;
                            }

                            Object.defineProperty(Node.prototype, "nodeType", {// Read-only aliases
                                get: function get() {
                                    return nodeTypes.get(this.type) || 1;
                                }, enumerable: true, configurable: true
                            });
                            Object.defineProperty(Node.prototype, "parentNode", {// Read-write aliases for properties
                                get: function get() {
                                    return this.parent || null;
                                }, set: function set(parent) {
                                    this.parent = parent;
                                }, enumerable: true, configurable: true
                            });
                            Object.defineProperty(Node.prototype, "previousSibling", {
                                get: function get() {
                                    return this.prev || null;
                                }, set: function set(prev) {
                                    this.prev = prev;
                                }, enumerable: true, configurable: true
                            });
                            Object.defineProperty(Node.prototype, "nextSibling", {
                                get: function get() {
                                    return this.next || null;
                                }, set: function set(next) {
                                    this.next = next;
                                }, enumerable: true, configurable: true
                            });
                            return Node;
                        }();
                        exports.Node = Node;
                        var DataNode =/** @class */function (_super) {
                            __extends(DataNode, _super);

                            /**
                             *
                             * @param type The type of the node
                             * @param data The content of the data node
                             */function DataNode(type, data) {
                                var _this = _super.call(this, type) || this;
                                _this.data = data;
                                return _this;
                            }

                            Object.defineProperty(DataNode.prototype, "nodeValue", {
                                get: function get() {
                                    return this.data;
                                }, set: function set(data) {
                                    this.data = data;
                                }, enumerable: true, configurable: true
                            });
                            return DataNode;
                        }(Node);
                        exports.DataNode = DataNode;
                        var ProcessingInstruction =/** @class */function (_super) {
                            __extends(ProcessingInstruction, _super);

                            function ProcessingInstruction(name, data) {
                                var _this = _super.call(this, "directive"/* Directive */, data) || this;
                                _this.name = name;
                                return _this;
                            }

                            return ProcessingInstruction;
                        }(DataNode);
                        exports.ProcessingInstruction = ProcessingInstruction;
                        var NodeWithChildren =/** @class */function (_super) {
                            __extends(NodeWithChildren, _super);

                            /**
                             *
                             * @param type Type of the node.
                             * @param children Children of the node. Only certain node types can have children.
                             */function NodeWithChildren(type, children) {
                                var _this = _super.call(this, type) || this;
                                _this.children = children;
                                return _this;
                            }

                            Object.defineProperty(NodeWithChildren.prototype, "firstChild", {// Aliases
                                get: function get() {
                                    return this.children[0] || null;
                                }, enumerable: true, configurable: true
                            });
                            Object.defineProperty(NodeWithChildren.prototype, "lastChild", {
                                get: function get() {
                                    return this.children[this.children.length - 1] || null;
                                }, enumerable: true, configurable: true
                            });
                            Object.defineProperty(NodeWithChildren.prototype, "childNodes", {
                                get: function get() {
                                    return this.children;
                                }, set: function set(children) {
                                    this.children = children;
                                }, enumerable: true, configurable: true
                            });
                            return NodeWithChildren;
                        }(Node);
                        exports.NodeWithChildren = NodeWithChildren;
                        var Element =/** @class */function (_super) {
                            __extends(Element, _super);

                            /**
                             *
                             * @param name Name of the tag, eg. `div`, `span`
                             * @param attribs Object mapping attribute names to attribute values
                             */function Element(name, attribs) {
                                var _this = _super.call(this, name === "script" ? "script"/* Script */ : name === "style" ? "style"/* Style */ : "tag"/* Tag */, []) || this;
                                _this.name = name;
                                _this.attribs = attribs;
                                _this.attribs = attribs;
                                return _this;
                            }

                            Object.defineProperty(Element.prototype, "tagName", {// DOM Level 1 aliases
                                get: function get() {
                                    return this.name;
                                }, set: function set(name) {
                                    this.name = name;
                                }, enumerable: true, configurable: true
                            });
                            return Element;
                        }(NodeWithChildren);
                        exports.Element = Element;
                    }, {}],
                    9: [function (require, module, exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var tagtypes_1 = require("./tagtypes");

                        /**
                         * Given an array of nodes, remove any member that is contained by another.
                         *
                         * @param nodes — Nodes to filter.
                         */function removeSubsets(nodes) {
                            var idx = nodes.length;// Check if each node (or one of its ancestors) is already contained in the
// array.
                            while (--idx >= 0) {
                                var node = nodes[idx];// Remove the node if it is not unique.
// We are going through the array from the end, so we only
// have to check nodes that preceed the node under consideration in the array.
                                if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
                                    nodes.splice(idx, 1);
                                    continue;
                                }
                                for (var ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
                                    if (nodes.indexOf(ancestor) > -1) {
                                        nodes.splice(idx, 1);
                                        break;
                                    }
                                }
                            }
                            return nodes;
                        }

                        exports.removeSubsets = removeSubsets;

                        /***
                         * Compare the position of one node against another node in any other document.
                         * The return value is a bitmask with the following values:
                         *
                         * document order:
                         * > There is an ordering, document order, defined on all the nodes in the
                         * > document corresponding to the order in which the first character of the
                         * > XML representation of each node occurs in the XML representation of the
                         * > document after expansion of general entities. Thus, the document element
                         * > node will be the first node. Element nodes occur before their children.
                         * > Thus, document order orders element nodes in order of the occurrence of
                         * > their start-tag in the XML (after expansion of entities). The attribute
                         * > nodes of an element occur after the element and before its children. The
                         * > relative order of attribute nodes is implementation-dependent./
                         *
                         * Source:
                         * http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
                         * @argument nodaA The first node to use in the comparison
                         * @argument nodeB The second node to use in the comparison
                         *
                         * @return A bitmask describing the input nodes' relative position.
                         *
                         *        See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
                         *        a description of these values.
                         */function compareDocumentPosition(nodeA, nodeB) {
                            var aParents = [];
                            var bParents = [];
                            if (nodeA === nodeB) {
                                return 0;
                            }
                            var current = tagtypes_1.hasChildren(nodeA) ? nodeA : nodeA.parent;
                            while (current) {
                                aParents.unshift(current);
                                current = current.parent;
                            }
                            current = tagtypes_1.hasChildren(nodeB) ? nodeB : nodeB.parent;
                            while (current) {
                                bParents.unshift(current);
                                current = current.parent;
                            }
                            var idx = 0;
                            while (aParents[idx] === bParents[idx]) {
                                idx++;
                            }
                            if (idx === 0) {
                                return 1/* DISCONNECTED */;
                            }
                            var sharedParent = aParents[idx - 1];
                            var siblings = sharedParent.children;
                            var aSibling = aParents[idx];
                            var bSibling = bParents[idx];
                            if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
                                if (sharedParent === nodeB) {
                                    return 4/* FOLLOWING */ | 16/* CONTAINED_BY */;
                                }
                                return 4/* FOLLOWING */;
                            } else {
                                if (sharedParent === nodeA) {
                                    return 2/* PRECEDING */ | 8/* CONTAINS */;
                                }
                                return 2/* PRECEDING */;
                            }
                        }

                        exports.compareDocumentPosition = compareDocumentPosition;

                        /***
                         * Sort an array of nodes based on their relative position in the document and
                         * remove any duplicate nodes. If the array contains nodes that do not belong
                         * to the same document, sort order is unspecified.
                         *
                         * @argument nodes Array of DOM nodes
                         * @returns collection of unique nodes, sorted in document order
                         */function uniqueSort(nodes) {
                            nodes = nodes.filter(function (node, i, arr) {
                                return !arr.includes(node, i + 1);
                            });
                            nodes.sort(function (a, b) {
                                var relative = compareDocumentPosition(a, b);
                                if (relative & 2/* PRECEDING */) {
                                    return -1;
                                } else if (relative & 4/* FOLLOWING */) {
                                    return 1;
                                }
                                return 0;
                            });
                            return nodes;
                        }

                        exports.uniqueSort = uniqueSort;
                    }, {"./tagtypes": 15}],
                    10: [function (require, module, exports) {
                        "use strict";

                        function __export(m) {
                            for (var p in m) {
                                if (!exports.hasOwnProperty(p)) exports[p] = m[p];
                            }
                        }

                        Object.defineProperty(exports, "__esModule", {value: true});
                        __export(require("./stringify"));
                        __export(require("./traversal"));
                        __export(require("./manipulation"));
                        __export(require("./querying"));
                        __export(require("./legacy"));
                        __export(require("./helpers"));
                        __export(require("./tagtypes"));
                    }, {
                        "./helpers": 9,
                        "./legacy": 11,
                        "./manipulation": 12,
                        "./querying": 13,
                        "./stringify": 14,
                        "./tagtypes": 15,
                        "./traversal": 16
                    }],
                    11: [function (require, module, exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var querying_1 = require("./querying");
                        var tagtypes_1 = require("./tagtypes");

                        function isTextNode(node) {
                            return node.type === "text"/* Text */;
                        }/* eslint-disable @typescript-eslint/camelcase */
                        var Checks = {
                            tag_name: function tag_name(name) {
                                if (typeof name === "function") {
                                    return function (elem) {
                                        return tagtypes_1.isTag(elem) && name(elem.name);
                                    };
                                } else if (name === "*") {
                                    return tagtypes_1.isTag;
                                } else {
                                    return function (elem) {
                                        return tagtypes_1.isTag(elem) && elem.name === name;
                                    };
                                }
                            }, tag_type: function tag_type(type) {
                                if (typeof type === "function") {
                                    return function (elem) {
                                        return type(elem.type);
                                    };
                                } else {
                                    return function (elem) {
                                        return elem.type === type;
                                    };
                                }
                            }, tag_contains: function tag_contains(data) {
                                if (typeof data === "function") {
                                    return function (elem) {
                                        return isTextNode(elem) && data(elem.data);
                                    };
                                } else {
                                    return function (elem) {
                                        return isTextNode(elem) && elem.data === data;
                                    };
                                }
                            }
                        };/* eslint-enable @typescript-eslint/camelcase */
                        function getAttribCheck(attrib, value) {
                            if (typeof value === "function") {
                                return function (elem) {
                                    return tagtypes_1.isTag(elem) && value(elem.attribs[attrib]);
                                };
                            } else {
                                return function (elem) {
                                    return tagtypes_1.isTag(elem) && elem.attribs[attrib] === value;
                                };
                            }
                        }

                        function combineFuncs(a, b) {
                            return function (elem) {
                                return a(elem) || b(elem);
                            };
                        }

                        function compileTest(options) {
                            var funcs = Object.keys(options).map(function (key) {
                                var value = options[key];// @ts-ignore
                                return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
                            });
                            return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
                        }

                        function testElement(options, element) {
                            var test = compileTest(options);
                            return test ? test(element) : true;
                        }

                        exports.testElement = testElement;

                        function getElements(options, element, recurse, limit) {
                            if (limit === void 0) {
                                limit = Infinity;
                            }
                            var test = compileTest(options);
                            return test ? querying_1.filter(test, element, recurse, limit) : [];
                        }

                        exports.getElements = getElements;

                        function getElementById(id, element, recurse) {
                            if (recurse === void 0) {
                                recurse = true;
                            }
                            if (!Array.isArray(element)) element = [element];
                            return querying_1.findOne(getAttribCheck("id", id), element, recurse);
                        }

                        exports.getElementById = getElementById;

                        function getElementsByTagName(name, element, recurse, limit) {
                            if (limit === void 0) {
                                limit = Infinity;
                            }
                            return querying_1.filter(Checks.tag_name(name), element, recurse, limit);
                        }

                        exports.getElementsByTagName = getElementsByTagName;

                        function getElementsByTagType(type, element, recurse, limit) {
                            if (recurse === void 0) {
                                recurse = true;
                            }
                            if (limit === void 0) {
                                limit = Infinity;
                            }
                            return querying_1.filter(Checks.tag_type(type), element, recurse, limit);
                        }

                        exports.getElementsByTagType = getElementsByTagType;
                    }, {"./querying": 13, "./tagtypes": 15}],
                    12: [function (require, module, exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {value: true});

                        /***
                         * Remove an element from the dom
                         *
                         * @argument elem The element to be removed
                         */function removeElement(elem) {
                            if (elem.prev) elem.prev.next = elem.next;
                            if (elem.next) elem.next.prev = elem.prev;
                            if (elem.parent) {
                                var childs = elem.parent.children;
                                childs.splice(childs.lastIndexOf(elem), 1);
                            }
                        }

                        exports.removeElement = removeElement;

                        /***
                         * Replace an element in the dom
                         *
                         * @argument elem The element to be replaced
                         * @argument replacement The element to be added
                         */function replaceElement(elem, replacement) {
                            var prev = replacement.prev = elem.prev;
                            if (prev) {
                                prev.next = replacement;
                            }
                            var next = replacement.next = elem.next;
                            if (next) {
                                next.prev = replacement;
                            }
                            var parent = replacement.parent = elem.parent;
                            if (parent) {
                                var childs = parent.children;
                                childs[childs.lastIndexOf(elem)] = replacement;
                            }
                        }

                        exports.replaceElement = replaceElement;

                        /***
                         * Append a child to an element
                         *
                         * @argument elem The element to append to
                         * @argument child The element to be added as a child
                         */function appendChild(elem, child) {
                            child.parent = elem;
                            if (elem.children.push(child) !== 1) {
                                var sibling = elem.children[elem.children.length - 2];
                                sibling.next = child;
                                child.prev = sibling;
                                child.next = null;
                            }
                        }

                        exports.appendChild = appendChild;

                        /***
                         * Append an element after another
                         *
                         * @argument elem The element to append to
                         * @argument next The element be added
                         */function append(elem, next) {
                            var parent = elem.parent, currNext = elem.next;
                            next.next = currNext;
                            next.prev = elem;
                            elem.next = next;
                            next.parent = parent;
                            if (currNext) {
                                currNext.prev = next;
                                if (parent) {
                                    var childs = parent.children;
                                    childs.splice(childs.lastIndexOf(currNext), 0, next);
                                }
                            } else if (parent) {
                                parent.children.push(next);
                            }
                        }

                        exports.append = append;

                        /***
                         * Prepend an element before another
                         *
                         * @argument elem The element to append to
                         * @argument prev The element be added
                         */function prepend(elem, prev) {
                            var parent = elem.parent;
                            if (parent) {
                                var childs = parent.children;
                                childs.splice(childs.lastIndexOf(elem), 0, prev);
                            }
                            if (elem.prev) {
                                elem.prev.next = prev;
                            }
                            prev.parent = parent;
                            prev.prev = elem.prev;
                            prev.next = elem;
                            elem.prev = prev;
                        }

                        exports.prepend = prepend;
                    }, {}],
                    13: [function (require, module, exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var tagtypes_1 = require("./tagtypes");

                        function filter(test, element, recurse, limit) {
                            if (recurse === void 0) {
                                recurse = true;
                            }
                            if (limit === void 0) {
                                limit = Infinity;
                            }
                            if (!Array.isArray(element)) element = [element];
                            return find(test, element, recurse, limit);
                        }

                        exports.filter = filter;

                        function find(test, elems, recurse, limit) {
                            var result = [];
                            for (var i = 0; i < elems.length; i++) {
                                var elem = elems[i];
                                if (test(elem)) {
                                    result.push(elem);
                                    if (--limit <= 0) break;
                                }
                                if (recurse && tagtypes_1.hasChildren(elem) && elem.children.length > 0) {
                                    var children = find(test, elem.children, recurse, limit);
                                    result = result.concat(children);
                                    limit -= children.length;
                                    if (limit <= 0) break;
                                }
                            }
                            return result;
                        }

                        exports.find = find;

                        function findOneChild(test, elems) {
                            for (var i = 0; i < elems.length; i++) {
                                if (test(elems[i])) return elems[i];
                            }
                            return null;
                        }

                        exports.findOneChild = findOneChild;

                        function findOne(test, elems, recurse) {
                            if (recurse === void 0) {
                                recurse = true;
                            }
                            var elem = null;
                            for (var i = 0; i < elems.length && !elem; i++) {
                                var checked = elems[i];
                                if (!tagtypes_1.isTag(checked)) {
                                    continue;
                                } else if (test(checked)) {
                                    elem = checked;
                                } else if (recurse && checked.children.length > 0) {
                                    elem = findOne(test, checked.children);
                                }
                            }
                            return elem;
                        }

                        exports.findOne = findOne;

                        function existsOne(test, elems) {
                            for (var i = 0; i < elems.length; i++) {
                                var checked = elems[i];
                                if (tagtypes_1.isTag(checked) && (test(checked) || checked.children.length > 0 && existsOne(test, checked.children))) {
                                    return true;
                                }
                            }
                            return false;
                        }

                        exports.existsOne = existsOne;

                        function findAll(test, rootElems) {
                            var result = [];
                            var stack = rootElems.slice();
                            while (stack.length) {
                                var elem = stack.shift();
                                if (!elem || !tagtypes_1.isTag(elem)) continue;
                                if (elem.children && elem.children.length > 0) {
                                    stack.unshift.apply(stack, elem.children);
                                }
                                if (test(elem)) result.push(elem);
                            }
                            return result;
                        }

                        exports.findAll = findAll;
                    }, {"./tagtypes": 15}],
                    14: [function (require, module, exports) {
                        "use strict";
                        var __importDefault = this && this.__importDefault || function (mod) {
                            return mod && mod.__esModule ? mod : {"default": mod};
                        };
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var tagtypes_1 = require("./tagtypes");
                        var dom_serializer_1 = __importDefault(require("dom-serializer"));
                        exports.getOuterHTML = dom_serializer_1["default"];

                        function getInnerHTML(node, options) {
                            return tagtypes_1.hasChildren(node) ? node.children.map(function (node) {
                                return exports.getOuterHTML(node, options);
                            }).join("") : "";
                        }

                        exports.getInnerHTML = getInnerHTML;

                        function getText(node) {
                            if (Array.isArray(node)) return node.map(getText).join("");
                            if (tagtypes_1.isTag(node)) return node.name === "br" ? "\n" : getText(node.children);
                            if (tagtypes_1.isCDATA(node)) return getText(node.children);
                            if (tagtypes_1.isText(node)) return node.data;
                            return "";
                        }

                        exports.getText = getText;
                    }, {"./tagtypes": 15, "dom-serializer": 5}],
                    15: [function (require, module, exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var domelementtype_1 = require("domelementtype");

                        function isTag(node) {
                            return domelementtype_1.isTag(node);
                        }

                        exports.isTag = isTag;

                        function isCDATA(node) {
                            return "cdata"/* CDATA */ === node.type;
                        }

                        exports.isCDATA = isCDATA;

                        function isText(node) {
                            return node.type === "text"/* Text */;
                        }

                        exports.isText = isText;

                        function isComment(node) {
                            return node.type === "comment"/* Comment */;
                        }

                        exports.isComment = isComment;

                        function hasChildren(node) {
                            return Object.prototype.hasOwnProperty.call(node, "children");
                        }

                        exports.hasChildren = hasChildren;
                    }, {"domelementtype": 6}],
                    16: [function (require, module, exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {value: true});

                        function getChildren(elem) {// @ts-ignore
                            return elem.children || null;
                        }

                        exports.getChildren = getChildren;

                        function getParent(elem) {
                            return elem.parent || null;
                        }

                        exports.getParent = getParent;

                        function getSiblings(elem) {
                            var parent = getParent(elem);
                            return parent ? getChildren(parent) : [elem];
                        }

                        exports.getSiblings = getSiblings;

                        function getAttributeValue(elem, name) {
                            return elem.attribs && elem.attribs[name];
                        }

                        exports.getAttributeValue = getAttributeValue;

                        function hasAttrib(elem, name) {
                            return !!getAttributeValue(elem, name);
                        }

                        exports.hasAttrib = hasAttrib;

                        /***
                         * Returns the name property of an element
                         *
                         * @argument elem The element to get the name for
                         */function getName(elem) {
                            return elem.name;
                        }

                        exports.getName = getName;
                    }, {}],
                    17: [function (require, module, exports) {
                        "use strict";
                        var __importDefault = this && this.__importDefault || function (mod) {
                            return mod && mod.__esModule ? mod : {"default": mod};
                        };
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var entities_json_1 = __importDefault(require("./maps/entities.json"));
                        var legacy_json_1 = __importDefault(require("./maps/legacy.json"));
                        var xml_json_1 = __importDefault(require("./maps/xml.json"));
                        var decode_codepoint_1 = __importDefault(require("./decode_codepoint"));
                        exports.decodeXML = getStrictDecoder(xml_json_1["default"]);
                        exports.decodeHTMLStrict = getStrictDecoder(entities_json_1["default"]);

                        function getStrictDecoder(map) {
                            var keys = Object.keys(map).join("|");
                            var replace = getReplacer(map);
                            keys += "|#[xX][\\da-fA-F]+|#\\d+";
                            var re = new RegExp("&(?:" + keys + ");", "g");
                            return function (str) {
                                return String(str).replace(re, replace);
                            };
                        }

                        var sorter = function sorter(a, b) {
                            return a < b ? 1 : -1;
                        };
                        exports.decodeHTML = function () {
                            var legacy = Object.keys(legacy_json_1["default"]).sort(sorter);
                            var keys = Object.keys(entities_json_1["default"]).sort(sorter);
                            for (var i = 0, j = 0; i < keys.length; i++) {
                                if (legacy[j] === keys[i]) {
                                    keys[i] += ";?";
                                    j++;
                                } else {
                                    keys[i] += ";";
                                }
                            }
                            var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g");
                            var replace = getReplacer(entities_json_1["default"]);

                            function replacer(str) {
                                if (str.substr(-1) !== ";") str += ";";
                                return replace(str);
                            }//TODO consider creating a merged map
                            return function (str) {
                                return String(str).replace(re, replacer);
                            };
                        }();

                        function getReplacer(map) {
                            return function replace(str) {
                                if (str.charAt(1) === "#") {
                                    if (str.charAt(2) === "X" || str.charAt(2) === "x") {
                                        return decode_codepoint_1["default"](parseInt(str.substr(3), 16));
                                    }
                                    return decode_codepoint_1["default"](parseInt(str.substr(2), 10));
                                }
                                return map[str.slice(1, -1)];
                            };
                        }
                    }, {
                        "./decode_codepoint": 18,
                        "./maps/entities.json": 22,
                        "./maps/legacy.json": 23,
                        "./maps/xml.json": 24
                    }],
                    18: [function (require, module, exports) {
                        "use strict";
                        var __importDefault = this && this.__importDefault || function (mod) {
                            return mod && mod.__esModule ? mod : {"default": mod};
                        };
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var decode_json_1 = __importDefault(require("./maps/decode.json"));// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
                        function decodeCodePoint(codePoint) {
                            if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {
                                return "\uFFFD";
                            }
                            if (codePoint in decode_json_1["default"]) {// @ts-ignore
                                codePoint = decode_json_1["default"][codePoint];
                            }
                            var output = "";
                            if (codePoint > 0xffff) {
                                codePoint -= 0x10000;
                                output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
                                codePoint = 0xdc00 | codePoint & 0x3ff;
                            }
                            output += String.fromCharCode(codePoint);
                            return output;
                        }

                        exports["default"] = decodeCodePoint;
                    }, {"./maps/decode.json": 21}],
                    19: [function (require, module, exports) {
                        "use strict";
                        var __importDefault = this && this.__importDefault || function (mod) {
                            return mod && mod.__esModule ? mod : {"default": mod};
                        };
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var xml_json_1 = __importDefault(require("./maps/xml.json"));
                        var inverseXML = getInverseObj(xml_json_1["default"]);
                        var xmlReplacer = getInverseReplacer(inverseXML);
                        exports.encodeXML = getInverse(inverseXML, xmlReplacer);
                        var entities_json_1 = __importDefault(require("./maps/entities.json"));
                        var inverseHTML = getInverseObj(entities_json_1["default"]);
                        var htmlReplacer = getInverseReplacer(inverseHTML);
                        exports.encodeHTML = getInverse(inverseHTML, htmlReplacer);

                        function getInverseObj(obj) {
                            return Object.keys(obj).sort().reduce(function (inverse, name) {
                                inverse[obj[name]] = "&" + name + ";";
                                return inverse;
                            }, {});
                        }

                        function getInverseReplacer(inverse) {
                            var single = [];
                            var multiple = [];
                            Object.keys(inverse).forEach(function (k) {
                                return k.length === 1 ?// Add value to single array
                                    single.push("\\" + k) :// Add value to multiple array
                                    multiple.push(k);
                            });//TODO add ranges
                            multiple.unshift("[" + single.join("") + "]");
                            return new RegExp(multiple.join("|"), "g");
                        }

                        var reNonASCII = /[^\0-\x7F]/g;
                        var reAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

                        function singleCharReplacer(c) {
                            return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
                        }// eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any
                        function astralReplacer(c, _) {// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                            var high = c.charCodeAt(0);
                            var low = c.charCodeAt(1);
                            var codePoint = (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
                            return "&#x" + codePoint.toString(16).toUpperCase() + ";";
                        }

                        function getInverse(inverse, re) {
                            return function (data) {
                                return data.replace(re, function (name) {
                                    return inverse[name];
                                }).replace(reAstralSymbols, astralReplacer).replace(reNonASCII, singleCharReplacer);
                            };
                        }

                        var reXmlChars = getInverseReplacer(inverseXML);

                        function escape(data) {
                            return data.replace(reXmlChars, singleCharReplacer).replace(reAstralSymbols, astralReplacer).replace(reNonASCII, singleCharReplacer);
                        }

                        exports.escape = escape;
                    }, {"./maps/entities.json": 22, "./maps/xml.json": 24}],
                    20: [function (require, module, exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var decode_1 = require("./decode");
                        var encode_1 = require("./encode");

                        function decode(data, level) {
                            return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTML)(data);
                        }

                        exports.decode = decode;

                        function decodeStrict(data, level) {
                            return (!level || level <= 0 ? decode_1.decodeXML : decode_1.decodeHTMLStrict)(data);
                        }

                        exports.decodeStrict = decodeStrict;

                        function encode(data, level) {
                            return (!level || level <= 0 ? encode_1.encodeXML : encode_1.encodeHTML)(data);
                        }

                        exports.encode = encode;
                        var encode_2 = require("./encode");
                        exports.encodeXML = encode_2.encodeXML;
                        exports.encodeHTML = encode_2.encodeHTML;
                        exports.escape = encode_2.escape;// Legacy aliases
                        exports.encodeHTML4 = encode_2.encodeHTML;
                        exports.encodeHTML5 = encode_2.encodeHTML;
                        var decode_2 = require("./decode");
                        exports.decodeXML = decode_2.decodeXML;
                        exports.decodeHTML = decode_2.decodeHTML;
                        exports.decodeHTMLStrict = decode_2.decodeHTMLStrict;// Legacy aliases
                        exports.decodeHTML4 = decode_2.decodeHTML;
                        exports.decodeHTML5 = decode_2.decodeHTML;
                        exports.decodeHTML4Strict = decode_2.decodeHTMLStrict;
                        exports.decodeHTML5Strict = decode_2.decodeHTMLStrict;
                        exports.decodeXMLStrict = decode_2.decodeXML;
                    }, {"./decode": 17, "./encode": 19}],
                    21: [function (require, module, exports) {
                        module.exports = {
                            "0": 65533,
                            "128": 8364,
                            "130": 8218,
                            "131": 402,
                            "132": 8222,
                            "133": 8230,
                            "134": 8224,
                            "135": 8225,
                            "136": 710,
                            "137": 8240,
                            "138": 352,
                            "139": 8249,
                            "140": 338,
                            "142": 381,
                            "145": 8216,
                            "146": 8217,
                            "147": 8220,
                            "148": 8221,
                            "149": 8226,
                            "150": 8211,
                            "151": 8212,
                            "152": 732,
                            "153": 8482,
                            "154": 353,
                            "155": 8250,
                            "156": 339,
                            "158": 382,
                            "159": 376
                        };
                    }, {}],
                    22: [function (require, module, exports) {
                        module.exports = {
                            "Aacute": "\xC1",
                            "aacute": "\xE1",
                            "Abreve": "\u0102",
                            "abreve": "\u0103",
                            "ac": "\u223E",
                            "acd": "\u223F",
                            "acE": "\u223E\u0333",
                            "Acirc": "\xC2",
                            "acirc": "\xE2",
                            "acute": "\xB4",
                            "Acy": "\u0410",
                            "acy": "\u0430",
                            "AElig": "\xC6",
                            "aelig": "\xE6",
                            "af": "\u2061",
                            "Afr": "\uD835\uDD04",
                            "afr": "\uD835\uDD1E",
                            "Agrave": "\xC0",
                            "agrave": "\xE0",
                            "alefsym": "\u2135",
                            "aleph": "\u2135",
                            "Alpha": "\u0391",
                            "alpha": "\u03B1",
                            "Amacr": "\u0100",
                            "amacr": "\u0101",
                            "amalg": "\u2A3F",
                            "amp": "&",
                            "AMP": "&",
                            "andand": "\u2A55",
                            "And": "\u2A53",
                            "and": "\u2227",
                            "andd": "\u2A5C",
                            "andslope": "\u2A58",
                            "andv": "\u2A5A",
                            "ang": "\u2220",
                            "ange": "\u29A4",
                            "angle": "\u2220",
                            "angmsdaa": "\u29A8",
                            "angmsdab": "\u29A9",
                            "angmsdac": "\u29AA",
                            "angmsdad": "\u29AB",
                            "angmsdae": "\u29AC",
                            "angmsdaf": "\u29AD",
                            "angmsdag": "\u29AE",
                            "angmsdah": "\u29AF",
                            "angmsd": "\u2221",
                            "angrt": "\u221F",
                            "angrtvb": "\u22BE",
                            "angrtvbd": "\u299D",
                            "angsph": "\u2222",
                            "angst": "\xC5",
                            "angzarr": "\u237C",
                            "Aogon": "\u0104",
                            "aogon": "\u0105",
                            "Aopf": "\uD835\uDD38",
                            "aopf": "\uD835\uDD52",
                            "apacir": "\u2A6F",
                            "ap": "\u2248",
                            "apE": "\u2A70",
                            "ape": "\u224A",
                            "apid": "\u224B",
                            "apos": "'",
                            "ApplyFunction": "\u2061",
                            "approx": "\u2248",
                            "approxeq": "\u224A",
                            "Aring": "\xC5",
                            "aring": "\xE5",
                            "Ascr": "\uD835\uDC9C",
                            "ascr": "\uD835\uDCB6",
                            "Assign": "\u2254",
                            "ast": "*",
                            "asymp": "\u2248",
                            "asympeq": "\u224D",
                            "Atilde": "\xC3",
                            "atilde": "\xE3",
                            "Auml": "\xC4",
                            "auml": "\xE4",
                            "awconint": "\u2233",
                            "awint": "\u2A11",
                            "backcong": "\u224C",
                            "backepsilon": "\u03F6",
                            "backprime": "\u2035",
                            "backsim": "\u223D",
                            "backsimeq": "\u22CD",
                            "Backslash": "\u2216",
                            "Barv": "\u2AE7",
                            "barvee": "\u22BD",
                            "barwed": "\u2305",
                            "Barwed": "\u2306",
                            "barwedge": "\u2305",
                            "bbrk": "\u23B5",
                            "bbrktbrk": "\u23B6",
                            "bcong": "\u224C",
                            "Bcy": "\u0411",
                            "bcy": "\u0431",
                            "bdquo": "\u201E",
                            "becaus": "\u2235",
                            "because": "\u2235",
                            "Because": "\u2235",
                            "bemptyv": "\u29B0",
                            "bepsi": "\u03F6",
                            "bernou": "\u212C",
                            "Bernoullis": "\u212C",
                            "Beta": "\u0392",
                            "beta": "\u03B2",
                            "beth": "\u2136",
                            "between": "\u226C",
                            "Bfr": "\uD835\uDD05",
                            "bfr": "\uD835\uDD1F",
                            "bigcap": "\u22C2",
                            "bigcirc": "\u25EF",
                            "bigcup": "\u22C3",
                            "bigodot": "\u2A00",
                            "bigoplus": "\u2A01",
                            "bigotimes": "\u2A02",
                            "bigsqcup": "\u2A06",
                            "bigstar": "\u2605",
                            "bigtriangledown": "\u25BD",
                            "bigtriangleup": "\u25B3",
                            "biguplus": "\u2A04",
                            "bigvee": "\u22C1",
                            "bigwedge": "\u22C0",
                            "bkarow": "\u290D",
                            "blacklozenge": "\u29EB",
                            "blacksquare": "\u25AA",
                            "blacktriangle": "\u25B4",
                            "blacktriangledown": "\u25BE",
                            "blacktriangleleft": "\u25C2",
                            "blacktriangleright": "\u25B8",
                            "blank": "\u2423",
                            "blk12": "\u2592",
                            "blk14": "\u2591",
                            "blk34": "\u2593",
                            "block": "\u2588",
                            "bne": "=\u20E5",
                            "bnequiv": "\u2261\u20E5",
                            "bNot": "\u2AED",
                            "bnot": "\u2310",
                            "Bopf": "\uD835\uDD39",
                            "bopf": "\uD835\uDD53",
                            "bot": "\u22A5",
                            "bottom": "\u22A5",
                            "bowtie": "\u22C8",
                            "boxbox": "\u29C9",
                            "boxdl": "\u2510",
                            "boxdL": "\u2555",
                            "boxDl": "\u2556",
                            "boxDL": "\u2557",
                            "boxdr": "\u250C",
                            "boxdR": "\u2552",
                            "boxDr": "\u2553",
                            "boxDR": "\u2554",
                            "boxh": "\u2500",
                            "boxH": "\u2550",
                            "boxhd": "\u252C",
                            "boxHd": "\u2564",
                            "boxhD": "\u2565",
                            "boxHD": "\u2566",
                            "boxhu": "\u2534",
                            "boxHu": "\u2567",
                            "boxhU": "\u2568",
                            "boxHU": "\u2569",
                            "boxminus": "\u229F",
                            "boxplus": "\u229E",
                            "boxtimes": "\u22A0",
                            "boxul": "\u2518",
                            "boxuL": "\u255B",
                            "boxUl": "\u255C",
                            "boxUL": "\u255D",
                            "boxur": "\u2514",
                            "boxuR": "\u2558",
                            "boxUr": "\u2559",
                            "boxUR": "\u255A",
                            "boxv": "\u2502",
                            "boxV": "\u2551",
                            "boxvh": "\u253C",
                            "boxvH": "\u256A",
                            "boxVh": "\u256B",
                            "boxVH": "\u256C",
                            "boxvl": "\u2524",
                            "boxvL": "\u2561",
                            "boxVl": "\u2562",
                            "boxVL": "\u2563",
                            "boxvr": "\u251C",
                            "boxvR": "\u255E",
                            "boxVr": "\u255F",
                            "boxVR": "\u2560",
                            "bprime": "\u2035",
                            "breve": "\u02D8",
                            "Breve": "\u02D8",
                            "brvbar": "\xA6",
                            "bscr": "\uD835\uDCB7",
                            "Bscr": "\u212C",
                            "bsemi": "\u204F",
                            "bsim": "\u223D",
                            "bsime": "\u22CD",
                            "bsolb": "\u29C5",
                            "bsol": "\\",
                            "bsolhsub": "\u27C8",
                            "bull": "\u2022",
                            "bullet": "\u2022",
                            "bump": "\u224E",
                            "bumpE": "\u2AAE",
                            "bumpe": "\u224F",
                            "Bumpeq": "\u224E",
                            "bumpeq": "\u224F",
                            "Cacute": "\u0106",
                            "cacute": "\u0107",
                            "capand": "\u2A44",
                            "capbrcup": "\u2A49",
                            "capcap": "\u2A4B",
                            "cap": "\u2229",
                            "Cap": "\u22D2",
                            "capcup": "\u2A47",
                            "capdot": "\u2A40",
                            "CapitalDifferentialD": "\u2145",
                            "caps": "\u2229\uFE00",
                            "caret": "\u2041",
                            "caron": "\u02C7",
                            "Cayleys": "\u212D",
                            "ccaps": "\u2A4D",
                            "Ccaron": "\u010C",
                            "ccaron": "\u010D",
                            "Ccedil": "\xC7",
                            "ccedil": "\xE7",
                            "Ccirc": "\u0108",
                            "ccirc": "\u0109",
                            "Cconint": "\u2230",
                            "ccups": "\u2A4C",
                            "ccupssm": "\u2A50",
                            "Cdot": "\u010A",
                            "cdot": "\u010B",
                            "cedil": "\xB8",
                            "Cedilla": "\xB8",
                            "cemptyv": "\u29B2",
                            "cent": "\xA2",
                            "centerdot": "\xB7",
                            "CenterDot": "\xB7",
                            "cfr": "\uD835\uDD20",
                            "Cfr": "\u212D",
                            "CHcy": "\u0427",
                            "chcy": "\u0447",
                            "check": "\u2713",
                            "checkmark": "\u2713",
                            "Chi": "\u03A7",
                            "chi": "\u03C7",
                            "circ": "\u02C6",
                            "circeq": "\u2257",
                            "circlearrowleft": "\u21BA",
                            "circlearrowright": "\u21BB",
                            "circledast": "\u229B",
                            "circledcirc": "\u229A",
                            "circleddash": "\u229D",
                            "CircleDot": "\u2299",
                            "circledR": "\xAE",
                            "circledS": "\u24C8",
                            "CircleMinus": "\u2296",
                            "CirclePlus": "\u2295",
                            "CircleTimes": "\u2297",
                            "cir": "\u25CB",
                            "cirE": "\u29C3",
                            "cire": "\u2257",
                            "cirfnint": "\u2A10",
                            "cirmid": "\u2AEF",
                            "cirscir": "\u29C2",
                            "ClockwiseContourIntegral": "\u2232",
                            "CloseCurlyDoubleQuote": "\u201D",
                            "CloseCurlyQuote": "\u2019",
                            "clubs": "\u2663",
                            "clubsuit": "\u2663",
                            "colon": ":",
                            "Colon": "\u2237",
                            "Colone": "\u2A74",
                            "colone": "\u2254",
                            "coloneq": "\u2254",
                            "comma": ",",
                            "commat": "@",
                            "comp": "\u2201",
                            "compfn": "\u2218",
                            "complement": "\u2201",
                            "complexes": "\u2102",
                            "cong": "\u2245",
                            "congdot": "\u2A6D",
                            "Congruent": "\u2261",
                            "conint": "\u222E",
                            "Conint": "\u222F",
                            "ContourIntegral": "\u222E",
                            "copf": "\uD835\uDD54",
                            "Copf": "\u2102",
                            "coprod": "\u2210",
                            "Coproduct": "\u2210",
                            "copy": "\xA9",
                            "COPY": "\xA9",
                            "copysr": "\u2117",
                            "CounterClockwiseContourIntegral": "\u2233",
                            "crarr": "\u21B5",
                            "cross": "\u2717",
                            "Cross": "\u2A2F",
                            "Cscr": "\uD835\uDC9E",
                            "cscr": "\uD835\uDCB8",
                            "csub": "\u2ACF",
                            "csube": "\u2AD1",
                            "csup": "\u2AD0",
                            "csupe": "\u2AD2",
                            "ctdot": "\u22EF",
                            "cudarrl": "\u2938",
                            "cudarrr": "\u2935",
                            "cuepr": "\u22DE",
                            "cuesc": "\u22DF",
                            "cularr": "\u21B6",
                            "cularrp": "\u293D",
                            "cupbrcap": "\u2A48",
                            "cupcap": "\u2A46",
                            "CupCap": "\u224D",
                            "cup": "\u222A",
                            "Cup": "\u22D3",
                            "cupcup": "\u2A4A",
                            "cupdot": "\u228D",
                            "cupor": "\u2A45",
                            "cups": "\u222A\uFE00",
                            "curarr": "\u21B7",
                            "curarrm": "\u293C",
                            "curlyeqprec": "\u22DE",
                            "curlyeqsucc": "\u22DF",
                            "curlyvee": "\u22CE",
                            "curlywedge": "\u22CF",
                            "curren": "\xA4",
                            "curvearrowleft": "\u21B6",
                            "curvearrowright": "\u21B7",
                            "cuvee": "\u22CE",
                            "cuwed": "\u22CF",
                            "cwconint": "\u2232",
                            "cwint": "\u2231",
                            "cylcty": "\u232D",
                            "dagger": "\u2020",
                            "Dagger": "\u2021",
                            "daleth": "\u2138",
                            "darr": "\u2193",
                            "Darr": "\u21A1",
                            "dArr": "\u21D3",
                            "dash": "\u2010",
                            "Dashv": "\u2AE4",
                            "dashv": "\u22A3",
                            "dbkarow": "\u290F",
                            "dblac": "\u02DD",
                            "Dcaron": "\u010E",
                            "dcaron": "\u010F",
                            "Dcy": "\u0414",
                            "dcy": "\u0434",
                            "ddagger": "\u2021",
                            "ddarr": "\u21CA",
                            "DD": "\u2145",
                            "dd": "\u2146",
                            "DDotrahd": "\u2911",
                            "ddotseq": "\u2A77",
                            "deg": "\xB0",
                            "Del": "\u2207",
                            "Delta": "\u0394",
                            "delta": "\u03B4",
                            "demptyv": "\u29B1",
                            "dfisht": "\u297F",
                            "Dfr": "\uD835\uDD07",
                            "dfr": "\uD835\uDD21",
                            "dHar": "\u2965",
                            "dharl": "\u21C3",
                            "dharr": "\u21C2",
                            "DiacriticalAcute": "\xB4",
                            "DiacriticalDot": "\u02D9",
                            "DiacriticalDoubleAcute": "\u02DD",
                            "DiacriticalGrave": "`",
                            "DiacriticalTilde": "\u02DC",
                            "diam": "\u22C4",
                            "diamond": "\u22C4",
                            "Diamond": "\u22C4",
                            "diamondsuit": "\u2666",
                            "diams": "\u2666",
                            "die": "\xA8",
                            "DifferentialD": "\u2146",
                            "digamma": "\u03DD",
                            "disin": "\u22F2",
                            "div": "\xF7",
                            "divide": "\xF7",
                            "divideontimes": "\u22C7",
                            "divonx": "\u22C7",
                            "DJcy": "\u0402",
                            "djcy": "\u0452",
                            "dlcorn": "\u231E",
                            "dlcrop": "\u230D",
                            "dollar": "$",
                            "Dopf": "\uD835\uDD3B",
                            "dopf": "\uD835\uDD55",
                            "Dot": "\xA8",
                            "dot": "\u02D9",
                            "DotDot": "\u20DC",
                            "doteq": "\u2250",
                            "doteqdot": "\u2251",
                            "DotEqual": "\u2250",
                            "dotminus": "\u2238",
                            "dotplus": "\u2214",
                            "dotsquare": "\u22A1",
                            "doublebarwedge": "\u2306",
                            "DoubleContourIntegral": "\u222F",
                            "DoubleDot": "\xA8",
                            "DoubleDownArrow": "\u21D3",
                            "DoubleLeftArrow": "\u21D0",
                            "DoubleLeftRightArrow": "\u21D4",
                            "DoubleLeftTee": "\u2AE4",
                            "DoubleLongLeftArrow": "\u27F8",
                            "DoubleLongLeftRightArrow": "\u27FA",
                            "DoubleLongRightArrow": "\u27F9",
                            "DoubleRightArrow": "\u21D2",
                            "DoubleRightTee": "\u22A8",
                            "DoubleUpArrow": "\u21D1",
                            "DoubleUpDownArrow": "\u21D5",
                            "DoubleVerticalBar": "\u2225",
                            "DownArrowBar": "\u2913",
                            "downarrow": "\u2193",
                            "DownArrow": "\u2193",
                            "Downarrow": "\u21D3",
                            "DownArrowUpArrow": "\u21F5",
                            "DownBreve": "\u0311",
                            "downdownarrows": "\u21CA",
                            "downharpoonleft": "\u21C3",
                            "downharpoonright": "\u21C2",
                            "DownLeftRightVector": "\u2950",
                            "DownLeftTeeVector": "\u295E",
                            "DownLeftVectorBar": "\u2956",
                            "DownLeftVector": "\u21BD",
                            "DownRightTeeVector": "\u295F",
                            "DownRightVectorBar": "\u2957",
                            "DownRightVector": "\u21C1",
                            "DownTeeArrow": "\u21A7",
                            "DownTee": "\u22A4",
                            "drbkarow": "\u2910",
                            "drcorn": "\u231F",
                            "drcrop": "\u230C",
                            "Dscr": "\uD835\uDC9F",
                            "dscr": "\uD835\uDCB9",
                            "DScy": "\u0405",
                            "dscy": "\u0455",
                            "dsol": "\u29F6",
                            "Dstrok": "\u0110",
                            "dstrok": "\u0111",
                            "dtdot": "\u22F1",
                            "dtri": "\u25BF",
                            "dtrif": "\u25BE",
                            "duarr": "\u21F5",
                            "duhar": "\u296F",
                            "dwangle": "\u29A6",
                            "DZcy": "\u040F",
                            "dzcy": "\u045F",
                            "dzigrarr": "\u27FF",
                            "Eacute": "\xC9",
                            "eacute": "\xE9",
                            "easter": "\u2A6E",
                            "Ecaron": "\u011A",
                            "ecaron": "\u011B",
                            "Ecirc": "\xCA",
                            "ecirc": "\xEA",
                            "ecir": "\u2256",
                            "ecolon": "\u2255",
                            "Ecy": "\u042D",
                            "ecy": "\u044D",
                            "eDDot": "\u2A77",
                            "Edot": "\u0116",
                            "edot": "\u0117",
                            "eDot": "\u2251",
                            "ee": "\u2147",
                            "efDot": "\u2252",
                            "Efr": "\uD835\uDD08",
                            "efr": "\uD835\uDD22",
                            "eg": "\u2A9A",
                            "Egrave": "\xC8",
                            "egrave": "\xE8",
                            "egs": "\u2A96",
                            "egsdot": "\u2A98",
                            "el": "\u2A99",
                            "Element": "\u2208",
                            "elinters": "\u23E7",
                            "ell": "\u2113",
                            "els": "\u2A95",
                            "elsdot": "\u2A97",
                            "Emacr": "\u0112",
                            "emacr": "\u0113",
                            "empty": "\u2205",
                            "emptyset": "\u2205",
                            "EmptySmallSquare": "\u25FB",
                            "emptyv": "\u2205",
                            "EmptyVerySmallSquare": "\u25AB",
                            "emsp13": "\u2004",
                            "emsp14": "\u2005",
                            "emsp": "\u2003",
                            "ENG": "\u014A",
                            "eng": "\u014B",
                            "ensp": "\u2002",
                            "Eogon": "\u0118",
                            "eogon": "\u0119",
                            "Eopf": "\uD835\uDD3C",
                            "eopf": "\uD835\uDD56",
                            "epar": "\u22D5",
                            "eparsl": "\u29E3",
                            "eplus": "\u2A71",
                            "epsi": "\u03B5",
                            "Epsilon": "\u0395",
                            "epsilon": "\u03B5",
                            "epsiv": "\u03F5",
                            "eqcirc": "\u2256",
                            "eqcolon": "\u2255",
                            "eqsim": "\u2242",
                            "eqslantgtr": "\u2A96",
                            "eqslantless": "\u2A95",
                            "Equal": "\u2A75",
                            "equals": "=",
                            "EqualTilde": "\u2242",
                            "equest": "\u225F",
                            "Equilibrium": "\u21CC",
                            "equiv": "\u2261",
                            "equivDD": "\u2A78",
                            "eqvparsl": "\u29E5",
                            "erarr": "\u2971",
                            "erDot": "\u2253",
                            "escr": "\u212F",
                            "Escr": "\u2130",
                            "esdot": "\u2250",
                            "Esim": "\u2A73",
                            "esim": "\u2242",
                            "Eta": "\u0397",
                            "eta": "\u03B7",
                            "ETH": "\xD0",
                            "eth": "\xF0",
                            "Euml": "\xCB",
                            "euml": "\xEB",
                            "euro": "\u20AC",
                            "excl": "!",
                            "exist": "\u2203",
                            "Exists": "\u2203",
                            "expectation": "\u2130",
                            "exponentiale": "\u2147",
                            "ExponentialE": "\u2147",
                            "fallingdotseq": "\u2252",
                            "Fcy": "\u0424",
                            "fcy": "\u0444",
                            "female": "\u2640",
                            "ffilig": "\uFB03",
                            "fflig": "\uFB00",
                            "ffllig": "\uFB04",
                            "Ffr": "\uD835\uDD09",
                            "ffr": "\uD835\uDD23",
                            "filig": "\uFB01",
                            "FilledSmallSquare": "\u25FC",
                            "FilledVerySmallSquare": "\u25AA",
                            "fjlig": "fj",
                            "flat": "\u266D",
                            "fllig": "\uFB02",
                            "fltns": "\u25B1",
                            "fnof": "\u0192",
                            "Fopf": "\uD835\uDD3D",
                            "fopf": "\uD835\uDD57",
                            "forall": "\u2200",
                            "ForAll": "\u2200",
                            "fork": "\u22D4",
                            "forkv": "\u2AD9",
                            "Fouriertrf": "\u2131",
                            "fpartint": "\u2A0D",
                            "frac12": "\xBD",
                            "frac13": "\u2153",
                            "frac14": "\xBC",
                            "frac15": "\u2155",
                            "frac16": "\u2159",
                            "frac18": "\u215B",
                            "frac23": "\u2154",
                            "frac25": "\u2156",
                            "frac34": "\xBE",
                            "frac35": "\u2157",
                            "frac38": "\u215C",
                            "frac45": "\u2158",
                            "frac56": "\u215A",
                            "frac58": "\u215D",
                            "frac78": "\u215E",
                            "frasl": "\u2044",
                            "frown": "\u2322",
                            "fscr": "\uD835\uDCBB",
                            "Fscr": "\u2131",
                            "gacute": "\u01F5",
                            "Gamma": "\u0393",
                            "gamma": "\u03B3",
                            "Gammad": "\u03DC",
                            "gammad": "\u03DD",
                            "gap": "\u2A86",
                            "Gbreve": "\u011E",
                            "gbreve": "\u011F",
                            "Gcedil": "\u0122",
                            "Gcirc": "\u011C",
                            "gcirc": "\u011D",
                            "Gcy": "\u0413",
                            "gcy": "\u0433",
                            "Gdot": "\u0120",
                            "gdot": "\u0121",
                            "ge": "\u2265",
                            "gE": "\u2267",
                            "gEl": "\u2A8C",
                            "gel": "\u22DB",
                            "geq": "\u2265",
                            "geqq": "\u2267",
                            "geqslant": "\u2A7E",
                            "gescc": "\u2AA9",
                            "ges": "\u2A7E",
                            "gesdot": "\u2A80",
                            "gesdoto": "\u2A82",
                            "gesdotol": "\u2A84",
                            "gesl": "\u22DB\uFE00",
                            "gesles": "\u2A94",
                            "Gfr": "\uD835\uDD0A",
                            "gfr": "\uD835\uDD24",
                            "gg": "\u226B",
                            "Gg": "\u22D9",
                            "ggg": "\u22D9",
                            "gimel": "\u2137",
                            "GJcy": "\u0403",
                            "gjcy": "\u0453",
                            "gla": "\u2AA5",
                            "gl": "\u2277",
                            "glE": "\u2A92",
                            "glj": "\u2AA4",
                            "gnap": "\u2A8A",
                            "gnapprox": "\u2A8A",
                            "gne": "\u2A88",
                            "gnE": "\u2269",
                            "gneq": "\u2A88",
                            "gneqq": "\u2269",
                            "gnsim": "\u22E7",
                            "Gopf": "\uD835\uDD3E",
                            "gopf": "\uD835\uDD58",
                            "grave": "`",
                            "GreaterEqual": "\u2265",
                            "GreaterEqualLess": "\u22DB",
                            "GreaterFullEqual": "\u2267",
                            "GreaterGreater": "\u2AA2",
                            "GreaterLess": "\u2277",
                            "GreaterSlantEqual": "\u2A7E",
                            "GreaterTilde": "\u2273",
                            "Gscr": "\uD835\uDCA2",
                            "gscr": "\u210A",
                            "gsim": "\u2273",
                            "gsime": "\u2A8E",
                            "gsiml": "\u2A90",
                            "gtcc": "\u2AA7",
                            "gtcir": "\u2A7A",
                            "gt": ">",
                            "GT": ">",
                            "Gt": "\u226B",
                            "gtdot": "\u22D7",
                            "gtlPar": "\u2995",
                            "gtquest": "\u2A7C",
                            "gtrapprox": "\u2A86",
                            "gtrarr": "\u2978",
                            "gtrdot": "\u22D7",
                            "gtreqless": "\u22DB",
                            "gtreqqless": "\u2A8C",
                            "gtrless": "\u2277",
                            "gtrsim": "\u2273",
                            "gvertneqq": "\u2269\uFE00",
                            "gvnE": "\u2269\uFE00",
                            "Hacek": "\u02C7",
                            "hairsp": "\u200A",
                            "half": "\xBD",
                            "hamilt": "\u210B",
                            "HARDcy": "\u042A",
                            "hardcy": "\u044A",
                            "harrcir": "\u2948",
                            "harr": "\u2194",
                            "hArr": "\u21D4",
                            "harrw": "\u21AD",
                            "Hat": "^",
                            "hbar": "\u210F",
                            "Hcirc": "\u0124",
                            "hcirc": "\u0125",
                            "hearts": "\u2665",
                            "heartsuit": "\u2665",
                            "hellip": "\u2026",
                            "hercon": "\u22B9",
                            "hfr": "\uD835\uDD25",
                            "Hfr": "\u210C",
                            "HilbertSpace": "\u210B",
                            "hksearow": "\u2925",
                            "hkswarow": "\u2926",
                            "hoarr": "\u21FF",
                            "homtht": "\u223B",
                            "hookleftarrow": "\u21A9",
                            "hookrightarrow": "\u21AA",
                            "hopf": "\uD835\uDD59",
                            "Hopf": "\u210D",
                            "horbar": "\u2015",
                            "HorizontalLine": "\u2500",
                            "hscr": "\uD835\uDCBD",
                            "Hscr": "\u210B",
                            "hslash": "\u210F",
                            "Hstrok": "\u0126",
                            "hstrok": "\u0127",
                            "HumpDownHump": "\u224E",
                            "HumpEqual": "\u224F",
                            "hybull": "\u2043",
                            "hyphen": "\u2010",
                            "Iacute": "\xCD",
                            "iacute": "\xED",
                            "ic": "\u2063",
                            "Icirc": "\xCE",
                            "icirc": "\xEE",
                            "Icy": "\u0418",
                            "icy": "\u0438",
                            "Idot": "\u0130",
                            "IEcy": "\u0415",
                            "iecy": "\u0435",
                            "iexcl": "\xA1",
                            "iff": "\u21D4",
                            "ifr": "\uD835\uDD26",
                            "Ifr": "\u2111",
                            "Igrave": "\xCC",
                            "igrave": "\xEC",
                            "ii": "\u2148",
                            "iiiint": "\u2A0C",
                            "iiint": "\u222D",
                            "iinfin": "\u29DC",
                            "iiota": "\u2129",
                            "IJlig": "\u0132",
                            "ijlig": "\u0133",
                            "Imacr": "\u012A",
                            "imacr": "\u012B",
                            "image": "\u2111",
                            "ImaginaryI": "\u2148",
                            "imagline": "\u2110",
                            "imagpart": "\u2111",
                            "imath": "\u0131",
                            "Im": "\u2111",
                            "imof": "\u22B7",
                            "imped": "\u01B5",
                            "Implies": "\u21D2",
                            "incare": "\u2105",
                            "in": "\u2208",
                            "infin": "\u221E",
                            "infintie": "\u29DD",
                            "inodot": "\u0131",
                            "intcal": "\u22BA",
                            "int": "\u222B",
                            "Int": "\u222C",
                            "integers": "\u2124",
                            "Integral": "\u222B",
                            "intercal": "\u22BA",
                            "Intersection": "\u22C2",
                            "intlarhk": "\u2A17",
                            "intprod": "\u2A3C",
                            "InvisibleComma": "\u2063",
                            "InvisibleTimes": "\u2062",
                            "IOcy": "\u0401",
                            "iocy": "\u0451",
                            "Iogon": "\u012E",
                            "iogon": "\u012F",
                            "Iopf": "\uD835\uDD40",
                            "iopf": "\uD835\uDD5A",
                            "Iota": "\u0399",
                            "iota": "\u03B9",
                            "iprod": "\u2A3C",
                            "iquest": "\xBF",
                            "iscr": "\uD835\uDCBE",
                            "Iscr": "\u2110",
                            "isin": "\u2208",
                            "isindot": "\u22F5",
                            "isinE": "\u22F9",
                            "isins": "\u22F4",
                            "isinsv": "\u22F3",
                            "isinv": "\u2208",
                            "it": "\u2062",
                            "Itilde": "\u0128",
                            "itilde": "\u0129",
                            "Iukcy": "\u0406",
                            "iukcy": "\u0456",
                            "Iuml": "\xCF",
                            "iuml": "\xEF",
                            "Jcirc": "\u0134",
                            "jcirc": "\u0135",
                            "Jcy": "\u0419",
                            "jcy": "\u0439",
                            "Jfr": "\uD835\uDD0D",
                            "jfr": "\uD835\uDD27",
                            "jmath": "\u0237",
                            "Jopf": "\uD835\uDD41",
                            "jopf": "\uD835\uDD5B",
                            "Jscr": "\uD835\uDCA5",
                            "jscr": "\uD835\uDCBF",
                            "Jsercy": "\u0408",
                            "jsercy": "\u0458",
                            "Jukcy": "\u0404",
                            "jukcy": "\u0454",
                            "Kappa": "\u039A",
                            "kappa": "\u03BA",
                            "kappav": "\u03F0",
                            "Kcedil": "\u0136",
                            "kcedil": "\u0137",
                            "Kcy": "\u041A",
                            "kcy": "\u043A",
                            "Kfr": "\uD835\uDD0E",
                            "kfr": "\uD835\uDD28",
                            "kgreen": "\u0138",
                            "KHcy": "\u0425",
                            "khcy": "\u0445",
                            "KJcy": "\u040C",
                            "kjcy": "\u045C",
                            "Kopf": "\uD835\uDD42",
                            "kopf": "\uD835\uDD5C",
                            "Kscr": "\uD835\uDCA6",
                            "kscr": "\uD835\uDCC0",
                            "lAarr": "\u21DA",
                            "Lacute": "\u0139",
                            "lacute": "\u013A",
                            "laemptyv": "\u29B4",
                            "lagran": "\u2112",
                            "Lambda": "\u039B",
                            "lambda": "\u03BB",
                            "lang": "\u27E8",
                            "Lang": "\u27EA",
                            "langd": "\u2991",
                            "langle": "\u27E8",
                            "lap": "\u2A85",
                            "Laplacetrf": "\u2112",
                            "laquo": "\xAB",
                            "larrb": "\u21E4",
                            "larrbfs": "\u291F",
                            "larr": "\u2190",
                            "Larr": "\u219E",
                            "lArr": "\u21D0",
                            "larrfs": "\u291D",
                            "larrhk": "\u21A9",
                            "larrlp": "\u21AB",
                            "larrpl": "\u2939",
                            "larrsim": "\u2973",
                            "larrtl": "\u21A2",
                            "latail": "\u2919",
                            "lAtail": "\u291B",
                            "lat": "\u2AAB",
                            "late": "\u2AAD",
                            "lates": "\u2AAD\uFE00",
                            "lbarr": "\u290C",
                            "lBarr": "\u290E",
                            "lbbrk": "\u2772",
                            "lbrace": "{",
                            "lbrack": "[",
                            "lbrke": "\u298B",
                            "lbrksld": "\u298F",
                            "lbrkslu": "\u298D",
                            "Lcaron": "\u013D",
                            "lcaron": "\u013E",
                            "Lcedil": "\u013B",
                            "lcedil": "\u013C",
                            "lceil": "\u2308",
                            "lcub": "{",
                            "Lcy": "\u041B",
                            "lcy": "\u043B",
                            "ldca": "\u2936",
                            "ldquo": "\u201C",
                            "ldquor": "\u201E",
                            "ldrdhar": "\u2967",
                            "ldrushar": "\u294B",
                            "ldsh": "\u21B2",
                            "le": "\u2264",
                            "lE": "\u2266",
                            "LeftAngleBracket": "\u27E8",
                            "LeftArrowBar": "\u21E4",
                            "leftarrow": "\u2190",
                            "LeftArrow": "\u2190",
                            "Leftarrow": "\u21D0",
                            "LeftArrowRightArrow": "\u21C6",
                            "leftarrowtail": "\u21A2",
                            "LeftCeiling": "\u2308",
                            "LeftDoubleBracket": "\u27E6",
                            "LeftDownTeeVector": "\u2961",
                            "LeftDownVectorBar": "\u2959",
                            "LeftDownVector": "\u21C3",
                            "LeftFloor": "\u230A",
                            "leftharpoondown": "\u21BD",
                            "leftharpoonup": "\u21BC",
                            "leftleftarrows": "\u21C7",
                            "leftrightarrow": "\u2194",
                            "LeftRightArrow": "\u2194",
                            "Leftrightarrow": "\u21D4",
                            "leftrightarrows": "\u21C6",
                            "leftrightharpoons": "\u21CB",
                            "leftrightsquigarrow": "\u21AD",
                            "LeftRightVector": "\u294E",
                            "LeftTeeArrow": "\u21A4",
                            "LeftTee": "\u22A3",
                            "LeftTeeVector": "\u295A",
                            "leftthreetimes": "\u22CB",
                            "LeftTriangleBar": "\u29CF",
                            "LeftTriangle": "\u22B2",
                            "LeftTriangleEqual": "\u22B4",
                            "LeftUpDownVector": "\u2951",
                            "LeftUpTeeVector": "\u2960",
                            "LeftUpVectorBar": "\u2958",
                            "LeftUpVector": "\u21BF",
                            "LeftVectorBar": "\u2952",
                            "LeftVector": "\u21BC",
                            "lEg": "\u2A8B",
                            "leg": "\u22DA",
                            "leq": "\u2264",
                            "leqq": "\u2266",
                            "leqslant": "\u2A7D",
                            "lescc": "\u2AA8",
                            "les": "\u2A7D",
                            "lesdot": "\u2A7F",
                            "lesdoto": "\u2A81",
                            "lesdotor": "\u2A83",
                            "lesg": "\u22DA\uFE00",
                            "lesges": "\u2A93",
                            "lessapprox": "\u2A85",
                            "lessdot": "\u22D6",
                            "lesseqgtr": "\u22DA",
                            "lesseqqgtr": "\u2A8B",
                            "LessEqualGreater": "\u22DA",
                            "LessFullEqual": "\u2266",
                            "LessGreater": "\u2276",
                            "lessgtr": "\u2276",
                            "LessLess": "\u2AA1",
                            "lesssim": "\u2272",
                            "LessSlantEqual": "\u2A7D",
                            "LessTilde": "\u2272",
                            "lfisht": "\u297C",
                            "lfloor": "\u230A",
                            "Lfr": "\uD835\uDD0F",
                            "lfr": "\uD835\uDD29",
                            "lg": "\u2276",
                            "lgE": "\u2A91",
                            "lHar": "\u2962",
                            "lhard": "\u21BD",
                            "lharu": "\u21BC",
                            "lharul": "\u296A",
                            "lhblk": "\u2584",
                            "LJcy": "\u0409",
                            "ljcy": "\u0459",
                            "llarr": "\u21C7",
                            "ll": "\u226A",
                            "Ll": "\u22D8",
                            "llcorner": "\u231E",
                            "Lleftarrow": "\u21DA",
                            "llhard": "\u296B",
                            "lltri": "\u25FA",
                            "Lmidot": "\u013F",
                            "lmidot": "\u0140",
                            "lmoustache": "\u23B0",
                            "lmoust": "\u23B0",
                            "lnap": "\u2A89",
                            "lnapprox": "\u2A89",
                            "lne": "\u2A87",
                            "lnE": "\u2268",
                            "lneq": "\u2A87",
                            "lneqq": "\u2268",
                            "lnsim": "\u22E6",
                            "loang": "\u27EC",
                            "loarr": "\u21FD",
                            "lobrk": "\u27E6",
                            "longleftarrow": "\u27F5",
                            "LongLeftArrow": "\u27F5",
                            "Longleftarrow": "\u27F8",
                            "longleftrightarrow": "\u27F7",
                            "LongLeftRightArrow": "\u27F7",
                            "Longleftrightarrow": "\u27FA",
                            "longmapsto": "\u27FC",
                            "longrightarrow": "\u27F6",
                            "LongRightArrow": "\u27F6",
                            "Longrightarrow": "\u27F9",
                            "looparrowleft": "\u21AB",
                            "looparrowright": "\u21AC",
                            "lopar": "\u2985",
                            "Lopf": "\uD835\uDD43",
                            "lopf": "\uD835\uDD5D",
                            "loplus": "\u2A2D",
                            "lotimes": "\u2A34",
                            "lowast": "\u2217",
                            "lowbar": "_",
                            "LowerLeftArrow": "\u2199",
                            "LowerRightArrow": "\u2198",
                            "loz": "\u25CA",
                            "lozenge": "\u25CA",
                            "lozf": "\u29EB",
                            "lpar": "(",
                            "lparlt": "\u2993",
                            "lrarr": "\u21C6",
                            "lrcorner": "\u231F",
                            "lrhar": "\u21CB",
                            "lrhard": "\u296D",
                            "lrm": "\u200E",
                            "lrtri": "\u22BF",
                            "lsaquo": "\u2039",
                            "lscr": "\uD835\uDCC1",
                            "Lscr": "\u2112",
                            "lsh": "\u21B0",
                            "Lsh": "\u21B0",
                            "lsim": "\u2272",
                            "lsime": "\u2A8D",
                            "lsimg": "\u2A8F",
                            "lsqb": "[",
                            "lsquo": "\u2018",
                            "lsquor": "\u201A",
                            "Lstrok": "\u0141",
                            "lstrok": "\u0142",
                            "ltcc": "\u2AA6",
                            "ltcir": "\u2A79",
                            "lt": "<",
                            "LT": "<",
                            "Lt": "\u226A",
                            "ltdot": "\u22D6",
                            "lthree": "\u22CB",
                            "ltimes": "\u22C9",
                            "ltlarr": "\u2976",
                            "ltquest": "\u2A7B",
                            "ltri": "\u25C3",
                            "ltrie": "\u22B4",
                            "ltrif": "\u25C2",
                            "ltrPar": "\u2996",
                            "lurdshar": "\u294A",
                            "luruhar": "\u2966",
                            "lvertneqq": "\u2268\uFE00",
                            "lvnE": "\u2268\uFE00",
                            "macr": "\xAF",
                            "male": "\u2642",
                            "malt": "\u2720",
                            "maltese": "\u2720",
                            "Map": "\u2905",
                            "map": "\u21A6",
                            "mapsto": "\u21A6",
                            "mapstodown": "\u21A7",
                            "mapstoleft": "\u21A4",
                            "mapstoup": "\u21A5",
                            "marker": "\u25AE",
                            "mcomma": "\u2A29",
                            "Mcy": "\u041C",
                            "mcy": "\u043C",
                            "mdash": "\u2014",
                            "mDDot": "\u223A",
                            "measuredangle": "\u2221",
                            "MediumSpace": "\u205F",
                            "Mellintrf": "\u2133",
                            "Mfr": "\uD835\uDD10",
                            "mfr": "\uD835\uDD2A",
                            "mho": "\u2127",
                            "micro": "\xB5",
                            "midast": "*",
                            "midcir": "\u2AF0",
                            "mid": "\u2223",
                            "middot": "\xB7",
                            "minusb": "\u229F",
                            "minus": "\u2212",
                            "minusd": "\u2238",
                            "minusdu": "\u2A2A",
                            "MinusPlus": "\u2213",
                            "mlcp": "\u2ADB",
                            "mldr": "\u2026",
                            "mnplus": "\u2213",
                            "models": "\u22A7",
                            "Mopf": "\uD835\uDD44",
                            "mopf": "\uD835\uDD5E",
                            "mp": "\u2213",
                            "mscr": "\uD835\uDCC2",
                            "Mscr": "\u2133",
                            "mstpos": "\u223E",
                            "Mu": "\u039C",
                            "mu": "\u03BC",
                            "multimap": "\u22B8",
                            "mumap": "\u22B8",
                            "nabla": "\u2207",
                            "Nacute": "\u0143",
                            "nacute": "\u0144",
                            "nang": "\u2220\u20D2",
                            "nap": "\u2249",
                            "napE": "\u2A70\u0338",
                            "napid": "\u224B\u0338",
                            "napos": "\u0149",
                            "napprox": "\u2249",
                            "natural": "\u266E",
                            "naturals": "\u2115",
                            "natur": "\u266E",
                            "nbsp": "\xA0",
                            "nbump": "\u224E\u0338",
                            "nbumpe": "\u224F\u0338",
                            "ncap": "\u2A43",
                            "Ncaron": "\u0147",
                            "ncaron": "\u0148",
                            "Ncedil": "\u0145",
                            "ncedil": "\u0146",
                            "ncong": "\u2247",
                            "ncongdot": "\u2A6D\u0338",
                            "ncup": "\u2A42",
                            "Ncy": "\u041D",
                            "ncy": "\u043D",
                            "ndash": "\u2013",
                            "nearhk": "\u2924",
                            "nearr": "\u2197",
                            "neArr": "\u21D7",
                            "nearrow": "\u2197",
                            "ne": "\u2260",
                            "nedot": "\u2250\u0338",
                            "NegativeMediumSpace": "\u200B",
                            "NegativeThickSpace": "\u200B",
                            "NegativeThinSpace": "\u200B",
                            "NegativeVeryThinSpace": "\u200B",
                            "nequiv": "\u2262",
                            "nesear": "\u2928",
                            "nesim": "\u2242\u0338",
                            "NestedGreaterGreater": "\u226B",
                            "NestedLessLess": "\u226A",
                            "NewLine": "\n",
                            "nexist": "\u2204",
                            "nexists": "\u2204",
                            "Nfr": "\uD835\uDD11",
                            "nfr": "\uD835\uDD2B",
                            "ngE": "\u2267\u0338",
                            "nge": "\u2271",
                            "ngeq": "\u2271",
                            "ngeqq": "\u2267\u0338",
                            "ngeqslant": "\u2A7E\u0338",
                            "nges": "\u2A7E\u0338",
                            "nGg": "\u22D9\u0338",
                            "ngsim": "\u2275",
                            "nGt": "\u226B\u20D2",
                            "ngt": "\u226F",
                            "ngtr": "\u226F",
                            "nGtv": "\u226B\u0338",
                            "nharr": "\u21AE",
                            "nhArr": "\u21CE",
                            "nhpar": "\u2AF2",
                            "ni": "\u220B",
                            "nis": "\u22FC",
                            "nisd": "\u22FA",
                            "niv": "\u220B",
                            "NJcy": "\u040A",
                            "njcy": "\u045A",
                            "nlarr": "\u219A",
                            "nlArr": "\u21CD",
                            "nldr": "\u2025",
                            "nlE": "\u2266\u0338",
                            "nle": "\u2270",
                            "nleftarrow": "\u219A",
                            "nLeftarrow": "\u21CD",
                            "nleftrightarrow": "\u21AE",
                            "nLeftrightarrow": "\u21CE",
                            "nleq": "\u2270",
                            "nleqq": "\u2266\u0338",
                            "nleqslant": "\u2A7D\u0338",
                            "nles": "\u2A7D\u0338",
                            "nless": "\u226E",
                            "nLl": "\u22D8\u0338",
                            "nlsim": "\u2274",
                            "nLt": "\u226A\u20D2",
                            "nlt": "\u226E",
                            "nltri": "\u22EA",
                            "nltrie": "\u22EC",
                            "nLtv": "\u226A\u0338",
                            "nmid": "\u2224",
                            "NoBreak": "\u2060",
                            "NonBreakingSpace": "\xA0",
                            "nopf": "\uD835\uDD5F",
                            "Nopf": "\u2115",
                            "Not": "\u2AEC",
                            "not": "\xAC",
                            "NotCongruent": "\u2262",
                            "NotCupCap": "\u226D",
                            "NotDoubleVerticalBar": "\u2226",
                            "NotElement": "\u2209",
                            "NotEqual": "\u2260",
                            "NotEqualTilde": "\u2242\u0338",
                            "NotExists": "\u2204",
                            "NotGreater": "\u226F",
                            "NotGreaterEqual": "\u2271",
                            "NotGreaterFullEqual": "\u2267\u0338",
                            "NotGreaterGreater": "\u226B\u0338",
                            "NotGreaterLess": "\u2279",
                            "NotGreaterSlantEqual": "\u2A7E\u0338",
                            "NotGreaterTilde": "\u2275",
                            "NotHumpDownHump": "\u224E\u0338",
                            "NotHumpEqual": "\u224F\u0338",
                            "notin": "\u2209",
                            "notindot": "\u22F5\u0338",
                            "notinE": "\u22F9\u0338",
                            "notinva": "\u2209",
                            "notinvb": "\u22F7",
                            "notinvc": "\u22F6",
                            "NotLeftTriangleBar": "\u29CF\u0338",
                            "NotLeftTriangle": "\u22EA",
                            "NotLeftTriangleEqual": "\u22EC",
                            "NotLess": "\u226E",
                            "NotLessEqual": "\u2270",
                            "NotLessGreater": "\u2278",
                            "NotLessLess": "\u226A\u0338",
                            "NotLessSlantEqual": "\u2A7D\u0338",
                            "NotLessTilde": "\u2274",
                            "NotNestedGreaterGreater": "\u2AA2\u0338",
                            "NotNestedLessLess": "\u2AA1\u0338",
                            "notni": "\u220C",
                            "notniva": "\u220C",
                            "notnivb": "\u22FE",
                            "notnivc": "\u22FD",
                            "NotPrecedes": "\u2280",
                            "NotPrecedesEqual": "\u2AAF\u0338",
                            "NotPrecedesSlantEqual": "\u22E0",
                            "NotReverseElement": "\u220C",
                            "NotRightTriangleBar": "\u29D0\u0338",
                            "NotRightTriangle": "\u22EB",
                            "NotRightTriangleEqual": "\u22ED",
                            "NotSquareSubset": "\u228F\u0338",
                            "NotSquareSubsetEqual": "\u22E2",
                            "NotSquareSuperset": "\u2290\u0338",
                            "NotSquareSupersetEqual": "\u22E3",
                            "NotSubset": "\u2282\u20D2",
                            "NotSubsetEqual": "\u2288",
                            "NotSucceeds": "\u2281",
                            "NotSucceedsEqual": "\u2AB0\u0338",
                            "NotSucceedsSlantEqual": "\u22E1",
                            "NotSucceedsTilde": "\u227F\u0338",
                            "NotSuperset": "\u2283\u20D2",
                            "NotSupersetEqual": "\u2289",
                            "NotTilde": "\u2241",
                            "NotTildeEqual": "\u2244",
                            "NotTildeFullEqual": "\u2247",
                            "NotTildeTilde": "\u2249",
                            "NotVerticalBar": "\u2224",
                            "nparallel": "\u2226",
                            "npar": "\u2226",
                            "nparsl": "\u2AFD\u20E5",
                            "npart": "\u2202\u0338",
                            "npolint": "\u2A14",
                            "npr": "\u2280",
                            "nprcue": "\u22E0",
                            "nprec": "\u2280",
                            "npreceq": "\u2AAF\u0338",
                            "npre": "\u2AAF\u0338",
                            "nrarrc": "\u2933\u0338",
                            "nrarr": "\u219B",
                            "nrArr": "\u21CF",
                            "nrarrw": "\u219D\u0338",
                            "nrightarrow": "\u219B",
                            "nRightarrow": "\u21CF",
                            "nrtri": "\u22EB",
                            "nrtrie": "\u22ED",
                            "nsc": "\u2281",
                            "nsccue": "\u22E1",
                            "nsce": "\u2AB0\u0338",
                            "Nscr": "\uD835\uDCA9",
                            "nscr": "\uD835\uDCC3",
                            "nshortmid": "\u2224",
                            "nshortparallel": "\u2226",
                            "nsim": "\u2241",
                            "nsime": "\u2244",
                            "nsimeq": "\u2244",
                            "nsmid": "\u2224",
                            "nspar": "\u2226",
                            "nsqsube": "\u22E2",
                            "nsqsupe": "\u22E3",
                            "nsub": "\u2284",
                            "nsubE": "\u2AC5\u0338",
                            "nsube": "\u2288",
                            "nsubset": "\u2282\u20D2",
                            "nsubseteq": "\u2288",
                            "nsubseteqq": "\u2AC5\u0338",
                            "nsucc": "\u2281",
                            "nsucceq": "\u2AB0\u0338",
                            "nsup": "\u2285",
                            "nsupE": "\u2AC6\u0338",
                            "nsupe": "\u2289",
                            "nsupset": "\u2283\u20D2",
                            "nsupseteq": "\u2289",
                            "nsupseteqq": "\u2AC6\u0338",
                            "ntgl": "\u2279",
                            "Ntilde": "\xD1",
                            "ntilde": "\xF1",
                            "ntlg": "\u2278",
                            "ntriangleleft": "\u22EA",
                            "ntrianglelefteq": "\u22EC",
                            "ntriangleright": "\u22EB",
                            "ntrianglerighteq": "\u22ED",
                            "Nu": "\u039D",
                            "nu": "\u03BD",
                            "num": "#",
                            "numero": "\u2116",
                            "numsp": "\u2007",
                            "nvap": "\u224D\u20D2",
                            "nvdash": "\u22AC",
                            "nvDash": "\u22AD",
                            "nVdash": "\u22AE",
                            "nVDash": "\u22AF",
                            "nvge": "\u2265\u20D2",
                            "nvgt": ">\u20D2",
                            "nvHarr": "\u2904",
                            "nvinfin": "\u29DE",
                            "nvlArr": "\u2902",
                            "nvle": "\u2264\u20D2",
                            "nvlt": "<\u20D2",
                            "nvltrie": "\u22B4\u20D2",
                            "nvrArr": "\u2903",
                            "nvrtrie": "\u22B5\u20D2",
                            "nvsim": "\u223C\u20D2",
                            "nwarhk": "\u2923",
                            "nwarr": "\u2196",
                            "nwArr": "\u21D6",
                            "nwarrow": "\u2196",
                            "nwnear": "\u2927",
                            "Oacute": "\xD3",
                            "oacute": "\xF3",
                            "oast": "\u229B",
                            "Ocirc": "\xD4",
                            "ocirc": "\xF4",
                            "ocir": "\u229A",
                            "Ocy": "\u041E",
                            "ocy": "\u043E",
                            "odash": "\u229D",
                            "Odblac": "\u0150",
                            "odblac": "\u0151",
                            "odiv": "\u2A38",
                            "odot": "\u2299",
                            "odsold": "\u29BC",
                            "OElig": "\u0152",
                            "oelig": "\u0153",
                            "ofcir": "\u29BF",
                            "Ofr": "\uD835\uDD12",
                            "ofr": "\uD835\uDD2C",
                            "ogon": "\u02DB",
                            "Ograve": "\xD2",
                            "ograve": "\xF2",
                            "ogt": "\u29C1",
                            "ohbar": "\u29B5",
                            "ohm": "\u03A9",
                            "oint": "\u222E",
                            "olarr": "\u21BA",
                            "olcir": "\u29BE",
                            "olcross": "\u29BB",
                            "oline": "\u203E",
                            "olt": "\u29C0",
                            "Omacr": "\u014C",
                            "omacr": "\u014D",
                            "Omega": "\u03A9",
                            "omega": "\u03C9",
                            "Omicron": "\u039F",
                            "omicron": "\u03BF",
                            "omid": "\u29B6",
                            "ominus": "\u2296",
                            "Oopf": "\uD835\uDD46",
                            "oopf": "\uD835\uDD60",
                            "opar": "\u29B7",
                            "OpenCurlyDoubleQuote": "\u201C",
                            "OpenCurlyQuote": "\u2018",
                            "operp": "\u29B9",
                            "oplus": "\u2295",
                            "orarr": "\u21BB",
                            "Or": "\u2A54",
                            "or": "\u2228",
                            "ord": "\u2A5D",
                            "order": "\u2134",
                            "orderof": "\u2134",
                            "ordf": "\xAA",
                            "ordm": "\xBA",
                            "origof": "\u22B6",
                            "oror": "\u2A56",
                            "orslope": "\u2A57",
                            "orv": "\u2A5B",
                            "oS": "\u24C8",
                            "Oscr": "\uD835\uDCAA",
                            "oscr": "\u2134",
                            "Oslash": "\xD8",
                            "oslash": "\xF8",
                            "osol": "\u2298",
                            "Otilde": "\xD5",
                            "otilde": "\xF5",
                            "otimesas": "\u2A36",
                            "Otimes": "\u2A37",
                            "otimes": "\u2297",
                            "Ouml": "\xD6",
                            "ouml": "\xF6",
                            "ovbar": "\u233D",
                            "OverBar": "\u203E",
                            "OverBrace": "\u23DE",
                            "OverBracket": "\u23B4",
                            "OverParenthesis": "\u23DC",
                            "para": "\xB6",
                            "parallel": "\u2225",
                            "par": "\u2225",
                            "parsim": "\u2AF3",
                            "parsl": "\u2AFD",
                            "part": "\u2202",
                            "PartialD": "\u2202",
                            "Pcy": "\u041F",
                            "pcy": "\u043F",
                            "percnt": "%",
                            "period": ".",
                            "permil": "\u2030",
                            "perp": "\u22A5",
                            "pertenk": "\u2031",
                            "Pfr": "\uD835\uDD13",
                            "pfr": "\uD835\uDD2D",
                            "Phi": "\u03A6",
                            "phi": "\u03C6",
                            "phiv": "\u03D5",
                            "phmmat": "\u2133",
                            "phone": "\u260E",
                            "Pi": "\u03A0",
                            "pi": "\u03C0",
                            "pitchfork": "\u22D4",
                            "piv": "\u03D6",
                            "planck": "\u210F",
                            "planckh": "\u210E",
                            "plankv": "\u210F",
                            "plusacir": "\u2A23",
                            "plusb": "\u229E",
                            "pluscir": "\u2A22",
                            "plus": "+",
                            "plusdo": "\u2214",
                            "plusdu": "\u2A25",
                            "pluse": "\u2A72",
                            "PlusMinus": "\xB1",
                            "plusmn": "\xB1",
                            "plussim": "\u2A26",
                            "plustwo": "\u2A27",
                            "pm": "\xB1",
                            "Poincareplane": "\u210C",
                            "pointint": "\u2A15",
                            "popf": "\uD835\uDD61",
                            "Popf": "\u2119",
                            "pound": "\xA3",
                            "prap": "\u2AB7",
                            "Pr": "\u2ABB",
                            "pr": "\u227A",
                            "prcue": "\u227C",
                            "precapprox": "\u2AB7",
                            "prec": "\u227A",
                            "preccurlyeq": "\u227C",
                            "Precedes": "\u227A",
                            "PrecedesEqual": "\u2AAF",
                            "PrecedesSlantEqual": "\u227C",
                            "PrecedesTilde": "\u227E",
                            "preceq": "\u2AAF",
                            "precnapprox": "\u2AB9",
                            "precneqq": "\u2AB5",
                            "precnsim": "\u22E8",
                            "pre": "\u2AAF",
                            "prE": "\u2AB3",
                            "precsim": "\u227E",
                            "prime": "\u2032",
                            "Prime": "\u2033",
                            "primes": "\u2119",
                            "prnap": "\u2AB9",
                            "prnE": "\u2AB5",
                            "prnsim": "\u22E8",
                            "prod": "\u220F",
                            "Product": "\u220F",
                            "profalar": "\u232E",
                            "profline": "\u2312",
                            "profsurf": "\u2313",
                            "prop": "\u221D",
                            "Proportional": "\u221D",
                            "Proportion": "\u2237",
                            "propto": "\u221D",
                            "prsim": "\u227E",
                            "prurel": "\u22B0",
                            "Pscr": "\uD835\uDCAB",
                            "pscr": "\uD835\uDCC5",
                            "Psi": "\u03A8",
                            "psi": "\u03C8",
                            "puncsp": "\u2008",
                            "Qfr": "\uD835\uDD14",
                            "qfr": "\uD835\uDD2E",
                            "qint": "\u2A0C",
                            "qopf": "\uD835\uDD62",
                            "Qopf": "\u211A",
                            "qprime": "\u2057",
                            "Qscr": "\uD835\uDCAC",
                            "qscr": "\uD835\uDCC6",
                            "quaternions": "\u210D",
                            "quatint": "\u2A16",
                            "quest": "?",
                            "questeq": "\u225F",
                            "quot": "\"",
                            "QUOT": "\"",
                            "rAarr": "\u21DB",
                            "race": "\u223D\u0331",
                            "Racute": "\u0154",
                            "racute": "\u0155",
                            "radic": "\u221A",
                            "raemptyv": "\u29B3",
                            "rang": "\u27E9",
                            "Rang": "\u27EB",
                            "rangd": "\u2992",
                            "range": "\u29A5",
                            "rangle": "\u27E9",
                            "raquo": "\xBB",
                            "rarrap": "\u2975",
                            "rarrb": "\u21E5",
                            "rarrbfs": "\u2920",
                            "rarrc": "\u2933",
                            "rarr": "\u2192",
                            "Rarr": "\u21A0",
                            "rArr": "\u21D2",
                            "rarrfs": "\u291E",
                            "rarrhk": "\u21AA",
                            "rarrlp": "\u21AC",
                            "rarrpl": "\u2945",
                            "rarrsim": "\u2974",
                            "Rarrtl": "\u2916",
                            "rarrtl": "\u21A3",
                            "rarrw": "\u219D",
                            "ratail": "\u291A",
                            "rAtail": "\u291C",
                            "ratio": "\u2236",
                            "rationals": "\u211A",
                            "rbarr": "\u290D",
                            "rBarr": "\u290F",
                            "RBarr": "\u2910",
                            "rbbrk": "\u2773",
                            "rbrace": "}",
                            "rbrack": "]",
                            "rbrke": "\u298C",
                            "rbrksld": "\u298E",
                            "rbrkslu": "\u2990",
                            "Rcaron": "\u0158",
                            "rcaron": "\u0159",
                            "Rcedil": "\u0156",
                            "rcedil": "\u0157",
                            "rceil": "\u2309",
                            "rcub": "}",
                            "Rcy": "\u0420",
                            "rcy": "\u0440",
                            "rdca": "\u2937",
                            "rdldhar": "\u2969",
                            "rdquo": "\u201D",
                            "rdquor": "\u201D",
                            "rdsh": "\u21B3",
                            "real": "\u211C",
                            "realine": "\u211B",
                            "realpart": "\u211C",
                            "reals": "\u211D",
                            "Re": "\u211C",
                            "rect": "\u25AD",
                            "reg": "\xAE",
                            "REG": "\xAE",
                            "ReverseElement": "\u220B",
                            "ReverseEquilibrium": "\u21CB",
                            "ReverseUpEquilibrium": "\u296F",
                            "rfisht": "\u297D",
                            "rfloor": "\u230B",
                            "rfr": "\uD835\uDD2F",
                            "Rfr": "\u211C",
                            "rHar": "\u2964",
                            "rhard": "\u21C1",
                            "rharu": "\u21C0",
                            "rharul": "\u296C",
                            "Rho": "\u03A1",
                            "rho": "\u03C1",
                            "rhov": "\u03F1",
                            "RightAngleBracket": "\u27E9",
                            "RightArrowBar": "\u21E5",
                            "rightarrow": "\u2192",
                            "RightArrow": "\u2192",
                            "Rightarrow": "\u21D2",
                            "RightArrowLeftArrow": "\u21C4",
                            "rightarrowtail": "\u21A3",
                            "RightCeiling": "\u2309",
                            "RightDoubleBracket": "\u27E7",
                            "RightDownTeeVector": "\u295D",
                            "RightDownVectorBar": "\u2955",
                            "RightDownVector": "\u21C2",
                            "RightFloor": "\u230B",
                            "rightharpoondown": "\u21C1",
                            "rightharpoonup": "\u21C0",
                            "rightleftarrows": "\u21C4",
                            "rightleftharpoons": "\u21CC",
                            "rightrightarrows": "\u21C9",
                            "rightsquigarrow": "\u219D",
                            "RightTeeArrow": "\u21A6",
                            "RightTee": "\u22A2",
                            "RightTeeVector": "\u295B",
                            "rightthreetimes": "\u22CC",
                            "RightTriangleBar": "\u29D0",
                            "RightTriangle": "\u22B3",
                            "RightTriangleEqual": "\u22B5",
                            "RightUpDownVector": "\u294F",
                            "RightUpTeeVector": "\u295C",
                            "RightUpVectorBar": "\u2954",
                            "RightUpVector": "\u21BE",
                            "RightVectorBar": "\u2953",
                            "RightVector": "\u21C0",
                            "ring": "\u02DA",
                            "risingdotseq": "\u2253",
                            "rlarr": "\u21C4",
                            "rlhar": "\u21CC",
                            "rlm": "\u200F",
                            "rmoustache": "\u23B1",
                            "rmoust": "\u23B1",
                            "rnmid": "\u2AEE",
                            "roang": "\u27ED",
                            "roarr": "\u21FE",
                            "robrk": "\u27E7",
                            "ropar": "\u2986",
                            "ropf": "\uD835\uDD63",
                            "Ropf": "\u211D",
                            "roplus": "\u2A2E",
                            "rotimes": "\u2A35",
                            "RoundImplies": "\u2970",
                            "rpar": ")",
                            "rpargt": "\u2994",
                            "rppolint": "\u2A12",
                            "rrarr": "\u21C9",
                            "Rrightarrow": "\u21DB",
                            "rsaquo": "\u203A",
                            "rscr": "\uD835\uDCC7",
                            "Rscr": "\u211B",
                            "rsh": "\u21B1",
                            "Rsh": "\u21B1",
                            "rsqb": "]",
                            "rsquo": "\u2019",
                            "rsquor": "\u2019",
                            "rthree": "\u22CC",
                            "rtimes": "\u22CA",
                            "rtri": "\u25B9",
                            "rtrie": "\u22B5",
                            "rtrif": "\u25B8",
                            "rtriltri": "\u29CE",
                            "RuleDelayed": "\u29F4",
                            "ruluhar": "\u2968",
                            "rx": "\u211E",
                            "Sacute": "\u015A",
                            "sacute": "\u015B",
                            "sbquo": "\u201A",
                            "scap": "\u2AB8",
                            "Scaron": "\u0160",
                            "scaron": "\u0161",
                            "Sc": "\u2ABC",
                            "sc": "\u227B",
                            "sccue": "\u227D",
                            "sce": "\u2AB0",
                            "scE": "\u2AB4",
                            "Scedil": "\u015E",
                            "scedil": "\u015F",
                            "Scirc": "\u015C",
                            "scirc": "\u015D",
                            "scnap": "\u2ABA",
                            "scnE": "\u2AB6",
                            "scnsim": "\u22E9",
                            "scpolint": "\u2A13",
                            "scsim": "\u227F",
                            "Scy": "\u0421",
                            "scy": "\u0441",
                            "sdotb": "\u22A1",
                            "sdot": "\u22C5",
                            "sdote": "\u2A66",
                            "searhk": "\u2925",
                            "searr": "\u2198",
                            "seArr": "\u21D8",
                            "searrow": "\u2198",
                            "sect": "\xA7",
                            "semi": ";",
                            "seswar": "\u2929",
                            "setminus": "\u2216",
                            "setmn": "\u2216",
                            "sext": "\u2736",
                            "Sfr": "\uD835\uDD16",
                            "sfr": "\uD835\uDD30",
                            "sfrown": "\u2322",
                            "sharp": "\u266F",
                            "SHCHcy": "\u0429",
                            "shchcy": "\u0449",
                            "SHcy": "\u0428",
                            "shcy": "\u0448",
                            "ShortDownArrow": "\u2193",
                            "ShortLeftArrow": "\u2190",
                            "shortmid": "\u2223",
                            "shortparallel": "\u2225",
                            "ShortRightArrow": "\u2192",
                            "ShortUpArrow": "\u2191",
                            "shy": "\xAD",
                            "Sigma": "\u03A3",
                            "sigma": "\u03C3",
                            "sigmaf": "\u03C2",
                            "sigmav": "\u03C2",
                            "sim": "\u223C",
                            "simdot": "\u2A6A",
                            "sime": "\u2243",
                            "simeq": "\u2243",
                            "simg": "\u2A9E",
                            "simgE": "\u2AA0",
                            "siml": "\u2A9D",
                            "simlE": "\u2A9F",
                            "simne": "\u2246",
                            "simplus": "\u2A24",
                            "simrarr": "\u2972",
                            "slarr": "\u2190",
                            "SmallCircle": "\u2218",
                            "smallsetminus": "\u2216",
                            "smashp": "\u2A33",
                            "smeparsl": "\u29E4",
                            "smid": "\u2223",
                            "smile": "\u2323",
                            "smt": "\u2AAA",
                            "smte": "\u2AAC",
                            "smtes": "\u2AAC\uFE00",
                            "SOFTcy": "\u042C",
                            "softcy": "\u044C",
                            "solbar": "\u233F",
                            "solb": "\u29C4",
                            "sol": "/",
                            "Sopf": "\uD835\uDD4A",
                            "sopf": "\uD835\uDD64",
                            "spades": "\u2660",
                            "spadesuit": "\u2660",
                            "spar": "\u2225",
                            "sqcap": "\u2293",
                            "sqcaps": "\u2293\uFE00",
                            "sqcup": "\u2294",
                            "sqcups": "\u2294\uFE00",
                            "Sqrt": "\u221A",
                            "sqsub": "\u228F",
                            "sqsube": "\u2291",
                            "sqsubset": "\u228F",
                            "sqsubseteq": "\u2291",
                            "sqsup": "\u2290",
                            "sqsupe": "\u2292",
                            "sqsupset": "\u2290",
                            "sqsupseteq": "\u2292",
                            "square": "\u25A1",
                            "Square": "\u25A1",
                            "SquareIntersection": "\u2293",
                            "SquareSubset": "\u228F",
                            "SquareSubsetEqual": "\u2291",
                            "SquareSuperset": "\u2290",
                            "SquareSupersetEqual": "\u2292",
                            "SquareUnion": "\u2294",
                            "squarf": "\u25AA",
                            "squ": "\u25A1",
                            "squf": "\u25AA",
                            "srarr": "\u2192",
                            "Sscr": "\uD835\uDCAE",
                            "sscr": "\uD835\uDCC8",
                            "ssetmn": "\u2216",
                            "ssmile": "\u2323",
                            "sstarf": "\u22C6",
                            "Star": "\u22C6",
                            "star": "\u2606",
                            "starf": "\u2605",
                            "straightepsilon": "\u03F5",
                            "straightphi": "\u03D5",
                            "strns": "\xAF",
                            "sub": "\u2282",
                            "Sub": "\u22D0",
                            "subdot": "\u2ABD",
                            "subE": "\u2AC5",
                            "sube": "\u2286",
                            "subedot": "\u2AC3",
                            "submult": "\u2AC1",
                            "subnE": "\u2ACB",
                            "subne": "\u228A",
                            "subplus": "\u2ABF",
                            "subrarr": "\u2979",
                            "subset": "\u2282",
                            "Subset": "\u22D0",
                            "subseteq": "\u2286",
                            "subseteqq": "\u2AC5",
                            "SubsetEqual": "\u2286",
                            "subsetneq": "\u228A",
                            "subsetneqq": "\u2ACB",
                            "subsim": "\u2AC7",
                            "subsub": "\u2AD5",
                            "subsup": "\u2AD3",
                            "succapprox": "\u2AB8",
                            "succ": "\u227B",
                            "succcurlyeq": "\u227D",
                            "Succeeds": "\u227B",
                            "SucceedsEqual": "\u2AB0",
                            "SucceedsSlantEqual": "\u227D",
                            "SucceedsTilde": "\u227F",
                            "succeq": "\u2AB0",
                            "succnapprox": "\u2ABA",
                            "succneqq": "\u2AB6",
                            "succnsim": "\u22E9",
                            "succsim": "\u227F",
                            "SuchThat": "\u220B",
                            "sum": "\u2211",
                            "Sum": "\u2211",
                            "sung": "\u266A",
                            "sup1": "\xB9",
                            "sup2": "\xB2",
                            "sup3": "\xB3",
                            "sup": "\u2283",
                            "Sup": "\u22D1",
                            "supdot": "\u2ABE",
                            "supdsub": "\u2AD8",
                            "supE": "\u2AC6",
                            "supe": "\u2287",
                            "supedot": "\u2AC4",
                            "Superset": "\u2283",
                            "SupersetEqual": "\u2287",
                            "suphsol": "\u27C9",
                            "suphsub": "\u2AD7",
                            "suplarr": "\u297B",
                            "supmult": "\u2AC2",
                            "supnE": "\u2ACC",
                            "supne": "\u228B",
                            "supplus": "\u2AC0",
                            "supset": "\u2283",
                            "Supset": "\u22D1",
                            "supseteq": "\u2287",
                            "supseteqq": "\u2AC6",
                            "supsetneq": "\u228B",
                            "supsetneqq": "\u2ACC",
                            "supsim": "\u2AC8",
                            "supsub": "\u2AD4",
                            "supsup": "\u2AD6",
                            "swarhk": "\u2926",
                            "swarr": "\u2199",
                            "swArr": "\u21D9",
                            "swarrow": "\u2199",
                            "swnwar": "\u292A",
                            "szlig": "\xDF",
                            "Tab": "\t",
                            "target": "\u2316",
                            "Tau": "\u03A4",
                            "tau": "\u03C4",
                            "tbrk": "\u23B4",
                            "Tcaron": "\u0164",
                            "tcaron": "\u0165",
                            "Tcedil": "\u0162",
                            "tcedil": "\u0163",
                            "Tcy": "\u0422",
                            "tcy": "\u0442",
                            "tdot": "\u20DB",
                            "telrec": "\u2315",
                            "Tfr": "\uD835\uDD17",
                            "tfr": "\uD835\uDD31",
                            "there4": "\u2234",
                            "therefore": "\u2234",
                            "Therefore": "\u2234",
                            "Theta": "\u0398",
                            "theta": "\u03B8",
                            "thetasym": "\u03D1",
                            "thetav": "\u03D1",
                            "thickapprox": "\u2248",
                            "thicksim": "\u223C",
                            "ThickSpace": "\u205F\u200A",
                            "ThinSpace": "\u2009",
                            "thinsp": "\u2009",
                            "thkap": "\u2248",
                            "thksim": "\u223C",
                            "THORN": "\xDE",
                            "thorn": "\xFE",
                            "tilde": "\u02DC",
                            "Tilde": "\u223C",
                            "TildeEqual": "\u2243",
                            "TildeFullEqual": "\u2245",
                            "TildeTilde": "\u2248",
                            "timesbar": "\u2A31",
                            "timesb": "\u22A0",
                            "times": "\xD7",
                            "timesd": "\u2A30",
                            "tint": "\u222D",
                            "toea": "\u2928",
                            "topbot": "\u2336",
                            "topcir": "\u2AF1",
                            "top": "\u22A4",
                            "Topf": "\uD835\uDD4B",
                            "topf": "\uD835\uDD65",
                            "topfork": "\u2ADA",
                            "tosa": "\u2929",
                            "tprime": "\u2034",
                            "trade": "\u2122",
                            "TRADE": "\u2122",
                            "triangle": "\u25B5",
                            "triangledown": "\u25BF",
                            "triangleleft": "\u25C3",
                            "trianglelefteq": "\u22B4",
                            "triangleq": "\u225C",
                            "triangleright": "\u25B9",
                            "trianglerighteq": "\u22B5",
                            "tridot": "\u25EC",
                            "trie": "\u225C",
                            "triminus": "\u2A3A",
                            "TripleDot": "\u20DB",
                            "triplus": "\u2A39",
                            "trisb": "\u29CD",
                            "tritime": "\u2A3B",
                            "trpezium": "\u23E2",
                            "Tscr": "\uD835\uDCAF",
                            "tscr": "\uD835\uDCC9",
                            "TScy": "\u0426",
                            "tscy": "\u0446",
                            "TSHcy": "\u040B",
                            "tshcy": "\u045B",
                            "Tstrok": "\u0166",
                            "tstrok": "\u0167",
                            "twixt": "\u226C",
                            "twoheadleftarrow": "\u219E",
                            "twoheadrightarrow": "\u21A0",
                            "Uacute": "\xDA",
                            "uacute": "\xFA",
                            "uarr": "\u2191",
                            "Uarr": "\u219F",
                            "uArr": "\u21D1",
                            "Uarrocir": "\u2949",
                            "Ubrcy": "\u040E",
                            "ubrcy": "\u045E",
                            "Ubreve": "\u016C",
                            "ubreve": "\u016D",
                            "Ucirc": "\xDB",
                            "ucirc": "\xFB",
                            "Ucy": "\u0423",
                            "ucy": "\u0443",
                            "udarr": "\u21C5",
                            "Udblac": "\u0170",
                            "udblac": "\u0171",
                            "udhar": "\u296E",
                            "ufisht": "\u297E",
                            "Ufr": "\uD835\uDD18",
                            "ufr": "\uD835\uDD32",
                            "Ugrave": "\xD9",
                            "ugrave": "\xF9",
                            "uHar": "\u2963",
                            "uharl": "\u21BF",
                            "uharr": "\u21BE",
                            "uhblk": "\u2580",
                            "ulcorn": "\u231C",
                            "ulcorner": "\u231C",
                            "ulcrop": "\u230F",
                            "ultri": "\u25F8",
                            "Umacr": "\u016A",
                            "umacr": "\u016B",
                            "uml": "\xA8",
                            "UnderBar": "_",
                            "UnderBrace": "\u23DF",
                            "UnderBracket": "\u23B5",
                            "UnderParenthesis": "\u23DD",
                            "Union": "\u22C3",
                            "UnionPlus": "\u228E",
                            "Uogon": "\u0172",
                            "uogon": "\u0173",
                            "Uopf": "\uD835\uDD4C",
                            "uopf": "\uD835\uDD66",
                            "UpArrowBar": "\u2912",
                            "uparrow": "\u2191",
                            "UpArrow": "\u2191",
                            "Uparrow": "\u21D1",
                            "UpArrowDownArrow": "\u21C5",
                            "updownarrow": "\u2195",
                            "UpDownArrow": "\u2195",
                            "Updownarrow": "\u21D5",
                            "UpEquilibrium": "\u296E",
                            "upharpoonleft": "\u21BF",
                            "upharpoonright": "\u21BE",
                            "uplus": "\u228E",
                            "UpperLeftArrow": "\u2196",
                            "UpperRightArrow": "\u2197",
                            "upsi": "\u03C5",
                            "Upsi": "\u03D2",
                            "upsih": "\u03D2",
                            "Upsilon": "\u03A5",
                            "upsilon": "\u03C5",
                            "UpTeeArrow": "\u21A5",
                            "UpTee": "\u22A5",
                            "upuparrows": "\u21C8",
                            "urcorn": "\u231D",
                            "urcorner": "\u231D",
                            "urcrop": "\u230E",
                            "Uring": "\u016E",
                            "uring": "\u016F",
                            "urtri": "\u25F9",
                            "Uscr": "\uD835\uDCB0",
                            "uscr": "\uD835\uDCCA",
                            "utdot": "\u22F0",
                            "Utilde": "\u0168",
                            "utilde": "\u0169",
                            "utri": "\u25B5",
                            "utrif": "\u25B4",
                            "uuarr": "\u21C8",
                            "Uuml": "\xDC",
                            "uuml": "\xFC",
                            "uwangle": "\u29A7",
                            "vangrt": "\u299C",
                            "varepsilon": "\u03F5",
                            "varkappa": "\u03F0",
                            "varnothing": "\u2205",
                            "varphi": "\u03D5",
                            "varpi": "\u03D6",
                            "varpropto": "\u221D",
                            "varr": "\u2195",
                            "vArr": "\u21D5",
                            "varrho": "\u03F1",
                            "varsigma": "\u03C2",
                            "varsubsetneq": "\u228A\uFE00",
                            "varsubsetneqq": "\u2ACB\uFE00",
                            "varsupsetneq": "\u228B\uFE00",
                            "varsupsetneqq": "\u2ACC\uFE00",
                            "vartheta": "\u03D1",
                            "vartriangleleft": "\u22B2",
                            "vartriangleright": "\u22B3",
                            "vBar": "\u2AE8",
                            "Vbar": "\u2AEB",
                            "vBarv": "\u2AE9",
                            "Vcy": "\u0412",
                            "vcy": "\u0432",
                            "vdash": "\u22A2",
                            "vDash": "\u22A8",
                            "Vdash": "\u22A9",
                            "VDash": "\u22AB",
                            "Vdashl": "\u2AE6",
                            "veebar": "\u22BB",
                            "vee": "\u2228",
                            "Vee": "\u22C1",
                            "veeeq": "\u225A",
                            "vellip": "\u22EE",
                            "verbar": "|",
                            "Verbar": "\u2016",
                            "vert": "|",
                            "Vert": "\u2016",
                            "VerticalBar": "\u2223",
                            "VerticalLine": "|",
                            "VerticalSeparator": "\u2758",
                            "VerticalTilde": "\u2240",
                            "VeryThinSpace": "\u200A",
                            "Vfr": "\uD835\uDD19",
                            "vfr": "\uD835\uDD33",
                            "vltri": "\u22B2",
                            "vnsub": "\u2282\u20D2",
                            "vnsup": "\u2283\u20D2",
                            "Vopf": "\uD835\uDD4D",
                            "vopf": "\uD835\uDD67",
                            "vprop": "\u221D",
                            "vrtri": "\u22B3",
                            "Vscr": "\uD835\uDCB1",
                            "vscr": "\uD835\uDCCB",
                            "vsubnE": "\u2ACB\uFE00",
                            "vsubne": "\u228A\uFE00",
                            "vsupnE": "\u2ACC\uFE00",
                            "vsupne": "\u228B\uFE00",
                            "Vvdash": "\u22AA",
                            "vzigzag": "\u299A",
                            "Wcirc": "\u0174",
                            "wcirc": "\u0175",
                            "wedbar": "\u2A5F",
                            "wedge": "\u2227",
                            "Wedge": "\u22C0",
                            "wedgeq": "\u2259",
                            "weierp": "\u2118",
                            "Wfr": "\uD835\uDD1A",
                            "wfr": "\uD835\uDD34",
                            "Wopf": "\uD835\uDD4E",
                            "wopf": "\uD835\uDD68",
                            "wp": "\u2118",
                            "wr": "\u2240",
                            "wreath": "\u2240",
                            "Wscr": "\uD835\uDCB2",
                            "wscr": "\uD835\uDCCC",
                            "xcap": "\u22C2",
                            "xcirc": "\u25EF",
                            "xcup": "\u22C3",
                            "xdtri": "\u25BD",
                            "Xfr": "\uD835\uDD1B",
                            "xfr": "\uD835\uDD35",
                            "xharr": "\u27F7",
                            "xhArr": "\u27FA",
                            "Xi": "\u039E",
                            "xi": "\u03BE",
                            "xlarr": "\u27F5",
                            "xlArr": "\u27F8",
                            "xmap": "\u27FC",
                            "xnis": "\u22FB",
                            "xodot": "\u2A00",
                            "Xopf": "\uD835\uDD4F",
                            "xopf": "\uD835\uDD69",
                            "xoplus": "\u2A01",
                            "xotime": "\u2A02",
                            "xrarr": "\u27F6",
                            "xrArr": "\u27F9",
                            "Xscr": "\uD835\uDCB3",
                            "xscr": "\uD835\uDCCD",
                            "xsqcup": "\u2A06",
                            "xuplus": "\u2A04",
                            "xutri": "\u25B3",
                            "xvee": "\u22C1",
                            "xwedge": "\u22C0",
                            "Yacute": "\xDD",
                            "yacute": "\xFD",
                            "YAcy": "\u042F",
                            "yacy": "\u044F",
                            "Ycirc": "\u0176",
                            "ycirc": "\u0177",
                            "Ycy": "\u042B",
                            "ycy": "\u044B",
                            "yen": "\xA5",
                            "Yfr": "\uD835\uDD1C",
                            "yfr": "\uD835\uDD36",
                            "YIcy": "\u0407",
                            "yicy": "\u0457",
                            "Yopf": "\uD835\uDD50",
                            "yopf": "\uD835\uDD6A",
                            "Yscr": "\uD835\uDCB4",
                            "yscr": "\uD835\uDCCE",
                            "YUcy": "\u042E",
                            "yucy": "\u044E",
                            "yuml": "\xFF",
                            "Yuml": "\u0178",
                            "Zacute": "\u0179",
                            "zacute": "\u017A",
                            "Zcaron": "\u017D",
                            "zcaron": "\u017E",
                            "Zcy": "\u0417",
                            "zcy": "\u0437",
                            "Zdot": "\u017B",
                            "zdot": "\u017C",
                            "zeetrf": "\u2128",
                            "ZeroWidthSpace": "\u200B",
                            "Zeta": "\u0396",
                            "zeta": "\u03B6",
                            "zfr": "\uD835\uDD37",
                            "Zfr": "\u2128",
                            "ZHcy": "\u0416",
                            "zhcy": "\u0436",
                            "zigrarr": "\u21DD",
                            "zopf": "\uD835\uDD6B",
                            "Zopf": "\u2124",
                            "Zscr": "\uD835\uDCB5",
                            "zscr": "\uD835\uDCCF",
                            "zwj": "\u200D",
                            "zwnj": "\u200C"
                        };
                    }, {}],
                    23: [function (require, module, exports) {
                        module.exports = {
                            "Aacute": "\xC1",
                            "aacute": "\xE1",
                            "Acirc": "\xC2",
                            "acirc": "\xE2",
                            "acute": "\xB4",
                            "AElig": "\xC6",
                            "aelig": "\xE6",
                            "Agrave": "\xC0",
                            "agrave": "\xE0",
                            "amp": "&",
                            "AMP": "&",
                            "Aring": "\xC5",
                            "aring": "\xE5",
                            "Atilde": "\xC3",
                            "atilde": "\xE3",
                            "Auml": "\xC4",
                            "auml": "\xE4",
                            "brvbar": "\xA6",
                            "Ccedil": "\xC7",
                            "ccedil": "\xE7",
                            "cedil": "\xB8",
                            "cent": "\xA2",
                            "copy": "\xA9",
                            "COPY": "\xA9",
                            "curren": "\xA4",
                            "deg": "\xB0",
                            "divide": "\xF7",
                            "Eacute": "\xC9",
                            "eacute": "\xE9",
                            "Ecirc": "\xCA",
                            "ecirc": "\xEA",
                            "Egrave": "\xC8",
                            "egrave": "\xE8",
                            "ETH": "\xD0",
                            "eth": "\xF0",
                            "Euml": "\xCB",
                            "euml": "\xEB",
                            "frac12": "\xBD",
                            "frac14": "\xBC",
                            "frac34": "\xBE",
                            "gt": ">",
                            "GT": ">",
                            "Iacute": "\xCD",
                            "iacute": "\xED",
                            "Icirc": "\xCE",
                            "icirc": "\xEE",
                            "iexcl": "\xA1",
                            "Igrave": "\xCC",
                            "igrave": "\xEC",
                            "iquest": "\xBF",
                            "Iuml": "\xCF",
                            "iuml": "\xEF",
                            "laquo": "\xAB",
                            "lt": "<",
                            "LT": "<",
                            "macr": "\xAF",
                            "micro": "\xB5",
                            "middot": "\xB7",
                            "nbsp": "\xA0",
                            "not": "\xAC",
                            "Ntilde": "\xD1",
                            "ntilde": "\xF1",
                            "Oacute": "\xD3",
                            "oacute": "\xF3",
                            "Ocirc": "\xD4",
                            "ocirc": "\xF4",
                            "Ograve": "\xD2",
                            "ograve": "\xF2",
                            "ordf": "\xAA",
                            "ordm": "\xBA",
                            "Oslash": "\xD8",
                            "oslash": "\xF8",
                            "Otilde": "\xD5",
                            "otilde": "\xF5",
                            "Ouml": "\xD6",
                            "ouml": "\xF6",
                            "para": "\xB6",
                            "plusmn": "\xB1",
                            "pound": "\xA3",
                            "quot": "\"",
                            "QUOT": "\"",
                            "raquo": "\xBB",
                            "reg": "\xAE",
                            "REG": "\xAE",
                            "sect": "\xA7",
                            "shy": "\xAD",
                            "sup1": "\xB9",
                            "sup2": "\xB2",
                            "sup3": "\xB3",
                            "szlig": "\xDF",
                            "THORN": "\xDE",
                            "thorn": "\xFE",
                            "times": "\xD7",
                            "Uacute": "\xDA",
                            "uacute": "\xFA",
                            "Ucirc": "\xDB",
                            "ucirc": "\xFB",
                            "Ugrave": "\xD9",
                            "ugrave": "\xF9",
                            "uml": "\xA8",
                            "Uuml": "\xDC",
                            "uuml": "\xFC",
                            "Yacute": "\xDD",
                            "yacute": "\xFD",
                            "yen": "\xA5",
                            "yuml": "\xFF"
                        };
                    }, {}],
                    24: [function (require, module, exports) {
                        module.exports = {"amp": "&", "apos": "'", "gt": ">", "lt": "<", "quot": "\""};
                    }, {}],
                    25: [function (require, module, exports) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
                        var objectCreate = Object.create || objectCreatePolyfill;
                        var objectKeys = Object.keys || objectKeysPolyfill;
                        var bind = Function.prototype.bind || functionBindPolyfill;

                        function EventEmitter() {
                            if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {
                                this._events = objectCreate(null);
                                this._eventsCount = 0;
                            }
                            this._maxListeners = this._maxListeners || undefined;
                        }

                        module.exports = EventEmitter;// Backwards-compat with node 0.10.x
                        EventEmitter.EventEmitter = EventEmitter;
                        EventEmitter.prototype._events = undefined;
                        EventEmitter.prototype._maxListeners = undefined;// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
                        var defaultMaxListeners = 10;
                        var hasDefineProperty;
                        try {
                            var o = {};
                            if (Object.defineProperty) Object.defineProperty(o, 'x', {value: 0});
                            hasDefineProperty = o.x === 0;
                        } catch (err) {
                            hasDefineProperty = false;
                        }
                        if (hasDefineProperty) {
                            Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
                                enumerable: true, get: function get() {
                                    return defaultMaxListeners;
                                }, set: function set(arg) {// check whether the input is a positive number (whose value is zero or
// greater and not a NaN).
                                    if (typeof arg !== 'number' || arg < 0 || arg !== arg) throw new TypeError('"defaultMaxListeners" must be a positive number');
                                    defaultMaxListeners = arg;
                                }
                            });
                        } else {
                            EventEmitter.defaultMaxListeners = defaultMaxListeners;
                        }// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
                        EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
                            if (typeof n !== 'number' || n < 0 || isNaN(n)) throw new TypeError('"n" argument must be a positive number');
                            this._maxListeners = n;
                            return this;
                        };

                        function $getMaxListeners(that) {
                            if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
                            return that._maxListeners;
                        }

                        EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
                            return $getMaxListeners(this);
                        };// These standalone emit* functions are used to optimize calling of event
// handlers for fast cases because emit() itself often has a variable number of
// arguments and can be deoptimized because of that. These functions always have
// the same number of arguments and thus do not get deoptimized, so the code
// inside them can execute faster.
                        function emitNone(handler, isFn, self) {
                            if (isFn) handler.call(self); else {
                                var len = handler.length;
                                var listeners = arrayClone(handler, len);
                                for (var i = 0; i < len; ++i) {
                                    listeners[i].call(self);
                                }
                            }
                        }

                        function emitOne(handler, isFn, self, arg1) {
                            if (isFn) handler.call(self, arg1); else {
                                var len = handler.length;
                                var listeners = arrayClone(handler, len);
                                for (var i = 0; i < len; ++i) {
                                    listeners[i].call(self, arg1);
                                }
                            }
                        }

                        function emitTwo(handler, isFn, self, arg1, arg2) {
                            if (isFn) handler.call(self, arg1, arg2); else {
                                var len = handler.length;
                                var listeners = arrayClone(handler, len);
                                for (var i = 0; i < len; ++i) {
                                    listeners[i].call(self, arg1, arg2);
                                }
                            }
                        }

                        function emitThree(handler, isFn, self, arg1, arg2, arg3) {
                            if (isFn) handler.call(self, arg1, arg2, arg3); else {
                                var len = handler.length;
                                var listeners = arrayClone(handler, len);
                                for (var i = 0; i < len; ++i) {
                                    listeners[i].call(self, arg1, arg2, arg3);
                                }
                            }
                        }

                        function emitMany(handler, isFn, self, args) {
                            if (isFn) handler.apply(self, args); else {
                                var len = handler.length;
                                var listeners = arrayClone(handler, len);
                                for (var i = 0; i < len; ++i) {
                                    listeners[i].apply(self, args);
                                }
                            }
                        }

                        EventEmitter.prototype.emit = function emit(type) {
                            var er, handler, len, args, i, events;
                            var doError = type === 'error';
                            events = this._events;
                            if (events) doError = doError && events.error == null; else if (!doError) return false;// If there is no 'error' event listener then throw.
                            if (doError) {
                                if (arguments.length > 1) er = arguments[1];
                                if (er instanceof Error) {
                                    throw er;// Unhandled 'error' event
                                } else {// At least give some kind of context to the user
                                    var err = new Error('Unhandled "error" event. (' + er + ')');
                                    err.context = er;
                                    throw err;
                                }
                                return false;
                            }
                            handler = events[type];
                            if (!handler) return false;
                            var isFn = typeof handler === 'function';
                            len = arguments.length;
                            switch (len) {// fast cases
                                case 1:
                                    emitNone(handler, isFn, this);
                                    break;
                                case 2:
                                    emitOne(handler, isFn, this, arguments[1]);
                                    break;
                                case 3:
                                    emitTwo(handler, isFn, this, arguments[1], arguments[2]);
                                    break;
                                case 4:
                                    emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
                                    break;// slower
                                default:
                                    args = new Array(len - 1);
                                    for (i = 1; i < len; i++) {
                                        args[i - 1] = arguments[i];
                                    }
                                    emitMany(handler, isFn, this, args);
                            }
                            return true;
                        };

                        function _addListener(target, type, listener, prepend) {
                            var m;
                            var events;
                            var existing;
                            if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
                            events = target._events;
                            if (!events) {
                                events = target._events = objectCreate(null);
                                target._eventsCount = 0;
                            } else {// To avoid recursion in the case that type === "newListener"! Before
// adding it to the listeners, first emit "newListener".
                                if (events.newListener) {
                                    target.emit('newListener', type, listener.listener ? listener.listener : listener);// Re-assign `events` because a newListener handler could have caused the
// this._events to be assigned to a new object
                                    events = target._events;
                                }
                                existing = events[type];
                            }
                            if (!existing) {// Optimize the case of one listener. Don't need the extra array object.
                                existing = events[type] = listener;
                                ++target._eventsCount;
                            } else {
                                if (typeof existing === 'function') {// Adding the second element, need to change to array.
                                    existing = events[type] = prepend ? [listener, existing] : [existing, listener];
                                } else {// If we've already got an array, just append.
                                    if (prepend) {
                                        existing.unshift(listener);
                                    } else {
                                        existing.push(listener);
                                    }
                                }// Check for listener leak
                                if (!existing.warned) {
                                    m = $getMaxListeners(target);
                                    if (m && m > 0 && existing.length > m) {
                                        existing.warned = true;
                                        var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' "' + String(type) + '" listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit.');
                                        w.name = 'MaxListenersExceededWarning';
                                        w.emitter = target;
                                        w.type = type;
                                        w.count = existing.length;
                                        if ((typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.warn) {
                                            console.warn('%s: %s', w.name, w.message);
                                        }
                                    }
                                }
                            }
                            return target;
                        }

                        EventEmitter.prototype.addListener = function addListener(type, listener) {
                            return _addListener(this, type, listener, false);
                        };
                        EventEmitter.prototype.on = EventEmitter.prototype.addListener;
                        EventEmitter.prototype.prependListener = function prependListener(type, listener) {
                            return _addListener(this, type, listener, true);
                        };

                        function onceWrapper() {
                            if (!this.fired) {
                                this.target.removeListener(this.type, this.wrapFn);
                                this.fired = true;
                                switch (arguments.length) {
                                    case 0:
                                        return this.listener.call(this.target);
                                    case 1:
                                        return this.listener.call(this.target, arguments[0]);
                                    case 2:
                                        return this.listener.call(this.target, arguments[0], arguments[1]);
                                    case 3:
                                        return this.listener.call(this.target, arguments[0], arguments[1], arguments[2]);
                                    default:
                                        var args = new Array(arguments.length);
                                        for (var i = 0; i < args.length; ++i) {
                                            args[i] = arguments[i];
                                        }
                                        this.listener.apply(this.target, args);
                                }
                            }
                        }

                        function _onceWrap(target, type, listener) {
                            var state = {
                                fired: false,
                                wrapFn: undefined,
                                target: target,
                                type: type,
                                listener: listener
                            };
                            var wrapped = bind.call(onceWrapper, state);
                            wrapped.listener = listener;
                            state.wrapFn = wrapped;
                            return wrapped;
                        }

                        EventEmitter.prototype.once = function once(type, listener) {
                            if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
                            this.on(type, _onceWrap(this, type, listener));
                            return this;
                        };
                        EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
                            if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
                            this.prependListener(type, _onceWrap(this, type, listener));
                            return this;
                        };// Emits a 'removeListener' event if and only if the listener was removed.
                        EventEmitter.prototype.removeListener = function removeListener(type, listener) {
                            var list, events, position, i, originalListener;
                            if (typeof listener !== 'function') throw new TypeError('"listener" argument must be a function');
                            events = this._events;
                            if (!events) return this;
                            list = events[type];
                            if (!list) return this;
                            if (list === listener || list.listener === listener) {
                                if (--this._eventsCount === 0) this._events = objectCreate(null); else {
                                    delete events[type];
                                    if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
                                }
                            } else if (typeof list !== 'function') {
                                position = -1;
                                for (i = list.length - 1; i >= 0; i--) {
                                    if (list[i] === listener || list[i].listener === listener) {
                                        originalListener = list[i].listener;
                                        position = i;
                                        break;
                                    }
                                }
                                if (position < 0) return this;
                                if (position === 0) list.shift(); else spliceOne(list, position);
                                if (list.length === 1) events[type] = list[0];
                                if (events.removeListener) this.emit('removeListener', type, originalListener || listener);
                            }
                            return this;
                        };
                        EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
                            var listeners, events, i;
                            events = this._events;
                            if (!events) return this;// not listening for removeListener, no need to emit
                            if (!events.removeListener) {
                                if (arguments.length === 0) {
                                    this._events = objectCreate(null);
                                    this._eventsCount = 0;
                                } else if (events[type]) {
                                    if (--this._eventsCount === 0) this._events = objectCreate(null); else delete events[type];
                                }
                                return this;
                            }// emit removeListener for all listeners on all events
                            if (arguments.length === 0) {
                                var keys = objectKeys(events);
                                var key;
                                for (i = 0; i < keys.length; ++i) {
                                    key = keys[i];
                                    if (key === 'removeListener') continue;
                                    this.removeAllListeners(key);
                                }
                                this.removeAllListeners('removeListener');
                                this._events = objectCreate(null);
                                this._eventsCount = 0;
                                return this;
                            }
                            listeners = events[type];
                            if (typeof listeners === 'function') {
                                this.removeListener(type, listeners);
                            } else if (listeners) {// LIFO order
                                for (i = listeners.length - 1; i >= 0; i--) {
                                    this.removeListener(type, listeners[i]);
                                }
                            }
                            return this;
                        };

                        function _listeners(target, type, unwrap) {
                            var events = target._events;
                            if (!events) return [];
                            var evlistener = events[type];
                            if (!evlistener) return [];
                            if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
                            return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
                        }

                        EventEmitter.prototype.listeners = function listeners(type) {
                            return _listeners(this, type, true);
                        };
                        EventEmitter.prototype.rawListeners = function rawListeners(type) {
                            return _listeners(this, type, false);
                        };
                        EventEmitter.listenerCount = function (emitter, type) {
                            if (typeof emitter.listenerCount === 'function') {
                                return emitter.listenerCount(type);
                            } else {
                                return listenerCount.call(emitter, type);
                            }
                        };
                        EventEmitter.prototype.listenerCount = listenerCount;

                        function listenerCount(type) {
                            var events = this._events;
                            if (events) {
                                var evlistener = events[type];
                                if (typeof evlistener === 'function') {
                                    return 1;
                                } else if (evlistener) {
                                    return evlistener.length;
                                }
                            }
                            return 0;
                        }

                        EventEmitter.prototype.eventNames = function eventNames() {
                            return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
                        };// About 1.5x faster than the two-arg version of Array#splice().
                        function spliceOne(list, index) {
                            for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
                                list[i] = list[k];
                            }
                            list.pop();
                        }

                        function arrayClone(arr, n) {
                            var copy = new Array(n);
                            for (var i = 0; i < n; ++i) {
                                copy[i] = arr[i];
                            }
                            return copy;
                        }

                        function unwrapListeners(arr) {
                            var ret = new Array(arr.length);
                            for (var i = 0; i < ret.length; ++i) {
                                ret[i] = arr[i].listener || arr[i];
                            }
                            return ret;
                        }

                        function objectCreatePolyfill(proto) {
                            var F = function F() {
                            };
                            F.prototype = proto;
                            return new F();
                        }

                        function objectKeysPolyfill(obj) {
                            var keys = [];
                            for (var k in obj) {
                                if (Object.prototype.hasOwnProperty.call(obj, k)) {
                                    keys.push(k);
                                }
                            }
                            return k;
                        }

                        function functionBindPolyfill(context) {
                            var fn = this;
                            return function () {
                                return fn.apply(context, arguments);
                            };
                        }
                    }, {}],
                    26: [function (require, module, exports) {
                        "use strict";
                        var __extends = this && this.__extends || function () {
                            var _extendStatics2 = function extendStatics(d, b) {
                                _extendStatics2 = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (d, b) {
                                    d.__proto__ = b;
                                } || function (d, b) {
                                    for (var p in b) {
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                    }
                                };
                                return _extendStatics2(d, b);
                            };
                            return function (d, b) {
                                _extendStatics2(d, b);

                                function __() {
                                    this.constructor = d;
                                }

                                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                            };
                        }();
                        var __importDefault = this && this.__importDefault || function (mod) {
                            return mod && mod.__esModule ? mod : {"default": mod};
                        };
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var MultiplexHandler_1 = __importDefault(require("./MultiplexHandler"));
                        var CollectingHandler =/** @class */function (_super) {
                            __extends(CollectingHandler, _super);

                            function CollectingHandler(cbs) {
                                if (cbs === void 0) {
                                    cbs = {};
                                }
                                var _this = _super.call(this, function (name) {
                                    var _a;
                                    var args = [];
                                    for (var _i = 1; _i < arguments.length; _i++) {
                                        args[_i - 1] = arguments[_i];
                                    }
                                    _this.events.push([name].concat(args));// @ts-ignore
                                    if (_this._cbs[name]) (_a = _this._cbs)[name].apply(_a, args);
                                }) || this;
                                _this._cbs = cbs;
                                _this.events = [];
                                return _this;
                            }

                            CollectingHandler.prototype.onreset = function () {
                                this.events = [];
                                if (this._cbs.onreset) this._cbs.onreset();
                            };
                            CollectingHandler.prototype.restart = function () {
                                var _a;
                                if (this._cbs.onreset) this._cbs.onreset();
                                for (var i = 0; i < this.events.length; i++) {
                                    var _b = this.events[i], name_1 = _b[0], args = _b.slice(1);
                                    if (!this._cbs[name_1]) {
                                        continue;
                                    }// @ts-ignore
                                    (_a = this._cbs)[name_1].apply(_a, args);
                                }
                            };
                            return CollectingHandler;
                        }(MultiplexHandler_1["default"]);
                        exports.CollectingHandler = CollectingHandler;
                    }, {"./MultiplexHandler": 28}],
                    27: [function (require, module, exports) {
                        "use strict";
                        var __extends = this && this.__extends || function () {
                            var _extendStatics3 = function extendStatics(d, b) {
                                _extendStatics3 = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (d, b) {
                                    d.__proto__ = b;
                                } || function (d, b) {
                                    for (var p in b) {
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                    }
                                };
                                return _extendStatics3(d, b);
                            };
                            return function (d, b) {
                                _extendStatics3(d, b);

                                function __() {
                                    this.constructor = d;
                                }

                                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                            };
                        }();
                        var __importDefault = this && this.__importDefault || function (mod) {
                            return mod && mod.__esModule ? mod : {"default": mod};
                        };
                        var __importStar = this && this.__importStar || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) {
                                if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
                            }
                            result["default"] = mod;
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var domhandler_1 = __importDefault(require("domhandler"));
                        var DomUtils = __importStar(require("domutils"));
                        var Parser_1 = require("./Parser");//TODO: Consume data as it is coming in
                        var FeedHandler =/** @class */function (_super) {
                            __extends(FeedHandler, _super);

                            /**
                             *
                             * @param callback
                             * @param options
                             */function FeedHandler(callback, options) {
                                var _this = this;
                                if (_typeof(callback) === "object" && callback !== null) {
                                    callback = undefined;
                                    options = callback;
                                }
                                _this = _super.call(this, callback, options) || this;
                                return _this;
                            }

                            FeedHandler.prototype.onend = function () {
                                var feed = {};
                                var feedRoot = getOneElement(isValidFeed, this.dom);
                                if (feedRoot) {
                                    if (feedRoot.name === "feed") {
                                        var childs = feedRoot.children;
                                        feed.type = "atom";
                                        addConditionally(feed, "id", "id", childs);
                                        addConditionally(feed, "title", "title", childs);
                                        var href = getAttribute("href", getOneElement("link", childs));
                                        if (href) {
                                            feed.link = href;
                                        }
                                        addConditionally(feed, "description", "subtitle", childs);
                                        var updated = fetch("updated", childs);
                                        if (updated) {
                                            feed.updated = new Date(updated);
                                        }
                                        addConditionally(feed, "author", "email", childs, true);
                                        feed.items = getElements("entry", childs).map(function (item) {
                                            var entry = {};
                                            var children = item.children;
                                            addConditionally(entry, "id", "id", children);
                                            addConditionally(entry, "title", "title", children);
                                            var href = getAttribute("href", getOneElement("link", children));
                                            if (href) {
                                                entry.link = href;
                                            }
                                            var description = fetch("summary", children) || fetch("content", children);
                                            if (description) {
                                                entry.description = description;
                                            }
                                            var pubDate = fetch("updated", children);
                                            if (pubDate) {
                                                entry.pubDate = new Date(pubDate);
                                            }
                                            return entry;
                                        });
                                    } else {
                                        var childs = getOneElement("channel", feedRoot.children).children;
                                        feed.type = feedRoot.name.substr(0, 3);
                                        feed.id = "";
                                        addConditionally(feed, "title", "title", childs);
                                        addConditionally(feed, "link", "link", childs);
                                        addConditionally(feed, "description", "description", childs);
                                        var updated = fetch("lastBuildDate", childs);
                                        if (updated) {
                                            feed.updated = new Date(updated);
                                        }
                                        addConditionally(feed, "author", "managingEditor", childs, true);
                                        feed.items = getElements("item", feedRoot.children).map(function (item) {
                                            var entry = {};
                                            var children = item.children;
                                            addConditionally(entry, "id", "guid", children);
                                            addConditionally(entry, "title", "title", children);
                                            addConditionally(entry, "link", "link", children);
                                            addConditionally(entry, "description", "description", children);
                                            var pubDate = fetch("pubDate", children);
                                            if (pubDate) entry.pubDate = new Date(pubDate);
                                            return entry;
                                        });
                                    }
                                }
                                this.feed = feed;
                                this.handleCallback(feedRoot ? null : Error("couldn't find root of feed"));
                            };
                            return FeedHandler;
                        }(domhandler_1["default"]);
                        exports.FeedHandler = FeedHandler;

                        function getElements(what, where) {
                            return DomUtils.getElementsByTagName(what, where, true);
                        }

                        function getOneElement(what, where) {
                            return DomUtils.getElementsByTagName(what, where, true, 1)[0];
                        }

                        function fetch(what, where, recurse) {
                            if (recurse === void 0) {
                                recurse = false;
                            }
                            return DomUtils.getText(DomUtils.getElementsByTagName(what, where, recurse, 1)).trim();
                        }

                        function getAttribute(name, elem) {
                            if (!elem) {
                                return null;
                            }
                            var attribs = elem.attribs;
                            return attribs[name];
                        }

                        function addConditionally(obj, prop, what, where, recurse) {
                            if (recurse === void 0) {
                                recurse = false;
                            }
                            var tmp = fetch(what, where, recurse);// @ts-ignore
                            if (tmp) obj[prop] = tmp;
                        }

                        function isValidFeed(value) {
                            return value === "rss" || value === "feed" || value === "rdf:RDF";
                        }

                        var defaultOptions = {xmlMode: true};

                        /**
                         * Parse a feed.
                         *
                         * @param feed The feed that should be parsed, as a string.
                         * @param options Optionally, options for parsing. When using this option, you probably want to set `xmlMode` to `true`.
                         */function parseFeed(feed, options) {
                            if (options === void 0) {
                                options = defaultOptions;
                            }
                            var handler = new FeedHandler(options);
                            new Parser_1.Parser(handler, options).end(feed);
                            return handler.feed;
                        }

                        exports.parseFeed = parseFeed;
                    }, {"./Parser": 29, "domhandler": 7, "domutils": 10}],
                    28: [function (require, module, exports) {
                        "use strict";
                        Object.defineProperty(exports, "__esModule", {value: true});
                        /**
                         * Calls a specific handler function for all events that are encountered.
                         *
                         * @param func — The function to multiplex all events to.
                         */var MultiplexHandler =/** @class */function () {
                            function MultiplexHandler(func) {
                                this._func = func;
                            }/* Format: eventname: number of arguments */
                            MultiplexHandler.prototype.onattribute = function (name, value) {
                                this._func("onattribute", name, value);
                            };
                            MultiplexHandler.prototype.oncdatastart = function () {
                                this._func("oncdatastart");
                            };
                            MultiplexHandler.prototype.oncdataend = function () {
                                this._func("oncdataend");
                            };
                            MultiplexHandler.prototype.ontext = function (text) {
                                this._func("ontext", text);
                            };
                            MultiplexHandler.prototype.onprocessinginstruction = function (name, value) {
                                this._func("onprocessinginstruction", name, value);
                            };
                            MultiplexHandler.prototype.oncomment = function (comment) {
                                this._func("oncomment", comment);
                            };
                            MultiplexHandler.prototype.oncommentend = function () {
                                this._func("oncommentend");
                            };
                            MultiplexHandler.prototype.onclosetag = function (name) {
                                this._func("onclosetag", name);
                            };
                            MultiplexHandler.prototype.onopentag = function (name, attribs) {
                                this._func("onopentag", name, attribs);
                            };
                            MultiplexHandler.prototype.onopentagname = function (name) {
                                this._func("onopentagname", name);
                            };
                            MultiplexHandler.prototype.onerror = function (error) {
                                this._func("onerror", error);
                            };
                            MultiplexHandler.prototype.onend = function () {
                                this._func("onend");
                            };
                            MultiplexHandler.prototype.onparserinit = function (parser) {
                                this._func("onparserinit", parser);
                            };
                            MultiplexHandler.prototype.onreset = function () {
                                this._func("onreset");
                            };
                            return MultiplexHandler;
                        }();
                        exports["default"] = MultiplexHandler;
                    }, {}],
                    29: [function (require, module, exports) {
                        "use strict";
                        var __extends = this && this.__extends || function () {
                            var _extendStatics4 = function extendStatics(d, b) {
                                _extendStatics4 = Object.setPrototypeOf || {__proto__: []} instanceof Array && function (d, b) {
                                    d.__proto__ = b;
                                } || function (d, b) {
                                    for (var p in b) {
                                        if (b.hasOwnProperty(p)) d[p] = b[p];
                                    }
                                };
                                return _extendStatics4(d, b);
                            };
                            return function (d, b) {
                                _extendStatics4(d, b);

                                function __() {
                                    this.constructor = d;
                                }

                                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
                            };
                        }();
                        var __importDefault = this && this.__importDefault || function (mod) {
                            return mod && mod.__esModule ? mod : {"default": mod};
                        };
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var Tokenizer_1 = __importDefault(require("./Tokenizer"));
                        var events_1 = require("events");
                        var formTags = new Set(["input", "option", "optgroup", "select", "button", "datalist", "textarea"]);
                        var pTag = new Set(["p"]);
                        var openImpliesClose = {
                            tr: new Set(["tr", "th", "td"]),
                            th: new Set(["th"]),
                            td: new Set(["thead", "th", "td"]),
                            body: new Set(["head", "link", "script"]),
                            li: new Set(["li"]),
                            p: pTag,
                            h1: pTag,
                            h2: pTag,
                            h3: pTag,
                            h4: pTag,
                            h5: pTag,
                            h6: pTag,
                            select: formTags,
                            input: formTags,
                            output: formTags,
                            button: formTags,
                            datalist: formTags,
                            textarea: formTags,
                            option: new Set(["option"]),
                            optgroup: new Set(["optgroup", "option"]),
                            dd: new Set(["dt", "dd"]),
                            dt: new Set(["dt", "dd"]),
                            address: pTag,
                            article: pTag,
                            aside: pTag,
                            blockquote: pTag,
                            details: pTag,
                            div: pTag,
                            dl: pTag,
                            fieldset: pTag,
                            figcaption: pTag,
                            figure: pTag,
                            footer: pTag,
                            form: pTag,
                            header: pTag,
                            hr: pTag,
                            main: pTag,
                            nav: pTag,
                            ol: pTag,
                            pre: pTag,
                            section: pTag,
                            table: pTag,
                            ul: pTag,
                            rt: new Set(["rt", "rp"]),
                            rp: new Set(["rt", "rp"]),
                            tbody: new Set(["thead", "tbody"]),
                            tfoot: new Set(["thead", "tbody"])
                        };
                        var voidElements = new Set(["area", "base", "basefont", "br", "col", "command", "embed", "frame", "hr", "img", "input", "isindex", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
                        var foreignContextElements = new Set(["math", "svg"]);
                        var htmlIntegrationElements = new Set(["mi", "mo", "mn", "ms", "mtext", "annotation-xml", "foreignObject", "desc", "title"]);
                        var reNameEnd = /\s|\//;
                        var Parser =/** @class */function (_super) {
                            __extends(Parser, _super);

                            function Parser(cbs, options) {
                                var _this = _super.call(this) || this;
                                _this._tagname = "";
                                _this._attribname = "";
                                _this._attribvalue = "";
                                _this._attribs = null;
                                _this._stack = [];
                                _this._foreignContext = [];
                                _this.startIndex = 0;
                                _this.endIndex = null;// Aliases for backwards compatibility
                                _this.parseChunk = Parser.prototype.write;
                                _this.done = Parser.prototype.end;
                                _this._options = options || {};
                                _this._cbs = cbs || {};
                                _this._tagname = "";
                                _this._attribname = "";
                                _this._attribvalue = "";
                                _this._attribs = null;
                                _this._stack = [];
                                _this._foreignContext = [];
                                _this.startIndex = 0;
                                _this.endIndex = null;
                                _this._lowerCaseTagNames = "lowerCaseTags" in _this._options ? !!_this._options.lowerCaseTags : !_this._options.xmlMode;
                                _this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in _this._options ? !!_this._options.lowerCaseAttributeNames : !_this._options.xmlMode;
                                _this._tokenizer = new (_this._options.Tokenizer || Tokenizer_1["default"])(_this._options, _this);
                                if (_this._cbs.onparserinit) _this._cbs.onparserinit(_this);
                                return _this;
                            }

                            Parser.prototype._updatePosition = function (initialOffset) {
                                if (this.endIndex === null) {
                                    if (this._tokenizer._sectionStart <= initialOffset) {
                                        this.startIndex = 0;
                                    } else {
                                        this.startIndex = this._tokenizer._sectionStart - initialOffset;
                                    }
                                } else this.startIndex = this.endIndex + 1;
                                this.endIndex = this._tokenizer.getAbsoluteIndex();
                            };//Tokenizer event handlers
                            Parser.prototype.ontext = function (data) {
                                this._updatePosition(1);// @ts-ignore
                                this.endIndex--;
                                if (this._cbs.ontext) this._cbs.ontext(data);
                            };
                            Parser.prototype.onopentagname = function (name) {
                                if (this._lowerCaseTagNames) {
                                    name = name.toLowerCase();
                                }
                                this._tagname = name;
                                if (!this._options.xmlMode && Object.prototype.hasOwnProperty.call(openImpliesClose, name)) {
                                    for (var el = void 0;// @ts-ignore
                                         openImpliesClose[name].has(el = this._stack[this._stack.length - 1]); this.onclosetag(el)) {
                                        ;
                                    }
                                }
                                if (this._options.xmlMode || !voidElements.has(name)) {
                                    this._stack.push(name);
                                    if (foreignContextElements.has(name)) {
                                        this._foreignContext.push(true);
                                    } else if (htmlIntegrationElements.has(name)) {
                                        this._foreignContext.push(false);
                                    }
                                }
                                if (this._cbs.onopentagname) this._cbs.onopentagname(name);
                                if (this._cbs.onopentag) this._attribs = {};
                            };
                            Parser.prototype.onopentagend = function () {
                                this._updatePosition(1);
                                if (this._attribs) {
                                    if (this._cbs.onopentag) {
                                        this._cbs.onopentag(this._tagname, this._attribs);
                                    }
                                    this._attribs = null;
                                }
                                if (!this._options.xmlMode && this._cbs.onclosetag && voidElements.has(this._tagname)) {
                                    this._cbs.onclosetag(this._tagname);
                                }
                                this._tagname = "";
                            };
                            Parser.prototype.onclosetag = function (name) {
                                this._updatePosition(1);
                                if (this._lowerCaseTagNames) {
                                    name = name.toLowerCase();
                                }
                                if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
                                    this._foreignContext.pop();
                                }
                                if (this._stack.length && (this._options.xmlMode || !voidElements.has(name))) {
                                    var pos = this._stack.lastIndexOf(name);
                                    if (pos !== -1) {
                                        if (this._cbs.onclosetag) {
                                            pos = this._stack.length - pos;// @ts-ignore
                                            while (pos--) {
                                                this._cbs.onclosetag(this._stack.pop());
                                            }
                                        } else this._stack.length = pos;
                                    } else if (name === "p" && !this._options.xmlMode) {
                                        this.onopentagname(name);
                                        this._closeCurrentTag();
                                    }
                                } else if (!this._options.xmlMode && (name === "br" || name === "p")) {
                                    this.onopentagname(name);
                                    this._closeCurrentTag();
                                }
                            };
                            Parser.prototype.onselfclosingtag = function () {
                                if (this._options.xmlMode || this._options.recognizeSelfClosing || this._foreignContext[this._foreignContext.length - 1]) {
                                    this._closeCurrentTag();
                                } else {
                                    this.onopentagend();
                                }
                            };
                            Parser.prototype._closeCurrentTag = function () {
                                var name = this._tagname;
                                this.onopentagend();//self-closing tags will be on the top of the stack
//(cheaper check than in onclosetag)
                                if (this._stack[this._stack.length - 1] === name) {
                                    if (this._cbs.onclosetag) {
                                        this._cbs.onclosetag(name);
                                    }
                                    this._stack.pop();
                                }
                            };
                            Parser.prototype.onattribname = function (name) {
                                if (this._lowerCaseAttributeNames) {
                                    name = name.toLowerCase();
                                }
                                this._attribname = name;
                            };
                            Parser.prototype.onattribdata = function (value) {
                                this._attribvalue += value;
                            };
                            Parser.prototype.onattribend = function () {
                                if (this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
                                if (this._attribs && !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)) {
                                    this._attribs[this._attribname] = this._attribvalue;
                                }
                                this._attribname = "";
                                this._attribvalue = "";
                            };
                            Parser.prototype._getInstructionName = function (value) {
                                var idx = value.search(reNameEnd);
                                var name = idx < 0 ? value : value.substr(0, idx);
                                if (this._lowerCaseTagNames) {
                                    name = name.toLowerCase();
                                }
                                return name;
                            };
                            Parser.prototype.ondeclaration = function (value) {
                                if (this._cbs.onprocessinginstruction) {
                                    var name_1 = this._getInstructionName(value);
                                    this._cbs.onprocessinginstruction("!" + name_1, "!" + value);
                                }
                            };
                            Parser.prototype.onprocessinginstruction = function (value) {
                                if (this._cbs.onprocessinginstruction) {
                                    var name_2 = this._getInstructionName(value);
                                    this._cbs.onprocessinginstruction("?" + name_2, "?" + value);
                                }
                            };
                            Parser.prototype.oncomment = function (value) {
                                this._updatePosition(4);
                                if (this._cbs.oncomment) this._cbs.oncomment(value);
                                if (this._cbs.oncommentend) this._cbs.oncommentend();
                            };
                            Parser.prototype.oncdata = function (value) {
                                this._updatePosition(1);
                                if (this._options.xmlMode || this._options.recognizeCDATA) {
                                    if (this._cbs.oncdatastart) this._cbs.oncdatastart();
                                    if (this._cbs.ontext) this._cbs.ontext(value);
                                    if (this._cbs.oncdataend) this._cbs.oncdataend();
                                } else {
                                    this.oncomment("[CDATA[" + value + "]]");
                                }
                            };
                            Parser.prototype.onerror = function (err) {
                                if (this._cbs.onerror) this._cbs.onerror(err);
                            };
                            Parser.prototype.onend = function () {
                                if (this._cbs.onclosetag) {
                                    for (var i = this._stack.length; i > 0; this._cbs.onclosetag(this._stack[--i])) {
                                        ;
                                    }
                                }
                                if (this._cbs.onend) this._cbs.onend();
                            };//Resets the parser to a blank state, ready to parse a new HTML document
                            Parser.prototype.reset = function () {
                                if (this._cbs.onreset) this._cbs.onreset();
                                this._tokenizer.reset();
                                this._tagname = "";
                                this._attribname = "";
                                this._attribs = null;
                                this._stack = [];
                                if (this._cbs.onparserinit) this._cbs.onparserinit(this);
                            };//Parses a complete HTML document and pushes it to the handler
                            Parser.prototype.parseComplete = function (data) {
                                this.reset();
                                this.end(data);
                            };
                            Parser.prototype.write = function (chunk) {
                                this._tokenizer.write(chunk);
                            };
                            Parser.prototype.end = function (chunk) {
                                this._tokenizer.end(chunk);
                            };
                            Parser.prototype.pause = function () {
                                this._tokenizer.pause();
                            };
                            Parser.prototype.resume = function () {
                                this._tokenizer.resume();
                            };
                            return Parser;
                        }(events_1.EventEmitter);
                        exports.Parser = Parser;
                    }, {"./Tokenizer": 30, "events": 25}],
                    30: [function (require, module, exports) {
                        "use strict";
                        var __importDefault = this && this.__importDefault || function (mod) {
                            return mod && mod.__esModule ? mod : {"default": mod};
                        };
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var decode_codepoint_1 = __importDefault(require("entities/lib/decode_codepoint"));
                        var entities_json_1 = __importDefault(require("entities/lib/maps/entities.json"));
                        var legacy_json_1 = __importDefault(require("entities/lib/maps/legacy.json"));
                        var xml_json_1 = __importDefault(require("entities/lib/maps/xml.json"));

                        function whitespace(c) {
                            return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
                        }

                        function ifElseState(upper, SUCCESS, FAILURE) {
                            var lower = upper.toLowerCase();
                            if (upper === lower) {
                                return function (t, c) {
                                    if (c === lower) {
                                        t._state = SUCCESS;
                                    } else {
                                        t._state = FAILURE;
                                        t._index--;
                                    }
                                };
                            } else {
                                return function (t, c) {
                                    if (c === lower || c === upper) {
                                        t._state = SUCCESS;
                                    } else {
                                        t._state = FAILURE;
                                        t._index--;
                                    }
                                };
                            }
                        }

                        function consumeSpecialNameChar(upper, NEXT_STATE) {
                            var lower = upper.toLowerCase();
                            return function (t, c) {
                                if (c === lower || c === upper) {
                                    t._state = NEXT_STATE;
                                } else {
                                    t._state = 3/* InTagName */;
                                    t._index--;//consume the token again
                                }
                            };
                        }

                        var stateBeforeCdata1 = ifElseState("C", 23/* BeforeCdata2 */, 16/* InDeclaration */);
                        var stateBeforeCdata2 = ifElseState("D", 24/* BeforeCdata3 */, 16/* InDeclaration */);
                        var stateBeforeCdata3 = ifElseState("A", 25/* BeforeCdata4 */, 16/* InDeclaration */);
                        var stateBeforeCdata4 = ifElseState("T", 26/* BeforeCdata5 */, 16/* InDeclaration */);
                        var stateBeforeCdata5 = ifElseState("A", 27/* BeforeCdata6 */, 16/* InDeclaration */);
                        var stateBeforeScript1 = consumeSpecialNameChar("R", 34/* BeforeScript2 */);
                        var stateBeforeScript2 = consumeSpecialNameChar("I", 35/* BeforeScript3 */);
                        var stateBeforeScript3 = consumeSpecialNameChar("P", 36/* BeforeScript4 */);
                        var stateBeforeScript4 = consumeSpecialNameChar("T", 37/* BeforeScript5 */);
                        var stateAfterScript1 = ifElseState("R", 39/* AfterScript2 */, 1/* Text */);
                        var stateAfterScript2 = ifElseState("I", 40/* AfterScript3 */, 1/* Text */);
                        var stateAfterScript3 = ifElseState("P", 41/* AfterScript4 */, 1/* Text */);
                        var stateAfterScript4 = ifElseState("T", 42/* AfterScript5 */, 1/* Text */);
                        var stateBeforeStyle1 = consumeSpecialNameChar("Y", 44/* BeforeStyle2 */);
                        var stateBeforeStyle2 = consumeSpecialNameChar("L", 45/* BeforeStyle3 */);
                        var stateBeforeStyle3 = consumeSpecialNameChar("E", 46/* BeforeStyle4 */);
                        var stateAfterStyle1 = ifElseState("Y", 48/* AfterStyle2 */, 1/* Text */);
                        var stateAfterStyle2 = ifElseState("L", 49/* AfterStyle3 */, 1/* Text */);
                        var stateAfterStyle3 = ifElseState("E", 50/* AfterStyle4 */, 1/* Text */);
                        var stateBeforeEntity = ifElseState("#", 52/* BeforeNumericEntity */, 53/* InNamedEntity */);
                        var stateBeforeNumericEntity = ifElseState("X", 55/* InHexEntity */, 54/* InNumericEntity */);
                        var Tokenizer =/** @class */function () {
                            function Tokenizer(options, cbs) {
                                /** The current state the tokenizer is in. */this._state = 1/* Text */;
                                /** The read buffer. */this._buffer = "";
                                /** The beginning of the section that is currently being read. */this._sectionStart = 0;
                                /** The index within the buffer that we are currently looking at. */this._index = 0;
                                /**
                                 * Data that has already been processed will be removed from the buffer occasionally.
                                 * `_bufferOffset` keeps track of how many characters have been removed, to make sure position information is accurate.
                                 */this._bufferOffset = 0;
                                /** Some behavior, eg. when decoding entities, is done while we are in another state. This keeps track of the other state type. */this._baseState = 1/* Text */;
                                /** For special parsing behavior inside of script and style tags. */this._special = 1/* None */;
                                /** Indicates whether the tokenizer has been paused. */this._running = true;
                                /** Indicates whether the tokenizer has finished running / `.end` has been called. */this._ended = false;
                                this._cbs = cbs;
                                this._xmlMode = !!(options && options.xmlMode);
                                this._decodeEntities = !!(options && options.decodeEntities);
                            }

                            Tokenizer.prototype.reset = function () {
                                this._state = 1/* Text */;
                                this._buffer = "";
                                this._sectionStart = 0;
                                this._index = 0;
                                this._bufferOffset = 0;
                                this._baseState = 1/* Text */;
                                this._special = 1/* None */;
                                this._running = true;
                                this._ended = false;
                            };
                            Tokenizer.prototype._stateText = function (c) {
                                if (c === "<") {
                                    if (this._index > this._sectionStart) {
                                        this._cbs.ontext(this._getSection());
                                    }
                                    this._state = 2/* BeforeTagName */;
                                    this._sectionStart = this._index;
                                } else if (this._decodeEntities && this._special === 1/* None */ && c === "&") {
                                    if (this._index > this._sectionStart) {
                                        this._cbs.ontext(this._getSection());
                                    }
                                    this._baseState = 1/* Text */;
                                    this._state = 51/* BeforeEntity */;
                                    this._sectionStart = this._index;
                                }
                            };
                            Tokenizer.prototype._stateBeforeTagName = function (c) {
                                if (c === "/") {
                                    this._state = 5/* BeforeClosingTagName */;
                                } else if (c === "<") {
                                    this._cbs.ontext(this._getSection());
                                    this._sectionStart = this._index;
                                } else if (c === ">" || this._special !== 1/* None */ || whitespace(c)) {
                                    this._state = 1/* Text */;
                                } else if (c === "!") {
                                    this._state = 15/* BeforeDeclaration */;
                                    this._sectionStart = this._index + 1;
                                } else if (c === "?") {
                                    this._state = 17/* InProcessingInstruction */;
                                    this._sectionStart = this._index + 1;
                                } else {
                                    this._state = !this._xmlMode && (c === "s" || c === "S") ? 31/* BeforeSpecial */ : 3/* InTagName */;
                                    this._sectionStart = this._index;
                                }
                            };
                            Tokenizer.prototype._stateInTagName = function (c) {
                                if (c === "/" || c === ">" || whitespace(c)) {
                                    this._emitToken("onopentagname");
                                    this._state = 8/* BeforeAttributeName */;
                                    this._index--;
                                }
                            };
                            Tokenizer.prototype._stateBeforeClosingTagName = function (c) {
                                if (whitespace(c)) {// ignore
                                } else if (c === ">") {
                                    this._state = 1/* Text */;
                                } else if (this._special !== 1/* None */) {
                                    if (c === "s" || c === "S") {
                                        this._state = 32/* BeforeSpecialEnd */;
                                    } else {
                                        this._state = 1/* Text */;
                                        this._index--;
                                    }
                                } else {
                                    this._state = 6/* InClosingTagName */;
                                    this._sectionStart = this._index;
                                }
                            };
                            Tokenizer.prototype._stateInClosingTagName = function (c) {
                                if (c === ">" || whitespace(c)) {
                                    this._emitToken("onclosetag");
                                    this._state = 7/* AfterClosingTagName */;
                                    this._index--;
                                }
                            };
                            Tokenizer.prototype._stateAfterClosingTagName = function (c) {//skip everything until ">"
                                if (c === ">") {
                                    this._state = 1/* Text */;
                                    this._sectionStart = this._index + 1;
                                }
                            };
                            Tokenizer.prototype._stateBeforeAttributeName = function (c) {
                                if (c === ">") {
                                    this._cbs.onopentagend();
                                    this._state = 1/* Text */;
                                    this._sectionStart = this._index + 1;
                                } else if (c === "/") {
                                    this._state = 4/* InSelfClosingTag */;
                                } else if (!whitespace(c)) {
                                    this._state = 9/* InAttributeName */;
                                    this._sectionStart = this._index;
                                }
                            };
                            Tokenizer.prototype._stateInSelfClosingTag = function (c) {
                                if (c === ">") {
                                    this._cbs.onselfclosingtag();
                                    this._state = 1/* Text */;
                                    this._sectionStart = this._index + 1;
                                } else if (!whitespace(c)) {
                                    this._state = 8/* BeforeAttributeName */;
                                    this._index--;
                                }
                            };
                            Tokenizer.prototype._stateInAttributeName = function (c) {
                                if (c === "=" || c === "/" || c === ">" || whitespace(c)) {
                                    this._cbs.onattribname(this._getSection());
                                    this._sectionStart = -1;
                                    this._state = 10/* AfterAttributeName */;
                                    this._index--;
                                }
                            };
                            Tokenizer.prototype._stateAfterAttributeName = function (c) {
                                if (c === "=") {
                                    this._state = 11/* BeforeAttributeValue */;
                                } else if (c === "/" || c === ">") {
                                    this._cbs.onattribend();
                                    this._state = 8/* BeforeAttributeName */;
                                    this._index--;
                                } else if (!whitespace(c)) {
                                    this._cbs.onattribend();
                                    this._state = 9/* InAttributeName */;
                                    this._sectionStart = this._index;
                                }
                            };
                            Tokenizer.prototype._stateBeforeAttributeValue = function (c) {
                                if (c === '"') {
                                    this._state = 12/* InAttributeValueDq */;
                                    this._sectionStart = this._index + 1;
                                } else if (c === "'") {
                                    this._state = 13/* InAttributeValueSq */;
                                    this._sectionStart = this._index + 1;
                                } else if (!whitespace(c)) {
                                    this._state = 14/* InAttributeValueNq */;
                                    this._sectionStart = this._index;
                                    this._index--;//reconsume token
                                }
                            };
                            Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function (c) {
                                if (c === '"') {
                                    this._emitToken("onattribdata");
                                    this._cbs.onattribend();
                                    this._state = 8/* BeforeAttributeName */;
                                } else if (this._decodeEntities && c === "&") {
                                    this._emitToken("onattribdata");
                                    this._baseState = this._state;
                                    this._state = 51/* BeforeEntity */;
                                    this._sectionStart = this._index;
                                }
                            };
                            Tokenizer.prototype._stateInAttributeValueSingleQuotes = function (c) {
                                if (c === "'") {
                                    this._emitToken("onattribdata");
                                    this._cbs.onattribend();
                                    this._state = 8/* BeforeAttributeName */;
                                } else if (this._decodeEntities && c === "&") {
                                    this._emitToken("onattribdata");
                                    this._baseState = this._state;
                                    this._state = 51/* BeforeEntity */;
                                    this._sectionStart = this._index;
                                }
                            };
                            Tokenizer.prototype._stateInAttributeValueNoQuotes = function (c) {
                                if (whitespace(c) || c === ">") {
                                    this._emitToken("onattribdata");
                                    this._cbs.onattribend();
                                    this._state = 8/* BeforeAttributeName */;
                                    this._index--;
                                } else if (this._decodeEntities && c === "&") {
                                    this._emitToken("onattribdata");
                                    this._baseState = this._state;
                                    this._state = 51/* BeforeEntity */;
                                    this._sectionStart = this._index;
                                }
                            };
                            Tokenizer.prototype._stateBeforeDeclaration = function (c) {
                                this._state = c === "[" ? 22/* BeforeCdata1 */ : c === "-" ? 18/* BeforeComment */ : 16/* InDeclaration */;
                            };
                            Tokenizer.prototype._stateInDeclaration = function (c) {
                                if (c === ">") {
                                    this._cbs.ondeclaration(this._getSection());
                                    this._state = 1/* Text */;
                                    this._sectionStart = this._index + 1;
                                }
                            };
                            Tokenizer.prototype._stateInProcessingInstruction = function (c) {
                                if (c === ">") {
                                    this._cbs.onprocessinginstruction(this._getSection());
                                    this._state = 1/* Text */;
                                    this._sectionStart = this._index + 1;
                                }
                            };
                            Tokenizer.prototype._stateBeforeComment = function (c) {
                                if (c === "-") {
                                    this._state = 19/* InComment */;
                                    this._sectionStart = this._index + 1;
                                } else {
                                    this._state = 16/* InDeclaration */;
                                }
                            };
                            Tokenizer.prototype._stateInComment = function (c) {
                                if (c === "-") this._state = 20/* AfterComment1 */;
                            };
                            Tokenizer.prototype._stateAfterComment1 = function (c) {
                                if (c === "-") {
                                    this._state = 21/* AfterComment2 */;
                                } else {
                                    this._state = 19/* InComment */;
                                }
                            };
                            Tokenizer.prototype._stateAfterComment2 = function (c) {
                                if (c === ">") {//remove 2 trailing chars
                                    this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
                                    this._state = 1/* Text */;
                                    this._sectionStart = this._index + 1;
                                } else if (c !== "-") {
                                    this._state = 19/* InComment */;
                                }// else: stay in AFTER_COMMENT_2 (`--->`)
                            };
                            Tokenizer.prototype._stateBeforeCdata6 = function (c) {
                                if (c === "[") {
                                    this._state = 28/* InCdata */;
                                    this._sectionStart = this._index + 1;
                                } else {
                                    this._state = 16/* InDeclaration */;
                                    this._index--;
                                }
                            };
                            Tokenizer.prototype._stateInCdata = function (c) {
                                if (c === "]") this._state = 29/* AfterCdata1 */;
                            };
                            Tokenizer.prototype._stateAfterCdata1 = function (c) {
                                if (c === "]") this._state = 30/* AfterCdata2 */; else this._state = 28/* InCdata */;
                            };
                            Tokenizer.prototype._stateAfterCdata2 = function (c) {
                                if (c === ">") {//remove 2 trailing chars
                                    this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
                                    this._state = 1/* Text */;
                                    this._sectionStart = this._index + 1;
                                } else if (c !== "]") {
                                    this._state = 28/* InCdata */;
                                }//else: stay in AFTER_CDATA_2 (`]]]>`)
                            };
                            Tokenizer.prototype._stateBeforeSpecial = function (c) {
                                if (c === "c" || c === "C") {
                                    this._state = 33/* BeforeScript1 */;
                                } else if (c === "t" || c === "T") {
                                    this._state = 43/* BeforeStyle1 */;
                                } else {
                                    this._state = 3/* InTagName */;
                                    this._index--;//consume the token again
                                }
                            };
                            Tokenizer.prototype._stateBeforeSpecialEnd = function (c) {
                                if (this._special === 2/* Script */ && (c === "c" || c === "C")) {
                                    this._state = 38/* AfterScript1 */;
                                } else if (this._special === 3/* Style */ && (c === "t" || c === "T")) {
                                    this._state = 47/* AfterStyle1 */;
                                } else this._state = 1/* Text */;
                            };
                            Tokenizer.prototype._stateBeforeScript5 = function (c) {
                                if (c === "/" || c === ">" || whitespace(c)) {
                                    this._special = 2/* Script */;
                                }
                                this._state = 3/* InTagName */;
                                this._index--;//consume the token again
                            };
                            Tokenizer.prototype._stateAfterScript5 = function (c) {
                                if (c === ">" || whitespace(c)) {
                                    this._special = 1/* None */;
                                    this._state = 6/* InClosingTagName */;
                                    this._sectionStart = this._index - 6;
                                    this._index--;//reconsume the token
                                } else this._state = 1/* Text */;
                            };
                            Tokenizer.prototype._stateBeforeStyle4 = function (c) {
                                if (c === "/" || c === ">" || whitespace(c)) {
                                    this._special = 3/* Style */;
                                }
                                this._state = 3/* InTagName */;
                                this._index--;//consume the token again
                            };
                            Tokenizer.prototype._stateAfterStyle4 = function (c) {
                                if (c === ">" || whitespace(c)) {
                                    this._special = 1/* None */;
                                    this._state = 6/* InClosingTagName */;
                                    this._sectionStart = this._index - 5;
                                    this._index--;//reconsume the token
                                } else this._state = 1/* Text */;
                            };//for entities terminated with a semicolon
                            Tokenizer.prototype._parseNamedEntityStrict = function () {//offset = 1
                                if (this._sectionStart + 1 < this._index) {
                                    var entity = this._buffer.substring(this._sectionStart + 1, this._index),
                                        map = this._xmlMode ? xml_json_1["default"] : entities_json_1["default"];
                                    if (Object.prototype.hasOwnProperty.call(map, entity)) {// @ts-ignore
                                        this._emitPartial(map[entity]);
                                        this._sectionStart = this._index + 1;
                                    }
                                }
                            };//parses legacy entities (without trailing semicolon)
                            Tokenizer.prototype._parseLegacyEntity = function () {
                                var start = this._sectionStart + 1;
                                var limit = this._index - start;
                                if (limit > 6) limit = 6;// The max length of legacy entities is 6
                                while (limit >= 2) {// The min length of legacy entities is 2
                                    var entity = this._buffer.substr(start, limit);
                                    if (Object.prototype.hasOwnProperty.call(legacy_json_1["default"], entity)) {// @ts-ignore
                                        this._emitPartial(legacy_json_1["default"][entity]);
                                        this._sectionStart += limit + 1;
                                        return;
                                    } else {
                                        limit--;
                                    }
                                }
                            };
                            Tokenizer.prototype._stateInNamedEntity = function (c) {
                                if (c === ";") {
                                    this._parseNamedEntityStrict();
                                    if (this._sectionStart + 1 < this._index && !this._xmlMode) {
                                        this._parseLegacyEntity();
                                    }
                                    this._state = this._baseState;
                                } else if ((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")) {
                                    if (this._xmlMode || this._sectionStart + 1 === this._index) {// ignore
                                    } else if (this._baseState !== 1/* Text */) {
                                        if (c !== "=") {
                                            this._parseNamedEntityStrict();
                                        }
                                    } else {
                                        this._parseLegacyEntity();
                                    }
                                    this._state = this._baseState;
                                    this._index--;
                                }
                            };
                            Tokenizer.prototype._decodeNumericEntity = function (offset, base) {
                                var sectionStart = this._sectionStart + offset;
                                if (sectionStart !== this._index) {//parse entity
                                    var entity = this._buffer.substring(sectionStart, this._index);
                                    var parsed = parseInt(entity, base);
                                    this._emitPartial(decode_codepoint_1["default"](parsed));
                                    this._sectionStart = this._index;
                                } else {
                                    this._sectionStart--;
                                }
                                this._state = this._baseState;
                            };
                            Tokenizer.prototype._stateInNumericEntity = function (c) {
                                if (c === ";") {
                                    this._decodeNumericEntity(2, 10);
                                    this._sectionStart++;
                                } else if (c < "0" || c > "9") {
                                    if (!this._xmlMode) {
                                        this._decodeNumericEntity(2, 10);
                                    } else {
                                        this._state = this._baseState;
                                    }
                                    this._index--;
                                }
                            };
                            Tokenizer.prototype._stateInHexEntity = function (c) {
                                if (c === ";") {
                                    this._decodeNumericEntity(3, 16);
                                    this._sectionStart++;
                                } else if ((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")) {
                                    if (!this._xmlMode) {
                                        this._decodeNumericEntity(3, 16);
                                    } else {
                                        this._state = this._baseState;
                                    }
                                    this._index--;
                                }
                            };
                            Tokenizer.prototype._cleanup = function () {
                                if (this._sectionStart < 0) {
                                    this._buffer = "";
                                    this._bufferOffset += this._index;
                                    this._index = 0;
                                } else if (this._running) {
                                    if (this._state === 1/* Text */) {
                                        if (this._sectionStart !== this._index) {
                                            this._cbs.ontext(this._buffer.substr(this._sectionStart));
                                        }
                                        this._buffer = "";
                                        this._bufferOffset += this._index;
                                        this._index = 0;
                                    } else if (this._sectionStart === this._index) {//the section just started
                                        this._buffer = "";
                                        this._bufferOffset += this._index;
                                        this._index = 0;
                                    } else {//remove everything unnecessary
                                        this._buffer = this._buffer.substr(this._sectionStart);
                                        this._index -= this._sectionStart;
                                        this._bufferOffset += this._sectionStart;
                                    }
                                    this._sectionStart = 0;
                                }
                            };//TODO make events conditional
                            Tokenizer.prototype.write = function (chunk) {
                                if (this._ended) this._cbs.onerror(Error(".write() after done!"));
                                this._buffer += chunk;
                                this._parse();
                            };// Iterates through the buffer, calling the function corresponding to the current state.
// States that are more likely to be hit are higher up, as a performance improvement.
                            Tokenizer.prototype._parse = function () {
                                while (this._index < this._buffer.length && this._running) {
                                    var c = this._buffer.charAt(this._index);
                                    if (this._state === 1/* Text */) {
                                        this._stateText(c);
                                    } else if (this._state === 12/* InAttributeValueDq */) {
                                        this._stateInAttributeValueDoubleQuotes(c);
                                    } else if (this._state === 9/* InAttributeName */) {
                                        this._stateInAttributeName(c);
                                    } else if (this._state === 19/* InComment */) {
                                        this._stateInComment(c);
                                    } else if (this._state === 8/* BeforeAttributeName */) {
                                        this._stateBeforeAttributeName(c);
                                    } else if (this._state === 3/* InTagName */) {
                                        this._stateInTagName(c);
                                    } else if (this._state === 6/* InClosingTagName */) {
                                        this._stateInClosingTagName(c);
                                    } else if (this._state === 2/* BeforeTagName */) {
                                        this._stateBeforeTagName(c);
                                    } else if (this._state === 10/* AfterAttributeName */) {
                                        this._stateAfterAttributeName(c);
                                    } else if (this._state === 13/* InAttributeValueSq */) {
                                        this._stateInAttributeValueSingleQuotes(c);
                                    } else if (this._state === 11/* BeforeAttributeValue */) {
                                        this._stateBeforeAttributeValue(c);
                                    } else if (this._state === 5/* BeforeClosingTagName */) {
                                        this._stateBeforeClosingTagName(c);
                                    } else if (this._state === 7/* AfterClosingTagName */) {
                                        this._stateAfterClosingTagName(c);
                                    } else if (this._state === 31/* BeforeSpecial */) {
                                        this._stateBeforeSpecial(c);
                                    } else if (this._state === 20/* AfterComment1 */) {
                                        this._stateAfterComment1(c);
                                    } else if (this._state === 14/* InAttributeValueNq */) {
                                        this._stateInAttributeValueNoQuotes(c);
                                    } else if (this._state === 4/* InSelfClosingTag */) {
                                        this._stateInSelfClosingTag(c);
                                    } else if (this._state === 16/* InDeclaration */) {
                                        this._stateInDeclaration(c);
                                    } else if (this._state === 15/* BeforeDeclaration */) {
                                        this._stateBeforeDeclaration(c);
                                    } else if (this._state === 21/* AfterComment2 */) {
                                        this._stateAfterComment2(c);
                                    } else if (this._state === 18/* BeforeComment */) {
                                        this._stateBeforeComment(c);
                                    } else if (this._state === 32/* BeforeSpecialEnd */) {
                                        this._stateBeforeSpecialEnd(c);
                                    } else if (this._state === 38/* AfterScript1 */) {
                                        stateAfterScript1(this, c);
                                    } else if (this._state === 39/* AfterScript2 */) {
                                        stateAfterScript2(this, c);
                                    } else if (this._state === 40/* AfterScript3 */) {
                                        stateAfterScript3(this, c);
                                    } else if (this._state === 33/* BeforeScript1 */) {
                                        stateBeforeScript1(this, c);
                                    } else if (this._state === 34/* BeforeScript2 */) {
                                        stateBeforeScript2(this, c);
                                    } else if (this._state === 35/* BeforeScript3 */) {
                                        stateBeforeScript3(this, c);
                                    } else if (this._state === 36/* BeforeScript4 */) {
                                        stateBeforeScript4(this, c);
                                    } else if (this._state === 37/* BeforeScript5 */) {
                                        this._stateBeforeScript5(c);
                                    } else if (this._state === 41/* AfterScript4 */) {
                                        stateAfterScript4(this, c);
                                    } else if (this._state === 42/* AfterScript5 */) {
                                        this._stateAfterScript5(c);
                                    } else if (this._state === 43/* BeforeStyle1 */) {
                                        stateBeforeStyle1(this, c);
                                    } else if (this._state === 28/* InCdata */) {
                                        this._stateInCdata(c);
                                    } else if (this._state === 44/* BeforeStyle2 */) {
                                        stateBeforeStyle2(this, c);
                                    } else if (this._state === 45/* BeforeStyle3 */) {
                                        stateBeforeStyle3(this, c);
                                    } else if (this._state === 46/* BeforeStyle4 */) {
                                        this._stateBeforeStyle4(c);
                                    } else if (this._state === 47/* AfterStyle1 */) {
                                        stateAfterStyle1(this, c);
                                    } else if (this._state === 48/* AfterStyle2 */) {
                                        stateAfterStyle2(this, c);
                                    } else if (this._state === 49/* AfterStyle3 */) {
                                        stateAfterStyle3(this, c);
                                    } else if (this._state === 50/* AfterStyle4 */) {
                                        this._stateAfterStyle4(c);
                                    } else if (this._state === 17/* InProcessingInstruction */) {
                                        this._stateInProcessingInstruction(c);
                                    } else if (this._state === 53/* InNamedEntity */) {
                                        this._stateInNamedEntity(c);
                                    } else if (this._state === 22/* BeforeCdata1 */) {
                                        stateBeforeCdata1(this, c);
                                    } else if (this._state === 51/* BeforeEntity */) {
                                        stateBeforeEntity(this, c);
                                    } else if (this._state === 23/* BeforeCdata2 */) {
                                        stateBeforeCdata2(this, c);
                                    } else if (this._state === 24/* BeforeCdata3 */) {
                                        stateBeforeCdata3(this, c);
                                    } else if (this._state === 29/* AfterCdata1 */) {
                                        this._stateAfterCdata1(c);
                                    } else if (this._state === 30/* AfterCdata2 */) {
                                        this._stateAfterCdata2(c);
                                    } else if (this._state === 25/* BeforeCdata4 */) {
                                        stateBeforeCdata4(this, c);
                                    } else if (this._state === 26/* BeforeCdata5 */) {
                                        stateBeforeCdata5(this, c);
                                    } else if (this._state === 27/* BeforeCdata6 */) {
                                        this._stateBeforeCdata6(c);
                                    } else if (this._state === 55/* InHexEntity */) {
                                        this._stateInHexEntity(c);
                                    } else if (this._state === 54/* InNumericEntity */) {
                                        this._stateInNumericEntity(c);
                                    } else if (this._state === 52/* BeforeNumericEntity */) {
                                        stateBeforeNumericEntity(this, c);
                                    } else {
                                        this._cbs.onerror(Error("unknown _state"), this._state);
                                    }
                                    this._index++;
                                }
                                this._cleanup();
                            };
                            Tokenizer.prototype.pause = function () {
                                this._running = false;
                            };
                            Tokenizer.prototype.resume = function () {
                                this._running = true;
                                if (this._index < this._buffer.length) {
                                    this._parse();
                                }
                                if (this._ended) {
                                    this._finish();
                                }
                            };
                            Tokenizer.prototype.end = function (chunk) {
                                if (this._ended) this._cbs.onerror(Error(".end() after done!"));
                                if (chunk) this.write(chunk);
                                this._ended = true;
                                if (this._running) this._finish();
                            };
                            Tokenizer.prototype._finish = function () {//if there is remaining data, emit it in a reasonable way
                                if (this._sectionStart < this._index) {
                                    this._handleTrailingData();
                                }
                                this._cbs.onend();
                            };
                            Tokenizer.prototype._handleTrailingData = function () {
                                var data = this._buffer.substr(this._sectionStart);
                                if (this._state === 28/* InCdata */ || this._state === 29/* AfterCdata1 */ || this._state === 30/* AfterCdata2 */) {
                                    this._cbs.oncdata(data);
                                } else if (this._state === 19/* InComment */ || this._state === 20/* AfterComment1 */ || this._state === 21/* AfterComment2 */) {
                                    this._cbs.oncomment(data);
                                } else if (this._state === 53/* InNamedEntity */ && !this._xmlMode) {
                                    this._parseLegacyEntity();
                                    if (this._sectionStart < this._index) {
                                        this._state = this._baseState;
                                        this._handleTrailingData();
                                    }
                                } else if (this._state === 54/* InNumericEntity */ && !this._xmlMode) {
                                    this._decodeNumericEntity(2, 10);
                                    if (this._sectionStart < this._index) {
                                        this._state = this._baseState;
                                        this._handleTrailingData();
                                    }
                                } else if (this._state === 55/* InHexEntity */ && !this._xmlMode) {
                                    this._decodeNumericEntity(3, 16);
                                    if (this._sectionStart < this._index) {
                                        this._state = this._baseState;
                                        this._handleTrailingData();
                                    }
                                } else if (this._state !== 3/* InTagName */ && this._state !== 8/* BeforeAttributeName */ && this._state !== 11/* BeforeAttributeValue */ && this._state !== 10/* AfterAttributeName */ && this._state !== 9/* InAttributeName */ && this._state !== 13/* InAttributeValueSq */ && this._state !== 12/* InAttributeValueDq */ && this._state !== 14/* InAttributeValueNq */ && this._state !== 6/* InClosingTagName */) {
                                    this._cbs.ontext(data);
                                }//else, ignore remaining data
//TODO add a way to remove current tag
                            };
                            Tokenizer.prototype.getAbsoluteIndex = function () {
                                return this._bufferOffset + this._index;
                            };
                            Tokenizer.prototype._getSection = function () {
                                return this._buffer.substring(this._sectionStart, this._index);
                            };
                            Tokenizer.prototype._emitToken = function (name) {
                                this._cbs[name](this._getSection());
                                this._sectionStart = -1;
                            };
                            Tokenizer.prototype._emitPartial = function (value) {
                                if (this._baseState !== 1/* Text */) {
                                    this._cbs.onattribdata(value);//TODO implement the new event
                                } else {
                                    this._cbs.ontext(value);
                                }
                            };
                            return Tokenizer;
                        }();
                        exports["default"] = Tokenizer;
                    }, {
                        "entities/lib/decode_codepoint": 18,
                        "entities/lib/maps/entities.json": 22,
                        "entities/lib/maps/legacy.json": 23,
                        "entities/lib/maps/xml.json": 24
                    }],
                    31: [function (require, module, exports) {
                        "use strict";

                        function __export(m) {
                            for (var p in m) {
                                if (!exports.hasOwnProperty(p)) exports[p] = m[p];
                            }
                        }

                        var __importStar = this && this.__importStar || function (mod) {
                            if (mod && mod.__esModule) return mod;
                            var result = {};
                            if (mod != null) for (var k in mod) {
                                if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
                            }
                            result["default"] = mod;
                            return result;
                        };
                        Object.defineProperty(exports, "__esModule", {value: true});
                        var Parser_1 = require("./Parser");
                        exports.Parser = Parser_1.Parser;
                        var domhandler_1 = require("domhandler");
                        exports.DomHandler = domhandler_1.DomHandler;
                        exports.DefaultHandler = domhandler_1.DomHandler;// Helper methods
                        /**
                         * Parses data, returns the resulting DOM.
                         *
                         * @param data The data that should be parsed.
                         * @param options Optional options for the parser and DOM builder.
                         */function parseDOM(data, options) {
                            var handler = new domhandler_1.DomHandler(void 0, options);
                            new Parser_1.Parser(handler, options).end(data);
                            return handler.dom;
                        }

                        exports.parseDOM = parseDOM;

                        /**
                         * Creates a parser instance, with an attached DOM handler.
                         *
                         * @param cb A callback that will be called once parsing has been completed.
                         * @param options Optional options for the parser and DOM builder.
                         * @param elementCb An optional callback that will be called every time a tag has been completed inside of the DOM.
                         */function createDomStream(cb, options, elementCb) {
                            var handler = new domhandler_1.DomHandler(cb, options, elementCb);
                            return new Parser_1.Parser(handler, options);
                        }

                        exports.createDomStream = createDomStream;
                        var Tokenizer_1 = require("./Tokenizer");
                        exports.Tokenizer = Tokenizer_1["default"];
                        var ElementType = __importStar(require("domelementtype"));
                        exports.ElementType = ElementType;
                        /**
                         * List of all events that the parser emits.
                         *
                         * Format: eventname: number of arguments.
                         */exports.EVENTS = {
                            attribute: 2,
                            cdatastart: 0,
                            cdataend: 0,
                            text: 1,
                            processinginstruction: 2,
                            comment: 1,
                            commentend: 0,
                            closetag: 1,
                            opentag: 2,
                            opentagname: 1,
                            error: 1,
                            end: 0
                        };/*
    All of the following exports exist for backwards-compatibility.
    They should probably be removed eventually.
*/
                        __export(require("./FeedHandler"));
                        __export(require("./WritableStream"));
                        __export(require("./CollectingHandler"));
                        var DomUtils = __importStar(require("domutils"));
                        exports.DomUtils = DomUtils;
                        var FeedHandler_1 = require("./FeedHandler");
                        exports.RssHandler = FeedHandler_1.FeedHandler;
                    }, {
                        "./CollectingHandler": 26,
                        "./FeedHandler": 27,
                        "./Parser": 29,
                        "./Tokenizer": 30,
                        "./WritableStream": 2,
                        "domelementtype": 6,
                        "domhandler": 7,
                        "domutils": 10
                    }],
                    32: [function (require, module, exports) {
                        exports.read = function (buffer, offset, isLE, mLen, nBytes) {
                            var e, m;
                            var eLen = nBytes * 8 - mLen - 1;
                            var eMax = (1 << eLen) - 1;
                            var eBias = eMax >> 1;
                            var nBits = -7;
                            var i = isLE ? nBytes - 1 : 0;
                            var d = isLE ? -1 : 1;
                            var s = buffer[offset + i];
                            i += d;
                            e = s & (1 << -nBits) - 1;
                            s >>= -nBits;
                            nBits += eLen;
                            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
                            }
                            m = e & (1 << -nBits) - 1;
                            e >>= -nBits;
                            nBits += mLen;
                            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
                            }
                            if (e === 0) {
                                e = 1 - eBias;
                            } else if (e === eMax) {
                                return m ? NaN : (s ? -1 : 1) * Infinity;
                            } else {
                                m = m + Math.pow(2, mLen);
                                e = e - eBias;
                            }
                            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
                        };
                        exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
                            var e, m, c;
                            var eLen = nBytes * 8 - mLen - 1;
                            var eMax = (1 << eLen) - 1;
                            var eBias = eMax >> 1;
                            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
                            var i = isLE ? 0 : nBytes - 1;
                            var d = isLE ? 1 : -1;
                            var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
                            value = Math.abs(value);
                            if (isNaN(value) || value === Infinity) {
                                m = isNaN(value) ? 1 : 0;
                                e = eMax;
                            } else {
                                e = Math.floor(Math.log(value) / Math.LN2);
                                if (value * (c = Math.pow(2, -e)) < 1) {
                                    e--;
                                    c *= 2;
                                }
                                if (e + eBias >= 1) {
                                    value += rt / c;
                                } else {
                                    value += rt * Math.pow(2, 1 - eBias);
                                }
                                if (value * c >= 2) {
                                    e++;
                                    c /= 2;
                                }
                                if (e + eBias >= eMax) {
                                    m = 0;
                                    e = eMax;
                                } else if (e + eBias >= 1) {
                                    m = (value * c - 1) * Math.pow(2, mLen);
                                    e = e + eBias;
                                } else {
                                    m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                                    e = 0;
                                }
                            }
                            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {
                            }
                            e = e << mLen | m;
                            eLen += mLen;
                            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {
                            }
                            buffer[offset + i - d] |= s * 128;
                        };
                    }, {}],
                    33: [function (require, module, exports) {
                        (function (global) {/**
                         * lodash (Custom Build) <https://lodash.com/>
                         * Build: `lodash modularize exports="npm" -o ./`
                         * Copyright jQuery Foundation and other contributors <https://jquery.org/>
                         * Released under MIT license <https://lodash.com/license>
                         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
                         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
                         */
                            /** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE = 200;
                            /** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED = '__lodash_hash_undefined__';
                            /** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER = 9007199254740991;
                            /** `Object#toString` result references. */var argsTag = '[object Arguments]',
                                arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]',
                                errorTag = '[object Error]', funcTag = '[object Function]',
                                genTag = '[object GeneratorFunction]', mapTag = '[object Map]',
                                numberTag = '[object Number]', objectTag = '[object Object]',
                                promiseTag = '[object Promise]', regexpTag = '[object RegExp]', setTag = '[object Set]',
                                stringTag = '[object String]', symbolTag = '[object Symbol]',
                                weakMapTag = '[object WeakMap]';
                            var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]',
                                float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]',
                                int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]',
                                int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]',
                                uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]',
                                uint32Tag = '[object Uint32Array]';
                            /**
                             * Used to match `RegExp`
                             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
                             */var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
                            /** Used to match `RegExp` flags from their coerced string values. */var reFlags = /\w*$/;
                            /** Used to detect host constructors (Safari). */var reIsHostCtor = /^\[object .+?Constructor\]$/;
                            /** Used to detect unsigned integer values. */var reIsUint = /^(?:0|[1-9]\d*)$/;
                            /** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags = {};
                            cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
                            cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
                            /** Detect free variable `global` from Node.js. */var freeGlobal = _typeof(global) == 'object' && global && global.Object === Object && global;
                            /** Detect free variable `self`. */var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
                            /** Used as a reference to the global object. */var root = freeGlobal || freeSelf || Function('return this')();
                            /** Detect free variable `exports`. */var freeExports = _typeof(exports) == 'object' && exports && !exports.nodeType && exports;
                            /** Detect free variable `module`. */var freeModule = freeExports && _typeof(module) == 'object' && module && !module.nodeType && module;
                            /** Detect the popular CommonJS extension `module.exports`. */var moduleExports = freeModule && freeModule.exports === freeExports;

                            /**
                             * Adds the key-value `pair` to `map`.
                             *
                             * @private
                             * @param {Object} map The map to modify.
                             * @param {Array} pair The key-value pair to add.
                             * @returns {Object} Returns `map`.
                             */function addMapEntry(map, pair) {// Don't return `map.set` because it's not chainable in IE 11.
                                map.set(pair[0], pair[1]);
                                return map;
                            }

                            /**
                             * Adds `value` to `set`.
                             *
                             * @private
                             * @param {Object} set The set to modify.
                             * @param {*} value The value to add.
                             * @returns {Object} Returns `set`.
                             */function addSetEntry(set, value) {// Don't return `set.add` because it's not chainable in IE 11.
                                set.add(value);
                                return set;
                            }

                            /**
                             * A specialized version of `_.forEach` for arrays without support for
                             * iteratee shorthands.
                             *
                             * @private
                             * @param {Array} [array] The array to iterate over.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @returns {Array} Returns `array`.
                             */function arrayEach(array, iteratee) {
                                var index = -1, length = array ? array.length : 0;
                                while (++index < length) {
                                    if (iteratee(array[index], index, array) === false) {
                                        break;
                                    }
                                }
                                return array;
                            }

                            /**
                             * Appends the elements of `values` to `array`.
                             *
                             * @private
                             * @param {Array} array The array to modify.
                             * @param {Array} values The values to append.
                             * @returns {Array} Returns `array`.
                             */function arrayPush(array, values) {
                                var index = -1, length = values.length, offset = array.length;
                                while (++index < length) {
                                    array[offset + index] = values[index];
                                }
                                return array;
                            }

                            /**
                             * A specialized version of `_.reduce` for arrays without support for
                             * iteratee shorthands.
                             *
                             * @private
                             * @param {Array} [array] The array to iterate over.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @param {*} [accumulator] The initial value.
                             * @param {boolean} [initAccum] Specify using the first element of `array` as
                             *  the initial value.
                             * @returns {*} Returns the accumulated value.
                             */function arrayReduce(array, iteratee, accumulator, initAccum) {
                                var index = -1, length = array ? array.length : 0;
                                if (initAccum && length) {
                                    accumulator = array[++index];
                                }
                                while (++index < length) {
                                    accumulator = iteratee(accumulator, array[index], index, array);
                                }
                                return accumulator;
                            }

                            /**
                             * The base implementation of `_.times` without support for iteratee shorthands
                             * or max array length checks.
                             *
                             * @private
                             * @param {number} n The number of times to invoke `iteratee`.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @returns {Array} Returns the array of results.
                             */function baseTimes(n, iteratee) {
                                var index = -1, result = Array(n);
                                while (++index < n) {
                                    result[index] = iteratee(index);
                                }
                                return result;
                            }

                            /**
                             * Gets the value at `key` of `object`.
                             *
                             * @private
                             * @param {Object} [object] The object to query.
                             * @param {string} key The key of the property to get.
                             * @returns {*} Returns the property value.
                             */function getValue(object, key) {
                                return object == null ? undefined : object[key];
                            }

                            /**
                             * Checks if `value` is a host object in IE < 9.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
                             */function isHostObject(value) {// Many host objects are `Object` objects that can coerce to strings
// despite having improperly defined `toString` methods.
                                var result = false;
                                if (value != null && typeof value.toString != 'function') {
                                    try {
                                        result = !!(value + '');
                                    } catch (e) {
                                    }
                                }
                                return result;
                            }

                            /**
                             * Converts `map` to its key-value pairs.
                             *
                             * @private
                             * @param {Object} map The map to convert.
                             * @returns {Array} Returns the key-value pairs.
                             */function mapToArray(map) {
                                var index = -1, result = Array(map.size);
                                map.forEach(function (value, key) {
                                    result[++index] = [key, value];
                                });
                                return result;
                            }

                            /**
                             * Creates a unary function that invokes `func` with its argument transformed.
                             *
                             * @private
                             * @param {Function} func The function to wrap.
                             * @param {Function} transform The argument transform.
                             * @returns {Function} Returns the new function.
                             */function overArg(func, transform) {
                                return function (arg) {
                                    return func(transform(arg));
                                };
                            }

                            /**
                             * Converts `set` to an array of its values.
                             *
                             * @private
                             * @param {Object} set The set to convert.
                             * @returns {Array} Returns the values.
                             */function setToArray(set) {
                                var index = -1, result = Array(set.size);
                                set.forEach(function (value) {
                                    result[++index] = value;
                                });
                                return result;
                            }

                            /** Used for built-in method references. */var arrayProto = Array.prototype,
                                funcProto = Function.prototype, objectProto = Object.prototype;
                            /** Used to detect overreaching core-js shims. */var coreJsData = root['__core-js_shared__'];
                            /** Used to detect methods masquerading as native. */var maskSrcKey = function () {
                                var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                                return uid ? 'Symbol(src)_1.' + uid : '';
                            }();
                            /** Used to resolve the decompiled source of functions. */var funcToString = funcProto.toString;
                            /** Used to check objects for own properties. */var hasOwnProperty = objectProto.hasOwnProperty;
                            /**
                             * Used to resolve the
                             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                             * of values.
                             */var objectToString = objectProto.toString;
                            /** Used to detect if a method is native. */var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
                            /** Built-in value references. */var Buffer = moduleExports ? root.Buffer : undefined,
                                _Symbol = root.Symbol, Uint8Array = root.Uint8Array,
                                getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create,
                                propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice;/* Built-in method references for those with the same name as other `lodash` methods. */
                            var nativeGetSymbols = Object.getOwnPropertySymbols,
                                nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
                                nativeKeys = overArg(Object.keys, Object);/* Built-in method references that are verified to be native. */
                            var DataView = getNative(root, 'DataView'), Map = getNative(root, 'Map'),
                                Promise = getNative(root, 'Promise'), Set = getNative(root, 'Set'),
                                WeakMap = getNative(root, 'WeakMap'), nativeCreate = getNative(Object, 'create');
                            /** Used to detect maps, sets, and weakmaps. */var dataViewCtorString = toSource(DataView),
                                mapCtorString = toSource(Map), promiseCtorString = toSource(Promise),
                                setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
                            /** Used to convert symbols to primitives and strings. */var symbolProto = _Symbol ? _Symbol.prototype : undefined,
                                symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

                            /**
                             * Creates a hash object.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */function Hash(entries) {
                                var index = -1, length = entries ? entries.length : 0;
                                this.clear();
                                while (++index < length) {
                                    var entry = entries[index];
                                    this.set(entry[0], entry[1]);
                                }
                            }

                            /**
                             * Removes all key-value entries from the hash.
                             *
                             * @private
                             * @name clear
                             * @memberOf Hash
                             */function hashClear() {
                                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                            }

                            /**
                             * Removes `key` and its value from the hash.
                             *
                             * @private
                             * @name delete
                             * @memberOf Hash
                             * @param {Object} hash The hash to modify.
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */function hashDelete(key) {
                                return this.has(key) && delete this.__data__[key];
                            }

                            /**
                             * Gets the hash value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf Hash
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */function hashGet(key) {
                                var data = this.__data__;
                                if (nativeCreate) {
                                    var result = data[key];
                                    return result === HASH_UNDEFINED ? undefined : result;
                                }
                                return hasOwnProperty.call(data, key) ? data[key] : undefined;
                            }

                            /**
                             * Checks if a hash value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf Hash
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */function hashHas(key) {
                                var data = this.__data__;
                                return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
                            }

                            /**
                             * Sets the hash `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf Hash
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the hash instance.
                             */function hashSet(key, value) {
                                var data = this.__data__;
                                data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
                                return this;
                            }// Add methods to `Hash`.
                            Hash.prototype.clear = hashClear;
                            Hash.prototype['delete'] = hashDelete;
                            Hash.prototype.get = hashGet;
                            Hash.prototype.has = hashHas;
                            Hash.prototype.set = hashSet;

                            /**
                             * Creates an list cache object.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */function ListCache(entries) {
                                var index = -1, length = entries ? entries.length : 0;
                                this.clear();
                                while (++index < length) {
                                    var entry = entries[index];
                                    this.set(entry[0], entry[1]);
                                }
                            }

                            /**
                             * Removes all key-value entries from the list cache.
                             *
                             * @private
                             * @name clear
                             * @memberOf ListCache
                             */function listCacheClear() {
                                this.__data__ = [];
                            }

                            /**
                             * Removes `key` and its value from the list cache.
                             *
                             * @private
                             * @name delete
                             * @memberOf ListCache
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */function listCacheDelete(key) {
                                var data = this.__data__, index = assocIndexOf(data, key);
                                if (index < 0) {
                                    return false;
                                }
                                var lastIndex = data.length - 1;
                                if (index == lastIndex) {
                                    data.pop();
                                } else {
                                    splice.call(data, index, 1);
                                }
                                return true;
                            }

                            /**
                             * Gets the list cache value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf ListCache
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */function listCacheGet(key) {
                                var data = this.__data__, index = assocIndexOf(data, key);
                                return index < 0 ? undefined : data[index][1];
                            }

                            /**
                             * Checks if a list cache value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf ListCache
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */function listCacheHas(key) {
                                return assocIndexOf(this.__data__, key) > -1;
                            }

                            /**
                             * Sets the list cache `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf ListCache
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the list cache instance.
                             */function listCacheSet(key, value) {
                                var data = this.__data__, index = assocIndexOf(data, key);
                                if (index < 0) {
                                    data.push([key, value]);
                                } else {
                                    data[index][1] = value;
                                }
                                return this;
                            }// Add methods to `ListCache`.
                            ListCache.prototype.clear = listCacheClear;
                            ListCache.prototype['delete'] = listCacheDelete;
                            ListCache.prototype.get = listCacheGet;
                            ListCache.prototype.has = listCacheHas;
                            ListCache.prototype.set = listCacheSet;

                            /**
                             * Creates a map cache object to store key-value pairs.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */function MapCache(entries) {
                                var index = -1, length = entries ? entries.length : 0;
                                this.clear();
                                while (++index < length) {
                                    var entry = entries[index];
                                    this.set(entry[0], entry[1]);
                                }
                            }

                            /**
                             * Removes all key-value entries from the map.
                             *
                             * @private
                             * @name clear
                             * @memberOf MapCache
                             */function mapCacheClear() {
                                this.__data__ = {
                                    'hash': new Hash(),
                                    'map': new (Map || ListCache)(),
                                    'string': new Hash()
                                };
                            }

                            /**
                             * Removes `key` and its value from the map.
                             *
                             * @private
                             * @name delete
                             * @memberOf MapCache
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */function mapCacheDelete(key) {
                                return getMapData(this, key)['delete'](key);
                            }

                            /**
                             * Gets the map value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf MapCache
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */function mapCacheGet(key) {
                                return getMapData(this, key).get(key);
                            }

                            /**
                             * Checks if a map value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf MapCache
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */function mapCacheHas(key) {
                                return getMapData(this, key).has(key);
                            }

                            /**
                             * Sets the map `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf MapCache
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the map cache instance.
                             */function mapCacheSet(key, value) {
                                getMapData(this, key).set(key, value);
                                return this;
                            }// Add methods to `MapCache`.
                            MapCache.prototype.clear = mapCacheClear;
                            MapCache.prototype['delete'] = mapCacheDelete;
                            MapCache.prototype.get = mapCacheGet;
                            MapCache.prototype.has = mapCacheHas;
                            MapCache.prototype.set = mapCacheSet;

                            /**
                             * Creates a stack cache object to store key-value pairs.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */function Stack(entries) {
                                this.__data__ = new ListCache(entries);
                            }

                            /**
                             * Removes all key-value entries from the stack.
                             *
                             * @private
                             * @name clear
                             * @memberOf Stack
                             */function stackClear() {
                                this.__data__ = new ListCache();
                            }

                            /**
                             * Removes `key` and its value from the stack.
                             *
                             * @private
                             * @name delete
                             * @memberOf Stack
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */function stackDelete(key) {
                                return this.__data__['delete'](key);
                            }

                            /**
                             * Gets the stack value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf Stack
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */function stackGet(key) {
                                return this.__data__.get(key);
                            }

                            /**
                             * Checks if a stack value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf Stack
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */function stackHas(key) {
                                return this.__data__.has(key);
                            }

                            /**
                             * Sets the stack `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf Stack
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the stack cache instance.
                             */function stackSet(key, value) {
                                var cache = this.__data__;
                                if (cache instanceof ListCache) {
                                    var pairs = cache.__data__;
                                    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                                        pairs.push([key, value]);
                                        return this;
                                    }
                                    cache = this.__data__ = new MapCache(pairs);
                                }
                                cache.set(key, value);
                                return this;
                            }// Add methods to `Stack`.
                            Stack.prototype.clear = stackClear;
                            Stack.prototype['delete'] = stackDelete;
                            Stack.prototype.get = stackGet;
                            Stack.prototype.has = stackHas;
                            Stack.prototype.set = stackSet;

                            /**
                             * Creates an array of the enumerable property names of the array-like `value`.
                             *
                             * @private
                             * @param {*} value The value to query.
                             * @param {boolean} inherited Specify returning inherited property names.
                             * @returns {Array} Returns the array of property names.
                             */function arrayLikeKeys(value, inherited) {// Safari 8.1 makes `arguments.callee` enumerable in strict mode.
// Safari 9 makes `arguments.length` enumerable in strict mode.
                                var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
                                var length = result.length, skipIndexes = !!length;
                                for (var key in value) {
                                    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }

                            /**
                             * Assigns `value` to `key` of `object` if the existing value is not equivalent
                             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * for equality comparisons.
                             *
                             * @private
                             * @param {Object} object The object to modify.
                             * @param {string} key The key of the property to assign.
                             * @param {*} value The value to assign.
                             */function assignValue(object, key, value) {
                                var objValue = object[key];
                                if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
                                    object[key] = value;
                                }
                            }

                            /**
                             * Gets the index at which the `key` is found in `array` of key-value pairs.
                             *
                             * @private
                             * @param {Array} array The array to inspect.
                             * @param {*} key The key to search for.
                             * @returns {number} Returns the index of the matched value, else `-1`.
                             */function assocIndexOf(array, key) {
                                var length = array.length;
                                while (length--) {
                                    if (eq(array[length][0], key)) {
                                        return length;
                                    }
                                }
                                return -1;
                            }

                            /**
                             * The base implementation of `_.assign` without support for multiple sources
                             * or `customizer` functions.
                             *
                             * @private
                             * @param {Object} object The destination object.
                             * @param {Object} source The source object.
                             * @returns {Object} Returns `object`.
                             */function baseAssign(object, source) {
                                return object && copyObject(source, keys(source), object);
                            }

                            /**
                             * The base implementation of `_.clone` and `_.cloneDeep` which tracks
                             * traversed objects.
                             *
                             * @private
                             * @param {*} value The value to clone.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @param {boolean} [isFull] Specify a clone including symbols.
                             * @param {Function} [customizer] The function to customize cloning.
                             * @param {string} [key] The key of `value`.
                             * @param {Object} [object] The parent object of `value`.
                             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
                             * @returns {*} Returns the cloned value.
                             */function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
                                var result;
                                if (customizer) {
                                    result = object ? customizer(value, key, object, stack) : customizer(value);
                                }
                                if (result !== undefined) {
                                    return result;
                                }
                                if (!isObject(value)) {
                                    return value;
                                }
                                var isArr = isArray(value);
                                if (isArr) {
                                    result = initCloneArray(value);
                                    if (!isDeep) {
                                        return copyArray(value, result);
                                    }
                                } else {
                                    var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                                    if (isBuffer(value)) {
                                        return cloneBuffer(value, isDeep);
                                    }
                                    if (tag == objectTag || tag == argsTag || isFunc && !object) {
                                        if (isHostObject(value)) {
                                            return object ? value : {};
                                        }
                                        result = initCloneObject(isFunc ? {} : value);
                                        if (!isDeep) {
                                            return copySymbols(value, baseAssign(result, value));
                                        }
                                    } else {
                                        if (!cloneableTags[tag]) {
                                            return object ? value : {};
                                        }
                                        result = initCloneByTag(value, tag, baseClone, isDeep);
                                    }
                                }// Check for circular references and return its corresponding clone.
                                stack || (stack = new Stack());
                                var stacked = stack.get(value);
                                if (stacked) {
                                    return stacked;
                                }
                                stack.set(value, result);
                                if (!isArr) {
                                    var props = isFull ? getAllKeys(value) : keys(value);
                                }
                                arrayEach(props || value, function (subValue, key) {
                                    if (props) {
                                        key = subValue;
                                        subValue = value[key];
                                    }// Recursively populate clone (susceptible to call stack limits).
                                    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
                                });
                                return result;
                            }

                            /**
                             * The base implementation of `_.create` without support for assigning
                             * properties to the created object.
                             *
                             * @private
                             * @param {Object} prototype The object to inherit from.
                             * @returns {Object} Returns the new object.
                             */function baseCreate(proto) {
                                return isObject(proto) ? objectCreate(proto) : {};
                            }

                            /**
                             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
                             * `keysFunc` and `symbolsFunc` to get the enumerable property names and
                             * symbols of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {Function} keysFunc The function to get the keys of `object`.
                             * @param {Function} symbolsFunc The function to get the symbols of `object`.
                             * @returns {Array} Returns the array of property names and symbols.
                             */function baseGetAllKeys(object, keysFunc, symbolsFunc) {
                                var result = keysFunc(object);
                                return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
                            }

                            /**
                             * The base implementation of `getTag`.
                             *
                             * @private
                             * @param {*} value The value to query.
                             * @returns {string} Returns the `toStringTag`.
                             */function baseGetTag(value) {
                                return objectToString.call(value);
                            }

                            /**
                             * The base implementation of `_.isNative` without bad shim checks.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a native function,
                             *  else `false`.
                             */function baseIsNative(value) {
                                if (!isObject(value) || isMasked(value)) {
                                    return false;
                                }
                                var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
                                return pattern.test(toSource(value));
                            }

                            /**
                             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names.
                             */function baseKeys(object) {
                                if (!isPrototype(object)) {
                                    return nativeKeys(object);
                                }
                                var result = [];
                                for (var key in Object(object)) {
                                    if (hasOwnProperty.call(object, key) && key != 'constructor') {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }

                            /**
                             * Creates a clone of  `buffer`.
                             *
                             * @private
                             * @param {Buffer} buffer The buffer to clone.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Buffer} Returns the cloned buffer.
                             */function cloneBuffer(buffer, isDeep) {
                                if (isDeep) {
                                    return buffer.slice();
                                }
                                var result = new buffer.constructor(buffer.length);
                                buffer.copy(result);
                                return result;
                            }

                            /**
                             * Creates a clone of `arrayBuffer`.
                             *
                             * @private
                             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                             * @returns {ArrayBuffer} Returns the cloned array buffer.
                             */function cloneArrayBuffer(arrayBuffer) {
                                var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                                new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                                return result;
                            }

                            /**
                             * Creates a clone of `dataView`.
                             *
                             * @private
                             * @param {Object} dataView The data view to clone.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Object} Returns the cloned data view.
                             */function cloneDataView(dataView, isDeep) {
                                var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
                                return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
                            }

                            /**
                             * Creates a clone of `map`.
                             *
                             * @private
                             * @param {Object} map The map to clone.
                             * @param {Function} cloneFunc The function to clone values.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Object} Returns the cloned map.
                             */function cloneMap(map, isDeep, cloneFunc) {
                                var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
                                return arrayReduce(array, addMapEntry, new map.constructor());
                            }

                            /**
                             * Creates a clone of `regexp`.
                             *
                             * @private
                             * @param {Object} regexp The regexp to clone.
                             * @returns {Object} Returns the cloned regexp.
                             */function cloneRegExp(regexp) {
                                var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
                                result.lastIndex = regexp.lastIndex;
                                return result;
                            }

                            /**
                             * Creates a clone of `set`.
                             *
                             * @private
                             * @param {Object} set The set to clone.
                             * @param {Function} cloneFunc The function to clone values.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Object} Returns the cloned set.
                             */function cloneSet(set, isDeep, cloneFunc) {
                                var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
                                return arrayReduce(array, addSetEntry, new set.constructor());
                            }

                            /**
                             * Creates a clone of the `symbol` object.
                             *
                             * @private
                             * @param {Object} symbol The symbol object to clone.
                             * @returns {Object} Returns the cloned symbol object.
                             */function cloneSymbol(symbol) {
                                return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
                            }

                            /**
                             * Creates a clone of `typedArray`.
                             *
                             * @private
                             * @param {Object} typedArray The typed array to clone.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Object} Returns the cloned typed array.
                             */function cloneTypedArray(typedArray, isDeep) {
                                var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                                return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                            }

                            /**
                             * Copies the values of `source` to `array`.
                             *
                             * @private
                             * @param {Array} source The array to copy values from.
                             * @param {Array} [array=[]] The array to copy values to.
                             * @returns {Array} Returns `array`.
                             */function copyArray(source, array) {
                                var index = -1, length = source.length;
                                array || (array = Array(length));
                                while (++index < length) {
                                    array[index] = source[index];
                                }
                                return array;
                            }

                            /**
                             * Copies properties of `source` to `object`.
                             *
                             * @private
                             * @param {Object} source The object to copy properties from.
                             * @param {Array} props The property identifiers to copy.
                             * @param {Object} [object={}] The object to copy properties to.
                             * @param {Function} [customizer] The function to customize copied values.
                             * @returns {Object} Returns `object`.
                             */function copyObject(source, props, object, customizer) {
                                object || (object = {});
                                var index = -1, length = props.length;
                                while (++index < length) {
                                    var key = props[index];
                                    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                                    assignValue(object, key, newValue === undefined ? source[key] : newValue);
                                }
                                return object;
                            }

                            /**
                             * Copies own symbol properties of `source` to `object`.
                             *
                             * @private
                             * @param {Object} source The object to copy symbols from.
                             * @param {Object} [object={}] The object to copy symbols to.
                             * @returns {Object} Returns `object`.
                             */function copySymbols(source, object) {
                                return copyObject(source, getSymbols(source), object);
                            }

                            /**
                             * Creates an array of own enumerable property names and symbols of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names and symbols.
                             */function getAllKeys(object) {
                                return baseGetAllKeys(object, keys, getSymbols);
                            }

                            /**
                             * Gets the data for `map`.
                             *
                             * @private
                             * @param {Object} map The map to query.
                             * @param {string} key The reference key.
                             * @returns {*} Returns the map data.
                             */function getMapData(map, key) {
                                var data = map.__data__;
                                return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
                            }

                            /**
                             * Gets the native function at `key` of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {string} key The key of the method to get.
                             * @returns {*} Returns the function if it's native, else `undefined`.
                             */function getNative(object, key) {
                                var value = getValue(object, key);
                                return baseIsNative(value) ? value : undefined;
                            }

                            /**
                             * Creates an array of the own enumerable symbol properties of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of symbols.
                             */var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
                            /**
                             * Gets the `toStringTag` of `value`.
                             *
                             * @private
                             * @param {*} value The value to query.
                             * @returns {string} Returns the `toStringTag`.
                             */var getTag = baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11,
// for data views in Edge < 14, and promises in Node.js.
                            if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
                                getTag = function getTag(value) {
                                    var result = objectToString.call(value),
                                        Ctor = result == objectTag ? value.constructor : undefined,
                                        ctorString = Ctor ? toSource(Ctor) : undefined;
                                    if (ctorString) {
                                        switch (ctorString) {
                                            case dataViewCtorString:
                                                return dataViewTag;
                                            case mapCtorString:
                                                return mapTag;
                                            case promiseCtorString:
                                                return promiseTag;
                                            case setCtorString:
                                                return setTag;
                                            case weakMapCtorString:
                                                return weakMapTag;
                                        }
                                    }
                                    return result;
                                };
                            }

                            /**
                             * Initializes an array clone.
                             *
                             * @private
                             * @param {Array} array The array to clone.
                             * @returns {Array} Returns the initialized clone.
                             */function initCloneArray(array) {
                                var length = array.length, result = array.constructor(length);// Add properties assigned by `RegExp#exec`.
                                if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                                    result.index = array.index;
                                    result.input = array.input;
                                }
                                return result;
                            }

                            /**
                             * Initializes an object clone.
                             *
                             * @private
                             * @param {Object} object The object to clone.
                             * @returns {Object} Returns the initialized clone.
                             */function initCloneObject(object) {
                                return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
                            }

                            /**
                             * Initializes an object clone based on its `toStringTag`.
                             *
                             * **Note:** This function only supports cloning values with tags of
                             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
                             *
                             * @private
                             * @param {Object} object The object to clone.
                             * @param {string} tag The `toStringTag` of the object to clone.
                             * @param {Function} cloneFunc The function to clone values.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Object} Returns the initialized clone.
                             */function initCloneByTag(object, tag, cloneFunc, isDeep) {
                                var Ctor = object.constructor;
                                switch (tag) {
                                    case arrayBufferTag:
                                        return cloneArrayBuffer(object);
                                    case boolTag:
                                    case dateTag:
                                        return new Ctor(+object);
                                    case dataViewTag:
                                        return cloneDataView(object, isDeep);
                                    case float32Tag:
                                    case float64Tag:
                                    case int8Tag:
                                    case int16Tag:
                                    case int32Tag:
                                    case uint8Tag:
                                    case uint8ClampedTag:
                                    case uint16Tag:
                                    case uint32Tag:
                                        return cloneTypedArray(object, isDeep);
                                    case mapTag:
                                        return cloneMap(object, isDeep, cloneFunc);
                                    case numberTag:
                                    case stringTag:
                                        return new Ctor(object);
                                    case regexpTag:
                                        return cloneRegExp(object);
                                    case setTag:
                                        return cloneSet(object, isDeep, cloneFunc);
                                    case symbolTag:
                                        return cloneSymbol(object);
                                }
                            }

                            /**
                             * Checks if `value` is a valid array-like index.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                             */function isIndex(value, length) {
                                length = length == null ? MAX_SAFE_INTEGER : length;
                                return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
                            }

                            /**
                             * Checks if `value` is suitable for use as unique object key.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                             */function isKeyable(value) {
                                var type = _typeof(value);
                                return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
                            }

                            /**
                             * Checks if `func` has its source masked.
                             *
                             * @private
                             * @param {Function} func The function to check.
                             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                             */function isMasked(func) {
                                return !!maskSrcKey && maskSrcKey in func;
                            }

                            /**
                             * Checks if `value` is likely a prototype object.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                             */function isPrototype(value) {
                                var Ctor = value && value.constructor,
                                    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
                                return value === proto;
                            }

                            /**
                             * Converts `func` to its source code.
                             *
                             * @private
                             * @param {Function} func The function to process.
                             * @returns {string} Returns the source code.
                             */function toSource(func) {
                                if (func != null) {
                                    try {
                                        return funcToString.call(func);
                                    } catch (e) {
                                    }
                                    try {
                                        return func + '';
                                    } catch (e) {
                                    }
                                }
                                return '';
                            }

                            /**
                             * This method is like `_.clone` except that it recursively clones `value`.
                             *
                             * @static
                             * @memberOf _
                             * @since 1.0.0
                             * @category Lang
                             * @param {*} value The value to recursively clone.
                             * @returns {*} Returns the deep cloned value.
                             * @see _.clone
                             * @example
                             *
                             * var objects = [{ 'a': 1 }, { 'b': 2 }];
                             *
                             * var deep = _.cloneDeep(objects);
                             * console.log(deep[0] === objects[0]);
                             * // => false
                             */function cloneDeep(value) {
                                return baseClone(value, true, true);
                            }

                            /**
                             * Performs a
                             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * comparison between two values to determine if they are equivalent.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                             * @example
                             *
                             * var object = { 'a': 1 };
                             * var other = { 'a': 1 };
                             *
                             * _.eq(object, object);
                             * // => true
                             *
                             * _.eq(object, other);
                             * // => false
                             *
                             * _.eq('a', 'a');
                             * // => true
                             *
                             * _.eq('a', Object('a'));
                             * // => false
                             *
                             * _.eq(NaN, NaN);
                             * // => true
                             */function eq(value, other) {
                                return value === other || value !== value && other !== other;
                            }

                            /**
                             * Checks if `value` is likely an `arguments` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                             *  else `false`.
                             * @example
                             *
                             * _.isArguments(function() { return arguments; }());
                             * // => true
                             *
                             * _.isArguments([1, 2, 3]);
                             * // => false
                             */function isArguments(value) {// Safari 8.1 makes `arguments.callee` enumerable in strict mode.
                                return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
                            }

                            /**
                             * Checks if `value` is classified as an `Array` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                             * @example
                             *
                             * _.isArray([1, 2, 3]);
                             * // => true
                             *
                             * _.isArray(document.body.children);
                             * // => false
                             *
                             * _.isArray('abc');
                             * // => false
                             *
                             * _.isArray(_.noop);
                             * // => false
                             */var isArray = Array.isArray;

                            /**
                             * Checks if `value` is array-like. A value is considered array-like if it's
                             * not a function and has a `value.length` that's an integer greater than or
                             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                             * @example
                             *
                             * _.isArrayLike([1, 2, 3]);
                             * // => true
                             *
                             * _.isArrayLike(document.body.children);
                             * // => true
                             *
                             * _.isArrayLike('abc');
                             * // => true
                             *
                             * _.isArrayLike(_.noop);
                             * // => false
                             */function isArrayLike(value) {
                                return value != null && isLength(value.length) && !isFunction(value);
                            }

                            /**
                             * This method is like `_.isArrayLike` except that it also checks if `value`
                             * is an object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an array-like object,
                             *  else `false`.
                             * @example
                             *
                             * _.isArrayLikeObject([1, 2, 3]);
                             * // => true
                             *
                             * _.isArrayLikeObject(document.body.children);
                             * // => true
                             *
                             * _.isArrayLikeObject('abc');
                             * // => false
                             *
                             * _.isArrayLikeObject(_.noop);
                             * // => false
                             */function isArrayLikeObject(value) {
                                return isObjectLike(value) && isArrayLike(value);
                            }

                            /**
                             * Checks if `value` is a buffer.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.3.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                             * @example
                             *
                             * _.isBuffer(new Buffer(2));
                             * // => true
                             *
                             * _.isBuffer(new Uint8Array(2));
                             * // => false
                             */var isBuffer = nativeIsBuffer || stubFalse;

                            /**
                             * Checks if `value` is classified as a `Function` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                             * @example
                             *
                             * _.isFunction(_);
                             * // => true
                             *
                             * _.isFunction(/abc/);
                             * // => false
                             */function isFunction(value) {// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 8-9 which returns 'object' for typed array and other constructors.
                                var tag = isObject(value) ? objectToString.call(value) : '';
                                return tag == funcTag || tag == genTag;
                            }

                            /**
                             * Checks if `value` is a valid array-like length.
                             *
                             * **Note:** This method is loosely based on
                             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                             * @example
                             *
                             * _.isLength(3);
                             * // => true
                             *
                             * _.isLength(Number.MIN_VALUE);
                             * // => false
                             *
                             * _.isLength(Infinity);
                             * // => false
                             *
                             * _.isLength('3');
                             * // => false
                             */function isLength(value) {
                                return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                            }

                            /**
                             * Checks if `value` is the
                             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                             * @example
                             *
                             * _.isObject({});
                             * // => true
                             *
                             * _.isObject([1, 2, 3]);
                             * // => true
                             *
                             * _.isObject(_.noop);
                             * // => true
                             *
                             * _.isObject(null);
                             * // => false
                             */function isObject(value) {
                                var type = _typeof(value);
                                return !!value && (type == 'object' || type == 'function');
                            }

                            /**
                             * Checks if `value` is object-like. A value is object-like if it's not `null`
                             * and has a `typeof` result of "object".
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                             * @example
                             *
                             * _.isObjectLike({});
                             * // => true
                             *
                             * _.isObjectLike([1, 2, 3]);
                             * // => true
                             *
                             * _.isObjectLike(_.noop);
                             * // => false
                             *
                             * _.isObjectLike(null);
                             * // => false
                             */function isObjectLike(value) {
                                return !!value && _typeof(value) == 'object';
                            }

                            /**
                             * Creates an array of the own enumerable property names of `object`.
                             *
                             * **Note:** Non-object values are coerced to objects. See the
                             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                             * for more details.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Object
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names.
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.keys(new Foo);
                             * // => ['a', 'b'] (iteration order is not guaranteed)
                             *
                             * _.keys('hi');
                             * // => ['0', '1']
                             */function keys(object) {
                                return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
                            }

                            /**
                             * This method returns a new empty array.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.13.0
                             * @category Util
                             * @returns {Array} Returns the new empty array.
                             * @example
                             *
                             * var arrays = _.times(2, _.stubArray);
                             *
                             * console.log(arrays);
                             * // => [[], []]
                             *
                             * console.log(arrays[0] === arrays[1]);
                             * // => false
                             */function stubArray() {
                                return [];
                            }

                            /**
                             * This method returns `false`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.13.0
                             * @category Util
                             * @returns {boolean} Returns `false`.
                             * @example
                             *
                             * _.times(2, _.stubFalse);
                             * // => [false, false]
                             */function stubFalse() {
                                return false;
                            }

                            module.exports = cloneDeep;
                        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
                    }, {}],
                    34: [function (require, module, exports) {
                        (function (global) {/**
                         * lodash (Custom Build) <https://lodash.com/>
                         * Build: `lodash modularize exports="npm" -o ./`
                         * Copyright jQuery Foundation and other contributors <https://jquery.org/>
                         * Released under MIT license <https://lodash.com/license>
                         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
                         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
                         */
                            /** Used as references for various `Number` constants. */var INFINITY = 1 / 0;
                            /** `Object#toString` result references. */var symbolTag = '[object Symbol]';
                            /**
                             * Used to match `RegExp`
                             * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).
                             */var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
                            /** Detect free variable `global` from Node.js. */var freeGlobal = _typeof(global) == 'object' && global && global.Object === Object && global;
                            /** Detect free variable `self`. */var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
                            /** Used as a reference to the global object. */var root = freeGlobal || freeSelf || Function('return this')();
                            /** Used for built-in method references. */var objectProto = Object.prototype;
                            /**
                             * Used to resolve the
                             * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
                             * of values.
                             */var objectToString = objectProto.toString;
                            /** Built-in value references. */var _Symbol2 = root.Symbol;
                            /** Used to convert symbols to primitives and strings. */var symbolProto = _Symbol2 ? _Symbol2.prototype : undefined,
                                symbolToString = symbolProto ? symbolProto.toString : undefined;

                            /**
                             * The base implementation of `_.toString` which doesn't convert nullish
                             * values to empty strings.
                             *
                             * @private
                             * @param {*} value The value to process.
                             * @returns {string} Returns the string.
                             */function baseToString(value) {// Exit early for strings to avoid a performance hit in some environments.
                                if (typeof value == 'string') {
                                    return value;
                                }
                                if (isSymbol(value)) {
                                    return symbolToString ? symbolToString.call(value) : '';
                                }
                                var result = value + '';
                                return result == '0' && 1 / value == -INFINITY ? '-0' : result;
                            }

                            /**
                             * Checks if `value` is object-like. A value is object-like if it's not `null`
                             * and has a `typeof` result of "object".
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                             * @example
                             *
                             * _.isObjectLike({});
                             * // => true
                             *
                             * _.isObjectLike([1, 2, 3]);
                             * // => true
                             *
                             * _.isObjectLike(_.noop);
                             * // => false
                             *
                             * _.isObjectLike(null);
                             * // => false
                             */function isObjectLike(value) {
                                return !!value && _typeof(value) == 'object';
                            }

                            /**
                             * Checks if `value` is classified as a `Symbol` primitive or object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
                             * @example
                             *
                             * _.isSymbol(Symbol.iterator);
                             * // => true
                             *
                             * _.isSymbol('abc');
                             * // => false
                             */function isSymbol(value) {
                                return _typeof(value) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
                            }

                            /**
                             * Converts `value` to a string. An empty string is returned for `null`
                             * and `undefined` values. The sign of `-0` is preserved.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to process.
                             * @returns {string} Returns the string.
                             * @example
                             *
                             * _.toString(null);
                             * // => ''
                             *
                             * _.toString(-0);
                             * // => '-0'
                             *
                             * _.toString([1, 2, 3]);
                             * // => '1,2,3'
                             */function toString(value) {
                                return value == null ? '' : baseToString(value);
                            }

                            /**
                             * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
                             * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category String
                             * @param {string} [string=''] The string to escape.
                             * @returns {string} Returns the escaped string.
                             * @example
                             *
                             * _.escapeRegExp('[lodash](https://lodash.com/)');
                             * // => '\[lodash\]\(https://lodash\.com/\)'
                             */function escapeRegExp(string) {
                                string = toString(string);
                                return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
                            }

                            module.exports = escapeRegExp;
                        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
                    }, {}],
                    35: [function (require, module, exports) {/**
                     * lodash (Custom Build) <https://lodash.com/>
                     * Build: `lodash modularize exports="npm" -o ./`
                     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
                     * Released under MIT license <https://lodash.com/license>
                     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
                     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
                     */
                        /** `Object#toString` result references. */var objectTag = '[object Object]';

                        /**
                         * Checks if `value` is a host object in IE < 9.
                         *
                         * @private
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
                         */function isHostObject(value) {// Many host objects are `Object` objects that can coerce to strings
// despite having improperly defined `toString` methods.
                            var result = false;
                            if (value != null && typeof value.toString != 'function') {
                                try {
                                    result = !!(value + '');
                                } catch (e) {
                                }
                            }
                            return result;
                        }

                        /**
                         * Creates a unary function that invokes `func` with its argument transformed.
                         *
                         * @private
                         * @param {Function} func The function to wrap.
                         * @param {Function} transform The argument transform.
                         * @returns {Function} Returns the new function.
                         */function overArg(func, transform) {
                            return function (arg) {
                                return func(transform(arg));
                            };
                        }

                        /** Used for built-in method references. */var funcProto = Function.prototype,
                            objectProto = Object.prototype;
                        /** Used to resolve the decompiled source of functions. */var funcToString = funcProto.toString;
                        /** Used to check objects for own properties. */var hasOwnProperty = objectProto.hasOwnProperty;
                        /** Used to infer the `Object` constructor. */var objectCtorString = funcToString.call(Object);
                        /**
                         * Used to resolve the
                         * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                         * of values.
                         */var objectToString = objectProto.toString;
                        /** Built-in value references. */var getPrototype = overArg(Object.getPrototypeOf, Object);

                        /**
                         * Checks if `value` is object-like. A value is object-like if it's not `null`
                         * and has a `typeof` result of "object".
                         *
                         * @static
                         * @memberOf _
                         * @since 4.0.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                         * @example
                         *
                         * _.isObjectLike({});
                         * // => true
                         *
                         * _.isObjectLike([1, 2, 3]);
                         * // => true
                         *
                         * _.isObjectLike(_.noop);
                         * // => false
                         *
                         * _.isObjectLike(null);
                         * // => false
                         */function isObjectLike(value) {
                            return !!value && _typeof(value) == 'object';
                        }

                        /**
                         * Checks if `value` is a plain object, that is, an object created by the
                         * `Object` constructor or one with a `[[Prototype]]` of `null`.
                         *
                         * @static
                         * @memberOf _
                         * @since 0.8.0
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                         * @example
                         *
                         * function Foo() {
                         *   this.a = 1;
                         * }
                         *
                         * _.isPlainObject(new Foo);
                         * // => false
                         *
                         * _.isPlainObject([1, 2, 3]);
                         * // => false
                         *
                         * _.isPlainObject({ 'x': 0, 'y': 0 });
                         * // => true
                         *
                         * _.isPlainObject(Object.create(null));
                         * // => true
                         */function isPlainObject(value) {
                            if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
                                return false;
                            }
                            var proto = getPrototype(value);
                            if (proto === null) {
                                return true;
                            }
                            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                            return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
                        }

                        module.exports = isPlainObject;
                    }, {}],
                    36: [function (require, module, exports) {/**
                     * lodash 4.0.1 (Custom Build) <https://lodash.com/>
                     * Build: `lodash modularize exports="npm" -o ./`
                     * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
                     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
                     * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
                     * Available under MIT license <https://lodash.com/license>
                     */
                        /** `Object#toString` result references. */var stringTag = '[object String]';
                        /** Used for built-in method references. */var objectProto = Object.prototype;
                        /**
                         * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
                         * of values.
                         */var objectToString = objectProto.toString;
                        /**
                         * Checks if `value` is classified as an `Array` object.
                         *
                         * @static
                         * @memberOf _
                         * @type Function
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
                         * @example
                         *
                         * _.isArray([1, 2, 3]);
                         * // => true
                         *
                         * _.isArray(document.body.children);
                         * // => false
                         *
                         * _.isArray('abc');
                         * // => false
                         *
                         * _.isArray(_.noop);
                         * // => false
                         */var isArray = Array.isArray;

                        /**
                         * Checks if `value` is object-like. A value is object-like if it's not `null`
                         * and has a `typeof` result of "object".
                         *
                         * @static
                         * @memberOf _
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                         * @example
                         *
                         * _.isObjectLike({});
                         * // => true
                         *
                         * _.isObjectLike([1, 2, 3]);
                         * // => true
                         *
                         * _.isObjectLike(_.noop);
                         * // => false
                         *
                         * _.isObjectLike(null);
                         * // => false
                         */function isObjectLike(value) {
                            return !!value && _typeof(value) == 'object';
                        }

                        /**
                         * Checks if `value` is classified as a `String` primitive or object.
                         *
                         * @static
                         * @memberOf _
                         * @category Lang
                         * @param {*} value The value to check.
                         * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
                         * @example
                         *
                         * _.isString('abc');
                         * // => true
                         *
                         * _.isString(1);
                         * // => false
                         */function isString(value) {
                            return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;
                        }

                        module.exports = isString;
                    }, {}],
                    37: [function (require, module, exports) {
                        (function (global) {/**
                         * Lodash (Custom Build) <https://lodash.com/>
                         * Build: `lodash modularize exports="npm" -o ./`
                         * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
                         * Released under MIT license <https://lodash.com/license>
                         * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
                         * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
                         */
                            /** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE = 200;
                            /** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED = '__lodash_hash_undefined__';
                            /** Used to detect hot functions by number of calls within a span of milliseconds. */var HOT_COUNT = 800,
                                HOT_SPAN = 16;
                            /** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER = 9007199254740991;
                            /** `Object#toString` result references. */var argsTag = '[object Arguments]',
                                arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]',
                                boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]',
                                funcTag = '[object Function]', genTag = '[object GeneratorFunction]',
                                mapTag = '[object Map]', numberTag = '[object Number]', nullTag = '[object Null]',
                                objectTag = '[object Object]', proxyTag = '[object Proxy]',
                                regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]',
                                undefinedTag = '[object Undefined]', weakMapTag = '[object WeakMap]';
                            var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]',
                                float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]',
                                int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]',
                                int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]',
                                uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]',
                                uint32Tag = '[object Uint32Array]';
                            /**
                             * Used to match `RegExp`
                             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
                             */var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
                            /** Used to detect host constructors (Safari). */var reIsHostCtor = /^\[object .+?Constructor\]$/;
                            /** Used to detect unsigned integer values. */var reIsUint = /^(?:0|[1-9]\d*)$/;
                            /** Used to identify `toStringTag` values of typed arrays. */var typedArrayTags = {};
                            typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
                            typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
                            /** Detect free variable `global` from Node.js. */var freeGlobal = _typeof(global) == 'object' && global && global.Object === Object && global;
                            /** Detect free variable `self`. */var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;
                            /** Used as a reference to the global object. */var root = freeGlobal || freeSelf || Function('return this')();
                            /** Detect free variable `exports`. */var freeExports = _typeof(exports) == 'object' && exports && !exports.nodeType && exports;
                            /** Detect free variable `module`. */var freeModule = freeExports && _typeof(module) == 'object' && module && !module.nodeType && module;
                            /** Detect the popular CommonJS extension `module.exports`. */var moduleExports = freeModule && freeModule.exports === freeExports;
                            /** Detect free variable `process` from Node.js. */var freeProcess = moduleExports && freeGlobal.process;
                            /** Used to access faster Node.js helpers. */var nodeUtil = function () {
                                try {// Use `util.types` for Node.js 10+.
                                    var types = freeModule && freeModule.require && freeModule.require('util').types;
                                    if (types) {
                                        return types;
                                    }// Legacy `process.binding('util')` for Node.js < 10.
                                    return freeProcess && freeProcess.binding && freeProcess.binding('util');
                                } catch (e) {
                                }
                            }();/* Node.js helper references. */
                            var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

                            /**
                             * A faster alternative to `Function#apply`, this function invokes `func`
                             * with the `this` binding of `thisArg` and the arguments of `args`.
                             *
                             * @private
                             * @param {Function} func The function to invoke.
                             * @param {*} thisArg The `this` binding of `func`.
                             * @param {Array} args The arguments to invoke `func` with.
                             * @returns {*} Returns the result of `func`.
                             */function apply(func, thisArg, args) {
                                switch (args.length) {
                                    case 0:
                                        return func.call(thisArg);
                                    case 1:
                                        return func.call(thisArg, args[0]);
                                    case 2:
                                        return func.call(thisArg, args[0], args[1]);
                                    case 3:
                                        return func.call(thisArg, args[0], args[1], args[2]);
                                }
                                return func.apply(thisArg, args);
                            }

                            /**
                             * The base implementation of `_.times` without support for iteratee shorthands
                             * or max array length checks.
                             *
                             * @private
                             * @param {number} n The number of times to invoke `iteratee`.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @returns {Array} Returns the array of results.
                             */function baseTimes(n, iteratee) {
                                var index = -1, result = Array(n);
                                while (++index < n) {
                                    result[index] = iteratee(index);
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.unary` without support for storing metadata.
                             *
                             * @private
                             * @param {Function} func The function to cap arguments for.
                             * @returns {Function} Returns the new capped function.
                             */function baseUnary(func) {
                                return function (value) {
                                    return func(value);
                                };
                            }

                            /**
                             * Gets the value at `key` of `object`.
                             *
                             * @private
                             * @param {Object} [object] The object to query.
                             * @param {string} key The key of the property to get.
                             * @returns {*} Returns the property value.
                             */function getValue(object, key) {
                                return object == null ? undefined : object[key];
                            }

                            /**
                             * Creates a unary function that invokes `func` with its argument transformed.
                             *
                             * @private
                             * @param {Function} func The function to wrap.
                             * @param {Function} transform The argument transform.
                             * @returns {Function} Returns the new function.
                             */function overArg(func, transform) {
                                return function (arg) {
                                    return func(transform(arg));
                                };
                            }

                            /** Used for built-in method references. */var arrayProto = Array.prototype,
                                funcProto = Function.prototype, objectProto = Object.prototype;
                            /** Used to detect overreaching core-js shims. */var coreJsData = root['__core-js_shared__'];
                            /** Used to resolve the decompiled source of functions. */var funcToString = funcProto.toString;
                            /** Used to check objects for own properties. */var hasOwnProperty = objectProto.hasOwnProperty;
                            /** Used to detect methods masquerading as native. */var maskSrcKey = function () {
                                var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
                                return uid ? 'Symbol(src)_1.' + uid : '';
                            }();
                            /**
                             * Used to resolve the
                             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                             * of values.
                             */var nativeObjectToString = objectProto.toString;
                            /** Used to infer the `Object` constructor. */var objectCtorString = funcToString.call(Object);
                            /** Used to detect if a method is native. */var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
                            /** Built-in value references. */var Buffer = moduleExports ? root.Buffer : undefined,
                                _Symbol3 = root.Symbol, Uint8Array = root.Uint8Array,
                                allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
                                getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create,
                                propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice,
                                symToStringTag = _Symbol3 ? _Symbol3.toStringTag : undefined;
                            var defineProperty = function () {
                                try {
                                    var func = getNative(Object, 'defineProperty');
                                    func({}, '', {});
                                    return func;
                                } catch (e) {
                                }
                            }();/* Built-in method references for those with the same name as other `lodash` methods. */
                            var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeMax = Math.max,
                                nativeNow = Date.now;/* Built-in method references that are verified to be native. */
                            var Map = getNative(root, 'Map'), nativeCreate = getNative(Object, 'create');
                            /**
                             * The base implementation of `_.create` without support for assigning
                             * properties to the created object.
                             *
                             * @private
                             * @param {Object} proto The object to inherit from.
                             * @returns {Object} Returns the new object.
                             */var baseCreate = function () {
                                function object() {
                                }

                                return function (proto) {
                                    if (!isObject(proto)) {
                                        return {};
                                    }
                                    if (objectCreate) {
                                        return objectCreate(proto);
                                    }
                                    object.prototype = proto;
                                    var result = new object();
                                    object.prototype = undefined;
                                    return result;
                                };
                            }();

                            /**
                             * Creates a hash object.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */function Hash(entries) {
                                var index = -1, length = entries == null ? 0 : entries.length;
                                this.clear();
                                while (++index < length) {
                                    var entry = entries[index];
                                    this.set(entry[0], entry[1]);
                                }
                            }

                            /**
                             * Removes all key-value entries from the hash.
                             *
                             * @private
                             * @name clear
                             * @memberOf Hash
                             */function hashClear() {
                                this.__data__ = nativeCreate ? nativeCreate(null) : {};
                                this.size = 0;
                            }

                            /**
                             * Removes `key` and its value from the hash.
                             *
                             * @private
                             * @name delete
                             * @memberOf Hash
                             * @param {Object} hash The hash to modify.
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */function hashDelete(key) {
                                var result = this.has(key) && delete this.__data__[key];
                                this.size -= result ? 1 : 0;
                                return result;
                            }

                            /**
                             * Gets the hash value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf Hash
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */function hashGet(key) {
                                var data = this.__data__;
                                if (nativeCreate) {
                                    var result = data[key];
                                    return result === HASH_UNDEFINED ? undefined : result;
                                }
                                return hasOwnProperty.call(data, key) ? data[key] : undefined;
                            }

                            /**
                             * Checks if a hash value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf Hash
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */function hashHas(key) {
                                var data = this.__data__;
                                return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
                            }

                            /**
                             * Sets the hash `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf Hash
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the hash instance.
                             */function hashSet(key, value) {
                                var data = this.__data__;
                                this.size += this.has(key) ? 0 : 1;
                                data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
                                return this;
                            }// Add methods to `Hash`.
                            Hash.prototype.clear = hashClear;
                            Hash.prototype['delete'] = hashDelete;
                            Hash.prototype.get = hashGet;
                            Hash.prototype.has = hashHas;
                            Hash.prototype.set = hashSet;

                            /**
                             * Creates an list cache object.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */function ListCache(entries) {
                                var index = -1, length = entries == null ? 0 : entries.length;
                                this.clear();
                                while (++index < length) {
                                    var entry = entries[index];
                                    this.set(entry[0], entry[1]);
                                }
                            }

                            /**
                             * Removes all key-value entries from the list cache.
                             *
                             * @private
                             * @name clear
                             * @memberOf ListCache
                             */function listCacheClear() {
                                this.__data__ = [];
                                this.size = 0;
                            }

                            /**
                             * Removes `key` and its value from the list cache.
                             *
                             * @private
                             * @name delete
                             * @memberOf ListCache
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */function listCacheDelete(key) {
                                var data = this.__data__, index = assocIndexOf(data, key);
                                if (index < 0) {
                                    return false;
                                }
                                var lastIndex = data.length - 1;
                                if (index == lastIndex) {
                                    data.pop();
                                } else {
                                    splice.call(data, index, 1);
                                }
                                --this.size;
                                return true;
                            }

                            /**
                             * Gets the list cache value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf ListCache
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */function listCacheGet(key) {
                                var data = this.__data__, index = assocIndexOf(data, key);
                                return index < 0 ? undefined : data[index][1];
                            }

                            /**
                             * Checks if a list cache value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf ListCache
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */function listCacheHas(key) {
                                return assocIndexOf(this.__data__, key) > -1;
                            }

                            /**
                             * Sets the list cache `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf ListCache
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the list cache instance.
                             */function listCacheSet(key, value) {
                                var data = this.__data__, index = assocIndexOf(data, key);
                                if (index < 0) {
                                    ++this.size;
                                    data.push([key, value]);
                                } else {
                                    data[index][1] = value;
                                }
                                return this;
                            }// Add methods to `ListCache`.
                            ListCache.prototype.clear = listCacheClear;
                            ListCache.prototype['delete'] = listCacheDelete;
                            ListCache.prototype.get = listCacheGet;
                            ListCache.prototype.has = listCacheHas;
                            ListCache.prototype.set = listCacheSet;

                            /**
                             * Creates a map cache object to store key-value pairs.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */function MapCache(entries) {
                                var index = -1, length = entries == null ? 0 : entries.length;
                                this.clear();
                                while (++index < length) {
                                    var entry = entries[index];
                                    this.set(entry[0], entry[1]);
                                }
                            }

                            /**
                             * Removes all key-value entries from the map.
                             *
                             * @private
                             * @name clear
                             * @memberOf MapCache
                             */function mapCacheClear() {
                                this.size = 0;
                                this.__data__ = {
                                    'hash': new Hash(),
                                    'map': new (Map || ListCache)(),
                                    'string': new Hash()
                                };
                            }

                            /**
                             * Removes `key` and its value from the map.
                             *
                             * @private
                             * @name delete
                             * @memberOf MapCache
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */function mapCacheDelete(key) {
                                var result = getMapData(this, key)['delete'](key);
                                this.size -= result ? 1 : 0;
                                return result;
                            }

                            /**
                             * Gets the map value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf MapCache
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */function mapCacheGet(key) {
                                return getMapData(this, key).get(key);
                            }

                            /**
                             * Checks if a map value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf MapCache
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */function mapCacheHas(key) {
                                return getMapData(this, key).has(key);
                            }

                            /**
                             * Sets the map `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf MapCache
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the map cache instance.
                             */function mapCacheSet(key, value) {
                                var data = getMapData(this, key), size = data.size;
                                data.set(key, value);
                                this.size += data.size == size ? 0 : 1;
                                return this;
                            }// Add methods to `MapCache`.
                            MapCache.prototype.clear = mapCacheClear;
                            MapCache.prototype['delete'] = mapCacheDelete;
                            MapCache.prototype.get = mapCacheGet;
                            MapCache.prototype.has = mapCacheHas;
                            MapCache.prototype.set = mapCacheSet;

                            /**
                             * Creates a stack cache object to store key-value pairs.
                             *
                             * @private
                             * @constructor
                             * @param {Array} [entries] The key-value pairs to cache.
                             */function Stack(entries) {
                                var data = this.__data__ = new ListCache(entries);
                                this.size = data.size;
                            }

                            /**
                             * Removes all key-value entries from the stack.
                             *
                             * @private
                             * @name clear
                             * @memberOf Stack
                             */function stackClear() {
                                this.__data__ = new ListCache();
                                this.size = 0;
                            }

                            /**
                             * Removes `key` and its value from the stack.
                             *
                             * @private
                             * @name delete
                             * @memberOf Stack
                             * @param {string} key The key of the value to remove.
                             * @returns {boolean} Returns `true` if the entry was removed, else `false`.
                             */function stackDelete(key) {
                                var data = this.__data__, result = data['delete'](key);
                                this.size = data.size;
                                return result;
                            }

                            /**
                             * Gets the stack value for `key`.
                             *
                             * @private
                             * @name get
                             * @memberOf Stack
                             * @param {string} key The key of the value to get.
                             * @returns {*} Returns the entry value.
                             */function stackGet(key) {
                                return this.__data__.get(key);
                            }

                            /**
                             * Checks if a stack value for `key` exists.
                             *
                             * @private
                             * @name has
                             * @memberOf Stack
                             * @param {string} key The key of the entry to check.
                             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
                             */function stackHas(key) {
                                return this.__data__.has(key);
                            }

                            /**
                             * Sets the stack `key` to `value`.
                             *
                             * @private
                             * @name set
                             * @memberOf Stack
                             * @param {string} key The key of the value to set.
                             * @param {*} value The value to set.
                             * @returns {Object} Returns the stack cache instance.
                             */function stackSet(key, value) {
                                var data = this.__data__;
                                if (data instanceof ListCache) {
                                    var pairs = data.__data__;
                                    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                                        pairs.push([key, value]);
                                        this.size = ++data.size;
                                        return this;
                                    }
                                    data = this.__data__ = new MapCache(pairs);
                                }
                                data.set(key, value);
                                this.size = data.size;
                                return this;
                            }// Add methods to `Stack`.
                            Stack.prototype.clear = stackClear;
                            Stack.prototype['delete'] = stackDelete;
                            Stack.prototype.get = stackGet;
                            Stack.prototype.has = stackHas;
                            Stack.prototype.set = stackSet;

                            /**
                             * Creates an array of the enumerable property names of the array-like `value`.
                             *
                             * @private
                             * @param {*} value The value to query.
                             * @param {boolean} inherited Specify returning inherited property names.
                             * @returns {Array} Returns the array of property names.
                             */function arrayLikeKeys(value, inherited) {
                                var isArr = isArray(value), isArg = !isArr && isArguments(value),
                                    isBuff = !isArr && !isArg && isBuffer(value),
                                    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
                                    skipIndexes = isArr || isArg || isBuff || isType,
                                    result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
                                for (var key in value) {
                                    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (// Safari 9 has enumerable `arguments.length` in strict mode.
                                        key == 'length' ||// Node.js 0.10 has enumerable non-index properties on buffers.
                                        isBuff && (key == 'offset' || key == 'parent') ||// PhantomJS 2 has enumerable non-index properties on typed arrays.
                                        isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||// Skip index properties.
                                        isIndex(key, length)))) {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }

                            /**
                             * This function is like `assignValue` except that it doesn't assign
                             * `undefined` values.
                             *
                             * @private
                             * @param {Object} object The object to modify.
                             * @param {string} key The key of the property to assign.
                             * @param {*} value The value to assign.
                             */function assignMergeValue(object, key, value) {
                                if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
                                    baseAssignValue(object, key, value);
                                }
                            }

                            /**
                             * Assigns `value` to `key` of `object` if the existing value is not equivalent
                             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * for equality comparisons.
                             *
                             * @private
                             * @param {Object} object The object to modify.
                             * @param {string} key The key of the property to assign.
                             * @param {*} value The value to assign.
                             */function assignValue(object, key, value) {
                                var objValue = object[key];
                                if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
                                    baseAssignValue(object, key, value);
                                }
                            }

                            /**
                             * Gets the index at which the `key` is found in `array` of key-value pairs.
                             *
                             * @private
                             * @param {Array} array The array to inspect.
                             * @param {*} key The key to search for.
                             * @returns {number} Returns the index of the matched value, else `-1`.
                             */function assocIndexOf(array, key) {
                                var length = array.length;
                                while (length--) {
                                    if (eq(array[length][0], key)) {
                                        return length;
                                    }
                                }
                                return -1;
                            }

                            /**
                             * The base implementation of `assignValue` and `assignMergeValue` without
                             * value checks.
                             *
                             * @private
                             * @param {Object} object The object to modify.
                             * @param {string} key The key of the property to assign.
                             * @param {*} value The value to assign.
                             */function baseAssignValue(object, key, value) {
                                if (key == '__proto__' && defineProperty) {
                                    defineProperty(object, key, {
                                        'configurable': true,
                                        'enumerable': true,
                                        'value': value,
                                        'writable': true
                                    });
                                } else {
                                    object[key] = value;
                                }
                            }

                            /**
                             * The base implementation of `baseForOwn` which iterates over `object`
                             * properties returned by `keysFunc` and invokes `iteratee` for each property.
                             * Iteratee functions may exit iteration early by explicitly returning `false`.
                             *
                             * @private
                             * @param {Object} object The object to iterate over.
                             * @param {Function} iteratee The function invoked per iteration.
                             * @param {Function} keysFunc The function to get the keys of `object`.
                             * @returns {Object} Returns `object`.
                             */var baseFor = createBaseFor();

                            /**
                             * The base implementation of `getTag` without fallbacks for buggy environments.
                             *
                             * @private
                             * @param {*} value The value to query.
                             * @returns {string} Returns the `toStringTag`.
                             */function baseGetTag(value) {
                                if (value == null) {
                                    return value === undefined ? undefinedTag : nullTag;
                                }
                                return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
                            }

                            /**
                             * The base implementation of `_.isArguments`.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                             */function baseIsArguments(value) {
                                return isObjectLike(value) && baseGetTag(value) == argsTag;
                            }

                            /**
                             * The base implementation of `_.isNative` without bad shim checks.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a native function,
                             *  else `false`.
                             */function baseIsNative(value) {
                                if (!isObject(value) || isMasked(value)) {
                                    return false;
                                }
                                var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
                                return pattern.test(toSource(value));
                            }

                            /**
                             * The base implementation of `_.isTypedArray` without Node.js optimizations.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                             */function baseIsTypedArray(value) {
                                return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
                            }

                            /**
                             * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names.
                             */function baseKeysIn(object) {
                                if (!isObject(object)) {
                                    return nativeKeysIn(object);
                                }
                                var isProto = isPrototype(object), result = [];
                                for (var key in object) {
                                    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }

                            /**
                             * The base implementation of `_.merge` without support for multiple sources.
                             *
                             * @private
                             * @param {Object} object The destination object.
                             * @param {Object} source The source object.
                             * @param {number} srcIndex The index of `source`.
                             * @param {Function} [customizer] The function to customize merged values.
                             * @param {Object} [stack] Tracks traversed source values and their merged
                             *  counterparts.
                             */function baseMerge(object, source, srcIndex, customizer, stack) {
                                if (object === source) {
                                    return;
                                }
                                baseFor(source, function (srcValue, key) {
                                    stack || (stack = new Stack());
                                    if (isObject(srcValue)) {
                                        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                                    } else {
                                        var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
                                        if (newValue === undefined) {
                                            newValue = srcValue;
                                        }
                                        assignMergeValue(object, key, newValue);
                                    }
                                }, keysIn);
                            }

                            /**
                             * A specialized version of `baseMerge` for arrays and objects which performs
                             * deep merges and tracks traversed objects enabling objects with circular
                             * references to be merged.
                             *
                             * @private
                             * @param {Object} object The destination object.
                             * @param {Object} source The source object.
                             * @param {string} key The key of the value to merge.
                             * @param {number} srcIndex The index of `source`.
                             * @param {Function} mergeFunc The function to merge values.
                             * @param {Function} [customizer] The function to customize assigned values.
                             * @param {Object} [stack] Tracks traversed source values and their merged
                             *  counterparts.
                             */function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
                                var objValue = safeGet(object, key), srcValue = safeGet(source, key),
                                    stacked = stack.get(srcValue);
                                if (stacked) {
                                    assignMergeValue(object, key, stacked);
                                    return;
                                }
                                var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
                                var isCommon = newValue === undefined;
                                if (isCommon) {
                                    var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue),
                                        isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                                    newValue = srcValue;
                                    if (isArr || isBuff || isTyped) {
                                        if (isArray(objValue)) {
                                            newValue = objValue;
                                        } else if (isArrayLikeObject(objValue)) {
                                            newValue = copyArray(objValue);
                                        } else if (isBuff) {
                                            isCommon = false;
                                            newValue = cloneBuffer(srcValue, true);
                                        } else if (isTyped) {
                                            isCommon = false;
                                            newValue = cloneTypedArray(srcValue, true);
                                        } else {
                                            newValue = [];
                                        }
                                    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                                        newValue = objValue;
                                        if (isArguments(objValue)) {
                                            newValue = toPlainObject(objValue);
                                        } else if (!isObject(objValue) || isFunction(objValue)) {
                                            newValue = initCloneObject(srcValue);
                                        }
                                    } else {
                                        isCommon = false;
                                    }
                                }
                                if (isCommon) {// Recursively merge objects and arrays (susceptible to call stack limits).
                                    stack.set(srcValue, newValue);
                                    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                                    stack['delete'](srcValue);
                                }
                                assignMergeValue(object, key, newValue);
                            }

                            /**
                             * The base implementation of `_.rest` which doesn't validate or coerce arguments.
                             *
                             * @private
                             * @param {Function} func The function to apply a rest parameter to.
                             * @param {number} [start=func.length-1] The start position of the rest parameter.
                             * @returns {Function} Returns the new function.
                             */function baseRest(func, start) {
                                return setToString(overRest(func, start, identity), func + '');
                            }

                            /**
                             * The base implementation of `setToString` without support for hot loop shorting.
                             *
                             * @private
                             * @param {Function} func The function to modify.
                             * @param {Function} string The `toString` result.
                             * @returns {Function} Returns `func`.
                             */var baseSetToString = !defineProperty ? identity : function (func, string) {
                                return defineProperty(func, 'toString', {
                                    'configurable': true,
                                    'enumerable': false,
                                    'value': constant(string),
                                    'writable': true
                                });
                            };

                            /**
                             * Creates a clone of  `buffer`.
                             *
                             * @private
                             * @param {Buffer} buffer The buffer to clone.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Buffer} Returns the cloned buffer.
                             */function cloneBuffer(buffer, isDeep) {
                                if (isDeep) {
                                    return buffer.slice();
                                }
                                var length = buffer.length,
                                    result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
                                buffer.copy(result);
                                return result;
                            }

                            /**
                             * Creates a clone of `arrayBuffer`.
                             *
                             * @private
                             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
                             * @returns {ArrayBuffer} Returns the cloned array buffer.
                             */function cloneArrayBuffer(arrayBuffer) {
                                var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
                                new Uint8Array(result).set(new Uint8Array(arrayBuffer));
                                return result;
                            }

                            /**
                             * Creates a clone of `typedArray`.
                             *
                             * @private
                             * @param {Object} typedArray The typed array to clone.
                             * @param {boolean} [isDeep] Specify a deep clone.
                             * @returns {Object} Returns the cloned typed array.
                             */function cloneTypedArray(typedArray, isDeep) {
                                var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
                                return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
                            }

                            /**
                             * Copies the values of `source` to `array`.
                             *
                             * @private
                             * @param {Array} source The array to copy values from.
                             * @param {Array} [array=[]] The array to copy values to.
                             * @returns {Array} Returns `array`.
                             */function copyArray(source, array) {
                                var index = -1, length = source.length;
                                array || (array = Array(length));
                                while (++index < length) {
                                    array[index] = source[index];
                                }
                                return array;
                            }

                            /**
                             * Copies properties of `source` to `object`.
                             *
                             * @private
                             * @param {Object} source The object to copy properties from.
                             * @param {Array} props The property identifiers to copy.
                             * @param {Object} [object={}] The object to copy properties to.
                             * @param {Function} [customizer] The function to customize copied values.
                             * @returns {Object} Returns `object`.
                             */function copyObject(source, props, object, customizer) {
                                var isNew = !object;
                                object || (object = {});
                                var index = -1, length = props.length;
                                while (++index < length) {
                                    var key = props[index];
                                    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                                    if (newValue === undefined) {
                                        newValue = source[key];
                                    }
                                    if (isNew) {
                                        baseAssignValue(object, key, newValue);
                                    } else {
                                        assignValue(object, key, newValue);
                                    }
                                }
                                return object;
                            }

                            /**
                             * Creates a function like `_.assign`.
                             *
                             * @private
                             * @param {Function} assigner The function to assign values.
                             * @returns {Function} Returns the new assigner function.
                             */function createAssigner(assigner) {
                                return baseRest(function (object, sources) {
                                    var index = -1, length = sources.length,
                                        customizer = length > 1 ? sources[length - 1] : undefined,
                                        guard = length > 2 ? sources[2] : undefined;
                                    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
                                    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                                        customizer = length < 3 ? undefined : customizer;
                                        length = 1;
                                    }
                                    object = Object(object);
                                    while (++index < length) {
                                        var source = sources[index];
                                        if (source) {
                                            assigner(object, source, index, customizer);
                                        }
                                    }
                                    return object;
                                });
                            }

                            /**
                             * Creates a base function for methods like `_.forIn` and `_.forOwn`.
                             *
                             * @private
                             * @param {boolean} [fromRight] Specify iterating from right to left.
                             * @returns {Function} Returns the new base function.
                             */function createBaseFor(fromRight) {
                                return function (object, iteratee, keysFunc) {
                                    var index = -1, iterable = Object(object), props = keysFunc(object),
                                        length = props.length;
                                    while (length--) {
                                        var key = props[fromRight ? length : ++index];
                                        if (iteratee(iterable[key], key, iterable) === false) {
                                            break;
                                        }
                                    }
                                    return object;
                                };
                            }

                            /**
                             * Gets the data for `map`.
                             *
                             * @private
                             * @param {Object} map The map to query.
                             * @param {string} key The reference key.
                             * @returns {*} Returns the map data.
                             */function getMapData(map, key) {
                                var data = map.__data__;
                                return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
                            }

                            /**
                             * Gets the native function at `key` of `object`.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {string} key The key of the method to get.
                             * @returns {*} Returns the function if it's native, else `undefined`.
                             */function getNative(object, key) {
                                var value = getValue(object, key);
                                return baseIsNative(value) ? value : undefined;
                            }

                            /**
                             * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
                             *
                             * @private
                             * @param {*} value The value to query.
                             * @returns {string} Returns the raw `toStringTag`.
                             */function getRawTag(value) {
                                var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
                                try {
                                    value[symToStringTag] = undefined;
                                    var unmasked = true;
                                } catch (e) {
                                }
                                var result = nativeObjectToString.call(value);
                                if (unmasked) {
                                    if (isOwn) {
                                        value[symToStringTag] = tag;
                                    } else {
                                        delete value[symToStringTag];
                                    }
                                }
                                return result;
                            }

                            /**
                             * Initializes an object clone.
                             *
                             * @private
                             * @param {Object} object The object to clone.
                             * @returns {Object} Returns the initialized clone.
                             */function initCloneObject(object) {
                                return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
                            }

                            /**
                             * Checks if `value` is a valid array-like index.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
                             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
                             */function isIndex(value, length) {
                                var type = _typeof(value);
                                length = length == null ? MAX_SAFE_INTEGER : length;
                                return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
                            }

                            /**
                             * Checks if the given arguments are from an iteratee call.
                             *
                             * @private
                             * @param {*} value The potential iteratee value argument.
                             * @param {*} index The potential iteratee index or key argument.
                             * @param {*} object The potential iteratee object argument.
                             * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
                             *  else `false`.
                             */function isIterateeCall(value, index, object) {
                                if (!isObject(object)) {
                                    return false;
                                }
                                var type = _typeof(index);
                                if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
                                    return eq(object[index], value);
                                }
                                return false;
                            }

                            /**
                             * Checks if `value` is suitable for use as unique object key.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
                             */function isKeyable(value) {
                                var type = _typeof(value);
                                return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
                            }

                            /**
                             * Checks if `func` has its source masked.
                             *
                             * @private
                             * @param {Function} func The function to check.
                             * @returns {boolean} Returns `true` if `func` is masked, else `false`.
                             */function isMasked(func) {
                                return !!maskSrcKey && maskSrcKey in func;
                            }

                            /**
                             * Checks if `value` is likely a prototype object.
                             *
                             * @private
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
                             */function isPrototype(value) {
                                var Ctor = value && value.constructor,
                                    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
                                return value === proto;
                            }

                            /**
                             * This function is like
                             * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
                             * except that it includes inherited enumerable properties.
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names.
                             */function nativeKeysIn(object) {
                                var result = [];
                                if (object != null) {
                                    for (var key in Object(object)) {
                                        result.push(key);
                                    }
                                }
                                return result;
                            }

                            /**
                             * Converts `value` to a string using `Object.prototype.toString`.
                             *
                             * @private
                             * @param {*} value The value to convert.
                             * @returns {string} Returns the converted string.
                             */function objectToString(value) {
                                return nativeObjectToString.call(value);
                            }

                            /**
                             * A specialized version of `baseRest` which transforms the rest array.
                             *
                             * @private
                             * @param {Function} func The function to apply a rest parameter to.
                             * @param {number} [start=func.length-1] The start position of the rest parameter.
                             * @param {Function} transform The rest array transform.
                             * @returns {Function} Returns the new function.
                             */function overRest(func, start, transform) {
                                start = nativeMax(start === undefined ? func.length - 1 : start, 0);
                                return function () {
                                    var args = arguments, index = -1, length = nativeMax(args.length - start, 0),
                                        array = Array(length);
                                    while (++index < length) {
                                        array[index] = args[start + index];
                                    }
                                    index = -1;
                                    var otherArgs = Array(start + 1);
                                    while (++index < start) {
                                        otherArgs[index] = args[index];
                                    }
                                    otherArgs[start] = transform(array);
                                    return apply(func, this, otherArgs);
                                };
                            }

                            /**
                             * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
                             *
                             * @private
                             * @param {Object} object The object to query.
                             * @param {string} key The key of the property to get.
                             * @returns {*} Returns the property value.
                             */function safeGet(object, key) {
                                if (key === 'constructor' && typeof object[key] === 'function') {
                                    return;
                                }
                                if (key == '__proto__') {
                                    return;
                                }
                                return object[key];
                            }

                            /**
                             * Sets the `toString` method of `func` to return `string`.
                             *
                             * @private
                             * @param {Function} func The function to modify.
                             * @param {Function} string The `toString` result.
                             * @returns {Function} Returns `func`.
                             */var setToString = shortOut(baseSetToString);

                            /**
                             * Creates a function that'll short out and invoke `identity` instead
                             * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
                             * milliseconds.
                             *
                             * @private
                             * @param {Function} func The function to restrict.
                             * @returns {Function} Returns the new shortable function.
                             */function shortOut(func) {
                                var count = 0, lastCalled = 0;
                                return function () {
                                    var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                                    lastCalled = stamp;
                                    if (remaining > 0) {
                                        if (++count >= HOT_COUNT) {
                                            return arguments[0];
                                        }
                                    } else {
                                        count = 0;
                                    }
                                    return func.apply(undefined, arguments);
                                };
                            }

                            /**
                             * Converts `func` to its source code.
                             *
                             * @private
                             * @param {Function} func The function to convert.
                             * @returns {string} Returns the source code.
                             */function toSource(func) {
                                if (func != null) {
                                    try {
                                        return funcToString.call(func);
                                    } catch (e) {
                                    }
                                    try {
                                        return func + '';
                                    } catch (e) {
                                    }
                                }
                                return '';
                            }

                            /**
                             * Performs a
                             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
                             * comparison between two values to determine if they are equivalent.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to compare.
                             * @param {*} other The other value to compare.
                             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
                             * @example
                             *
                             * var object = { 'a': 1 };
                             * var other = { 'a': 1 };
                             *
                             * _.eq(object, object);
                             * // => true
                             *
                             * _.eq(object, other);
                             * // => false
                             *
                             * _.eq('a', 'a');
                             * // => true
                             *
                             * _.eq('a', Object('a'));
                             * // => false
                             *
                             * _.eq(NaN, NaN);
                             * // => true
                             */function eq(value, other) {
                                return value === other || value !== value && other !== other;
                            }

                            /**
                             * Checks if `value` is likely an `arguments` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an `arguments` object,
                             *  else `false`.
                             * @example
                             *
                             * _.isArguments(function() { return arguments; }());
                             * // => true
                             *
                             * _.isArguments([1, 2, 3]);
                             * // => false
                             */var isArguments = baseIsArguments(function () {
                                return arguments;
                            }()) ? baseIsArguments : function (value) {
                                return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
                            };
                            /**
                             * Checks if `value` is classified as an `Array` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an array, else `false`.
                             * @example
                             *
                             * _.isArray([1, 2, 3]);
                             * // => true
                             *
                             * _.isArray(document.body.children);
                             * // => false
                             *
                             * _.isArray('abc');
                             * // => false
                             *
                             * _.isArray(_.noop);
                             * // => false
                             */var isArray = Array.isArray;

                            /**
                             * Checks if `value` is array-like. A value is considered array-like if it's
                             * not a function and has a `value.length` that's an integer greater than or
                             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
                             * @example
                             *
                             * _.isArrayLike([1, 2, 3]);
                             * // => true
                             *
                             * _.isArrayLike(document.body.children);
                             * // => true
                             *
                             * _.isArrayLike('abc');
                             * // => true
                             *
                             * _.isArrayLike(_.noop);
                             * // => false
                             */function isArrayLike(value) {
                                return value != null && isLength(value.length) && !isFunction(value);
                            }

                            /**
                             * This method is like `_.isArrayLike` except that it also checks if `value`
                             * is an object.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an array-like object,
                             *  else `false`.
                             * @example
                             *
                             * _.isArrayLikeObject([1, 2, 3]);
                             * // => true
                             *
                             * _.isArrayLikeObject(document.body.children);
                             * // => true
                             *
                             * _.isArrayLikeObject('abc');
                             * // => false
                             *
                             * _.isArrayLikeObject(_.noop);
                             * // => false
                             */function isArrayLikeObject(value) {
                                return isObjectLike(value) && isArrayLike(value);
                            }

                            /**
                             * Checks if `value` is a buffer.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.3.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
                             * @example
                             *
                             * _.isBuffer(new Buffer(2));
                             * // => true
                             *
                             * _.isBuffer(new Uint8Array(2));
                             * // => false
                             */var isBuffer = nativeIsBuffer || stubFalse;

                            /**
                             * Checks if `value` is classified as a `Function` object.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a function, else `false`.
                             * @example
                             *
                             * _.isFunction(_);
                             * // => true
                             *
                             * _.isFunction(/abc/);
                             * // => false
                             */function isFunction(value) {
                                if (!isObject(value)) {
                                    return false;
                                }// The use of `Object#toString` avoids issues with the `typeof` operator
// in Safari 9 which returns 'object' for typed arrays and other constructors.
                                var tag = baseGetTag(value);
                                return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
                            }

                            /**
                             * Checks if `value` is a valid array-like length.
                             *
                             * **Note:** This method is loosely based on
                             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
                             * @example
                             *
                             * _.isLength(3);
                             * // => true
                             *
                             * _.isLength(Number.MIN_VALUE);
                             * // => false
                             *
                             * _.isLength(Infinity);
                             * // => false
                             *
                             * _.isLength('3');
                             * // => false
                             */function isLength(value) {
                                return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
                            }

                            /**
                             * Checks if `value` is the
                             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                             *
                             * @static
                             * @memberOf _
                             * @since 0.1.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                             * @example
                             *
                             * _.isObject({});
                             * // => true
                             *
                             * _.isObject([1, 2, 3]);
                             * // => true
                             *
                             * _.isObject(_.noop);
                             * // => true
                             *
                             * _.isObject(null);
                             * // => false
                             */function isObject(value) {
                                var type = _typeof(value);
                                return value != null && (type == 'object' || type == 'function');
                            }

                            /**
                             * Checks if `value` is object-like. A value is object-like if it's not `null`
                             * and has a `typeof` result of "object".
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
                             * @example
                             *
                             * _.isObjectLike({});
                             * // => true
                             *
                             * _.isObjectLike([1, 2, 3]);
                             * // => true
                             *
                             * _.isObjectLike(_.noop);
                             * // => false
                             *
                             * _.isObjectLike(null);
                             * // => false
                             */function isObjectLike(value) {
                                return value != null && _typeof(value) == 'object';
                            }

                            /**
                             * Checks if `value` is a plain object, that is, an object created by the
                             * `Object` constructor or one with a `[[Prototype]]` of `null`.
                             *
                             * @static
                             * @memberOf _
                             * @since 0.8.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             * }
                             *
                             * _.isPlainObject(new Foo);
                             * // => false
                             *
                             * _.isPlainObject([1, 2, 3]);
                             * // => false
                             *
                             * _.isPlainObject({ 'x': 0, 'y': 0 });
                             * // => true
                             *
                             * _.isPlainObject(Object.create(null));
                             * // => true
                             */function isPlainObject(value) {
                                if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
                                    return false;
                                }
                                var proto = getPrototype(value);
                                if (proto === null) {
                                    return true;
                                }
                                var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
                                return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
                            }

                            /**
                             * Checks if `value` is classified as a typed array.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Lang
                             * @param {*} value The value to check.
                             * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
                             * @example
                             *
                             * _.isTypedArray(new Uint8Array);
                             * // => true
                             *
                             * _.isTypedArray([]);
                             * // => false
                             */var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

                            /**
                             * Converts `value` to a plain object flattening inherited enumerable string
                             * keyed properties of `value` to own properties of the plain object.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Lang
                             * @param {*} value The value to convert.
                             * @returns {Object} Returns the converted plain object.
                             * @example
                             *
                             * function Foo() {
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.assign({ 'a': 1 }, new Foo);
                             * // => { 'a': 1, 'b': 2 }
                             *
                             * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
                             * // => { 'a': 1, 'b': 2, 'c': 3 }
                             */function toPlainObject(value) {
                                return copyObject(value, keysIn(value));
                            }

                            /**
                             * Creates an array of the own and inherited enumerable property names of `object`.
                             *
                             * **Note:** Non-object values are coerced to objects.
                             *
                             * @static
                             * @memberOf _
                             * @since 3.0.0
                             * @category Object
                             * @param {Object} object The object to query.
                             * @returns {Array} Returns the array of property names.
                             * @example
                             *
                             * function Foo() {
                             *   this.a = 1;
                             *   this.b = 2;
                             * }
                             *
                             * Foo.prototype.c = 3;
                             *
                             * _.keysIn(new Foo);
                             * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
                             */function keysIn(object) {
                                return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
                            }

                            /**
                             * This method is like `_.merge` except that it accepts `customizer` which
                             * is invoked to produce the merged values of the destination and source
                             * properties. If `customizer` returns `undefined`, merging is handled by the
                             * method instead. The `customizer` is invoked with six arguments:
                             * (objValue, srcValue, key, object, source, stack).
                             *
                             * **Note:** This method mutates `object`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.0.0
                             * @category Object
                             * @param {Object} object The destination object.
                             * @param {...Object} sources The source objects.
                             * @param {Function} customizer The function to customize assigned values.
                             * @returns {Object} Returns `object`.
                             * @example
                             *
                             * function customizer(objValue, srcValue) {
                             *   if (_.isArray(objValue)) {
                             *     return objValue.concat(srcValue);
                             *   }
                             * }
                             *
                             * var object = { 'a': [1], 'b': [2] };
                             * var other = { 'a': [3], 'b': [4] };
                             *
                             * _.mergeWith(object, other, customizer);
                             * // => { 'a': [1, 3], 'b': [2, 4] }
                             */var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
                                baseMerge(object, source, srcIndex, customizer);
                            });

                            /**
                             * Creates a function that returns `value`.
                             *
                             * @static
                             * @memberOf _
                             * @since 2.4.0
                             * @category Util
                             * @param {*} value The value to return from the new function.
                             * @returns {Function} Returns the new constant function.
                             * @example
                             *
                             * var objects = _.times(2, _.constant({ 'a': 1 }));
                             *
                             * console.log(objects);
                             * // => [{ 'a': 1 }, { 'a': 1 }]
                             *
                             * console.log(objects[0] === objects[1]);
                             * // => true
                             */function constant(value) {
                                return function () {
                                    return value;
                                };
                            }

                            /**
                             * This method returns the first argument it receives.
                             *
                             * @static
                             * @since 0.1.0
                             * @memberOf _
                             * @category Util
                             * @param {*} value Any value.
                             * @returns {*} Returns `value`.
                             * @example
                             *
                             * var object = { 'a': 1 };
                             *
                             * console.log(_.identity(object) === object);
                             * // => true
                             */function identity(value) {
                                return value;
                            }

                            /**
                             * This method returns `false`.
                             *
                             * @static
                             * @memberOf _
                             * @since 4.13.0
                             * @category Util
                             * @returns {boolean} Returns `false`.
                             * @example
                             *
                             * _.times(2, _.stubFalse);
                             * // => [false, false]
                             */function stubFalse() {
                                return false;
                            }

                            module.exports = mergeWith;
                        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
                    }, {}],
                    38: [function (require, module, exports) {
                        (function (process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
                            function normalizeArray(parts, allowAboveRoot) {// if the path tries to go above the root, `up` ends up > 0
                                var up = 0;
                                for (var i = parts.length - 1; i >= 0; i--) {
                                    var last = parts[i];
                                    if (last === '.') {
                                        parts.splice(i, 1);
                                    } else if (last === '..') {
                                        parts.splice(i, 1);
                                        up++;
                                    } else if (up) {
                                        parts.splice(i, 1);
                                        up--;
                                    }
                                }// if the path is allowed to go above the root, restore leading ..s
                                if (allowAboveRoot) {
                                    for (; up--; up) {
                                        parts.unshift('..');
                                    }
                                }
                                return parts;
                            }// path.resolve([from ...], to)
// posix version
                            exports.resolve = function () {
                                var resolvedPath = '', resolvedAbsolute = false;
                                for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                                    var path = i >= 0 ? arguments[i] : process.cwd();// Skip empty and invalid entries
                                    if (typeof path !== 'string') {
                                        throw new TypeError('Arguments to path.resolve must be strings');
                                    } else if (!path) {
                                        continue;
                                    }
                                    resolvedPath = path + '/' + resolvedPath;
                                    resolvedAbsolute = path.charAt(0) === '/';
                                }// At this point the path should be resolved to a full absolute path, but
// handle relative paths to be safe (might happen when process.cwd() fails)
// Normalize the path
                                resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
                                    return !!p;
                                }), !resolvedAbsolute).join('/');
                                return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
                            };// path.normalize(path)
// posix version
                            exports.normalize = function (path) {
                                var isAbsolute = exports.isAbsolute(path), trailingSlash = substr(path, -1) === '/';// Normalize the path
                                path = normalizeArray(filter(path.split('/'), function (p) {
                                    return !!p;
                                }), !isAbsolute).join('/');
                                if (!path && !isAbsolute) {
                                    path = '.';
                                }
                                if (path && trailingSlash) {
                                    path += '/';
                                }
                                return (isAbsolute ? '/' : '') + path;
                            };// posix version
                            exports.isAbsolute = function (path) {
                                return path.charAt(0) === '/';
                            };// posix version
                            exports.join = function () {
                                var paths = Array.prototype.slice.call(arguments, 0);
                                return exports.normalize(filter(paths, function (p, index) {
                                    if (typeof p !== 'string') {
                                        throw new TypeError('Arguments to path.join must be strings');
                                    }
                                    return p;
                                }).join('/'));
                            };// path.relative(from, to)
// posix version
                            exports.relative = function (from, to) {
                                from = exports.resolve(from).substr(1);
                                to = exports.resolve(to).substr(1);

                                function trim(arr) {
                                    var start = 0;
                                    for (; start < arr.length; start++) {
                                        if (arr[start] !== '') break;
                                    }
                                    var end = arr.length - 1;
                                    for (; end >= 0; end--) {
                                        if (arr[end] !== '') break;
                                    }
                                    if (start > end) return [];
                                    return arr.slice(start, end - start + 1);
                                }

                                var fromParts = trim(from.split('/'));
                                var toParts = trim(to.split('/'));
                                var length = Math.min(fromParts.length, toParts.length);
                                var samePartsLength = length;
                                for (var i = 0; i < length; i++) {
                                    if (fromParts[i] !== toParts[i]) {
                                        samePartsLength = i;
                                        break;
                                    }
                                }
                                var outputParts = [];
                                for (var i = samePartsLength; i < fromParts.length; i++) {
                                    outputParts.push('..');
                                }
                                outputParts = outputParts.concat(toParts.slice(samePartsLength));
                                return outputParts.join('/');
                            };
                            exports.sep = '/';
                            exports.delimiter = ':';
                            exports.dirname = function (path) {
                                if (typeof path !== 'string') path = path + '';
                                if (path.length === 0) return '.';
                                var code = path.charCodeAt(0);
                                var hasRoot = code === 47/*/*/;
                                var end = -1;
                                var matchedSlash = true;
                                for (var i = path.length - 1; i >= 1; --i) {
                                    code = path.charCodeAt(i);
                                    if (code === 47/*/*/) {
                                        if (!matchedSlash) {
                                            end = i;
                                            break;
                                        }
                                    } else {// We saw the first non-path separator
                                        matchedSlash = false;
                                    }
                                }
                                if (end === -1) return hasRoot ? '/' : '.';
                                if (hasRoot && end === 1) {// return '//';
// Backwards-compat fix:
                                    return '/';
                                }
                                return path.slice(0, end);
                            };

                            function basename(path) {
                                if (typeof path !== 'string') path = path + '';
                                var start = 0;
                                var end = -1;
                                var matchedSlash = true;
                                var i;
                                for (i = path.length - 1; i >= 0; --i) {
                                    if (path.charCodeAt(i) === 47/*/*/) {// If we reached a path separator that was not part of a set of path
// separators at the end of the string, stop now
                                        if (!matchedSlash) {
                                            start = i + 1;
                                            break;
                                        }
                                    } else if (end === -1) {// We saw the first non-path separator, mark this as the end of our
// path component
                                        matchedSlash = false;
                                        end = i + 1;
                                    }
                                }
                                if (end === -1) return '';
                                return path.slice(start, end);
                            }// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
                            exports.basename = function (path, ext) {
                                var f = basename(path);
                                if (ext && f.substr(-1 * ext.length) === ext) {
                                    f = f.substr(0, f.length - ext.length);
                                }
                                return f;
                            };
                            exports.extname = function (path) {
                                if (typeof path !== 'string') path = path + '';
                                var startDot = -1;
                                var startPart = 0;
                                var end = -1;
                                var matchedSlash = true;// Track the state of characters (if any) we see before our first dot and
// after any path separator we find
                                var preDotState = 0;
                                for (var i = path.length - 1; i >= 0; --i) {
                                    var code = path.charCodeAt(i);
                                    if (code === 47/*/*/) {// If we reached a path separator that was not part of a set of path
// separators at the end of the string, stop now
                                        if (!matchedSlash) {
                                            startPart = i + 1;
                                            break;
                                        }
                                        continue;
                                    }
                                    if (end === -1) {// We saw the first non-path separator, mark this as the end of our
// extension
                                        matchedSlash = false;
                                        end = i + 1;
                                    }
                                    if (code === 46/*.*/) {// If this is our first dot, mark it as the start of our extension
                                        if (startDot === -1) startDot = i; else if (preDotState !== 1) preDotState = 1;
                                    } else if (startDot !== -1) {// We saw a non-dot and non-path separator before our dot, so we should
// have a good chance at having a non-empty extension
                                        preDotState = -1;
                                    }
                                }
                                if (startDot === -1 || end === -1 ||// We saw a non-dot character immediately before the dot
                                    preDotState === 0 ||// The (right-most) trimmed path component is exactly '..'
                                    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
                                    return '';
                                }
                                return path.slice(startDot, end);
                            };

                            function filter(xs, f) {
                                if (xs.filter) return xs.filter(f);
                                var res = [];
                                for (var i = 0; i < xs.length; i++) {
                                    if (f(xs[i], i, xs)) res.push(xs[i]);
                                }
                                return res;
                            }// String.prototype.substr - negative index don't work in IE8
                            var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
                                return str.substr(start, len);
                            } : function (str, start, len) {
                                if (start < 0) start = str.length + start;
                                return str.substr(start, len);
                            };
                        }).call(this, require('_process'));
                    }, {"_process": 63}],
                    39: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _container = _interopRequireDefault(require("./container"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        function _inheritsLoose(subClass, superClass) {
                            subClass.prototype = Object.create(superClass.prototype);
                            subClass.prototype.constructor = subClass;
                            subClass.__proto__ = superClass;
                        }

                        /**
                         * Represents an at-rule.
                         *
                         * If it’s followed in the CSS by a {} block, this node will have
                         * a nodes property representing its children.
                         *
                         * @extends Container
                         *
                         * @example
                         * const root = postcss.parse('@charset "UTF-8"; @media print {}')
                         *
                         * const charset = root.first
                         * charset.type  //=> 'atrule'
                         * charset.nodes //=> undefined
                         *
                         * const media = root.last
                         * media.nodes   //=> []
                         */var AtRule =/*#__PURE__*/function (_Container) {
                            _inheritsLoose(AtRule, _Container);

                            function AtRule(defaults) {
                                var _this;
                                _this = _Container.call(this, defaults) || this;
                                _this.type = 'atrule';
                                return _this;
                            }

                            var _proto = AtRule.prototype;
                            _proto.append = function append() {
                                var _Container$prototype$;
                                if (!this.nodes) this.nodes = [];
                                for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {
                                    children[_key] = arguments[_key];
                                }
                                return (_Container$prototype$ = _Container.prototype.append).call.apply(_Container$prototype$, [this].concat(children));
                            };
                            _proto.prepend = function prepend() {
                                var _Container$prototype$2;
                                if (!this.nodes) this.nodes = [];
                                for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                                    children[_key2] = arguments[_key2];
                                }
                                return (_Container$prototype$2 = _Container.prototype.prepend).call.apply(_Container$prototype$2, [this].concat(children));
                            }/**
                             * @memberof AtRule#
                             * @member {string} name The at-rule’s name immediately follows the `@`.
                             *
                             * @example
                             * const root  = postcss.parse('@media print {}')
                             * media.name //=> 'media'
                             * const media = root.first
                             */ /**
                             * @memberof AtRule#
                             * @member {string} params The at-rule’s parameters, the values
                             *                         that follow the at-rule’s name but precede
                             *                         any {} block.
                             *
                             * @example
                             * const root  = postcss.parse('@media print, screen {}')
                             * const media = root.first
                             * media.params //=> 'print, screen'
                             */ /**
                             * @memberof AtRule#
                             * @member {object} raws Information to generate byte-to-byte equal
                             *                        node string as it was in the origin input.
                             *
                             * Every parser saves its own properties,
                             * but the default CSS parser uses:
                             *
                             * * `before`: the space symbols before the node. It also stores `*`
                             *   and `_` symbols before the declaration (IE hack).
                             * * `after`: the space symbols after the last child of the node
                             *   to the end of the node.
                             * * `between`: the symbols between the property and value
                             *   for declarations, selector and `{` for rules, or last parameter
                             *   and `{` for at-rules.
                             * * `semicolon`: contains true if the last child has
                             *   an (optional) semicolon.
                             * * `afterName`: the space between the at-rule name and its parameters.
                             *
                             * PostCSS cleans at-rule parameters from comments and extra spaces,
                             * but it stores origin content in raws properties.
                             * As such, if you don’t change a declaration’s value,
                             * PostCSS will use the raw value with comments.
                             *
                             * @example
                             * const root = postcss.parse('  @media\nprint {\n}')
                             * root.first.first.raws //=> { before: '  ',
                             *                       //     between: ' ',
                             *                       //     afterName: '\n',
                             *                       //     after: '\n' }
                             */;
                            return AtRule;
                        }(_container["default"]);
                        var _default = AtRule;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {"./container": 41}],
                    40: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _node = _interopRequireDefault(require("./node"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        function _inheritsLoose(subClass, superClass) {
                            subClass.prototype = Object.create(superClass.prototype);
                            subClass.prototype.constructor = subClass;
                            subClass.__proto__ = superClass;
                        }

                        /**
                         * Represents a comment between declarations or statements (rule and at-rules).
                         *
                         * Comments inside selectors, at-rule parameters, or declaration values
                         * will be stored in the `raws` properties explained above.
                         *
                         * @extends Node
                         */var Comment =/*#__PURE__*/function (_Node) {
                            _inheritsLoose(Comment, _Node);

                            function Comment(defaults) {
                                var _this;
                                _this = _Node.call(this, defaults) || this;
                                _this.type = 'comment';
                                return _this;
                            }/**
                             * @memberof Comment#
                             * @member {string} text The comment’s text.
                             */ /**
                             * @memberof Comment#
                             * @member {object} raws Information to generate byte-to-byte equal
                             *                       node string as it was in the origin input.
                             *
                             * Every parser saves its own properties,
                             * but the default CSS parser uses:
                             *
                             * * `before`: the space symbols before the node.
                             * * `left`: the space symbols between `/*` and the comment’s text.
                             * * `right`: the space symbols between the comment’s text.
                             */
                            return Comment;
                        }(_node["default"]);
                        var _default = Comment;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {"./node": 48}],
                    41: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _declaration = _interopRequireDefault(require("./declaration"));
                        var _comment = _interopRequireDefault(require("./comment"));
                        var _node = _interopRequireDefault(require("./node"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        function _defineProperties(target, props) {
                            for (var i = 0; i < props.length; i++) {
                                var descriptor = props[i];
                                descriptor.enumerable = descriptor.enumerable || false;
                                descriptor.configurable = true;
                                if ("value" in descriptor) descriptor.writable = true;
                                Object.defineProperty(target, descriptor.key, descriptor);
                            }
                        }

                        function _createClass(Constructor, protoProps, staticProps) {
                            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                            if (staticProps) _defineProperties(Constructor, staticProps);
                            return Constructor;
                        }

                        function _inheritsLoose(subClass, superClass) {
                            subClass.prototype = Object.create(superClass.prototype);
                            subClass.prototype.constructor = subClass;
                            subClass.__proto__ = superClass;
                        }

                        function cleanSource(nodes) {
                            return nodes.map(function (i) {
                                if (i.nodes) i.nodes = cleanSource(i.nodes);
                                delete i.source;
                                return i;
                            });
                        }

                        /**
                         * The {@link Root}, {@link AtRule}, and {@link Rule} container nodes
                         * inherit some common methods to help work with their children.
                         *
                         * Note that all containers can store any content. If you write a rule inside
                         * a rule, PostCSS will parse it.
                         *
                         * @extends Node
                         * @abstract
                         */var Container =/*#__PURE__*/function (_Node) {
                            _inheritsLoose(Container, _Node);

                            function Container() {
                                return _Node.apply(this, arguments) || this;
                            }

                            var _proto = Container.prototype;
                            _proto.push = function push(child) {
                                child.parent = this;
                                this.nodes.push(child);
                                return this;
                            }/**
                             * Iterates through the container’s immediate children,
                             * calling `callback` for each child.
                             *
                             * Returning `false` in the callback will break iteration.
                             *
                             * This method only iterates through the container’s immediate children.
                             * If you need to recursively iterate through all the container’s descendant
                             * nodes, use {@link Container#walk}.
                             *
                             * Unlike the for `{}`-cycle or `Array#forEach` this iterator is safe
                             * if you are mutating the array of child nodes during iteration.
                             * PostCSS will adjust the current index to match the mutations.
                             *
                             * @param {childIterator} callback Iterator receives each node and index.
                             *
                             * @return {false|undefined} Returns `false` if iteration was broke.
                             *
                             * @example
                             * const root = postcss.parse('a { color: black; z-index: 1 }')
                             * const rule = root.first
                             *
                             * for (const decl of rule.nodes) {
                             *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })
                             *   // Cycle will be infinite, because cloneBefore moves the current node
                             *   // to the next index
                             * }
                             *
                             * rule.each(decl => {
                             *   decl.cloneBefore({ prop: '-webkit-' + decl.prop })
                             *   // Will be executed only for color and z-index
                             * })
                             */;
                            _proto.each = function each(callback) {
                                if (!this.lastEach) this.lastEach = 0;
                                if (!this.indexes) this.indexes = {};
                                this.lastEach += 1;
                                var id = this.lastEach;
                                this.indexes[id] = 0;
                                if (!this.nodes) return undefined;
                                var index, result;
                                while (this.indexes[id] < this.nodes.length) {
                                    index = this.indexes[id];
                                    result = callback(this.nodes[index], index);
                                    if (result === false) break;
                                    this.indexes[id] += 1;
                                }
                                delete this.indexes[id];
                                return result;
                            }/**
                             * Traverses the container’s descendant nodes, calling callback
                             * for each node.
                             *
                             * Like container.each(), this method is safe to use
                             * if you are mutating arrays during iteration.
                             *
                             * If you only need to iterate through the container’s immediate children,
                             * use {@link Container#each}.
                             *
                             * @param {childIterator} callback Iterator receives each node and index.
                             *
                             * @return {false|undefined} Returns `false` if iteration was broke.
                             *
                             * @example
                             * root.walk(node => {
                             *   // Traverses all descendant nodes.
                             * })
                             */;
                            _proto.walk = function walk(callback) {
                                return this.each(function (child, i) {
                                    var result;
                                    try {
                                        result = callback(child, i);
                                    } catch (e) {
                                        e.postcssNode = child;
                                        if (e.stack && child.source && /\n\s{4}at /.test(e.stack)) {
                                            var s = child.source;
                                            e.stack = e.stack.replace(/\n\s{4}at /, "$&" + s.input.from + ":" + s.start.line + ":" + s.start.column + "$&");
                                        }
                                        throw e;
                                    }
                                    if (result !== false && child.walk) {
                                        result = child.walk(callback);
                                    }
                                    return result;
                                });
                            }/**
                             * Traverses the container’s descendant nodes, calling callback
                             * for each declaration node.
                             *
                             * If you pass a filter, iteration will only happen over declarations
                             * with matching properties.
                             *
                             * Like {@link Container#each}, this method is safe
                             * to use if you are mutating arrays during iteration.
                             *
                             * @param {string|RegExp} [prop]   String or regular expression
                             *                                 to filter declarations by property name.
                             * @param {childIterator} callback Iterator receives each node and index.
                             *
                             * @return {false|undefined} Returns `false` if iteration was broke.
                             *
                             * @example
                             * root.walkDecls(decl => {
                             *   checkPropertySupport(decl.prop)
                             * })
                             *
                             * root.walkDecls('border-radius', decl => {
                             *   decl.remove()
                             * })
                             *
                             * root.walkDecls(/^background/, decl => {
                             *   decl.value = takeFirstColorFromGradient(decl.value)
                             * })
                             */;
                            _proto.walkDecls = function walkDecls(prop, callback) {
                                if (!callback) {
                                    callback = prop;
                                    return this.walk(function (child, i) {
                                        if (child.type === 'decl') {
                                            return callback(child, i);
                                        }
                                    });
                                }
                                if (prop instanceof RegExp) {
                                    return this.walk(function (child, i) {
                                        if (child.type === 'decl' && prop.test(child.prop)) {
                                            return callback(child, i);
                                        }
                                    });
                                }
                                return this.walk(function (child, i) {
                                    if (child.type === 'decl' && child.prop === prop) {
                                        return callback(child, i);
                                    }
                                });
                            }/**
                             * Traverses the container’s descendant nodes, calling callback
                             * for each rule node.
                             *
                             * If you pass a filter, iteration will only happen over rules
                             * with matching selectors.
                             *
                             * Like {@link Container#each}, this method is safe
                             * to use if you are mutating arrays during iteration.
                             *
                             * @param {string|RegExp} [selector] String or regular expression
                             *                                   to filter rules by selector.
                             * @param {childIterator} callback   Iterator receives each node and index.
                             *
                             * @return {false|undefined} returns `false` if iteration was broke.
                             *
                             * @example
                             * const selectors = []
                             * root.walkRules(rule => {
                             *   selectors.push(rule.selector)
                             * })
                             * console.log(`Your CSS uses ${ selectors.length } selectors`)
                             */;
                            _proto.walkRules = function walkRules(selector, callback) {
                                if (!callback) {
                                    callback = selector;
                                    return this.walk(function (child, i) {
                                        if (child.type === 'rule') {
                                            return callback(child, i);
                                        }
                                    });
                                }
                                if (selector instanceof RegExp) {
                                    return this.walk(function (child, i) {
                                        if (child.type === 'rule' && selector.test(child.selector)) {
                                            return callback(child, i);
                                        }
                                    });
                                }
                                return this.walk(function (child, i) {
                                    if (child.type === 'rule' && child.selector === selector) {
                                        return callback(child, i);
                                    }
                                });
                            }/**
                             * Traverses the container’s descendant nodes, calling callback
                             * for each at-rule node.
                             *
                             * If you pass a filter, iteration will only happen over at-rules
                             * that have matching names.
                             *
                             * Like {@link Container#each}, this method is safe
                             * to use if you are mutating arrays during iteration.
                             *
                             * @param {string|RegExp} [name]   String or regular expression
                             *                                 to filter at-rules by name.
                             * @param {childIterator} callback Iterator receives each node and index.
                             *
                             * @return {false|undefined} Returns `false` if iteration was broke.
                             *
                             * @example
                             * root.walkAtRules(rule => {
                             *   if (isOld(rule.name)) rule.remove()
                             * })
                             *
                             * let first = false
                             * root.walkAtRules('charset', rule => {
                             *   if (!first) {
                             *     first = true
                             *   } else {
                             *     rule.remove()
                             *   }
                             * })
                             */;
                            _proto.walkAtRules = function walkAtRules(name, callback) {
                                if (!callback) {
                                    callback = name;
                                    return this.walk(function (child, i) {
                                        if (child.type === 'atrule') {
                                            return callback(child, i);
                                        }
                                    });
                                }
                                if (name instanceof RegExp) {
                                    return this.walk(function (child, i) {
                                        if (child.type === 'atrule' && name.test(child.name)) {
                                            return callback(child, i);
                                        }
                                    });
                                }
                                return this.walk(function (child, i) {
                                    if (child.type === 'atrule' && child.name === name) {
                                        return callback(child, i);
                                    }
                                });
                            }/**
                             * Traverses the container’s descendant nodes, calling callback
                             * for each comment node.
                             *
                             * Like {@link Container#each}, this method is safe
                             * to use if you are mutating arrays during iteration.
                             *
                             * @param {childIterator} callback Iterator receives each node and index.
                             *
                             * @return {false|undefined} Returns `false` if iteration was broke.
                             *
                             * @example
                             * root.walkComments(comment => {
                             *   comment.remove()
                             * })
                             */;
                            _proto.walkComments = function walkComments(callback) {
                                return this.walk(function (child, i) {
                                    if (child.type === 'comment') {
                                        return callback(child, i);
                                    }
                                });
                            }/**
                             * Inserts new nodes to the end of the container.
                             *
                             * @param {...(Node|object|string|Node[])} children New nodes.
                             *
                             * @return {Node} This node for methods chain.
                             *
                             * @example
                             * const decl1 = postcss.decl({ prop: 'color', value: 'black' })
                             * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })
                             * rule.append(decl1, decl2)
                             *
                             * root.append({ name: 'charset', params: '"UTF-8"' })  // at-rule
                             * root.append({ selector: 'a' })                       // rule
                             * rule.append({ prop: 'color', value: 'black' })       // declaration
                             * rule.append({ text: 'Comment' })                     // comment
                             *
                             * root.append('a {}')
                             * root.first.append('color: black; z-index: 1')
                             */;
                            _proto.append = function append() {
                                for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {
                                    children[_key] = arguments[_key];
                                }
                                for (var _i = 0, _children = children; _i < _children.length; _i++) {
                                    var child = _children[_i];
                                    var nodes = this.normalize(child, this.last);
                                    for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ;) {
                                        var _ref;
                                        if (_isArray) {
                                            if (_i2 >= _iterator.length) break;
                                            _ref = _iterator[_i2++];
                                        } else {
                                            _i2 = _iterator.next();
                                            if (_i2.done) break;
                                            _ref = _i2.value;
                                        }
                                        var node = _ref;
                                        this.nodes.push(node);
                                    }
                                }
                                return this;
                            }/**
                             * Inserts new nodes to the start of the container.
                             *
                             * @param {...(Node|object|string|Node[])} children New nodes.
                             *
                             * @return {Node} This node for methods chain.
                             *
                             * @example
                             * const decl1 = postcss.decl({ prop: 'color', value: 'black' })
                             * const decl2 = postcss.decl({ prop: 'background-color', value: 'white' })
                             * rule.prepend(decl1, decl2)
                             *
                             * root.append({ name: 'charset', params: '"UTF-8"' })  // at-rule
                             * root.append({ selector: 'a' })                       // rule
                             * rule.append({ prop: 'color', value: 'black' })       // declaration
                             * rule.append({ text: 'Comment' })                     // comment
                             *
                             * root.append('a {}')
                             * root.first.append('color: black; z-index: 1')
                             */;
                            _proto.prepend = function prepend() {
                                for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                                    children[_key2] = arguments[_key2];
                                }
                                children = children.reverse();
                                for (var _iterator2 = children, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator](); ;) {
                                    var _ref2;
                                    if (_isArray2) {
                                        if (_i3 >= _iterator2.length) break;
                                        _ref2 = _iterator2[_i3++];
                                    } else {
                                        _i3 = _iterator2.next();
                                        if (_i3.done) break;
                                        _ref2 = _i3.value;
                                    }
                                    var child = _ref2;
                                    var nodes = this.normalize(child, this.first, 'prepend').reverse();
                                    for (var _iterator3 = nodes, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator](); ;) {
                                        var _ref3;
                                        if (_isArray3) {
                                            if (_i4 >= _iterator3.length) break;
                                            _ref3 = _iterator3[_i4++];
                                        } else {
                                            _i4 = _iterator3.next();
                                            if (_i4.done) break;
                                            _ref3 = _i4.value;
                                        }
                                        var node = _ref3;
                                        this.nodes.unshift(node);
                                    }
                                    for (var id in this.indexes) {
                                        this.indexes[id] = this.indexes[id] + nodes.length;
                                    }
                                }
                                return this;
                            };
                            _proto.cleanRaws = function cleanRaws(keepBetween) {
                                _Node.prototype.cleanRaws.call(this, keepBetween);
                                if (this.nodes) {
                                    for (var _iterator4 = this.nodes, _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator](); ;) {
                                        var _ref4;
                                        if (_isArray4) {
                                            if (_i5 >= _iterator4.length) break;
                                            _ref4 = _iterator4[_i5++];
                                        } else {
                                            _i5 = _iterator4.next();
                                            if (_i5.done) break;
                                            _ref4 = _i5.value;
                                        }
                                        var node = _ref4;
                                        node.cleanRaws(keepBetween);
                                    }
                                }
                            }/**
                             * Insert new node before old node within the container.
                             *
                             * @param {Node|number} exist             Child or child’s index.
                             * @param {Node|object|string|Node[]} add New node.
                             *
                             * @return {Node} This node for methods chain.
                             *
                             * @example
                             * rule.insertBefore(decl, decl.clone({ prop: '-webkit-' + decl.prop }))
                             */;
                            _proto.insertBefore = function insertBefore(exist, add) {
                                exist = this.index(exist);
                                var type = exist === 0 ? 'prepend' : false;
                                var nodes = this.normalize(add, this.nodes[exist], type).reverse();
                                for (var _iterator5 = nodes, _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator](); ;) {
                                    var _ref5;
                                    if (_isArray5) {
                                        if (_i6 >= _iterator5.length) break;
                                        _ref5 = _iterator5[_i6++];
                                    } else {
                                        _i6 = _iterator5.next();
                                        if (_i6.done) break;
                                        _ref5 = _i6.value;
                                    }
                                    var node = _ref5;
                                    this.nodes.splice(exist, 0, node);
                                }
                                var index;
                                for (var id in this.indexes) {
                                    index = this.indexes[id];
                                    if (exist <= index) {
                                        this.indexes[id] = index + nodes.length;
                                    }
                                }
                                return this;
                            }/**
                             * Insert new node after old node within the container.
                             *
                             * @param {Node|number} exist             Child or child’s index.
                             * @param {Node|object|string|Node[]} add New node.
                             *
                             * @return {Node} This node for methods chain.
                             */;
                            _proto.insertAfter = function insertAfter(exist, add) {
                                exist = this.index(exist);
                                var nodes = this.normalize(add, this.nodes[exist]).reverse();
                                for (var _iterator6 = nodes, _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator](); ;) {
                                    var _ref6;
                                    if (_isArray6) {
                                        if (_i7 >= _iterator6.length) break;
                                        _ref6 = _iterator6[_i7++];
                                    } else {
                                        _i7 = _iterator6.next();
                                        if (_i7.done) break;
                                        _ref6 = _i7.value;
                                    }
                                    var node = _ref6;
                                    this.nodes.splice(exist + 1, 0, node);
                                }
                                var index;
                                for (var id in this.indexes) {
                                    index = this.indexes[id];
                                    if (exist < index) {
                                        this.indexes[id] = index + nodes.length;
                                    }
                                }
                                return this;
                            }/**
                             * Removes node from the container and cleans the parent properties
                             * from the node and its children.
                             *
                             * @param {Node|number} child Child or child’s index.
                             *
                             * @return {Node} This node for methods chain
                             *
                             * @example
                             * rule.nodes.length  //=> 5
                             * rule.removeChild(decl)
                             * rule.nodes.length  //=> 4
                             * decl.parent        //=> undefined
                             */;
                            _proto.removeChild = function removeChild(child) {
                                child = this.index(child);
                                this.nodes[child].parent = undefined;
                                this.nodes.splice(child, 1);
                                var index;
                                for (var id in this.indexes) {
                                    index = this.indexes[id];
                                    if (index >= child) {
                                        this.indexes[id] = index - 1;
                                    }
                                }
                                return this;
                            }/**
                             * Removes all children from the container
                             * and cleans their parent properties.
                             *
                             * @return {Node} This node for methods chain.
                             *
                             * @example
                             * rule.removeAll()
                             * rule.nodes.length //=> 0
                             */;
                            _proto.removeAll = function removeAll() {
                                for (var _iterator7 = this.nodes, _isArray7 = Array.isArray(_iterator7), _i8 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator](); ;) {
                                    var _ref7;
                                    if (_isArray7) {
                                        if (_i8 >= _iterator7.length) break;
                                        _ref7 = _iterator7[_i8++];
                                    } else {
                                        _i8 = _iterator7.next();
                                        if (_i8.done) break;
                                        _ref7 = _i8.value;
                                    }
                                    var node = _ref7;
                                    node.parent = undefined;
                                }
                                this.nodes = [];
                                return this;
                            }/**
                             * Passes all declaration values within the container that match pattern
                             * through callback, replacing those values with the returned result
                             * of callback.
                             *
                             * This method is useful if you are using a custom unit or function
                             * and need to iterate through all values.
                             *
                             * @param {string|RegExp} pattern      Replace pattern.
                             * @param {object} opts                Options to speed up the search.
                             * @param {string|string[]} opts.props An array of property names.
                             * @param {string} opts.fast           String that’s used to narrow down
                             *                                     values and speed up the regexp search.
                             * @param {function|string} callback   String to replace pattern or callback
                             *                                     that returns a new value. The callback
                             *                                     will receive the same arguments
                             *                                     as those passed to a function parameter
                             *                                     of `String#replace`.
                             *
                             * @return {Node} This node for methods chain.
                             *
                             * @example
                             * root.replaceValues(/\d+rem/, { fast: 'rem' }, string => {
                             *   return 15 * parseInt(string) + 'px'
                             * })
                             */;
                            _proto.replaceValues = function replaceValues(pattern, opts, callback) {
                                if (!callback) {
                                    callback = opts;
                                    opts = {};
                                }
                                this.walkDecls(function (decl) {
                                    if (opts.props && opts.props.indexOf(decl.prop) === -1) return;
                                    if (opts.fast && decl.value.indexOf(opts.fast) === -1) return;
                                    decl.value = decl.value.replace(pattern, callback);
                                });
                                return this;
                            }/**
                             * Returns `true` if callback returns `true`
                             * for all of the container’s children.
                             *
                             * @param {childCondition} condition Iterator returns true or false.
                             *
                             * @return {boolean} Is every child pass condition.
                             *
                             * @example
                             * const noPrefixes = rule.every(i => i.prop[0] !== '-')
                             */;
                            _proto.every = function every(condition) {
                                return this.nodes.every(condition);
                            }/**
                             * Returns `true` if callback returns `true` for (at least) one
                             * of the container’s children.
                             *
                             * @param {childCondition} condition Iterator returns true or false.
                             *
                             * @return {boolean} Is some child pass condition.
                             *
                             * @example
                             * const hasPrefix = rule.some(i => i.prop[0] === '-')
                             */;
                            _proto.some = function some(condition) {
                                return this.nodes.some(condition);
                            }/**
                             * Returns a `child`’s index within the {@link Container#nodes} array.
                             *
                             * @param {Node} child Child of the current container.
                             *
                             * @return {number} Child index.
                             *
                             * @example
                             * rule.index( rule.nodes[2] ) //=> 2
                             */;
                            _proto.index = function index(child) {
                                if (typeof child === 'number') {
                                    return child;
                                }
                                return this.nodes.indexOf(child);
                            }/**
                             * The container’s first child.
                             *
                             * @type {Node}
                             *
                             * @example
                             * rule.first === rules.nodes[0]
                             */;
                            _proto.normalize = function normalize(nodes, sample) {
                                var _this = this;
                                if (typeof nodes === 'string') {
                                    var parse = require('./parse');
                                    nodes = cleanSource(parse(nodes).nodes);
                                } else if (Array.isArray(nodes)) {
                                    nodes = nodes.slice(0);
                                    for (var _iterator8 = nodes, _isArray8 = Array.isArray(_iterator8), _i9 = 0, _iterator8 = _isArray8 ? _iterator8 : _iterator8[Symbol.iterator](); ;) {
                                        var _ref8;
                                        if (_isArray8) {
                                            if (_i9 >= _iterator8.length) break;
                                            _ref8 = _iterator8[_i9++];
                                        } else {
                                            _i9 = _iterator8.next();
                                            if (_i9.done) break;
                                            _ref8 = _i9.value;
                                        }
                                        var i = _ref8;
                                        if (i.parent) i.parent.removeChild(i, 'ignore');
                                    }
                                } else if (nodes.type === 'root') {
                                    nodes = nodes.nodes.slice(0);
                                    for (var _iterator9 = nodes, _isArray9 = Array.isArray(_iterator9), _i10 = 0, _iterator9 = _isArray9 ? _iterator9 : _iterator9[Symbol.iterator](); ;) {
                                        var _ref9;
                                        if (_isArray9) {
                                            if (_i10 >= _iterator9.length) break;
                                            _ref9 = _iterator9[_i10++];
                                        } else {
                                            _i10 = _iterator9.next();
                                            if (_i10.done) break;
                                            _ref9 = _i10.value;
                                        }
                                        var _i11 = _ref9;
                                        if (_i11.parent) _i11.parent.removeChild(_i11, 'ignore');
                                    }
                                } else if (nodes.type) {
                                    nodes = [nodes];
                                } else if (nodes.prop) {
                                    if (typeof nodes.value === 'undefined') {
                                        throw new Error('Value field is missed in node creation');
                                    } else if (typeof nodes.value !== 'string') {
                                        nodes.value = String(nodes.value);
                                    }
                                    nodes = [new _declaration["default"](nodes)];
                                } else if (nodes.selector) {
                                    var Rule = require('./rule');
                                    nodes = [new Rule(nodes)];
                                } else if (nodes.name) {
                                    var AtRule = require('./at-rule');
                                    nodes = [new AtRule(nodes)];
                                } else if (nodes.text) {
                                    nodes = [new _comment["default"](nodes)];
                                } else {
                                    throw new Error('Unknown node type in node creation');
                                }
                                var processed = nodes.map(function (i) {
                                    if (i.parent) i.parent.removeChild(i);
                                    if (typeof i.raws.before === 'undefined') {
                                        if (sample && typeof sample.raws.before !== 'undefined') {
                                            i.raws.before = sample.raws.before.replace(/[^\s]/g, '');
                                        }
                                    }
                                    i.parent = _this;
                                    return i;
                                });
                                return processed;
                            }/**
                             * @memberof Container#
                             * @member {Node[]} nodes An array containing the container’s children.
                             *
                             * @example
                             * const root = postcss.parse('a { color: black }')
                             * root.nodes.length           //=> 1
                             * root.nodes[0].selector      //=> 'a'
                             * root.nodes[0].nodes[0].prop //=> 'color'
                             */;
                            _createClass(Container, [{
                                key: "first", get: function get() {
                                    if (!this.nodes) return undefined;
                                    return this.nodes[0];
                                }/**
                                 * The container’s last child.
                                 *
                                 * @type {Node}
                                 *
                                 * @example
                                 * rule.last === rule.nodes[rule.nodes.length - 1]
                                 */
                            }, {
                                key: "last", get: function get() {
                                    if (!this.nodes) return undefined;
                                    return this.nodes[this.nodes.length - 1];
                                }
                            }]);
                            return Container;
                        }(_node["default"]);
                        var _default = Container;/**
                         * @callback childCondition
                         * @param {Node} node    Container child.
                         * @param {number} index Child index.
                         * @param {Node[]} nodes All container children.
                         * @return {boolean}
                         */
                        /**
                         * @callback childIterator
                         * @param {Node} node    Container child.
                         * @param {number} index Child index.
                         * @return {false|undefined} Returning `false` will break iteration.
                         */exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {
                        "./at-rule": 39,
                        "./comment": 40,
                        "./declaration": 43,
                        "./node": 48,
                        "./parse": 49,
                        "./rule": 56
                    }],
                    42: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _supportsColor = _interopRequireDefault(require("supports-color"));
                        var _chalk = _interopRequireDefault(require("chalk"));
                        var _terminalHighlight = _interopRequireDefault(require("./terminal-highlight"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        function _assertThisInitialized(self) {
                            if (self === void 0) {
                                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                            }
                            return self;
                        }

                        function _inheritsLoose(subClass, superClass) {
                            subClass.prototype = Object.create(superClass.prototype);
                            subClass.prototype.constructor = subClass;
                            subClass.__proto__ = superClass;
                        }

                        function _wrapNativeSuper(Class) {
                            var _cache = typeof Map === "function" ? new Map() : undefined;
                            _wrapNativeSuper = function _wrapNativeSuper(Class) {
                                if (Class === null || !_isNativeFunction(Class)) return Class;
                                if (typeof Class !== "function") {
                                    throw new TypeError("Super expression must either be null or a function");
                                }
                                if (typeof _cache !== "undefined") {
                                    if (_cache.has(Class)) return _cache.get(Class);
                                    _cache.set(Class, Wrapper);
                                }

                                function Wrapper() {
                                    return _construct(Class, arguments, _getPrototypeOf(this).constructor);
                                }

                                Wrapper.prototype = Object.create(Class.prototype, {
                                    constructor: {
                                        value: Wrapper,
                                        enumerable: false,
                                        writable: true,
                                        configurable: true
                                    }
                                });
                                return _setPrototypeOf(Wrapper, Class);
                            };
                            return _wrapNativeSuper(Class);
                        }

                        function isNativeReflectConstruct() {
                            if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                            if (Reflect.construct.sham) return false;
                            if (typeof Proxy === "function") return true;
                            try {
                                Date.prototype.toString.call(Reflect.construct(Date, [], function () {
                                }));
                                return true;
                            } catch (e) {
                                return false;
                            }
                        }

                        function _construct(Parent, args, Class) {
                            if (isNativeReflectConstruct()) {
                                _construct = Reflect.construct;
                            } else {
                                _construct = function _construct(Parent, args, Class) {
                                    var a = [null];
                                    a.push.apply(a, args);
                                    var Constructor = Function.bind.apply(Parent, a);
                                    var instance = new Constructor();
                                    if (Class) _setPrototypeOf(instance, Class.prototype);
                                    return instance;
                                };
                            }
                            return _construct.apply(null, arguments);
                        }

                        function _isNativeFunction(fn) {
                            return Function.toString.call(fn).indexOf("[native code]") !== -1;
                        }

                        function _setPrototypeOf(o, p) {
                            _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
                                o.__proto__ = p;
                                return o;
                            };
                            return _setPrototypeOf(o, p);
                        }

                        function _getPrototypeOf(o) {
                            _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
                                return o.__proto__ || Object.getPrototypeOf(o);
                            };
                            return _getPrototypeOf(o);
                        }

                        /**
                         * The CSS parser throws this error for broken CSS.
                         *
                         * Custom parsers can throw this error for broken custom syntax using
                         * the {@link Node#error} method.
                         *
                         * PostCSS will use the input source map to detect the original error location.
                         * If you wrote a Sass file, compiled it to CSS and then parsed it with PostCSS,
                         * PostCSS will show the original position in the Sass file.
                         *
                         * If you need the position in the PostCSS input
                         * (e.g., to debug the previous compiler), use `error.input.file`.
                         *
                         * @example
                         * // Catching and checking syntax error
                         * try {
                         *   postcss.parse('a{')
                         * } catch (error) {
                         *   if (error.name === 'CssSyntaxError') {
                         *     error //=> CssSyntaxError
                         *   }
                         * }
                         *
                         * @example
                         * // Raising error from plugin
                         * throw node.error('Unknown variable', { plugin: 'postcss-vars' })
                         */var CssSyntaxError =/*#__PURE__*/function (_Error) {
                            _inheritsLoose(CssSyntaxError, _Error);

                            /**
                             * @param {string} message  Error message.
                             * @param {number} [line]   Source line of the error.
                             * @param {number} [column] Source column of the error.
                             * @param {string} [source] Source code of the broken file.
                             * @param {string} [file]   Absolute path to the broken file.
                             * @param {string} [plugin] PostCSS plugin name, if error came from plugin.
                             */function CssSyntaxError(message, line, column, source, file, plugin) {
                                var _this;
                                _this = _Error.call(this, message) || this;
                                /**
                                 * Always equal to `'CssSyntaxError'`. You should always check error type
                                 * by `error.name === 'CssSyntaxError'`
                                 * instead of `error instanceof CssSyntaxError`,
                                 * because npm could have several PostCSS versions.
                                 *
                                 * @type {string}
                                 *
                                 * @example
                                 * if (error.name === 'CssSyntaxError') {
                                 *   error //=> CssSyntaxError
                                 * }
                                 */_this.name = 'CssSyntaxError';
                                /**
                                 * Error message.
                                 *
                                 * @type {string}
                                 *
                                 * @example
                                 * error.message //=> 'Unclosed block'
                                 */_this.reason = message;
                                if (file) {
                                    /**
                                     * Absolute path to the broken file.
                                     *
                                     * @type {string}
                                     *
                                     * @example
                                     * error.file       //=> 'a.sass'
                                     * error.input.file //=> 'a.css'
                                     */_this.file = file;
                                }
                                if (source) {
                                    /**
                                     * Source code of the broken file.
                                     *
                                     * @type {string}
                                     *
                                     * @example
                                     * error.source       //=> 'a { b {} }'
                                     * error.input.column //=> 'a b { }'
                                     */_this.source = source;
                                }
                                if (plugin) {
                                    /**
                                     * Plugin name, if error came from plugin.
                                     *
                                     * @type {string}
                                     *
                                     * @example
                                     * error.plugin //=> 'postcss-vars'
                                     */_this.plugin = plugin;
                                }
                                if (typeof line !== 'undefined' && typeof column !== 'undefined') {
                                    /**
                                     * Source line of the error.
                                     *
                                     * @type {number}
                                     *
                                     * @example
                                     * error.line       //=> 2
                                     * error.input.line //=> 4
                                     */_this.line = line;
                                    /**
                                     * Source column of the error.
                                     *
                                     * @type {number}
                                     *
                                     * @example
                                     * error.column       //=> 1
                                     * error.input.column //=> 4
                                     */_this.column = column;
                                }
                                _this.setMessage();
                                if (Error.captureStackTrace) {
                                    Error.captureStackTrace(_assertThisInitialized(_this), CssSyntaxError);
                                }
                                return _this;
                            }

                            var _proto = CssSyntaxError.prototype;
                            _proto.setMessage = function setMessage() {
                                /**
                                 * Full error text in the GNU error format
                                 * with plugin, file, line and column.
                                 *
                                 * @type {string}
                                 *
                                 * @example
                                 * error.message //=> 'a.css:1:1: Unclosed block'
                                 */this.message = this.plugin ? this.plugin + ': ' : '';
                                this.message += this.file ? this.file : '<css input>';
                                if (typeof this.line !== 'undefined') {
                                    this.message += ':' + this.line + ':' + this.column;
                                }
                                this.message += ': ' + this.reason;
                            }/**
                             * Returns a few lines of CSS source that caused the error.
                             *
                             * If the CSS has an input source map without `sourceContent`,
                             * this method will return an empty string.
                             *
                             * @param {boolean} [color] Whether arrow will be colored red by terminal
                             *                          color codes. By default, PostCSS will detect
                             *                          color support by `process.stdout.isTTY`
                             *                          and `process.env.NODE_DISABLE_COLORS`.
                             *
                             * @example
                             * error.showSourceCode() //=> "  4 | }
                             *                        //      5 | a {
                             *                        //    > 6 |   bad
                             *                        //        |   ^
                             *                        //      7 | }
                             *                        //      8 | b {"
                             *
                             * @return {string} Few lines of CSS source that caused the error.
                             */;
                            _proto.showSourceCode = function showSourceCode(color) {
                                var _this2 = this;
                                if (!this.source) return '';
                                var css = this.source;
                                if (_terminalHighlight["default"]) {
                                    if (typeof color === 'undefined') color = _supportsColor["default"].stdout;
                                    if (color) css = (0, _terminalHighlight["default"])(css);
                                }
                                var lines = css.split(/\r?\n/);
                                var start = Math.max(this.line - 3, 0);
                                var end = Math.min(this.line + 2, lines.length);
                                var maxWidth = String(end).length;

                                function mark(text) {
                                    if (color && _chalk["default"].red) {
                                        return _chalk["default"].red.bold(text);
                                    }
                                    return text;
                                }

                                function aside(text) {
                                    if (color && _chalk["default"].gray) {
                                        return _chalk["default"].gray(text);
                                    }
                                    return text;
                                }

                                return lines.slice(start, end).map(function (line, index) {
                                    var number = start + 1 + index;
                                    var gutter = ' ' + (' ' + number).slice(-maxWidth) + ' | ';
                                    if (number === _this2.line) {
                                        var spacing = aside(gutter.replace(/\d/g, ' ')) + line.slice(0, _this2.column - 1).replace(/[^\t]/g, ' ');
                                        return mark('>') + aside(gutter) + line + '\n ' + spacing + mark('^');
                                    }
                                    return ' ' + aside(gutter) + line;
                                }).join('\n');
                            }/**
                             * Returns error position, message and source code of the broken part.
                             *
                             * @example
                             * error.toString() //=> "CssSyntaxError: app.css:1:1: Unclosed block
                             *                  //    > 1 | a {
                             *                  //        | ^"
                             *
                             * @return {string} Error position, message and source code.
                             */;
                            _proto.toString = function toString() {
                                var code = this.showSourceCode();
                                if (code) {
                                    code = '\n\n' + code + '\n';
                                }
                                return this.name + ': ' + this.message + code;
                            }/**
                             * @memberof CssSyntaxError#
                             * @member {Input} input Input object with PostCSS internal information
                             *                       about input file. If input has source map
                             *                       from previous tool, PostCSS will use origin
                             *                       (for example, Sass) source. You can use this
                             *                       object to get PostCSS input source.
                             *
                             * @example
                             * error.input.file //=> 'a.css'
                             * error.file       //=> 'a.sass'
                             */;
                            return CssSyntaxError;
                        }(_wrapNativeSuper(Error));
                        var _default = CssSyntaxError;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {"./terminal-highlight": 2, "chalk": 2, "supports-color": 2}],
                    43: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _node = _interopRequireDefault(require("./node"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        function _inheritsLoose(subClass, superClass) {
                            subClass.prototype = Object.create(superClass.prototype);
                            subClass.prototype.constructor = subClass;
                            subClass.__proto__ = superClass;
                        }

                        /**
                         * Represents a CSS declaration.
                         *
                         * @extends Node
                         *
                         * @example
                         * const root = postcss.parse('a { color: black }')
                         * const decl = root.first.first
                         * decl.type       //=> 'decl'
                         * decl.toString() //=> ' color: black'
                         */var Declaration =/*#__PURE__*/function (_Node) {
                            _inheritsLoose(Declaration, _Node);

                            function Declaration(defaults) {
                                var _this;
                                _this = _Node.call(this, defaults) || this;
                                _this.type = 'decl';
                                return _this;
                            }/**
                             * @memberof Declaration#
                             * @member {string} prop The declaration’s property name.
                             *
                             * @example
                             * const root = postcss.parse('a { color: black }')
                             * const decl = root.first.first
                             * decl.prop //=> 'color'
                             */ /**
                             * @memberof Declaration#
                             * @member {string} value The declaration’s value.
                             *
                             * @example
                             * const root = postcss.parse('a { color: black }')
                             * const decl = root.first.first
                             * decl.value //=> 'black'
                             */ /**
                             * @memberof Declaration#
                             * @member {boolean} important `true` if the declaration
                             *                             has an !important annotation.
                             *
                             * @example
                             * const root = postcss.parse('a { color: black !important; color: red }')
                             * root.first.first.important //=> true
                             * root.first.last.important  //=> undefined
                             */ /**
                             * @memberof Declaration#
                             * @member {object} raws Information to generate byte-to-byte equal
                             *                       node string as it was in the origin input.
                             *
                             * Every parser saves its own properties,
                             * but the default CSS parser uses:
                             *
                             * * `before`: the space symbols before the node. It also stores `*`
                             *   and `_` symbols before the declaration (IE hack).
                             * * `between`: the symbols between the property and value
                             *   for declarations.
                             * * `important`: the content of the important statement,
                             *   if it is not just `!important`.
                             *
                             * PostCSS cleans declaration from comments and extra spaces,
                             * but it stores origin content in raws properties.
                             * As such, if you don’t change a declaration’s value,
                             * PostCSS will use the raw value with comments.
                             *
                             * @example
                             * const root = postcss.parse('a {\n  color:black\n}')
                             * root.first.first.raws //=> { before: '\n  ', between: ':' }
                             */
                            return Declaration;
                        }(_node["default"]);
                        var _default = Declaration;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {"./node": 48}],
                    44: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _path = _interopRequireDefault(require("path"));
                        var _cssSyntaxError = _interopRequireDefault(require("./css-syntax-error"));
                        var _previousMap = _interopRequireDefault(require("./previous-map"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        function _defineProperties(target, props) {
                            for (var i = 0; i < props.length; i++) {
                                var descriptor = props[i];
                                descriptor.enumerable = descriptor.enumerable || false;
                                descriptor.configurable = true;
                                if ("value" in descriptor) descriptor.writable = true;
                                Object.defineProperty(target, descriptor.key, descriptor);
                            }
                        }

                        function _createClass(Constructor, protoProps, staticProps) {
                            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                            if (staticProps) _defineProperties(Constructor, staticProps);
                            return Constructor;
                        }

                        var sequence = 0;
                        /**
                         * Represents the source CSS.
                         *
                         * @example
                         * const root  = postcss.parse(css, { from: file })
                         * const input = root.source.input
                         */var Input =/*#__PURE__*/function () {
                            /**
                             * @param {string} css    Input CSS source.
                             * @param {object} [opts] {@link Processor#process} options.
                             */function Input(css, opts) {
                                if (opts === void 0) {
                                    opts = {};
                                }
                                if (css === null || _typeof(css) === 'object' && !css.toString) {
                                    throw new Error("PostCSS received " + css + " instead of CSS string");
                                }
                                /**
                                 * Input CSS source
                                 *
                                 * @type {string}
                                 *
                                 * @example
                                 * const input = postcss.parse('a{}', { from: file }).input
                                 * input.css //=> "a{}"
                                 */this.css = css.toString();
                                if (this.css[0] === "\uFEFF" || this.css[0] === "\uFFFE") {
                                    this.hasBOM = true;
                                    this.css = this.css.slice(1);
                                } else {
                                    this.hasBOM = false;
                                }
                                if (opts.from) {
                                    if (/^\w+:\/\//.test(opts.from) || _path["default"].isAbsolute(opts.from)) {
                                        /**
                                         * The absolute path to the CSS source file defined
                                         * with the `from` option.
                                         *
                                         * @type {string}
                                         *
                                         * @example
                                         * const root = postcss.parse(css, { from: 'a.css' })
                                         * root.source.input.file //=> '/home/ai/a.css'
                                         */this.file = opts.from;
                                    } else {
                                        this.file = _path["default"].resolve(opts.from);
                                    }
                                }
                                var map = new _previousMap["default"](this.css, opts);
                                if (map.text) {
                                    /**
                                     * The input source map passed from a compilation step before PostCSS
                                     * (for example, from Sass compiler).
                                     *
                                     * @type {PreviousMap}
                                     *
                                     * @example
                                     * root.source.input.map.consumer().sources //=> ['a.sass']
                                     */this.map = map;
                                    var file = map.consumer().file;
                                    if (!this.file && file) this.file = this.mapResolve(file);
                                }
                                if (!this.file) {
                                    sequence += 1;
                                    /**
                                     * The unique ID of the CSS source. It will be created if `from` option
                                     * is not provided (because PostCSS does not know the file path).
                                     *
                                     * @type {string}
                                     *
                                     * @example
                                     * const root = postcss.parse(css)
                                     * root.source.input.file //=> undefined
                                     * root.source.input.id   //=> "<input css 1>"
                                     */this.id = '<input css ' + sequence + '>';
                                }
                                if (this.map) this.map.file = this.from;
                            }

                            var _proto = Input.prototype;
                            _proto.error = function error(message, line, column, opts) {
                                if (opts === void 0) {
                                    opts = {};
                                }
                                var result;
                                var origin = this.origin(line, column);
                                if (origin) {
                                    result = new _cssSyntaxError["default"](message, origin.line, origin.column, origin.source, origin.file, opts.plugin);
                                } else {
                                    result = new _cssSyntaxError["default"](message, line, column, this.css, this.file, opts.plugin);
                                }
                                result.input = {line: line, column: column, source: this.css};
                                if (this.file) result.input.file = this.file;
                                return result;
                            }/**
                             * Reads the input source map and returns a symbol position
                             * in the input source (e.g., in a Sass file that was compiled
                             * to CSS before being passed to PostCSS).
                             *
                             * @param {number} line   Line in input CSS.
                             * @param {number} column Column in input CSS.
                             *
                             * @return {filePosition} Position in input source.
                             *
                             * @example
                             * root.source.input.origin(1, 1) //=> { file: 'a.css', line: 3, column: 1 }
                             */;
                            _proto.origin = function origin(line, column) {
                                if (!this.map) return false;
                                var consumer = this.map.consumer();
                                var from = consumer.originalPositionFor({line: line, column: column});
                                if (!from.source) return false;
                                var result = {file: this.mapResolve(from.source), line: from.line, column: from.column};
                                var source = consumer.sourceContentFor(from.source);
                                if (source) result.source = source;
                                return result;
                            };
                            _proto.mapResolve = function mapResolve(file) {
                                if (/^\w+:\/\//.test(file)) {
                                    return file;
                                }
                                return _path["default"].resolve(this.map.consumer().sourceRoot || '.', file);
                            }/**
                             * The CSS source identifier. Contains {@link Input#file} if the user
                             * set the `from` option, or {@link Input#id} if they did not.
                             *
                             * @type {string}
                             *
                             * @example
                             * const root = postcss.parse(css, { from: 'a.css' })
                             * root.source.input.from //=> "/home/ai/a.css"
                             *
                             * const root = postcss.parse(css)
                             * root.source.input.from //=> "<input css 1>"
                             */;
                            _createClass(Input, [{
                                key: "from", get: function get() {
                                    return this.file || this.id;
                                }
                            }]);
                            return Input;
                        }();
                        var _default = Input;
                        /**
                         * @typedef  {object} filePosition
                         * @property {string} file   Path to file.
                         * @property {number} line   Source line in file.
                         * @property {number} column Source column in file.
                         */exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {"./css-syntax-error": 42, "./previous-map": 52, "path": 38}],
                    45: [function (require, module, exports) {
                        (function (process) {
                            "use strict";
                            exports.__esModule = true;
                            exports["default"] = void 0;
                            var _mapGenerator = _interopRequireDefault(require("./map-generator"));
                            var _stringify2 = _interopRequireDefault(require("./stringify"));
                            var _warnOnce = _interopRequireDefault(require("./warn-once"));
                            var _result = _interopRequireDefault(require("./result"));
                            var _parse = _interopRequireDefault(require("./parse"));

                            function _interopRequireDefault(obj) {
                                return obj && obj.__esModule ? obj : {"default": obj};
                            }

                            function _defineProperties(target, props) {
                                for (var i = 0; i < props.length; i++) {
                                    var descriptor = props[i];
                                    descriptor.enumerable = descriptor.enumerable || false;
                                    descriptor.configurable = true;
                                    if ("value" in descriptor) descriptor.writable = true;
                                    Object.defineProperty(target, descriptor.key, descriptor);
                                }
                            }

                            function _createClass(Constructor, protoProps, staticProps) {
                                if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                                if (staticProps) _defineProperties(Constructor, staticProps);
                                return Constructor;
                            }

                            function isPromise(obj) {
                                return _typeof(obj) === 'object' && typeof obj.then === 'function';
                            }

                            /**
                             * A Promise proxy for the result of PostCSS transformations.
                             *
                             * A `LazyResult` instance is returned by {@link Processor#process}.
                             *
                             * @example
                             * const lazy = postcss([autoprefixer]).process(css)
                             */var LazyResult =/*#__PURE__*/function () {
                                function LazyResult(processor, css, opts) {
                                    this.stringified = false;
                                    this.processed = false;
                                    var root;
                                    if (_typeof(css) === 'object' && css !== null && css.type === 'root') {
                                        root = css;
                                    } else if (css instanceof LazyResult || css instanceof _result["default"]) {
                                        root = css.root;
                                        if (css.map) {
                                            if (typeof opts.map === 'undefined') opts.map = {};
                                            if (!opts.map.inline) opts.map.inline = false;
                                            opts.map.prev = css.map;
                                        }
                                    } else {
                                        var parser = _parse["default"];
                                        if (opts.syntax) parser = opts.syntax.parse;
                                        if (opts.parser) parser = opts.parser;
                                        if (parser.parse) parser = parser.parse;
                                        try {
                                            root = parser(css, opts);
                                        } catch (error) {
                                            this.error = error;
                                        }
                                    }
                                    this.result = new _result["default"](processor, root, opts);
                                }

                                /**
                                 * Returns a {@link Processor} instance, which will be used
                                 * for CSS transformations.
                                 *
                                 * @type {Processor}
                                 */var _proto = LazyResult.prototype;
                                /**
                                 * Processes input CSS through synchronous plugins
                                 * and calls {@link Result#warnings()}.
                                 *
                                 * @return {Warning[]} Warnings from plugins.
                                 */_proto.warnings = function warnings() {
                                    return this.sync().warnings();
                                }/**
                                 * Alias for the {@link LazyResult#css} property.
                                 *
                                 * @example
                                 * lazy + '' === lazy.css
                                 *
                                 * @return {string} Output CSS.
                                 */;
                                _proto.toString = function toString() {
                                    return this.css;
                                }/**
                                 * Processes input CSS through synchronous and asynchronous plugins
                                 * and calls `onFulfilled` with a Result instance. If a plugin throws
                                 * an error, the `onRejected` callback will be executed.
                                 *
                                 * It implements standard Promise API.
                                 *
                                 * @param {onFulfilled} onFulfilled Callback will be executed
                                 *                                  when all plugins will finish work.
                                 * @param {onRejected}  onRejected  Callback will be executed on any error.
                                 *
                                 * @return {Promise} Promise API to make queue.
                                 *
                                 * @example
                                 * postcss([autoprefixer]).process(css, { from: cssPath }).then(result => {
                                 *   console.log(result.css)
                                 * })
                                 */;
                                _proto.then = function then(onFulfilled, onRejected) {
                                    if (process.env.NODE_ENV !== 'production') {
                                        if (!('from' in this.opts)) {
                                            (0, _warnOnce["default"])('Without `from` option PostCSS could generate wrong source map ' + 'and will not find Browserslist config. Set it to CSS file path ' + 'or to `undefined` to prevent this warning.');
                                        }
                                    }
                                    return this.async().then(onFulfilled, onRejected);
                                }/**
                                 * Processes input CSS through synchronous and asynchronous plugins
                                 * and calls onRejected for each error thrown in any plugin.
                                 *
                                 * It implements standard Promise API.
                                 *
                                 * @param {onRejected} onRejected Callback will be executed on any error.
                                 *
                                 * @return {Promise} Promise API to make queue.
                                 *
                                 * @example
                                 * postcss([autoprefixer]).process(css).then(result => {
                                 *   console.log(result.css)
                                 * }).catch(error => {
                                 *   console.error(error)
                                 * })
                                 */;
                                _proto["catch"] = function _catch(onRejected) {
                                    return this.async()["catch"](onRejected);
                                }/**
                                 * Processes input CSS through synchronous and asynchronous plugins
                                 * and calls onFinally on any error or when all plugins will finish work.
                                 *
                                 * It implements standard Promise API.
                                 *
                                 * @param {onFinally} onFinally Callback will be executed on any error or
                                 *                              when all plugins will finish work.
                                 *
                                 * @return {Promise} Promise API to make queue.
                                 *
                                 * @example
                                 * postcss([autoprefixer]).process(css).finally(() => {
                                 *   console.log('processing ended')
                                 * })
                                 */;
                                _proto["finally"] = function _finally(onFinally) {
                                    return this.async().then(onFinally, onFinally);
                                };
                                _proto.handleError = function handleError(error, plugin) {
                                    try {
                                        this.error = error;
                                        if (error.name === 'CssSyntaxError' && !error.plugin) {
                                            error.plugin = plugin.postcssPlugin;
                                            error.setMessage();
                                        } else if (plugin.postcssVersion) {
                                            if (process.env.NODE_ENV !== 'production') {
                                                var pluginName = plugin.postcssPlugin;
                                                var pluginVer = plugin.postcssVersion;
                                                var runtimeVer = this.result.processor.version;
                                                var a = pluginVer.split('.');
                                                var b = runtimeVer.split('.');
                                                if (a[0] !== b[0] || parseInt(a[1]) > parseInt(b[1])) {
                                                    console.error('Unknown error from PostCSS plugin. Your current PostCSS ' + 'version is ' + runtimeVer + ', but ' + pluginName + ' uses ' + pluginVer + '. Perhaps this is the source of the error below.');
                                                }
                                            }
                                        }
                                    } catch (err) {
                                        if (console && console.error) console.error(err);
                                    }
                                };
                                _proto.asyncTick = function asyncTick(resolve, reject) {
                                    var _this = this;
                                    if (this.plugin >= this.processor.plugins.length) {
                                        this.processed = true;
                                        return resolve();
                                    }
                                    try {
                                        var plugin = this.processor.plugins[this.plugin];
                                        var promise = this.run(plugin);
                                        this.plugin += 1;
                                        if (isPromise(promise)) {
                                            promise.then(function () {
                                                _this.asyncTick(resolve, reject);
                                            })["catch"](function (error) {
                                                _this.handleError(error, plugin);
                                                _this.processed = true;
                                                reject(error);
                                            });
                                        } else {
                                            this.asyncTick(resolve, reject);
                                        }
                                    } catch (error) {
                                        this.processed = true;
                                        reject(error);
                                    }
                                };
                                _proto.async = function async() {
                                    var _this2 = this;
                                    if (this.processed) {
                                        return new Promise(function (resolve, reject) {
                                            if (_this2.error) {
                                                reject(_this2.error);
                                            } else {
                                                resolve(_this2.stringify());
                                            }
                                        });
                                    }
                                    if (this.processing) {
                                        return this.processing;
                                    }
                                    this.processing = new Promise(function (resolve, reject) {
                                        if (_this2.error) return reject(_this2.error);
                                        _this2.plugin = 0;
                                        _this2.asyncTick(resolve, reject);
                                    }).then(function () {
                                        _this2.processed = true;
                                        return _this2.stringify();
                                    });
                                    return this.processing;
                                };
                                _proto.sync = function sync() {
                                    if (this.processed) return this.result;
                                    this.processed = true;
                                    if (this.processing) {
                                        throw new Error('Use process(css).then(cb) to work with async plugins');
                                    }
                                    if (this.error) throw this.error;
                                    for (var _iterator = this.result.processor.plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ;) {
                                        var _ref;
                                        if (_isArray) {
                                            if (_i >= _iterator.length) break;
                                            _ref = _iterator[_i++];
                                        } else {
                                            _i = _iterator.next();
                                            if (_i.done) break;
                                            _ref = _i.value;
                                        }
                                        var plugin = _ref;
                                        var promise = this.run(plugin);
                                        if (isPromise(promise)) {
                                            throw new Error('Use process(css).then(cb) to work with async plugins');
                                        }
                                    }
                                    return this.result;
                                };
                                _proto.run = function run(plugin) {
                                    this.result.lastPlugin = plugin;
                                    try {
                                        return plugin(this.result.root, this.result);
                                    } catch (error) {
                                        this.handleError(error, plugin);
                                        throw error;
                                    }
                                };
                                _proto.stringify = function stringify() {
                                    if (this.stringified) return this.result;
                                    this.stringified = true;
                                    this.sync();
                                    var opts = this.result.opts;
                                    var str = _stringify2["default"];
                                    if (opts.syntax) str = opts.syntax.stringify;
                                    if (opts.stringifier) str = opts.stringifier;
                                    if (str.stringify) str = str.stringify;
                                    var map = new _mapGenerator["default"](str, this.result.root, this.result.opts);
                                    var data = map.generate();
                                    this.result.css = data[0];
                                    this.result.map = data[1];
                                    return this.result;
                                };
                                _createClass(LazyResult, [{
                                    key: "processor", get: function get() {
                                        return this.result.processor;
                                    }/**
                                     * Options from the {@link Processor#process} call.
                                     *
                                     * @type {processOptions}
                                     */
                                }, {
                                    key: "opts", get: function get() {
                                        return this.result.opts;
                                    }/**
                                     * Processes input CSS through synchronous plugins, converts `Root`
                                     * to a CSS string and returns {@link Result#css}.
                                     *
                                     * This property will only work with synchronous plugins.
                                     * If the processor contains any asynchronous plugins
                                     * it will throw an error. This is why this method is only
                                     * for debug purpose, you should always use {@link LazyResult#then}.
                                     *
                                     * @type {string}
                                     * @see Result#css
                                     */
                                }, {
                                    key: "css", get: function get() {
                                        return this.stringify().css;
                                    }/**
                                     * An alias for the `css` property. Use it with syntaxes
                                     * that generate non-CSS output.
                                     *
                                     * This property will only work with synchronous plugins.
                                     * If the processor contains any asynchronous plugins
                                     * it will throw an error. This is why this method is only
                                     * for debug purpose, you should always use {@link LazyResult#then}.
                                     *
                                     * @type {string}
                                     * @see Result#content
                                     */
                                }, {
                                    key: "content", get: function get() {
                                        return this.stringify().content;
                                    }/**
                                     * Processes input CSS through synchronous plugins
                                     * and returns {@link Result#map}.
                                     *
                                     * This property will only work with synchronous plugins.
                                     * If the processor contains any asynchronous plugins
                                     * it will throw an error. This is why this method is only
                                     * for debug purpose, you should always use {@link LazyResult#then}.
                                     *
                                     * @type {SourceMapGenerator}
                                     * @see Result#map
                                     */
                                }, {
                                    key: "map", get: function get() {
                                        return this.stringify().map;
                                    }/**
                                     * Processes input CSS through synchronous plugins
                                     * and returns {@link Result#root}.
                                     *
                                     * This property will only work with synchronous plugins. If the processor
                                     * contains any asynchronous plugins it will throw an error.
                                     *
                                     * This is why this method is only for debug purpose,
                                     * you should always use {@link LazyResult#then}.
                                     *
                                     * @type {Root}
                                     * @see Result#root
                                     */
                                }, {
                                    key: "root", get: function get() {
                                        return this.sync().root;
                                    }/**
                                     * Processes input CSS through synchronous plugins
                                     * and returns {@link Result#messages}.
                                     *
                                     * This property will only work with synchronous plugins. If the processor
                                     * contains any asynchronous plugins it will throw an error.
                                     *
                                     * This is why this method is only for debug purpose,
                                     * you should always use {@link LazyResult#then}.
                                     *
                                     * @type {Message[]}
                                     * @see Result#messages
                                     */
                                }, {
                                    key: "messages", get: function get() {
                                        return this.sync().messages;
                                    }
                                }]);
                                return LazyResult;
                            }();
                            var _default = LazyResult;/**
                             * @callback onFulfilled
                             * @param {Result} result
                             */
                            /**
                             * @callback onRejected
                             * @param {Error} error
                             */exports["default"] = _default;
                            module.exports = exports["default"];
                        }).call(this, require('_process'));
                    }, {
                        "./map-generator": 47,
                        "./parse": 49,
                        "./result": 54,
                        "./stringify": 58,
                        "./warn-once": 61,
                        "_process": 63
                    }],
                    46: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        /**
                         * Contains helpers for safely splitting lists of CSS values,
                         * preserving parentheses and quotes.
                         *
                         * @example
                         * const list = postcss.list
                         *
                         * @namespace list
                         */var list = {
                            split: function split(string, separators, last) {
                                var array = [];
                                var current = '';
                                var split = false;
                                var func = 0;
                                var quote = false;
                                var escape = false;
                                for (var i = 0; i < string.length; i++) {
                                    var letter = string[i];
                                    if (quote) {
                                        if (escape) {
                                            escape = false;
                                        } else if (letter === '\\') {
                                            escape = true;
                                        } else if (letter === quote) {
                                            quote = false;
                                        }
                                    } else if (letter === '"' || letter === '\'') {
                                        quote = letter;
                                    } else if (letter === '(') {
                                        func += 1;
                                    } else if (letter === ')') {
                                        if (func > 0) func -= 1;
                                    } else if (func === 0) {
                                        if (separators.indexOf(letter) !== -1) split = true;
                                    }
                                    if (split) {
                                        if (current !== '') array.push(current.trim());
                                        current = '';
                                        split = false;
                                    } else {
                                        current += letter;
                                    }
                                }
                                if (last || current !== '') array.push(current.trim());
                                return array;
                            }, /**
                             * Safely splits space-separated values (such as those for `background`,
                             * `border-radius`, and other shorthand properties).
                             *
                             * @param {string} string Space-separated values.
                             *
                             * @return {string[]} Split values.
                             *
                             * @example
                             * postcss.list.space('1px calc(10% + 1px)') //=> ['1px', 'calc(10% + 1px)']
                             */space: function space(string) {
                                var spaces = [' ', '\n', '\t'];
                                return list.split(string, spaces);
                            }, /**
                             * Safely splits comma-separated values (such as those for `transition-*`
                             * and `background` properties).
                             *
                             * @param {string} string Comma-separated values.
                             *
                             * @return {string[]} Split values.
                             *
                             * @example
                             * postcss.list.comma('black, linear-gradient(white, black)')
                             * //=> ['black', 'linear-gradient(white, black)']
                             */comma: function comma(string) {
                                return list.split(string, [','], true);
                            }
                        };
                        var _default = list;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {}],
                    47: [function (require, module, exports) {
                        (function (Buffer) {
                            "use strict";
                            exports.__esModule = true;
                            exports["default"] = void 0;
                            var _sourceMap = _interopRequireDefault(require("source-map"));
                            var _path = _interopRequireDefault(require("path"));

                            function _interopRequireDefault(obj) {
                                return obj && obj.__esModule ? obj : {"default": obj};
                            }

                            var MapGenerator =/*#__PURE__*/function () {
                                function MapGenerator(stringify, root, opts) {
                                    this.stringify = stringify;
                                    this.mapOpts = opts.map || {};
                                    this.root = root;
                                    this.opts = opts;
                                }

                                var _proto = MapGenerator.prototype;
                                _proto.isMap = function isMap() {
                                    if (typeof this.opts.map !== 'undefined') {
                                        return !!this.opts.map;
                                    }
                                    return this.previous().length > 0;
                                };
                                _proto.previous = function previous() {
                                    var _this = this;
                                    if (!this.previousMaps) {
                                        this.previousMaps = [];
                                        this.root.walk(function (node) {
                                            if (node.source && node.source.input.map) {
                                                var map = node.source.input.map;
                                                if (_this.previousMaps.indexOf(map) === -1) {
                                                    _this.previousMaps.push(map);
                                                }
                                            }
                                        });
                                    }
                                    return this.previousMaps;
                                };
                                _proto.isInline = function isInline() {
                                    if (typeof this.mapOpts.inline !== 'undefined') {
                                        return this.mapOpts.inline;
                                    }
                                    var annotation = this.mapOpts.annotation;
                                    if (typeof annotation !== 'undefined' && annotation !== true) {
                                        return false;
                                    }
                                    if (this.previous().length) {
                                        return this.previous().some(function (i) {
                                            return i.inline;
                                        });
                                    }
                                    return true;
                                };
                                _proto.isSourcesContent = function isSourcesContent() {
                                    if (typeof this.mapOpts.sourcesContent !== 'undefined') {
                                        return this.mapOpts.sourcesContent;
                                    }
                                    if (this.previous().length) {
                                        return this.previous().some(function (i) {
                                            return i.withContent();
                                        });
                                    }
                                    return true;
                                };
                                _proto.clearAnnotation = function clearAnnotation() {
                                    if (this.mapOpts.annotation === false) return;
                                    var node;
                                    for (var i = this.root.nodes.length - 1; i >= 0; i--) {
                                        node = this.root.nodes[i];
                                        if (node.type !== 'comment') continue;
                                        if (node.text.indexOf('# sourceMappingURL=') === 0) {
                                            this.root.removeChild(i);
                                        }
                                    }
                                };
                                _proto.setSourcesContent = function setSourcesContent() {
                                    var _this2 = this;
                                    var already = {};
                                    this.root.walk(function (node) {
                                        if (node.source) {
                                            var from = node.source.input.from;
                                            if (from && !already[from]) {
                                                already[from] = true;
                                                var relative = _this2.relative(from);
                                                _this2.map.setSourceContent(relative, node.source.input.css);
                                            }
                                        }
                                    });
                                };
                                _proto.applyPrevMaps = function applyPrevMaps() {
                                    for (var _iterator = this.previous(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ;) {
                                        var _ref;
                                        if (_isArray) {
                                            if (_i >= _iterator.length) break;
                                            _ref = _iterator[_i++];
                                        } else {
                                            _i = _iterator.next();
                                            if (_i.done) break;
                                            _ref = _i.value;
                                        }
                                        var prev = _ref;
                                        var from = this.relative(prev.file);
                                        var root = prev.root || _path["default"].dirname(prev.file);
                                        var map = void 0;
                                        if (this.mapOpts.sourcesContent === false) {
                                            map = new _sourceMap["default"].SourceMapConsumer(prev.text);
                                            if (map.sourcesContent) {
                                                map.sourcesContent = map.sourcesContent.map(function () {
                                                    return null;
                                                });
                                            }
                                        } else {
                                            map = prev.consumer();
                                        }
                                        this.map.applySourceMap(map, from, this.relative(root));
                                    }
                                };
                                _proto.isAnnotation = function isAnnotation() {
                                    if (this.isInline()) {
                                        return true;
                                    }
                                    if (typeof this.mapOpts.annotation !== 'undefined') {
                                        return this.mapOpts.annotation;
                                    }
                                    if (this.previous().length) {
                                        return this.previous().some(function (i) {
                                            return i.annotation;
                                        });
                                    }
                                    return true;
                                };
                                _proto.toBase64 = function toBase64(str) {
                                    if (Buffer) {
                                        return Buffer.from(str).toString('base64');
                                    }
                                    return window.btoa(unescape(encodeURIComponent(str)));
                                };
                                _proto.addAnnotation = function addAnnotation() {
                                    var content;
                                    if (this.isInline()) {
                                        content = 'data:application/json;base64,' + this.toBase64(this.map.toString());
                                    } else if (typeof this.mapOpts.annotation === 'string') {
                                        content = this.mapOpts.annotation;
                                    } else {
                                        content = this.outputFile() + '.map';
                                    }
                                    var eol = '\n';
                                    if (this.css.indexOf('\r\n') !== -1) eol = '\r\n';
                                    this.css += eol + '/*# sourceMappingURL=' + content + ' */';
                                };
                                _proto.outputFile = function outputFile() {
                                    if (this.opts.to) {
                                        return this.relative(this.opts.to);
                                    }
                                    if (this.opts.from) {
                                        return this.relative(this.opts.from);
                                    }
                                    return 'to.css';
                                };
                                _proto.generateMap = function generateMap() {
                                    this.generateString();
                                    if (this.isSourcesContent()) this.setSourcesContent();
                                    if (this.previous().length > 0) this.applyPrevMaps();
                                    if (this.isAnnotation()) this.addAnnotation();
                                    if (this.isInline()) {
                                        return [this.css];
                                    }
                                    return [this.css, this.map];
                                };
                                _proto.relative = function relative(file) {
                                    if (file.indexOf('<') === 0) return file;
                                    if (/^\w+:\/\//.test(file)) return file;
                                    var from = this.opts.to ? _path["default"].dirname(this.opts.to) : '.';
                                    if (typeof this.mapOpts.annotation === 'string') {
                                        from = _path["default"].dirname(_path["default"].resolve(from, this.mapOpts.annotation));
                                    }
                                    file = _path["default"].relative(from, file);
                                    if (_path["default"].sep === '\\') {
                                        return file.replace(/\\/g, '/');
                                    }
                                    return file;
                                };
                                _proto.sourcePath = function sourcePath(node) {
                                    if (this.mapOpts.from) {
                                        return this.mapOpts.from;
                                    }
                                    return this.relative(node.source.input.from);
                                };
                                _proto.generateString = function generateString() {
                                    var _this3 = this;
                                    this.css = '';
                                    this.map = new _sourceMap["default"].SourceMapGenerator({file: this.outputFile()});
                                    var line = 1;
                                    var column = 1;
                                    var lines, last;
                                    this.stringify(this.root, function (str, node, type) {
                                        _this3.css += str;
                                        if (node && type !== 'end') {
                                            if (node.source && node.source.start) {
                                                _this3.map.addMapping({
                                                    source: _this3.sourcePath(node),
                                                    generated: {line: line, column: column - 1},
                                                    original: {
                                                        line: node.source.start.line,
                                                        column: node.source.start.column - 1
                                                    }
                                                });
                                            } else {
                                                _this3.map.addMapping({
                                                    source: '<no source>',
                                                    original: {line: 1, column: 0},
                                                    generated: {line: line, column: column - 1}
                                                });
                                            }
                                        }
                                        lines = str.match(/\n/g);
                                        if (lines) {
                                            line += lines.length;
                                            last = str.lastIndexOf('\n');
                                            column = str.length - last;
                                        } else {
                                            column += str.length;
                                        }
                                        if (node && type !== 'start') {
                                            var p = node.parent || {raws: {}};
                                            if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {
                                                if (node.source && node.source.end) {
                                                    _this3.map.addMapping({
                                                        source: _this3.sourcePath(node),
                                                        generated: {line: line, column: column - 2},
                                                        original: {
                                                            line: node.source.end.line,
                                                            column: node.source.end.column - 1
                                                        }
                                                    });
                                                } else {
                                                    _this3.map.addMapping({
                                                        source: '<no source>',
                                                        original: {line: 1, column: 0},
                                                        generated: {line: line, column: column - 1}
                                                    });
                                                }
                                            }
                                        }
                                    });
                                };
                                _proto.generate = function generate() {
                                    this.clearAnnotation();
                                    if (this.isMap()) {
                                        return this.generateMap();
                                    }
                                    var result = '';
                                    this.stringify(this.root, function (i) {
                                        result += i;
                                    });
                                    return [result];
                                };
                                return MapGenerator;
                            }();
                            var _default = MapGenerator;
                            exports["default"] = _default;
                            module.exports = exports["default"];
                        }).call(this, require("buffer").Buffer);
                    }, {"buffer": 3, "path": 38, "source-map": 78}],
                    48: [function (require, module, exports) {
                        (function (process) {
                            "use strict";
                            exports.__esModule = true;
                            exports["default"] = void 0;
                            var _cssSyntaxError = _interopRequireDefault(require("./css-syntax-error"));
                            var _stringifier = _interopRequireDefault(require("./stringifier"));
                            var _stringify = _interopRequireDefault(require("./stringify"));

                            function _interopRequireDefault(obj) {
                                return obj && obj.__esModule ? obj : {"default": obj};
                            }

                            function cloneNode(obj, parent) {
                                var cloned = new obj.constructor();
                                for (var i in obj) {
                                    if (!obj.hasOwnProperty(i)) continue;
                                    var value = obj[i];
                                    var type = _typeof(value);
                                    if (i === 'parent' && type === 'object') {
                                        if (parent) cloned[i] = parent;
                                    } else if (i === 'source') {
                                        cloned[i] = value;
                                    } else if (value instanceof Array) {
                                        cloned[i] = value.map(function (j) {
                                            return cloneNode(j, cloned);
                                        });
                                    } else {
                                        if (type === 'object' && value !== null) value = cloneNode(value);
                                        cloned[i] = value;
                                    }
                                }
                                return cloned;
                            }

                            /**
                             * All node classes inherit the following common methods.
                             *
                             * @abstract
                             */var Node =/*#__PURE__*/function () {
                                /**
                                 * @param {object} [defaults] Value for node properties.
                                 */function Node(defaults) {
                                    if (defaults === void 0) {
                                        defaults = {};
                                    }
                                    this.raws = {};
                                    if (process.env.NODE_ENV !== 'production') {
                                        if (_typeof(defaults) !== 'object' && typeof defaults !== 'undefined') {
                                            throw new Error('PostCSS nodes constructor accepts object, not ' + JSON.stringify(defaults));
                                        }
                                    }
                                    for (var name in defaults) {
                                        this[name] = defaults[name];
                                    }
                                }

                                /**
                                 * Returns a `CssSyntaxError` instance containing the original position
                                 * of the node in the source, showing line and column numbers and also
                                 * a small excerpt to facilitate debugging.
                                 *
                                 * If present, an input source map will be used to get the original position
                                 * of the source, even from a previous compilation step
                                 * (e.g., from Sass compilation).
                                 *
                                 * This method produces very useful error messages.
                                 *
                                 * @param {string} message     Error description.
                                 * @param {object} [opts]      Options.
                                 * @param {string} opts.plugin Plugin name that created this error.
                                 *                             PostCSS will set it automatically.
                                 * @param {string} opts.word   A word inside a node’s string that should
                                 *                             be highlighted as the source of the error.
                                 * @param {number} opts.index  An index inside a node’s string that should
                                 *                             be highlighted as the source of the error.
                                 *
                                 * @return {CssSyntaxError} Error object to throw it.
                                 *
                                 * @example
                                 * if (!variables[name]) {
                                 *   throw decl.error('Unknown variable ' + name, { word: name })
                                 *   // CssSyntaxError: postcss-vars:a.sass:4:3: Unknown variable $black
                                 *   //   color: $black
                                 *   // a
                                 *   //          ^
                                 *   //   background: white
                                 * }
                                 */var _proto = Node.prototype;
                                _proto.error = function error(message, opts) {
                                    if (opts === void 0) {
                                        opts = {};
                                    }
                                    if (this.source) {
                                        var pos = this.positionBy(opts);
                                        return this.source.input.error(message, pos.line, pos.column, opts);
                                    }
                                    return new _cssSyntaxError["default"](message);
                                }/**
                                 * This method is provided as a convenience wrapper for {@link Result#warn}.
                                 *
                                 * @param {Result} result      The {@link Result} instance
                                 *                             that will receive the warning.
                                 * @param {string} text        Warning message.
                                 * @param {object} [opts]      Options
                                 * @param {string} opts.plugin Plugin name that created this warning.
                                 *                             PostCSS will set it automatically.
                                 * @param {string} opts.word   A word inside a node’s string that should
                                 *                             be highlighted as the source of the warning.
                                 * @param {number} opts.index  An index inside a node’s string that should
                                 *                             be highlighted as the source of the warning.
                                 *
                                 * @return {Warning} Created warning object.
                                 *
                                 * @example
                                 * const plugin = postcss.plugin('postcss-deprecated', () => {
                                 *   return (root, result) => {
                                 *     root.walkDecls('bad', decl => {
                                 *       decl.warn(result, 'Deprecated property bad')
                                 *     })
                                 *   }
                                 * })
                                 */;
                                _proto.warn = function warn(result, text, opts) {
                                    var data = {node: this};
                                    for (var i in opts) {
                                        data[i] = opts[i];
                                    }
                                    return result.warn(text, data);
                                }/**
                                 * Removes the node from its parent and cleans the parent properties
                                 * from the node and its children.
                                 *
                                 * @example
                                 * if (decl.prop.match(/^-webkit-/)) {
                                 *   decl.remove()
                                 * }
                                 *
                                 * @return {Node} Node to make calls chain.
                                 */;
                                _proto.remove = function remove() {
                                    if (this.parent) {
                                        this.parent.removeChild(this);
                                    }
                                    this.parent = undefined;
                                    return this;
                                }/**
                                 * Returns a CSS string representing the node.
                                 *
                                 * @param {stringifier|syntax} [stringifier] A syntax to use
                                 *                                           in string generation.
                                 *
                                 * @return {string} CSS string of this node.
                                 *
                                 * @example
                                 * postcss.rule({ selector: 'a' }).toString() //=> "a {}"
                                 */;
                                _proto.toString = function toString(stringifier) {
                                    if (stringifier === void 0) {
                                        stringifier = _stringify["default"];
                                    }
                                    if (stringifier.stringify) stringifier = stringifier.stringify;
                                    var result = '';
                                    stringifier(this, function (i) {
                                        result += i;
                                    });
                                    return result;
                                }/**
                                 * Returns an exact clone of the node.
                                 *
                                 * The resulting cloned node and its (cloned) children will retain
                                 * code style properties.
                                 *
                                 * @param {object} [overrides] New properties to override in the clone.
                                 *
                                 * @example
                                 * decl.raws.before    //=> "\n  "
                                 * const cloned = decl.clone({ prop: '-moz-' + decl.prop })
                                 * cloned.raws.before  //=> "\n  "
                                 * cloned.toString()   //=> -moz-transform: scale(0)
                                 *
                                 * @return {Node} Clone of the node.
                                 */;
                                _proto.clone = function clone(overrides) {
                                    if (overrides === void 0) {
                                        overrides = {};
                                    }
                                    var cloned = cloneNode(this);
                                    for (var name in overrides) {
                                        cloned[name] = overrides[name];
                                    }
                                    return cloned;
                                }/**
                                 * Shortcut to clone the node and insert the resulting cloned node
                                 * before the current node.
                                 *
                                 * @param {object} [overrides] Mew properties to override in the clone.
                                 *
                                 * @example
                                 * decl.cloneBefore({ prop: '-moz-' + decl.prop })
                                 *
                                 * @return {Node} New node
                                 */;
                                _proto.cloneBefore = function cloneBefore(overrides) {
                                    if (overrides === void 0) {
                                        overrides = {};
                                    }
                                    var cloned = this.clone(overrides);
                                    this.parent.insertBefore(this, cloned);
                                    return cloned;
                                }/**
                                 * Shortcut to clone the node and insert the resulting cloned node
                                 * after the current node.
                                 *
                                 * @param {object} [overrides] New properties to override in the clone.
                                 *
                                 * @return {Node} New node.
                                 */;
                                _proto.cloneAfter = function cloneAfter(overrides) {
                                    if (overrides === void 0) {
                                        overrides = {};
                                    }
                                    var cloned = this.clone(overrides);
                                    this.parent.insertAfter(this, cloned);
                                    return cloned;
                                }/**
                                 * Inserts node(s) before the current node and removes the current node.
                                 *
                                 * @param {...Node} nodes Mode(s) to replace current one.
                                 *
                                 * @example
                                 * if (atrule.name === 'mixin') {
                                 *   atrule.replaceWith(mixinRules[atrule.params])
                                 * }
                                 *
                                 * @return {Node} Current node to methods chain.
                                 */;
                                _proto.replaceWith = function replaceWith() {
                                    if (this.parent) {
                                        for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {
                                            nodes[_key] = arguments[_key];
                                        }
                                        for (var _i = 0, _nodes = nodes; _i < _nodes.length; _i++) {
                                            var node = _nodes[_i];
                                            this.parent.insertBefore(this, node);
                                        }
                                        this.remove();
                                    }
                                    return this;
                                }/**
                                 * Returns the next child of the node’s parent.
                                 * Returns `undefined` if the current node is the last child.
                                 *
                                 * @return {Node|undefined} Next node.
                                 *
                                 * @example
                                 * if (comment.text === 'delete next') {
                                 *   const next = comment.next()
                                 *   if (next) {
                                 *     next.remove()
                                 *   }
                                 * }
                                 */;
                                _proto.next = function next() {
                                    if (!this.parent) return undefined;
                                    var index = this.parent.index(this);
                                    return this.parent.nodes[index + 1];
                                }/**
                                 * Returns the previous child of the node’s parent.
                                 * Returns `undefined` if the current node is the first child.
                                 *
                                 * @return {Node|undefined} Previous node.
                                 *
                                 * @example
                                 * const annotation = decl.prev()
                                 * if (annotation.type === 'comment') {
                                 *   readAnnotation(annotation.text)
                                 * }
                                 */;
                                _proto.prev = function prev() {
                                    if (!this.parent) return undefined;
                                    var index = this.parent.index(this);
                                    return this.parent.nodes[index - 1];
                                }/**
                                 * Insert new node before current node to current node’s parent.
                                 *
                                 * Just alias for `node.parent.insertBefore(node, add)`.
                                 *
                                 * @param {Node|object|string|Node[]} add New node.
                                 *
                                 * @return {Node} This node for methods chain.
                                 *
                                 * @example
                                 * decl.before('content: ""')
                                 */;
                                _proto.before = function before(add) {
                                    this.parent.insertBefore(this, add);
                                    return this;
                                }/**
                                 * Insert new node after current node to current node’s parent.
                                 *
                                 * Just alias for `node.parent.insertAfter(node, add)`.
                                 *
                                 * @param {Node|object|string|Node[]} add New node.
                                 *
                                 * @return {Node} This node for methods chain.
                                 *
                                 * @example
                                 * decl.after('color: black')
                                 */;
                                _proto.after = function after(add) {
                                    this.parent.insertAfter(this, add);
                                    return this;
                                };
                                _proto.toJSON = function toJSON() {
                                    var fixed = {};
                                    for (var name in this) {
                                        if (!this.hasOwnProperty(name)) continue;
                                        if (name === 'parent') continue;
                                        var value = this[name];
                                        if (value instanceof Array) {
                                            fixed[name] = value.map(function (i) {
                                                if (_typeof(i) === 'object' && i.toJSON) {
                                                    return i.toJSON();
                                                } else {
                                                    return i;
                                                }
                                            });
                                        } else if (_typeof(value) === 'object' && value.toJSON) {
                                            fixed[name] = value.toJSON();
                                        } else {
                                            fixed[name] = value;
                                        }
                                    }
                                    return fixed;
                                }/**
                                 * Returns a {@link Node#raws} value. If the node is missing
                                 * the code style property (because the node was manually built or cloned),
                                 * PostCSS will try to autodetect the code style property by looking
                                 * at other nodes in the tree.
                                 *
                                 * @param {string} prop          Name of code style property.
                                 * @param {string} [defaultType] Name of default value, it can be missed
                                 *                               if the value is the same as prop.
                                 *
                                 * @example
                                 * const root = postcss.parse('a { background: white }')
                                 * root.nodes[0].append({ prop: 'color', value: 'black' })
                                 * root.nodes[0].nodes[1].raws.before   //=> undefined
                                 * root.nodes[0].nodes[1].raw('before') //=> ' '
                                 *
                                 * @return {string} Code style value.
                                 */;
                                _proto.raw = function raw(prop, defaultType) {
                                    var str = new _stringifier["default"]();
                                    return str.raw(this, prop, defaultType);
                                }/**
                                 * Finds the Root instance of the node’s tree.
                                 *
                                 * @example
                                 * root.nodes[0].nodes[0].root() === root
                                 *
                                 * @return {Root} Root parent.
                                 */;
                                _proto.root = function root() {
                                    var result = this;
                                    while (result.parent) {
                                        result = result.parent;
                                    }
                                    return result;
                                }/**
                                 * Clear the code style properties for the node and its children.
                                 *
                                 * @param {boolean} [keepBetween] Keep the raws.between symbols.
                                 *
                                 * @return {undefined}
                                 *
                                 * @example
                                 * node.raws.before  //=> ' '
                                 * node.cleanRaws()
                                 * node.raws.before  //=> undefined
                                 */;
                                _proto.cleanRaws = function cleanRaws(keepBetween) {
                                    delete this.raws.before;
                                    delete this.raws.after;
                                    if (!keepBetween) delete this.raws.between;
                                };
                                _proto.positionInside = function positionInside(index) {
                                    var string = this.toString();
                                    var column = this.source.start.column;
                                    var line = this.source.start.line;
                                    for (var i = 0; i < index; i++) {
                                        if (string[i] === '\n') {
                                            column = 1;
                                            line += 1;
                                        } else {
                                            column += 1;
                                        }
                                    }
                                    return {line: line, column: column};
                                };
                                _proto.positionBy = function positionBy(opts) {
                                    var pos = this.source.start;
                                    if (opts.index) {
                                        pos = this.positionInside(opts.index);
                                    } else if (opts.word) {
                                        var index = this.toString().indexOf(opts.word);
                                        if (index !== -1) pos = this.positionInside(index);
                                    }
                                    return pos;
                                }/**
                                 * @memberof Node#
                                 * @member {string} type String representing the node’s type.
                                 *                       Possible values are `root`, `atrule`, `rule`,
                                 *                       `decl`, or `comment`.
                                 *
                                 * @example
                                 * postcss.decl({ prop: 'color', value: 'black' }).type //=> 'decl'
                                 */ /**
                                 * @memberof Node#
                                 * @member {Container} parent The node’s parent node.
                                 *
                                 * @example
                                 * root.nodes[0].parent === root
                                 */ /**
                                 * @memberof Node#
                                 * @member {source} source The input source of the node.
                                 *
                                 * The property is used in source map generation.
                                 *
                                 * If you create a node manually (e.g., with `postcss.decl()`),
                                 * that node will not have a `source` property and will be absent
                                 * from the source map. For this reason, the plugin developer should
                                 * consider cloning nodes to create new ones (in which case the new node’s
                                 * source will reference the original, cloned node) or setting
                                 * the `source` property manually.
                                 *
                                 * ```js
                                 * // Bad
                                 * const prefixed = postcss.decl({
                                 *   prop: '-moz-' + decl.prop,
                                 *   value: decl.value
                                 * })
                                 *
                                 * // Good
                                 * const prefixed = decl.clone({ prop: '-moz-' + decl.prop })
                                 * ```
                                 *
                                 * ```js
                                 * if (atrule.name === 'add-link') {
                                 *   const rule = postcss.rule({ selector: 'a', source: atrule.source })
                                 *   atrule.parent.insertBefore(atrule, rule)
                                 * }
                                 * ```
                                 *
                                 * @example
                                 * decl.source.input.from //=> '/home/ai/a.sass'
                                 * decl.source.start      //=> { line: 10, column: 2 }
                                 * decl.source.end        //=> { line: 10, column: 12 }
                                 */ /**
                                 * @memberof Node#
                                 * @member {object} raws Information to generate byte-to-byte equal
                                 *                       node string as it was in the origin input.
                                 *
                                 * Every parser saves its own properties,
                                 * but the default CSS parser uses:
                                 *
                                 * * `before`: the space symbols before the node. It also stores `*`
                                 *   and `_` symbols before the declaration (IE hack).
                                 * * `after`: the space symbols after the last child of the node
                                 *   to the end of the node.
                                 * * `between`: the symbols between the property and value
                                 *   for declarations, selector and `{` for rules, or last parameter
                                 *   and `{` for at-rules.
                                 * * `semicolon`: contains true if the last child has
                                 *   an (optional) semicolon.
                                 * * `afterName`: the space between the at-rule name and its parameters.
                                 * * `left`: the space symbols between `/*` and the comment’s text.
                                 * * `right`: the space symbols between the comment’s text
                                 *   and <code>*&#47;</code>.
                                 * * `important`: the content of the important statement,
                                 *   if it is not just `!important`.
                                 *
                                 * PostCSS cleans selectors, declaration values and at-rule parameters
                                 * from comments and extra spaces, but it stores origin content in raws
                                 * properties. As such, if you don’t change a declaration’s value,
                                 * PostCSS will use the raw value with comments.
                                 *
                                 * @example
                                 * const root = postcss.parse('a {\n  color:black\n}')
                                 * root.first.first.raws //=> { before: '\n  ', between: ':' }
                                 */;
                                return Node;
                            }();
                            var _default = Node;/**
                             * @typedef {object} position
                             * @property {number} line   Source line in file.
                             * @property {number} column Source column in file.
                             */
                            /**
                             * @typedef {object} source
                             * @property {Input} input    {@link Input} with input file
                             * @property {position} start The starting position of the node’s source.
                             * @property {position} end   The ending position of the node’s source.
                             */exports["default"] = _default;
                            module.exports = exports["default"];
                        }).call(this, require('_process'));
                    }, {"./css-syntax-error": 42, "./stringifier": 57, "./stringify": 58, "_process": 63}],
                    49: [function (require, module, exports) {
                        (function (process) {
                            "use strict";
                            exports.__esModule = true;
                            exports["default"] = void 0;
                            var _parser = _interopRequireDefault(require("./parser"));
                            var _input = _interopRequireDefault(require("./input"));

                            function _interopRequireDefault(obj) {
                                return obj && obj.__esModule ? obj : {"default": obj};
                            }

                            function parse(css, opts) {
                                var input = new _input["default"](css, opts);
                                var parser = new _parser["default"](input);
                                try {
                                    parser.parse();
                                } catch (e) {
                                    if (process.env.NODE_ENV !== 'production') {
                                        if (e.name === 'CssSyntaxError' && opts && opts.from) {
                                            if (/\.scss$/i.test(opts.from)) {
                                                e.message += '\nYou tried to parse SCSS with ' + 'the standard CSS parser; ' + 'try again with the postcss-scss parser';
                                            } else if (/\.sass/i.test(opts.from)) {
                                                e.message += '\nYou tried to parse Sass with ' + 'the standard CSS parser; ' + 'try again with the postcss-sass parser';
                                            } else if (/\.less$/i.test(opts.from)) {
                                                e.message += '\nYou tried to parse Less with ' + 'the standard CSS parser; ' + 'try again with the postcss-less parser';
                                            }
                                        }
                                    }
                                    throw e;
                                }
                                return parser.root;
                            }

                            var _default = parse;
                            exports["default"] = _default;
                            module.exports = exports["default"];
                        }).call(this, require('_process'));
                    }, {"./input": 44, "./parser": 50, "_process": 63}],
                    50: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _declaration = _interopRequireDefault(require("./declaration"));
                        var _tokenize = _interopRequireDefault(require("./tokenize"));
                        var _comment = _interopRequireDefault(require("./comment"));
                        var _atRule = _interopRequireDefault(require("./at-rule"));
                        var _root = _interopRequireDefault(require("./root"));
                        var _rule = _interopRequireDefault(require("./rule"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        var Parser =/*#__PURE__*/function () {
                            function Parser(input) {
                                this.input = input;
                                this.root = new _root["default"]();
                                this.current = this.root;
                                this.spaces = '';
                                this.semicolon = false;
                                this.createTokenizer();
                                this.root.source = {input: input, start: {line: 1, column: 1}};
                            }

                            var _proto = Parser.prototype;
                            _proto.createTokenizer = function createTokenizer() {
                                this.tokenizer = (0, _tokenize["default"])(this.input);
                            };
                            _proto.parse = function parse() {
                                var token;
                                while (!this.tokenizer.endOfFile()) {
                                    token = this.tokenizer.nextToken();
                                    switch (token[0]) {
                                        case'space':
                                            this.spaces += token[1];
                                            break;
                                        case';':
                                            this.freeSemicolon(token);
                                            break;
                                        case'}':
                                            this.end(token);
                                            break;
                                        case'comment':
                                            this.comment(token);
                                            break;
                                        case'at-word':
                                            this.atrule(token);
                                            break;
                                        case'{':
                                            this.emptyRule(token);
                                            break;
                                        default:
                                            this.other(token);
                                            break;
                                    }
                                }
                                this.endFile();
                            };
                            _proto.comment = function comment(token) {
                                var node = new _comment["default"]();
                                this.init(node, token[2], token[3]);
                                node.source.end = {line: token[4], column: token[5]};
                                var text = token[1].slice(2, -2);
                                if (/^\s*$/.test(text)) {
                                    node.text = '';
                                    node.raws.left = text;
                                    node.raws.right = '';
                                } else {
                                    var match = text.match(/^(\s*)([^]*[^\s])(\s*)$/);
                                    node.text = match[2];
                                    node.raws.left = match[1];
                                    node.raws.right = match[3];
                                }
                            };
                            _proto.emptyRule = function emptyRule(token) {
                                var node = new _rule["default"]();
                                this.init(node, token[2], token[3]);
                                node.selector = '';
                                node.raws.between = '';
                                this.current = node;
                            };
                            _proto.other = function other(start) {
                                var end = false;
                                var type = null;
                                var colon = false;
                                var bracket = null;
                                var brackets = [];
                                var tokens = [];
                                var token = start;
                                while (token) {
                                    type = token[0];
                                    tokens.push(token);
                                    if (type === '(' || type === '[') {
                                        if (!bracket) bracket = token;
                                        brackets.push(type === '(' ? ')' : ']');
                                    } else if (brackets.length === 0) {
                                        if (type === ';') {
                                            if (colon) {
                                                this.decl(tokens);
                                                return;
                                            } else {
                                                break;
                                            }
                                        } else if (type === '{') {
                                            this.rule(tokens);
                                            return;
                                        } else if (type === '}') {
                                            this.tokenizer.back(tokens.pop());
                                            end = true;
                                            break;
                                        } else if (type === ':') {
                                            colon = true;
                                        }
                                    } else if (type === brackets[brackets.length - 1]) {
                                        brackets.pop();
                                        if (brackets.length === 0) bracket = null;
                                    }
                                    token = this.tokenizer.nextToken();
                                }
                                if (this.tokenizer.endOfFile()) end = true;
                                if (brackets.length > 0) this.unclosedBracket(bracket);
                                if (end && colon) {
                                    while (tokens.length) {
                                        token = tokens[tokens.length - 1][0];
                                        if (token !== 'space' && token !== 'comment') break;
                                        this.tokenizer.back(tokens.pop());
                                    }
                                    this.decl(tokens);
                                } else {
                                    this.unknownWord(tokens);
                                }
                            };
                            _proto.rule = function rule(tokens) {
                                tokens.pop();
                                var node = new _rule["default"]();
                                this.init(node, tokens[0][2], tokens[0][3]);
                                node.raws.between = this.spacesAndCommentsFromEnd(tokens);
                                this.raw(node, 'selector', tokens);
                                this.current = node;
                            };
                            _proto.decl = function decl(tokens) {
                                var node = new _declaration["default"]();
                                this.init(node);
                                var last = tokens[tokens.length - 1];
                                if (last[0] === ';') {
                                    this.semicolon = true;
                                    tokens.pop();
                                }
                                if (last[4]) {
                                    node.source.end = {line: last[4], column: last[5]};
                                } else {
                                    node.source.end = {line: last[2], column: last[3]};
                                }
                                while (tokens[0][0] !== 'word') {
                                    if (tokens.length === 1) this.unknownWord(tokens);
                                    node.raws.before += tokens.shift()[1];
                                }
                                node.source.start = {line: tokens[0][2], column: tokens[0][3]};
                                node.prop = '';
                                while (tokens.length) {
                                    var type = tokens[0][0];
                                    if (type === ':' || type === 'space' || type === 'comment') {
                                        break;
                                    }
                                    node.prop += tokens.shift()[1];
                                }
                                node.raws.between = '';
                                var token;
                                while (tokens.length) {
                                    token = tokens.shift();
                                    if (token[0] === ':') {
                                        node.raws.between += token[1];
                                        break;
                                    } else {
                                        if (token[0] === 'word' && /\w/.test(token[1])) {
                                            this.unknownWord([token]);
                                        }
                                        node.raws.between += token[1];
                                    }
                                }
                                if (node.prop[0] === '_' || node.prop[0] === '*') {
                                    node.raws.before += node.prop[0];
                                    node.prop = node.prop.slice(1);
                                }
                                node.raws.between += this.spacesAndCommentsFromStart(tokens);
                                this.precheckMissedSemicolon(tokens);
                                for (var i = tokens.length - 1; i > 0; i--) {
                                    token = tokens[i];
                                    if (token[1].toLowerCase() === '!important') {
                                        node.important = true;
                                        var string = this.stringFrom(tokens, i);
                                        string = this.spacesFromEnd(tokens) + string;
                                        if (string !== ' !important') node.raws.important = string;
                                        break;
                                    } else if (token[1].toLowerCase() === 'important') {
                                        var cache = tokens.slice(0);
                                        var str = '';
                                        for (var j = i; j > 0; j--) {
                                            var _type = cache[j][0];
                                            if (str.trim().indexOf('!') === 0 && _type !== 'space') {
                                                break;
                                            }
                                            str = cache.pop()[1] + str;
                                        }
                                        if (str.trim().indexOf('!') === 0) {
                                            node.important = true;
                                            node.raws.important = str;
                                            tokens = cache;
                                        }
                                    }
                                    if (token[0] !== 'space' && token[0] !== 'comment') {
                                        break;
                                    }
                                }
                                this.raw(node, 'value', tokens);
                                if (node.value.indexOf(':') !== -1) this.checkMissedSemicolon(tokens);
                            };
                            _proto.atrule = function atrule(token) {
                                var node = new _atRule["default"]();
                                node.name = token[1].slice(1);
                                if (node.name === '') {
                                    this.unnamedAtrule(node, token);
                                }
                                this.init(node, token[2], token[3]);
                                var prev;
                                var shift;
                                var last = false;
                                var open = false;
                                var params = [];
                                while (!this.tokenizer.endOfFile()) {
                                    token = this.tokenizer.nextToken();
                                    if (token[0] === ';') {
                                        node.source.end = {line: token[2], column: token[3]};
                                        this.semicolon = true;
                                        break;
                                    } else if (token[0] === '{') {
                                        open = true;
                                        break;
                                    } else if (token[0] === '}') {
                                        if (params.length > 0) {
                                            shift = params.length - 1;
                                            prev = params[shift];
                                            while (prev && prev[0] === 'space') {
                                                prev = params[--shift];
                                            }
                                            if (prev) {
                                                node.source.end = {line: prev[4], column: prev[5]};
                                            }
                                        }
                                        this.end(token);
                                        break;
                                    } else {
                                        params.push(token);
                                    }
                                    if (this.tokenizer.endOfFile()) {
                                        last = true;
                                        break;
                                    }
                                }
                                node.raws.between = this.spacesAndCommentsFromEnd(params);
                                if (params.length) {
                                    node.raws.afterName = this.spacesAndCommentsFromStart(params);
                                    this.raw(node, 'params', params);
                                    if (last) {
                                        token = params[params.length - 1];
                                        node.source.end = {line: token[4], column: token[5]};
                                        this.spaces = node.raws.between;
                                        node.raws.between = '';
                                    }
                                } else {
                                    node.raws.afterName = '';
                                    node.params = '';
                                }
                                if (open) {
                                    node.nodes = [];
                                    this.current = node;
                                }
                            };
                            _proto.end = function end(token) {
                                if (this.current.nodes && this.current.nodes.length) {
                                    this.current.raws.semicolon = this.semicolon;
                                }
                                this.semicolon = false;
                                this.current.raws.after = (this.current.raws.after || '') + this.spaces;
                                this.spaces = '';
                                if (this.current.parent) {
                                    this.current.source.end = {line: token[2], column: token[3]};
                                    this.current = this.current.parent;
                                } else {
                                    this.unexpectedClose(token);
                                }
                            };
                            _proto.endFile = function endFile() {
                                if (this.current.parent) this.unclosedBlock();
                                if (this.current.nodes && this.current.nodes.length) {
                                    this.current.raws.semicolon = this.semicolon;
                                }
                                this.current.raws.after = (this.current.raws.after || '') + this.spaces;
                            };
                            _proto.freeSemicolon = function freeSemicolon(token) {
                                this.spaces += token[1];
                                if (this.current.nodes) {
                                    var prev = this.current.nodes[this.current.nodes.length - 1];
                                    if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {
                                        prev.raws.ownSemicolon = this.spaces;
                                        this.spaces = '';
                                    }
                                }
                            }// Helpers
                            ;_proto.init = function init(node, line, column) {
                                this.current.push(node);
                                node.source = {start: {line: line, column: column}, input: this.input};
                                node.raws.before = this.spaces;
                                this.spaces = '';
                                if (node.type !== 'comment') this.semicolon = false;
                            };
                            _proto.raw = function raw(node, prop, tokens) {
                                var token, type;
                                var length = tokens.length;
                                var value = '';
                                var clean = true;
                                var next, prev;
                                var pattern = /^([.|#])?([\w])+/i;
                                for (var i = 0; i < length; i += 1) {
                                    token = tokens[i];
                                    type = token[0];
                                    if (type === 'comment' && node.type === 'rule') {
                                        prev = tokens[i - 1];
                                        next = tokens[i + 1];
                                        if (prev[0] !== 'space' && next[0] !== 'space' && pattern.test(prev[1]) && pattern.test(next[1])) {
                                            value += token[1];
                                        } else {
                                            clean = false;
                                        }
                                        continue;
                                    }
                                    if (type === 'comment' || type === 'space' && i === length - 1) {
                                        clean = false;
                                    } else {
                                        value += token[1];
                                    }
                                }
                                if (!clean) {
                                    var raw = tokens.reduce(function (all, i) {
                                        return all + i[1];
                                    }, '');
                                    node.raws[prop] = {value: value, raw: raw};
                                }
                                node[prop] = value;
                            };
                            _proto.spacesAndCommentsFromEnd = function spacesAndCommentsFromEnd(tokens) {
                                var lastTokenType;
                                var spaces = '';
                                while (tokens.length) {
                                    lastTokenType = tokens[tokens.length - 1][0];
                                    if (lastTokenType !== 'space' && lastTokenType !== 'comment') break;
                                    spaces = tokens.pop()[1] + spaces;
                                }
                                return spaces;
                            };
                            _proto.spacesAndCommentsFromStart = function spacesAndCommentsFromStart(tokens) {
                                var next;
                                var spaces = '';
                                while (tokens.length) {
                                    next = tokens[0][0];
                                    if (next !== 'space' && next !== 'comment') break;
                                    spaces += tokens.shift()[1];
                                }
                                return spaces;
                            };
                            _proto.spacesFromEnd = function spacesFromEnd(tokens) {
                                var lastTokenType;
                                var spaces = '';
                                while (tokens.length) {
                                    lastTokenType = tokens[tokens.length - 1][0];
                                    if (lastTokenType !== 'space') break;
                                    spaces = tokens.pop()[1] + spaces;
                                }
                                return spaces;
                            };
                            _proto.stringFrom = function stringFrom(tokens, from) {
                                var result = '';
                                for (var i = from; i < tokens.length; i++) {
                                    result += tokens[i][1];
                                }
                                tokens.splice(from, tokens.length - from);
                                return result;
                            };
                            _proto.colon = function colon(tokens) {
                                var brackets = 0;
                                var token, type, prev;
                                for (var i = 0; i < tokens.length; i++) {
                                    token = tokens[i];
                                    type = token[0];
                                    if (type === '(') {
                                        brackets += 1;
                                    }
                                    if (type === ')') {
                                        brackets -= 1;
                                    }
                                    if (brackets === 0 && type === ':') {
                                        if (!prev) {
                                            this.doubleColon(token);
                                        } else if (prev[0] === 'word' && prev[1] === 'progid') {
                                            continue;
                                        } else {
                                            return i;
                                        }
                                    }
                                    prev = token;
                                }
                                return false;
                            }// Errors
                            ;_proto.unclosedBracket = function unclosedBracket(bracket) {
                                throw this.input.error('Unclosed bracket', bracket[2], bracket[3]);
                            };
                            _proto.unknownWord = function unknownWord(tokens) {
                                throw this.input.error('Unknown word', tokens[0][2], tokens[0][3]);
                            };
                            _proto.unexpectedClose = function unexpectedClose(token) {
                                throw this.input.error('Unexpected }', token[2], token[3]);
                            };
                            _proto.unclosedBlock = function unclosedBlock() {
                                var pos = this.current.source.start;
                                throw this.input.error('Unclosed block', pos.line, pos.column);
                            };
                            _proto.doubleColon = function doubleColon(token) {
                                throw this.input.error('Double colon', token[2], token[3]);
                            };
                            _proto.unnamedAtrule = function unnamedAtrule(node, token) {
                                throw this.input.error('At-rule without name', token[2], token[3]);
                            };
                            _proto.precheckMissedSemicolon = function precheckMissedSemicolon()/* tokens */ {// Hook for Safe Parser
                            };
                            _proto.checkMissedSemicolon = function checkMissedSemicolon(tokens) {
                                var colon = this.colon(tokens);
                                if (colon === false) return;
                                var founded = 0;
                                var token;
                                for (var j = colon - 1; j >= 0; j--) {
                                    token = tokens[j];
                                    if (token[0] !== 'space') {
                                        founded += 1;
                                        if (founded === 2) break;
                                    }
                                }
                                throw this.input.error('Missed semicolon', token[2], token[3]);
                            };
                            return Parser;
                        }();
                        exports["default"] = Parser;
                        module.exports = exports["default"];
                    }, {
                        "./at-rule": 39,
                        "./comment": 40,
                        "./declaration": 43,
                        "./root": 55,
                        "./rule": 56,
                        "./tokenize": 59
                    }],
                    51: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _declaration = _interopRequireDefault(require("./declaration"));
                        var _processor = _interopRequireDefault(require("./processor"));
                        var _stringify = _interopRequireDefault(require("./stringify"));
                        var _comment = _interopRequireDefault(require("./comment"));
                        var _atRule = _interopRequireDefault(require("./at-rule"));
                        var _vendor = _interopRequireDefault(require("./vendor"));
                        var _parse = _interopRequireDefault(require("./parse"));
                        var _list = _interopRequireDefault(require("./list"));
                        var _rule = _interopRequireDefault(require("./rule"));
                        var _root = _interopRequireDefault(require("./root"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        /**
                         * Create a new {@link Processor} instance that will apply `plugins`
                         * as CSS processors.
                         *
                         * @param {Array.<Plugin|pluginFunction>|Processor} plugins PostCSS plugins.
                         *        See {@link Processor#use} for plugin format.
                         *
                         * @return {Processor} Processor to process multiple CSS.
                         *
                         * @example
                         * import postcss from 'postcss'
                         *
                         * postcss(plugins).process(css, { from, to }).then(result => {
                         *   console.log(result.css)
                         * })
                         *
                         * @namespace postcss
                         */function postcss() {
                            for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
                                plugins[_key] = arguments[_key];
                            }
                            if (plugins.length === 1 && Array.isArray(plugins[0])) {
                                plugins = plugins[0];
                            }
                            return new _processor["default"](plugins);
                        }

                        /**
                         * Creates a PostCSS plugin with a standard API.
                         *
                         * The newly-wrapped function will provide both the name and PostCSS
                         * version of the plugin.
                         *
                         * ```js
                         * const processor = postcss([replace])
                         * processor.plugins[0].postcssPlugin  //=> 'postcss-replace'
                         * processor.plugins[0].postcssVersion //=> '6.0.0'
                         * ```
                         *
                         * The plugin function receives 2 arguments: {@link Root}
                         * and {@link Result} instance. The function should mutate the provided
                         * `Root` node. Alternatively, you can create a new `Root` node
                         * and override the `result.root` property.
                         *
                         * ```js
                         * const cleaner = postcss.plugin('postcss-cleaner', () => {
                         *   return (root, result) => {
                         *     result.root = postcss.root()
                         *   }
                         * })
                         * ```
                         *
                         * As a convenience, plugins also expose a `process` method so that you can use
                         * them as standalone tools.
                         *
                         * ```js
                         * cleaner.process(css, processOpts, pluginOpts)
                         * // This is equivalent to:
                         * postcss([ cleaner(pluginOpts) ]).process(css, processOpts)
                         * ```
                         *
                         * Asynchronous plugins should return a `Promise` instance.
                         *
                         * ```js
                         * postcss.plugin('postcss-import', () => {
                         *   return (root, result) => {
                         *     return new Promise( (resolve, reject) => {
                         *       fs.readFile('base.css', (base) => {
                         *         root.prepend(base)
                         *         resolve()
                         *       })
                         *     })
                         *   }
                         * })
                         * ```
                         *
                         * Add warnings using the {@link Node#warn} method.
                         * Send data to other plugins using the {@link Result#messages} array.
                         *
                         * ```js
                         * postcss.plugin('postcss-caniuse-test', () => {
                         *   return (root, result) => {
                         *     root.walkDecls(decl => {
                         *       if (!caniuse.support(decl.prop)) {
                         *         decl.warn(result, 'Some browsers do not support ' + decl.prop)
                         *       }
                         *     })
                         *   }
                         * })
                         * ```
                         *
                         * @param {string} name          PostCSS plugin name. Same as in `name`
                         *                               property in `package.json`. It will be saved
                         *                               in `plugin.postcssPlugin` property.
                         * @param {function} initializer Will receive plugin options
                         *                               and should return {@link pluginFunction}
                         *
                         * @return {Plugin} PostCSS plugin.
                         */postcss.plugin = function plugin(name, initializer) {
                            function creator() {
                                var transformer = initializer.apply(void 0, arguments);
                                transformer.postcssPlugin = name;
                                transformer.postcssVersion = new _processor["default"]().version;
                                return transformer;
                            }

                            var cache;
                            Object.defineProperty(creator, 'postcss', {
                                get: function get() {
                                    if (!cache) cache = creator();
                                    return cache;
                                }
                            });
                            creator.process = function (css, processOpts, pluginOpts) {
                                return postcss([creator(pluginOpts)]).process(css, processOpts);
                            };
                            return creator;
                        };
                        /**
                         * Default function to convert a node tree into a CSS string.
                         *
                         * @param {Node} node       Start node for stringifing. Usually {@link Root}.
                         * @param {builder} builder Function to concatenate CSS from node’s parts
                         *                          or generate string and source map.
                         *
                         * @return {void}
                         *
                         * @function
                         */postcss.stringify = _stringify["default"];
                        /**
                         * Parses source css and returns a new {@link Root} node,
                         * which contains the source CSS nodes.
                         *
                         * @param {string|toString} css   String with input CSS or any object
                         *                                with toString() method, like a Buffer
                         * @param {processOptions} [opts] Options with only `from` and `map` keys.
                         *
                         * @return {Root} PostCSS AST.
                         *
                         * @example
                         * // Simple CSS concatenation with source map support
                         * const root1 = postcss.parse(css1, { from: file1 })
                         * const root2 = postcss.parse(css2, { from: file2 })
                         * root1.append(root2).toResult().css
                         *
                         * @function
                         */postcss.parse = _parse["default"];
                        /**
                         * Contains the {@link vendor} module.
                         *
                         * @type {vendor}
                         *
                         * @example
                         * postcss.vendor.unprefixed('-moz-tab') //=> ['tab']
                         */postcss.vendor = _vendor["default"];
                        /**
                         * Contains the {@link list} module.
                         *
                         * @member {list}
                         *
                         * @example
                         * postcss.list.space('5px calc(10% + 5px)') //=> ['5px', 'calc(10% + 5px)']
                         */postcss.list = _list["default"];
                        /**
                         * Creates a new {@link Comment} node.
                         *
                         * @param {object} [defaults] Properties for the new node.
                         *
                         * @return {Comment} New comment node
                         *
                         * @example
                         * postcss.comment({ text: 'test' })
                         */postcss.comment = function (defaults) {
                            return new _comment["default"](defaults);
                        };
                        /**
                         * Creates a new {@link AtRule} node.
                         *
                         * @param {object} [defaults] Properties for the new node.
                         *
                         * @return {AtRule} new at-rule node
                         *
                         * @example
                         * postcss.atRule({ name: 'charset' }).toString() //=> "@charset"
                         */postcss.atRule = function (defaults) {
                            return new _atRule["default"](defaults);
                        };
                        /**
                         * Creates a new {@link Declaration} node.
                         *
                         * @param {object} [defaults] Properties for the new node.
                         *
                         * @return {Declaration} new declaration node
                         *
                         * @example
                         * postcss.decl({ prop: 'color', value: 'red' }).toString() //=> "color: red"
                         */postcss.decl = function (defaults) {
                            return new _declaration["default"](defaults);
                        };
                        /**
                         * Creates a new {@link Rule} node.
                         *
                         * @param {object} [defaults] Properties for the new node.
                         *
                         * @return {Rule} new rule node
                         *
                         * @example
                         * postcss.rule({ selector: 'a' }).toString() //=> "a {\n}"
                         */postcss.rule = function (defaults) {
                            return new _rule["default"](defaults);
                        };
                        /**
                         * Creates a new {@link Root} node.
                         *
                         * @param {object} [defaults] Properties for the new node.
                         *
                         * @return {Root} new root node.
                         *
                         * @example
                         * postcss.root({ after: '\n' }).toString() //=> "\n"
                         */postcss.root = function (defaults) {
                            return new _root["default"](defaults);
                        };
                        var _default = postcss;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {
                        "./at-rule": 39,
                        "./comment": 40,
                        "./declaration": 43,
                        "./list": 46,
                        "./parse": 49,
                        "./processor": 53,
                        "./root": 55,
                        "./rule": 56,
                        "./stringify": 58,
                        "./vendor": 60
                    }],
                    52: [function (require, module, exports) {
                        (function (Buffer) {
                            "use strict";
                            exports.__esModule = true;
                            exports["default"] = void 0;
                            var _sourceMap = _interopRequireDefault(require("source-map"));
                            var _path = _interopRequireDefault(require("path"));
                            var _fs = _interopRequireDefault(require("fs"));

                            function _interopRequireDefault(obj) {
                                return obj && obj.__esModule ? obj : {"default": obj};
                            }

                            function fromBase64(str) {
                                if (Buffer) {
                                    return Buffer.from(str, 'base64').toString();
                                } else {
                                    return window.atob(str);
                                }
                            }

                            /**
                             * Source map information from input CSS.
                             * For example, source map after Sass compiler.
                             *
                             * This class will automatically find source map in input CSS or in file system
                             * near input file (according `from` option).
                             *
                             * @example
                             * const root = postcss.parse(css, { from: 'a.sass.css' })
                             * root.input.map //=> PreviousMap
                             */var PreviousMap =/*#__PURE__*/function () {
                                /**
                                 * @param {string}         css    Input CSS source.
                                 * @param {processOptions} [opts] {@link Processor#process} options.
                                 */function PreviousMap(css, opts) {
                                    this.loadAnnotation(css);
                                    /**
                                     * Was source map inlined by data-uri to input CSS.
                                     *
                                     * @type {boolean}
                                     */this.inline = this.startWith(this.annotation, 'data:');
                                    var prev = opts.map ? opts.map.prev : undefined;
                                    var text = this.loadMap(opts.from, prev);
                                    if (text) this.text = text;
                                }

                                /**
                                 * Create a instance of `SourceMapGenerator` class
                                 * from the `source-map` library to work with source map information.
                                 *
                                 * It is lazy method, so it will create object only on first call
                                 * and then it will use cache.
                                 *
                                 * @return {SourceMapGenerator} Object with source map information.
                                 */var _proto = PreviousMap.prototype;
                                _proto.consumer = function consumer() {
                                    if (!this.consumerCache) {
                                        this.consumerCache = new _sourceMap["default"].SourceMapConsumer(this.text);
                                    }
                                    return this.consumerCache;
                                }/**
                                 * Does source map contains `sourcesContent` with input source text.
                                 *
                                 * @return {boolean} Is `sourcesContent` present.
                                 */;
                                _proto.withContent = function withContent() {
                                    return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);
                                };
                                _proto.startWith = function startWith(string, start) {
                                    if (!string) return false;
                                    return string.substr(0, start.length) === start;
                                };
                                _proto.loadAnnotation = function loadAnnotation(css) {
                                    var match = css.match(/\/\*\s*# sourceMappingURL=(.*)\s*\*\//);
                                    if (match) this.annotation = match[1].trim();
                                };
                                _proto.decodeInline = function decodeInline(text) {
                                    var baseCharsetUri = /^data:application\/json;charset=utf-?8;base64,/;
                                    var baseUri = /^data:application\/json;base64,/;
                                    var uri = 'data:application/json,';
                                    if (this.startWith(text, uri)) {
                                        return decodeURIComponent(text.substr(uri.length));
                                    }
                                    if (baseCharsetUri.test(text) || baseUri.test(text)) {
                                        return fromBase64(text.substr(RegExp.lastMatch.length));
                                    }
                                    var encoding = text.match(/data:application\/json;([^,]+),/)[1];
                                    throw new Error('Unsupported source map encoding ' + encoding);
                                };
                                _proto.loadMap = function loadMap(file, prev) {
                                    if (prev === false) return false;
                                    if (prev) {
                                        if (typeof prev === 'string') {
                                            return prev;
                                        } else if (typeof prev === 'function') {
                                            var prevPath = prev(file);
                                            if (prevPath && _fs["default"].existsSync && _fs["default"].existsSync(prevPath)) {
                                                return _fs["default"].readFileSync(prevPath, 'utf-8').toString().trim();
                                            } else {
                                                throw new Error('Unable to load previous source map: ' + prevPath.toString());
                                            }
                                        } else if (prev instanceof _sourceMap["default"].SourceMapConsumer) {
                                            return _sourceMap["default"].SourceMapGenerator.fromSourceMap(prev).toString();
                                        } else if (prev instanceof _sourceMap["default"].SourceMapGenerator) {
                                            return prev.toString();
                                        } else if (this.isMap(prev)) {
                                            return JSON.stringify(prev);
                                        } else {
                                            throw new Error('Unsupported previous source map format: ' + prev.toString());
                                        }
                                    } else if (this.inline) {
                                        return this.decodeInline(this.annotation);
                                    } else if (this.annotation) {
                                        var map = this.annotation;
                                        if (file) map = _path["default"].join(_path["default"].dirname(file), map);
                                        this.root = _path["default"].dirname(map);
                                        if (_fs["default"].existsSync && _fs["default"].existsSync(map)) {
                                            return _fs["default"].readFileSync(map, 'utf-8').toString().trim();
                                        } else {
                                            return false;
                                        }
                                    }
                                };
                                _proto.isMap = function isMap(map) {
                                    if (_typeof(map) !== 'object') return false;
                                    return typeof map.mappings === 'string' || typeof map._mappings === 'string';
                                };
                                return PreviousMap;
                            }();
                            var _default = PreviousMap;
                            exports["default"] = _default;
                            module.exports = exports["default"];
                        }).call(this, require("buffer").Buffer);
                    }, {"buffer": 3, "fs": 2, "path": 38, "source-map": 78}],
                    53: [function (require, module, exports) {
                        (function (process) {
                            "use strict";
                            exports.__esModule = true;
                            exports["default"] = void 0;
                            var _lazyResult = _interopRequireDefault(require("./lazy-result"));

                            function _interopRequireDefault(obj) {
                                return obj && obj.__esModule ? obj : {"default": obj};
                            }

                            /**
                             * Contains plugins to process CSS. Create one `Processor` instance,
                             * initialize its plugins, and then use that instance on numerous CSS files.
                             *
                             * @example
                             * const processor = postcss([autoprefixer, precss])
                             * processor.process(css1).then(result => console.log(result.css))
                             * processor.process(css2).then(result => console.log(result.css))
                             */var Processor =/*#__PURE__*/function () {
                                /**
                                 * @param {Array.<Plugin|pluginFunction>|Processor} plugins PostCSS plugins.
                                 *        See {@link Processor#use} for plugin format.
                                 */function Processor(plugins) {
                                    if (plugins === void 0) {
                                        plugins = [];
                                    }
                                    /**
                                     * Current PostCSS version.
                                     *
                                     * @type {string}
                                     *
                                     * @example
                                     * if (result.processor.version.split('.')[0] !== '6') {
                                     *   throw new Error('This plugin works only with PostCSS 6')
                                     * }
                                     */this.version = '7.0.27';
                                    /**
                                     * Plugins added to this processor.
                                     *
                                     * @type {pluginFunction[]}
                                     *
                                     * @example
                                     * const processor = postcss([autoprefixer, precss])
                                     * processor.plugins.length //=> 2
                                     */this.plugins = this.normalize(plugins);
                                }

                                /**
                                 * Adds a plugin to be used as a CSS processor.
                                 *
                                 * PostCSS plugin can be in 4 formats:
                                 * * A plugin created by {@link postcss.plugin} method.
                                 * * A function. PostCSS will pass the function a @{link Root}
                                 *   as the first argument and current {@link Result} instance
                                 *   as the second.
                                 * * An object with a `postcss` method. PostCSS will use that method
                                 *   as described in #2.
                                 * * Another {@link Processor} instance. PostCSS will copy plugins
                                 *   from that instance into this one.
                                 *
                                 * Plugins can also be added by passing them as arguments when creating
                                 * a `postcss` instance (see [`postcss(plugins)`]).
                                 *
                                 * Asynchronous plugins should return a `Promise` instance.
                                 *
                                 * @param {Plugin|pluginFunction|Processor} plugin PostCSS plugin
                                 *                                                 or {@link Processor}
                                 *                                                 with plugins.
                                 *
                                 * @example
                                 * const processor = postcss()
                                 *   .use(autoprefixer)
                                 *   .use(precss)
                                 *
                                 * @return {Processes} Current processor to make methods chain.
                                 */var _proto = Processor.prototype;
                                _proto.use = function use(plugin) {
                                    this.plugins = this.plugins.concat(this.normalize([plugin]));
                                    return this;
                                }/**
                                 * Parses source CSS and returns a {@link LazyResult} Promise proxy.
                                 * Because some plugins can be asynchronous it doesn’t make
                                 * any transformations. Transformations will be applied
                                 * in the {@link LazyResult} methods.
                                 *
                                 * @param {string|toString|Result} css String with input CSS or any object
                                 *                                     with a `toString()` method,
                                 *                                     like a Buffer. Optionally, send
                                 *                                     a {@link Result} instance
                                 *                                     and the processor will take
                                 *                                     the {@link Root} from it.
                                 * @param {processOptions} [opts]      Options.
                                 *
                                 * @return {LazyResult} Promise proxy.
                                 *
                                 * @example
                                 * processor.process(css, { from: 'a.css', to: 'a.out.css' })
                                 *   .then(result => {
                                 *      console.log(result.css)
                                 *   })
                                 */;
                                _proto.process = function (_process) {
                                    function process(_x) {
                                        return _process.apply(this, arguments);
                                    }

                                    process.toString = function () {
                                        return _process.toString();
                                    };
                                    return process;
                                }(function (css, opts) {
                                    if (opts === void 0) {
                                        opts = {};
                                    }
                                    if (this.plugins.length === 0 && opts.parser === opts.stringifier) {
                                        if (process.env.NODE_ENV !== 'production') {
                                            if (typeof console !== 'undefined' && console.warn) {
                                                console.warn('You did not set any plugins, parser, or stringifier. ' + 'Right now, PostCSS does nothing. Pick plugins for your case ' + 'on https://www.postcss.parts/ and use them in postcss.config.js.');
                                            }
                                        }
                                    }
                                    return new _lazyResult["default"](this, css, opts);
                                });
                                _proto.normalize = function normalize(plugins) {
                                    var normalized = [];
                                    for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ;) {
                                        var _ref;
                                        if (_isArray) {
                                            if (_i >= _iterator.length) break;
                                            _ref = _iterator[_i++];
                                        } else {
                                            _i = _iterator.next();
                                            if (_i.done) break;
                                            _ref = _i.value;
                                        }
                                        var i = _ref;
                                        if (i.postcss) i = i.postcss;
                                        if (_typeof(i) === 'object' && Array.isArray(i.plugins)) {
                                            normalized = normalized.concat(i.plugins);
                                        } else if (typeof i === 'function') {
                                            normalized.push(i);
                                        } else if (_typeof(i) === 'object' && (i.parse || i.stringify)) {
                                            if (process.env.NODE_ENV !== 'production') {
                                                throw new Error('PostCSS syntaxes cannot be used as plugins. Instead, please use ' + 'one of the syntax/parser/stringifier options as outlined ' + 'in your PostCSS runner documentation.');
                                            }
                                        } else {
                                            throw new Error(i + ' is not a PostCSS plugin');
                                        }
                                    }
                                    return normalized;
                                };
                                return Processor;
                            }();
                            var _default = Processor;/**
                             * @callback builder
                             * @param {string} part          Part of generated CSS connected to this node.
                             * @param {Node}   node          AST node.
                             * @param {"start"|"end"} [type] Node’s part type.
                             */ /**
                             * @callback parser
                             *
                             * @param {string|toString} css   String with input CSS or any object
                             *                                with toString() method, like a Buffer.
                             * @param {processOptions} [opts] Options with only `from` and `map` keys.
                             *
                             * @return {Root} PostCSS AST
                             */ /**
                             * @callback stringifier
                             *
                             * @param {Node} node       Start node for stringifing. Usually {@link Root}.
                             * @param {builder} builder Function to concatenate CSS from node’s parts
                             *                          or generate string and source map.
                             *
                             * @return {void}
                             */ /**
                             * @typedef {object} syntax
                             * @property {parser} parse          Function to generate AST by string.
                             * @property {stringifier} stringify Function to generate string by AST.
                             */ /**
                             * @typedef {object} toString
                             * @property {function} toString
                             */ /**
                             * @callback pluginFunction
                             * @param {Root} root     Parsed input CSS.
                             * @param {Result} result Result to set warnings or check other plugins.
                             */ /**
                             * @typedef {object} Plugin
                             * @property {function} postcss PostCSS plugin function.
                             */
                            /**
                             * @typedef {object} processOptions
                             * @property {string} from             The path of the CSS source file.
                             *                                     You should always set `from`,
                             *                                     because it is used in source map
                             *                                     generation and syntax error messages.
                             * @property {string} to               The path where you’ll put the output
                             *                                     CSS file. You should always set `to`
                             *                                     to generate correct source maps.
                             * @property {parser} parser           Function to generate AST by string.
                             * @property {stringifier} stringifier Class to generate string by AST.
                             * @property {syntax} syntax           Object with `parse` and `stringify`.
                             * @property {object} map              Source map options.
                             * @property {boolean} map.inline                    Does source map should
                             *                                                   be embedded in the output
                             *                                                   CSS as a base64-encoded
                             *                                                   comment.
                             * @property {string|object|false|function} map.prev Source map content
                             *                                                   from a previous
                             *                                                   processing step
                             *                                                   (for example, Sass).
                             *                                                   PostCSS will try to find
                             *                                                   previous map automatically,
                             *                                                   so you could disable it by
                             *                                                   `false` value.
                             * @property {boolean} map.sourcesContent            Does PostCSS should set
                             *                                                   the origin content to map.
                             * @property {string|false} map.annotation           Does PostCSS should set
                             *                                                   annotation comment to map.
                             * @property {string} map.from                       Override `from` in map’s
                             *                                                   sources`.
                             */exports["default"] = _default;
                            module.exports = exports["default"];
                        }).call(this, require('_process'));
                    }, {"./lazy-result": 45, "_process": 63}],
                    54: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _warning = _interopRequireDefault(require("./warning"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        function _defineProperties(target, props) {
                            for (var i = 0; i < props.length; i++) {
                                var descriptor = props[i];
                                descriptor.enumerable = descriptor.enumerable || false;
                                descriptor.configurable = true;
                                if ("value" in descriptor) descriptor.writable = true;
                                Object.defineProperty(target, descriptor.key, descriptor);
                            }
                        }

                        function _createClass(Constructor, protoProps, staticProps) {
                            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                            if (staticProps) _defineProperties(Constructor, staticProps);
                            return Constructor;
                        }

                        /**
                         * Provides the result of the PostCSS transformations.
                         *
                         * A Result instance is returned by {@link LazyResult#then}
                         * or {@link Root#toResult} methods.
                         *
                         * @example
                         * postcss([autoprefixer]).process(css).then(result => {
                         *  console.log(result.css)
                         * })
                         *
                         * @example
                         * const result2 = postcss.parse(css).toResult()
                         */var Result =/*#__PURE__*/function () {
                            /**
                             * @param {Processor} processor Processor used for this transformation.
                             * @param {Root}      root      Root node after all transformations.
                             * @param {processOptions} opts Options from the {@link Processor#process}
                             *                              or {@link Root#toResult}.
                             */function Result(processor, root, opts) {
                                /**
                                 * The Processor instance used for this transformation.
                                 *
                                 * @type {Processor}
                                 *
                                 * @example
                                 * for (const plugin of result.processor.plugins) {
                                 *   if (plugin.postcssPlugin === 'postcss-bad') {
                                 *     throw 'postcss-good is incompatible with postcss-bad'
                                 *   }
                                 * })
                                 */this.processor = processor;
                                /**
                                 * Contains messages from plugins (e.g., warnings or custom messages).
                                 * Each message should have type and plugin properties.
                                 *
                                 * @type {Message[]}
                                 *
                                 * @example
                                 * postcss.plugin('postcss-min-browser', () => {
                                 *   return (root, result) => {
                                 *     const browsers = detectMinBrowsersByCanIUse(root)
                                 *     result.messages.push({
                                 *       type: 'min-browser',
                                 *       plugin: 'postcss-min-browser',
                                 *       browsers
                                 *     })
                                 *   }
                                 * })
                                 */this.messages = [];
                                /**
                                 * Root node after all transformations.
                                 *
                                 * @type {Root}
                                 *
                                 * @example
                                 * root.toResult().root === root
                                 */this.root = root;
                                /**
                                 * Options from the {@link Processor#process} or {@link Root#toResult} call
                                 * that produced this Result instance.
                                 *
                                 * @type {processOptions}
                                 *
                                 * @example
                                 * root.toResult(opts).opts === opts
                                 */this.opts = opts;
                                /**
                                 * A CSS string representing of {@link Result#root}.
                                 *
                                 * @type {string}
                                 *
                                 * @example
                                 * postcss.parse('a{}').toResult().css //=> "a{}"
                                 */this.css = undefined;
                                /**
                                 * An instance of `SourceMapGenerator` class from the `source-map` library,
                                 * representing changes to the {@link Result#root} instance.
                                 *
                                 * @type {SourceMapGenerator}
                                 *
                                 * @example
                                 * result.map.toJSON() //=> { version: 3, file: 'a.css', … }
                                 *
                                 * @example
                                 * if (result.map) {
                                 *   fs.writeFileSync(result.opts.to + '.map', result.map.toString())
                                 * }
                                 */this.map = undefined;
                            }

                            /**
                             * Returns for @{link Result#css} content.
                             *
                             * @example
                             * result + '' === result.css
                             *
                             * @return {string} String representing of {@link Result#root}.
                             */var _proto = Result.prototype;
                            _proto.toString = function toString() {
                                return this.css;
                            }/**
                             * Creates an instance of {@link Warning} and adds it
                             * to {@link Result#messages}.
                             *
                             * @param {string} text        Warning message.
                             * @param {Object} [opts]      Warning options.
                             * @param {Node}   opts.node   CSS node that caused the warning.
                             * @param {string} opts.word   Word in CSS source that caused the warning.
                             * @param {number} opts.index  Index in CSS node string that caused
                             *                             the warning.
                             * @param {string} opts.plugin Name of the plugin that created
                             *                             this warning. {@link Result#warn} fills
                             *                             this property automatically.
                             *
                             * @return {Warning} Created warning.
                             */;
                            _proto.warn = function warn(text, opts) {
                                if (opts === void 0) {
                                    opts = {};
                                }
                                if (!opts.plugin) {
                                    if (this.lastPlugin && this.lastPlugin.postcssPlugin) {
                                        opts.plugin = this.lastPlugin.postcssPlugin;
                                    }
                                }
                                var warning = new _warning["default"](text, opts);
                                this.messages.push(warning);
                                return warning;
                            }/**
                             * Returns warnings from plugins. Filters {@link Warning} instances
                             * from {@link Result#messages}.
                             *
                             * @example
                             * result.warnings().forEach(warn => {
                             *   console.warn(warn.toString())
                             * })
                             *
                             * @return {Warning[]} Warnings from plugins.
                             */;
                            _proto.warnings = function warnings() {
                                return this.messages.filter(function (i) {
                                    return i.type === 'warning';
                                });
                            }/**
                             * An alias for the {@link Result#css} property.
                             * Use it with syntaxes that generate non-CSS output.
                             *
                             * @type {string}
                             *
                             * @example
                             * result.css === result.content
                             */;
                            _createClass(Result, [{
                                key: "content", get: function get() {
                                    return this.css;
                                }
                            }]);
                            return Result;
                        }();
                        var _default = Result;
                        /**
                         * @typedef  {object} Message
                         * @property {string} type   Message type.
                         * @property {string} plugin Source PostCSS plugin name.
                         */exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {"./warning": 62}],
                    55: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _container = _interopRequireDefault(require("./container"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        function _inheritsLoose(subClass, superClass) {
                            subClass.prototype = Object.create(superClass.prototype);
                            subClass.prototype.constructor = subClass;
                            subClass.__proto__ = superClass;
                        }

                        /**
                         * Represents a CSS file and contains all its parsed nodes.
                         *
                         * @extends Container
                         *
                         * @example
                         * const root = postcss.parse('a{color:black} b{z-index:2}')
                         * root.type         //=> 'root'
                         * root.nodes.length //=> 2
                         */var Root =/*#__PURE__*/function (_Container) {
                            _inheritsLoose(Root, _Container);

                            function Root(defaults) {
                                var _this;
                                _this = _Container.call(this, defaults) || this;
                                _this.type = 'root';
                                if (!_this.nodes) _this.nodes = [];
                                return _this;
                            }

                            var _proto = Root.prototype;
                            _proto.removeChild = function removeChild(child, ignore) {
                                var index = this.index(child);
                                if (!ignore && index === 0 && this.nodes.length > 1) {
                                    this.nodes[1].raws.before = this.nodes[index].raws.before;
                                }
                                return _Container.prototype.removeChild.call(this, child);
                            };
                            _proto.normalize = function normalize(child, sample, type) {
                                var nodes = _Container.prototype.normalize.call(this, child);
                                if (sample) {
                                    if (type === 'prepend') {
                                        if (this.nodes.length > 1) {
                                            sample.raws.before = this.nodes[1].raws.before;
                                        } else {
                                            delete sample.raws.before;
                                        }
                                    } else if (this.first !== sample) {
                                        for (var _iterator = nodes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ;) {
                                            var _ref;
                                            if (_isArray) {
                                                if (_i >= _iterator.length) break;
                                                _ref = _iterator[_i++];
                                            } else {
                                                _i = _iterator.next();
                                                if (_i.done) break;
                                                _ref = _i.value;
                                            }
                                            var node = _ref;
                                            node.raws.before = sample.raws.before;
                                        }
                                    }
                                }
                                return nodes;
                            }/**
                             * Returns a {@link Result} instance representing the root’s CSS.
                             *
                             * @param {processOptions} [opts] Options with only `to` and `map` keys.
                             *
                             * @return {Result} Result with current root’s CSS.
                             *
                             * @example
                             * const root1 = postcss.parse(css1, { from: 'a.css' })
                             * const root2 = postcss.parse(css2, { from: 'b.css' })
                             * root1.append(root2)
                             * const result = root1.toResult({ to: 'all.css', map: true })
                             */;
                            _proto.toResult = function toResult(opts) {
                                if (opts === void 0) {
                                    opts = {};
                                }
                                var LazyResult = require('./lazy-result');
                                var Processor = require('./processor');
                                var lazy = new LazyResult(new Processor(), this, opts);
                                return lazy.stringify();
                            }/**
                             * @memberof Root#
                             * @member {object} raws Information to generate byte-to-byte equal
                             *                       node string as it was in the origin input.
                             *
                             * Every parser saves its own properties,
                             * but the default CSS parser uses:
                             *
                             * * `after`: the space symbols after the last child to the end of file.
                             * * `semicolon`: is the last child has an (optional) semicolon.
                             *
                             * @example
                             * postcss.parse('a {}\n').raws //=> { after: '\n' }
                             * postcss.parse('a {}').raws   //=> { after: '' }
                             */;
                            return Root;
                        }(_container["default"]);
                        var _default = Root;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {"./container": 41, "./lazy-result": 45, "./processor": 53}],
                    56: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _container = _interopRequireDefault(require("./container"));
                        var _list = _interopRequireDefault(require("./list"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        function _defineProperties(target, props) {
                            for (var i = 0; i < props.length; i++) {
                                var descriptor = props[i];
                                descriptor.enumerable = descriptor.enumerable || false;
                                descriptor.configurable = true;
                                if ("value" in descriptor) descriptor.writable = true;
                                Object.defineProperty(target, descriptor.key, descriptor);
                            }
                        }

                        function _createClass(Constructor, protoProps, staticProps) {
                            if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                            if (staticProps) _defineProperties(Constructor, staticProps);
                            return Constructor;
                        }

                        function _inheritsLoose(subClass, superClass) {
                            subClass.prototype = Object.create(superClass.prototype);
                            subClass.prototype.constructor = subClass;
                            subClass.__proto__ = superClass;
                        }

                        /**
                         * Represents a CSS rule: a selector followed by a declaration block.
                         *
                         * @extends Container
                         *
                         * @example
                         * const root = postcss.parse('a{}')
                         * const rule = root.first
                         * rule.type       //=> 'rule'
                         * rule.toString() //=> 'a{}'
                         */var Rule =/*#__PURE__*/function (_Container) {
                            _inheritsLoose(Rule, _Container);

                            function Rule(defaults) {
                                var _this;
                                _this = _Container.call(this, defaults) || this;
                                _this.type = 'rule';
                                if (!_this.nodes) _this.nodes = [];
                                return _this;
                            }

                            /**
                             * An array containing the rule’s individual selectors.
                             * Groups of selectors are split at commas.
                             *
                             * @type {string[]}
                             *
                             * @example
                             * const root = postcss.parse('a, b { }')
                             * const rule = root.first
                             *
                             * rule.selector  //=> 'a, b'
                             * rule.selectors //=> ['a', 'b']
                             *
                             * rule.selectors = ['a', 'strong']
                             * rule.selector //=> 'a, strong'
                             */_createClass(Rule, [{
                                key: "selectors", get: function get() {
                                    return _list["default"].comma(this.selector);
                                }, set: function set(values) {
                                    var match = this.selector ? this.selector.match(/,\s*/) : null;
                                    var sep = match ? match[0] : ',' + this.raw('between', 'beforeOpen');
                                    this.selector = values.join(sep);
                                }/**
                                 * @memberof Rule#
                                 * @member {string} selector The rule’s full selector represented
                                 *                           as a string.
                                 *
                                 * @example
                                 * const root = postcss.parse('a, b { }')
                                 * const rule = root.first
                                 * rule.selector //=> 'a, b'
                                 */ /**
                                 * @memberof Rule#
                                 * @member {object} raws Information to generate byte-to-byte equal
                                 *                       node string as it was in the origin input.
                                 *
                                 * Every parser saves its own properties,
                                 * but the default CSS parser uses:
                                 *
                                 * * `before`: the space symbols before the node. It also stores `*`
                                 *   and `_` symbols before the declaration (IE hack).
                                 * * `after`: the space symbols after the last child of the node
                                 *   to the end of the node.
                                 * * `between`: the symbols between the property and value
                                 *   for declarations, selector and `{` for rules, or last parameter
                                 *   and `{` for at-rules.
                                 * * `semicolon`: contains `true` if the last child has
                                 *   an (optional) semicolon.
                                 * * `ownSemicolon`: contains `true` if there is semicolon after rule.
                                 *
                                 * PostCSS cleans selectors from comments and extra spaces,
                                 * but it stores origin content in raws properties.
                                 * As such, if you don’t change a declaration’s value,
                                 * PostCSS will use the raw value with comments.
                                 *
                                 * @example
                                 * const root = postcss.parse('a {\n  color:black\n}')
                                 * root.first.first.raws //=> { before: '', between: ' ', after: '\n' }
                                 */
                            }]);
                            return Rule;
                        }(_container["default"]);
                        var _default = Rule;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {"./container": 41, "./list": 46}],
                    57: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var DEFAULT_RAW = {
                            colon: ': ',
                            indent: '    ',
                            beforeDecl: '\n',
                            beforeRule: '\n',
                            beforeOpen: ' ',
                            beforeClose: '\n',
                            beforeComment: '\n',
                            after: '\n',
                            emptyBody: '',
                            commentLeft: ' ',
                            commentRight: ' ',
                            semicolon: false
                        };

                        function capitalize(str) {
                            return str[0].toUpperCase() + str.slice(1);
                        }

                        var Stringifier =/*#__PURE__*/function () {
                            function Stringifier(builder) {
                                this.builder = builder;
                            }

                            var _proto = Stringifier.prototype;
                            _proto.stringify = function stringify(node, semicolon) {
                                this[node.type](node, semicolon);
                            };
                            _proto.root = function root(node) {
                                this.body(node);
                                if (node.raws.after) this.builder(node.raws.after);
                            };
                            _proto.comment = function comment(node) {
                                var left = this.raw(node, 'left', 'commentLeft');
                                var right = this.raw(node, 'right', 'commentRight');
                                this.builder('/*' + left + node.text + right + '*/', node);
                            };
                            _proto.decl = function decl(node, semicolon) {
                                var between = this.raw(node, 'between', 'colon');
                                var string = node.prop + between + this.rawValue(node, 'value');
                                if (node.important) {
                                    string += node.raws.important || ' !important';
                                }
                                if (semicolon) string += ';';
                                this.builder(string, node);
                            };
                            _proto.rule = function rule(node) {
                                this.block(node, this.rawValue(node, 'selector'));
                                if (node.raws.ownSemicolon) {
                                    this.builder(node.raws.ownSemicolon, node, 'end');
                                }
                            };
                            _proto.atrule = function atrule(node, semicolon) {
                                var name = '@' + node.name;
                                var params = node.params ? this.rawValue(node, 'params') : '';
                                if (typeof node.raws.afterName !== 'undefined') {
                                    name += node.raws.afterName;
                                } else if (params) {
                                    name += ' ';
                                }
                                if (node.nodes) {
                                    this.block(node, name + params);
                                } else {
                                    var end = (node.raws.between || '') + (semicolon ? ';' : '');
                                    this.builder(name + params + end, node);
                                }
                            };
                            _proto.body = function body(node) {
                                var last = node.nodes.length - 1;
                                while (last > 0) {
                                    if (node.nodes[last].type !== 'comment') break;
                                    last -= 1;
                                }
                                var semicolon = this.raw(node, 'semicolon');
                                for (var i = 0; i < node.nodes.length; i++) {
                                    var child = node.nodes[i];
                                    var before = this.raw(child, 'before');
                                    if (before) this.builder(before);
                                    this.stringify(child, last !== i || semicolon);
                                }
                            };
                            _proto.block = function block(node, start) {
                                var between = this.raw(node, 'between', 'beforeOpen');
                                this.builder(start + between + '{', node, 'start');
                                var after;
                                if (node.nodes && node.nodes.length) {
                                    this.body(node);
                                    after = this.raw(node, 'after');
                                } else {
                                    after = this.raw(node, 'after', 'emptyBody');
                                }
                                if (after) this.builder(after);
                                this.builder('}', node, 'end');
                            };
                            _proto.raw = function raw(node, own, detect) {
                                var value;
                                if (!detect) detect = own;// Already had
                                if (own) {
                                    value = node.raws[own];
                                    if (typeof value !== 'undefined') return value;
                                }
                                var parent = node.parent;// Hack for first rule in CSS
                                if (detect === 'before') {
                                    if (!parent || parent.type === 'root' && parent.first === node) {
                                        return '';
                                    }
                                }// Floating child without parent
                                if (!parent) return DEFAULT_RAW[detect];// Detect style by other nodes
                                var root = node.root();
                                if (!root.rawCache) root.rawCache = {};
                                if (typeof root.rawCache[detect] !== 'undefined') {
                                    return root.rawCache[detect];
                                }
                                if (detect === 'before' || detect === 'after') {
                                    return this.beforeAfter(node, detect);
                                } else {
                                    var method = 'raw' + capitalize(detect);
                                    if (this[method]) {
                                        value = this[method](root, node);
                                    } else {
                                        root.walk(function (i) {
                                            value = i.raws[own];
                                            if (typeof value !== 'undefined') return false;
                                        });
                                    }
                                }
                                if (typeof value === 'undefined') value = DEFAULT_RAW[detect];
                                root.rawCache[detect] = value;
                                return value;
                            };
                            _proto.rawSemicolon = function rawSemicolon(root) {
                                var value;
                                root.walk(function (i) {
                                    if (i.nodes && i.nodes.length && i.last.type === 'decl') {
                                        value = i.raws.semicolon;
                                        if (typeof value !== 'undefined') return false;
                                    }
                                });
                                return value;
                            };
                            _proto.rawEmptyBody = function rawEmptyBody(root) {
                                var value;
                                root.walk(function (i) {
                                    if (i.nodes && i.nodes.length === 0) {
                                        value = i.raws.after;
                                        if (typeof value !== 'undefined') return false;
                                    }
                                });
                                return value;
                            };
                            _proto.rawIndent = function rawIndent(root) {
                                if (root.raws.indent) return root.raws.indent;
                                var value;
                                root.walk(function (i) {
                                    var p = i.parent;
                                    if (p && p !== root && p.parent && p.parent === root) {
                                        if (typeof i.raws.before !== 'undefined') {
                                            var parts = i.raws.before.split('\n');
                                            value = parts[parts.length - 1];
                                            value = value.replace(/[^\s]/g, '');
                                            return false;
                                        }
                                    }
                                });
                                return value;
                            };
                            _proto.rawBeforeComment = function rawBeforeComment(root, node) {
                                var value;
                                root.walkComments(function (i) {
                                    if (typeof i.raws.before !== 'undefined') {
                                        value = i.raws.before;
                                        if (value.indexOf('\n') !== -1) {
                                            value = value.replace(/[^\n]+$/, '');
                                        }
                                        return false;
                                    }
                                });
                                if (typeof value === 'undefined') {
                                    value = this.raw(node, null, 'beforeDecl');
                                } else if (value) {
                                    value = value.replace(/[^\s]/g, '');
                                }
                                return value;
                            };
                            _proto.rawBeforeDecl = function rawBeforeDecl(root, node) {
                                var value;
                                root.walkDecls(function (i) {
                                    if (typeof i.raws.before !== 'undefined') {
                                        value = i.raws.before;
                                        if (value.indexOf('\n') !== -1) {
                                            value = value.replace(/[^\n]+$/, '');
                                        }
                                        return false;
                                    }
                                });
                                if (typeof value === 'undefined') {
                                    value = this.raw(node, null, 'beforeRule');
                                } else if (value) {
                                    value = value.replace(/[^\s]/g, '');
                                }
                                return value;
                            };
                            _proto.rawBeforeRule = function rawBeforeRule(root) {
                                var value;
                                root.walk(function (i) {
                                    if (i.nodes && (i.parent !== root || root.first !== i)) {
                                        if (typeof i.raws.before !== 'undefined') {
                                            value = i.raws.before;
                                            if (value.indexOf('\n') !== -1) {
                                                value = value.replace(/[^\n]+$/, '');
                                            }
                                            return false;
                                        }
                                    }
                                });
                                if (value) value = value.replace(/[^\s]/g, '');
                                return value;
                            };
                            _proto.rawBeforeClose = function rawBeforeClose(root) {
                                var value;
                                root.walk(function (i) {
                                    if (i.nodes && i.nodes.length > 0) {
                                        if (typeof i.raws.after !== 'undefined') {
                                            value = i.raws.after;
                                            if (value.indexOf('\n') !== -1) {
                                                value = value.replace(/[^\n]+$/, '');
                                            }
                                            return false;
                                        }
                                    }
                                });
                                if (value) value = value.replace(/[^\s]/g, '');
                                return value;
                            };
                            _proto.rawBeforeOpen = function rawBeforeOpen(root) {
                                var value;
                                root.walk(function (i) {
                                    if (i.type !== 'decl') {
                                        value = i.raws.between;
                                        if (typeof value !== 'undefined') return false;
                                    }
                                });
                                return value;
                            };
                            _proto.rawColon = function rawColon(root) {
                                var value;
                                root.walkDecls(function (i) {
                                    if (typeof i.raws.between !== 'undefined') {
                                        value = i.raws.between.replace(/[^\s:]/g, '');
                                        return false;
                                    }
                                });
                                return value;
                            };
                            _proto.beforeAfter = function beforeAfter(node, detect) {
                                var value;
                                if (node.type === 'decl') {
                                    value = this.raw(node, null, 'beforeDecl');
                                } else if (node.type === 'comment') {
                                    value = this.raw(node, null, 'beforeComment');
                                } else if (detect === 'before') {
                                    value = this.raw(node, null, 'beforeRule');
                                } else {
                                    value = this.raw(node, null, 'beforeClose');
                                }
                                var buf = node.parent;
                                var depth = 0;
                                while (buf && buf.type !== 'root') {
                                    depth += 1;
                                    buf = buf.parent;
                                }
                                if (value.indexOf('\n') !== -1) {
                                    var indent = this.raw(node, null, 'indent');
                                    if (indent.length) {
                                        for (var step = 0; step < depth; step++) {
                                            value += indent;
                                        }
                                    }
                                }
                                return value;
                            };
                            _proto.rawValue = function rawValue(node, prop) {
                                var value = node[prop];
                                var raw = node.raws[prop];
                                if (raw && raw.value === value) {
                                    return raw.raw;
                                }
                                return value;
                            };
                            return Stringifier;
                        }();
                        var _default = Stringifier;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {}],
                    58: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        var _stringifier = _interopRequireDefault(require("./stringifier"));

                        function _interopRequireDefault(obj) {
                            return obj && obj.__esModule ? obj : {"default": obj};
                        }

                        function stringify(node, builder) {
                            var str = new _stringifier["default"](builder);
                            str.stringify(node);
                        }

                        var _default = stringify;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {"./stringifier": 57}],
                    59: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = tokenizer;
                        var SINGLE_QUOTE = '\''.charCodeAt(0);
                        var DOUBLE_QUOTE = '"'.charCodeAt(0);
                        var BACKSLASH = '\\'.charCodeAt(0);
                        var SLASH = '/'.charCodeAt(0);
                        var NEWLINE = '\n'.charCodeAt(0);
                        var SPACE = ' '.charCodeAt(0);
                        var FEED = '\f'.charCodeAt(0);
                        var TAB = '\t'.charCodeAt(0);
                        var CR = '\r'.charCodeAt(0);
                        var OPEN_SQUARE = '['.charCodeAt(0);
                        var CLOSE_SQUARE = ']'.charCodeAt(0);
                        var OPEN_PARENTHESES = '('.charCodeAt(0);
                        var CLOSE_PARENTHESES = ')'.charCodeAt(0);
                        var OPEN_CURLY = '{'.charCodeAt(0);
                        var CLOSE_CURLY = '}'.charCodeAt(0);
                        var SEMICOLON = ';'.charCodeAt(0);
                        var ASTERISK = '*'.charCodeAt(0);
                        var COLON = ':'.charCodeAt(0);
                        var AT = '@'.charCodeAt(0);
                        var RE_AT_END = /[ \n\t\r\f{}()'"\\;/[\]#]/g;
                        var RE_WORD_END = /[ \n\t\r\f(){}:;@!'"\\\][#]|\/(?=\*)/g;
                        var RE_BAD_BRACKET = /.[\\/("'\n]/;
                        var RE_HEX_ESCAPE = /[a-f0-9]/i;

                        function tokenizer(input, options) {
                            if (options === void 0) {
                                options = {};
                            }
                            var css = input.css.valueOf();
                            var ignore = options.ignoreErrors;
                            var code, next, quote, lines, last, content, escape;
                            var nextLine, nextOffset, escaped, escapePos, prev, n, currentToken;
                            var length = css.length;
                            var offset = -1;
                            var line = 1;
                            var pos = 0;
                            var buffer = [];
                            var returned = [];

                            function position() {
                                return pos;
                            }

                            function unclosed(what) {
                                throw input.error('Unclosed ' + what, line, pos - offset);
                            }

                            function endOfFile() {
                                return returned.length === 0 && pos >= length;
                            }

                            function nextToken(opts) {
                                if (returned.length) return returned.pop();
                                if (pos >= length) return;
                                var ignoreUnclosed = opts ? opts.ignoreUnclosed : false;
                                code = css.charCodeAt(pos);
                                if (code === NEWLINE || code === FEED || code === CR && css.charCodeAt(pos + 1) !== NEWLINE) {
                                    offset = pos;
                                    line += 1;
                                }
                                switch (code) {
                                    case NEWLINE:
                                    case SPACE:
                                    case TAB:
                                    case CR:
                                    case FEED:
                                        next = pos;
                                        do {
                                            next += 1;
                                            code = css.charCodeAt(next);
                                            if (code === NEWLINE) {
                                                offset = next;
                                                line += 1;
                                            }
                                        } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);
                                        currentToken = ['space', css.slice(pos, next)];
                                        pos = next - 1;
                                        break;
                                    case OPEN_SQUARE:
                                    case CLOSE_SQUARE:
                                    case OPEN_CURLY:
                                    case CLOSE_CURLY:
                                    case COLON:
                                    case SEMICOLON:
                                    case CLOSE_PARENTHESES:
                                        var controlChar = String.fromCharCode(code);
                                        currentToken = [controlChar, controlChar, line, pos - offset];
                                        break;
                                    case OPEN_PARENTHESES:
                                        prev = buffer.length ? buffer.pop()[1] : '';
                                        n = css.charCodeAt(pos + 1);
                                        if (prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {
                                            next = pos;
                                            do {
                                                escaped = false;
                                                next = css.indexOf(')', next + 1);
                                                if (next === -1) {
                                                    if (ignore || ignoreUnclosed) {
                                                        next = pos;
                                                        break;
                                                    } else {
                                                        unclosed('bracket');
                                                    }
                                                }
                                                escapePos = next;
                                                while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                                                    escapePos -= 1;
                                                    escaped = !escaped;
                                                }
                                            } while (escaped);
                                            currentToken = ['brackets', css.slice(pos, next + 1), line, pos - offset, line, next - offset];
                                            pos = next;
                                        } else {
                                            next = css.indexOf(')', pos + 1);
                                            content = css.slice(pos, next + 1);
                                            if (next === -1 || RE_BAD_BRACKET.test(content)) {
                                                currentToken = ['(', '(', line, pos - offset];
                                            } else {
                                                currentToken = ['brackets', content, line, pos - offset, line, next - offset];
                                                pos = next;
                                            }
                                        }
                                        break;
                                    case SINGLE_QUOTE:
                                    case DOUBLE_QUOTE:
                                        quote = code === SINGLE_QUOTE ? '\'' : '"';
                                        next = pos;
                                        do {
                                            escaped = false;
                                            next = css.indexOf(quote, next + 1);
                                            if (next === -1) {
                                                if (ignore || ignoreUnclosed) {
                                                    next = pos + 1;
                                                    break;
                                                } else {
                                                    unclosed('string');
                                                }
                                            }
                                            escapePos = next;
                                            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {
                                                escapePos -= 1;
                                                escaped = !escaped;
                                            }
                                        } while (escaped);
                                        content = css.slice(pos, next + 1);
                                        lines = content.split('\n');
                                        last = lines.length - 1;
                                        if (last > 0) {
                                            nextLine = line + last;
                                            nextOffset = next - lines[last].length;
                                        } else {
                                            nextLine = line;
                                            nextOffset = offset;
                                        }
                                        currentToken = ['string', css.slice(pos, next + 1), line, pos - offset, nextLine, next - nextOffset];
                                        offset = nextOffset;
                                        line = nextLine;
                                        pos = next;
                                        break;
                                    case AT:
                                        RE_AT_END.lastIndex = pos + 1;
                                        RE_AT_END.test(css);
                                        if (RE_AT_END.lastIndex === 0) {
                                            next = css.length - 1;
                                        } else {
                                            next = RE_AT_END.lastIndex - 2;
                                        }
                                        currentToken = ['at-word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];
                                        pos = next;
                                        break;
                                    case BACKSLASH:
                                        next = pos;
                                        escape = true;
                                        while (css.charCodeAt(next + 1) === BACKSLASH) {
                                            next += 1;
                                            escape = !escape;
                                        }
                                        code = css.charCodeAt(next + 1);
                                        if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {
                                            next += 1;
                                            if (RE_HEX_ESCAPE.test(css.charAt(next))) {
                                                while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {
                                                    next += 1;
                                                }
                                                if (css.charCodeAt(next + 1) === SPACE) {
                                                    next += 1;
                                                }
                                            }
                                        }
                                        currentToken = ['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];
                                        pos = next;
                                        break;
                                    default:
                                        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {
                                            next = css.indexOf('*/', pos + 2) + 1;
                                            if (next === 0) {
                                                if (ignore || ignoreUnclosed) {
                                                    next = css.length;
                                                } else {
                                                    unclosed('comment');
                                                }
                                            }
                                            content = css.slice(pos, next + 1);
                                            lines = content.split('\n');
                                            last = lines.length - 1;
                                            if (last > 0) {
                                                nextLine = line + last;
                                                nextOffset = next - lines[last].length;
                                            } else {
                                                nextLine = line;
                                                nextOffset = offset;
                                            }
                                            currentToken = ['comment', content, line, pos - offset, nextLine, next - nextOffset];
                                            offset = nextOffset;
                                            line = nextLine;
                                            pos = next;
                                        } else {
                                            RE_WORD_END.lastIndex = pos + 1;
                                            RE_WORD_END.test(css);
                                            if (RE_WORD_END.lastIndex === 0) {
                                                next = css.length - 1;
                                            } else {
                                                next = RE_WORD_END.lastIndex - 2;
                                            }
                                            currentToken = ['word', css.slice(pos, next + 1), line, pos - offset, line, next - offset];
                                            buffer.push(currentToken);
                                            pos = next;
                                        }
                                        break;
                                }
                                pos++;
                                return currentToken;
                            }

                            function back(token) {
                                returned.push(token);
                            }

                            return {back: back, nextToken: nextToken, endOfFile: endOfFile, position: position};
                        }

                        module.exports = exports["default"];
                    }, {}],
                    60: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        /**
                         * Contains helpers for working with vendor prefixes.
                         *
                         * @example
                         * const vendor = postcss.vendor
                         *
                         * @namespace vendor
                         */var vendor = {
                            /**
                             * Returns the vendor prefix extracted from an input string.
                             *
                             * @param {string} prop String with or without vendor prefix.
                             *
                             * @return {string} vendor prefix or empty string
                             *
                             * @example
                             * postcss.vendor.prefix('-moz-tab-size') //=> '-moz-'
                             * postcss.vendor.prefix('tab-size')      //=> ''
                             */prefix: function prefix(prop) {
                                var match = prop.match(/^(-\w+-)/);
                                if (match) {
                                    return match[0];
                                }
                                return '';
                            }, /**
                             * Returns the input string stripped of its vendor prefix.
                             *
                             * @param {string} prop String with or without vendor prefix.
                             *
                             * @return {string} String name without vendor prefixes.
                             *
                             * @example
                             * postcss.vendor.unprefixed('-moz-tab-size') //=> 'tab-size'
                             */unprefixed: function unprefixed(prop) {
                                return prop.replace(/^-\w+-/, '');
                            }
                        };
                        var _default = vendor;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {}],
                    61: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = warnOnce;
                        var printed = {};

                        function warnOnce(message) {
                            if (printed[message]) return;
                            printed[message] = true;
                            if (typeof console !== 'undefined' && console.warn) {
                                console.warn(message);
                            }
                        }

                        module.exports = exports["default"];
                    }, {}],
                    62: [function (require, module, exports) {
                        "use strict";
                        exports.__esModule = true;
                        exports["default"] = void 0;
                        /**
                         * Represents a plugin’s warning. It can be created using {@link Node#warn}.
                         *
                         * @example
                         * if (decl.important) {
                         *   decl.warn(result, 'Avoid !important', { word: '!important' })
                         * }
                         */var Warning =/*#__PURE__*/function () {
                            /**
                             * @param {string} text        Warning message.
                             * @param {Object} [opts]      Warning options.
                             * @param {Node}   opts.node   CSS node that caused the warning.
                             * @param {string} opts.word   Word in CSS source that caused the warning.
                             * @param {number} opts.index  Index in CSS node string that caused
                             *                             the warning.
                             * @param {string} opts.plugin Name of the plugin that created
                             *                             this warning. {@link Result#warn} fills
                             *                             this property automatically.
                             */function Warning(text, opts) {
                                if (opts === void 0) {
                                    opts = {};
                                }
                                /**
                                 * Type to filter warnings from {@link Result#messages}.
                                 * Always equal to `"warning"`.
                                 *
                                 * @type {string}
                                 *
                                 * @example
                                 * const nonWarning = result.messages.filter(i => i.type !== 'warning')
                                 */this.type = 'warning';
                                /**
                                 * The warning message.
                                 *
                                 * @type {string}
                                 *
                                 * @example
                                 * warning.text //=> 'Try to avoid !important'
                                 */this.text = text;
                                if (opts.node && opts.node.source) {
                                    var pos = opts.node.positionBy(opts);
                                    /**
                                     * Line in the input file with this warning’s source.
                                     * @type {number}
                                     *
                                     * @example
                                     * warning.line //=> 5
                                     */this.line = pos.line;
                                    /**
                                     * Column in the input file with this warning’s source.
                                     *
                                     * @type {number}
                                     *
                                     * @example
                                     * warning.column //=> 6
                                     */this.column = pos.column;
                                }
                                for (var opt in opts) {
                                    this[opt] = opts[opt];
                                }
                            }

                            /**
                             * Returns a warning position and message.
                             *
                             * @example
                             * warning.toString() //=> 'postcss-lint:a.css:10:14: Avoid !important'
                             *
                             * @return {string} Warning position and message.
                             */var _proto = Warning.prototype;
                            _proto.toString = function toString() {
                                if (this.node) {
                                    return this.node.error(this.text, {
                                        plugin: this.plugin,
                                        index: this.index,
                                        word: this.word
                                    }).message;
                                }
                                if (this.plugin) {
                                    return this.plugin + ': ' + this.text;
                                }
                                return this.text;
                            }/**
                             * @memberof Warning#
                             * @member {string} plugin The name of the plugin that created
                             *                         it will fill this property automatically.
                             *                         this warning. When you call {@link Node#warn}
                             *
                             * @example
                             * warning.plugin //=> 'postcss-important'
                             */ /**
                             * @memberof Warning#
                             * @member {Node} node Contains the CSS node that caused the warning.
                             *
                             * @example
                             * warning.node.toString() //=> 'color: white !important'
                             */;
                            return Warning;
                        }();
                        var _default = Warning;
                        exports["default"] = _default;
                        module.exports = exports["default"];
                    }, {}],
                    63: [function (require, module, exports) {// shim for using process in browser
                        var process = module.exports = {};// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
                        var cachedSetTimeout;
                        var cachedClearTimeout;

                        function defaultSetTimout() {
                            throw new Error('setTimeout has not been defined');
                        }

                        function defaultClearTimeout() {
                            throw new Error('clearTimeout has not been defined');
                        }

                        (function () {
                            try {
                                if (typeof setTimeout === 'function') {
                                    cachedSetTimeout = setTimeout;
                                } else {
                                    cachedSetTimeout = defaultSetTimout;
                                }
                            } catch (e) {
                                cachedSetTimeout = defaultSetTimout;
                            }
                            try {
                                if (typeof clearTimeout === 'function') {
                                    cachedClearTimeout = clearTimeout;
                                } else {
                                    cachedClearTimeout = defaultClearTimeout;
                                }
                            } catch (e) {
                                cachedClearTimeout = defaultClearTimeout;
                            }
                        })();

                        function runTimeout(fun) {
                            if (cachedSetTimeout === setTimeout) {//normal enviroments in sane situations
                                return setTimeout(fun, 0);
                            }// if setTimeout wasn't available but was latter defined
                            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
                                cachedSetTimeout = setTimeout;
                                return setTimeout(fun, 0);
                            }
                            try {// when when somebody has screwed with setTimeout but no I.E. maddness
                                return cachedSetTimeout(fun, 0);
                            } catch (e) {
                                try {// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                                    return cachedSetTimeout.call(null, fun, 0);
                                } catch (e) {// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                                    return cachedSetTimeout.call(this, fun, 0);
                                }
                            }
                        }

                        function runClearTimeout(marker) {
                            if (cachedClearTimeout === clearTimeout) {//normal enviroments in sane situations
                                return clearTimeout(marker);
                            }// if clearTimeout wasn't available but was latter defined
                            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
                                cachedClearTimeout = clearTimeout;
                                return clearTimeout(marker);
                            }
                            try {// when when somebody has screwed with setTimeout but no I.E. maddness
                                return cachedClearTimeout(marker);
                            } catch (e) {
                                try {// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                                    return cachedClearTimeout.call(null, marker);
                                } catch (e) {// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
// Some versions of I.E. have different rules for clearTimeout vs setTimeout
                                    return cachedClearTimeout.call(this, marker);
                                }
                            }
                        }

                        var queue = [];
                        var draining = false;
                        var currentQueue;
                        var queueIndex = -1;

                        function cleanUpNextTick() {
                            if (!draining || !currentQueue) {
                                return;
                            }
                            draining = false;
                            if (currentQueue.length) {
                                queue = currentQueue.concat(queue);
                            } else {
                                queueIndex = -1;
                            }
                            if (queue.length) {
                                drainQueue();
                            }
                        }

                        function drainQueue() {
                            if (draining) {
                                return;
                            }
                            var timeout = runTimeout(cleanUpNextTick);
                            draining = true;
                            var len = queue.length;
                            while (len) {
                                currentQueue = queue;
                                queue = [];
                                while (++queueIndex < len) {
                                    if (currentQueue) {
                                        currentQueue[queueIndex].run();
                                    }
                                }
                                queueIndex = -1;
                                len = queue.length;
                            }
                            currentQueue = null;
                            draining = false;
                            runClearTimeout(timeout);
                        }

                        process.nextTick = function (fun) {
                            var args = new Array(arguments.length - 1);
                            if (arguments.length > 1) {
                                for (var i = 1; i < arguments.length; i++) {
                                    args[i - 1] = arguments[i];
                                }
                            }
                            queue.push(new Item(fun, args));
                            if (queue.length === 1 && !draining) {
                                runTimeout(drainQueue);
                            }
                        };// v8 likes predictible objects
                        function Item(fun, array) {
                            this.fun = fun;
                            this.array = array;
                        }

                        Item.prototype.run = function () {
                            this.fun.apply(null, this.array);
                        };
                        process.title = 'browser';
                        process.browser = true;
                        process.env = {};
                        process.argv = [];
                        process.version = '';// empty string to avoid regexp issues
                        process.versions = {};

                        function noop() {
                        }

                        process.on = noop;
                        process.addListener = noop;
                        process.once = noop;
                        process.off = noop;
                        process.removeListener = noop;
                        process.removeAllListeners = noop;
                        process.emit = noop;
                        process.prependListener = noop;
                        process.prependOnceListener = noop;
                        process.listeners = function (name) {
                            return [];
                        };
                        process.binding = function (name) {
                            throw new Error('process.binding is not supported');
                        };
                        process.cwd = function () {
                            return '/';
                        };
                        process.chdir = function (dir) {
                            throw new Error('process.chdir is not supported');
                        };
                        process.umask = function () {
                            return 0;
                        };
                    }, {}],
                    64: [function (require, module, exports) {
                        (function (global) {/*! https://mths.be/punycode v1.4.1 by @mathias */
                            ;(function (root) {
                                /** Detect free variables */var freeExports = _typeof(exports) == 'object' && exports && !exports.nodeType && exports;
                                var freeModule = _typeof(module) == 'object' && module && !module.nodeType && module;
                                var freeGlobal = _typeof(global) == 'object' && global;
                                if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
                                    root = freeGlobal;
                                }
                                /**
                                 * The `punycode` object.
                                 * @name punycode
                                 * @type Object
                                 */var punycode, /** Highest positive signed 32-bit float value */maxInt = 2147483647,// aka. 0x7FFFFFFF or 2^31-1
                                    /** Bootstring parameters */base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700,
                                    initialBias = 72, initialN = 128,// 0x80
                                    delimiter = '-',// '\x2D'
                                    /** Regular expressions */regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/,// unprintable ASCII chars + non-ASCII chars
                                    regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,// RFC 3490 separators
                                    /** Error messages */errors = {
                                        'overflow': 'Overflow: input needs wider integers to process',
                                        'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
                                        'invalid-input': 'Invalid input'
                                    }, /** Convenience shortcuts */baseMinusTMin = base - tMin, floor = Math.floor,
                                    stringFromCharCode = String.fromCharCode, /** Temporary variable */key;/*--------------------------------------------------------------------------*/
                                /**
                                 * A generic error utility function.
                                 * @private
                                 * @param {String} type The error type.
                                 * @returns {Error} Throws a `RangeError` with the applicable error message.
                                 */function error(type) {
                                    throw new RangeError(errors[type]);
                                }

                                /**
                                 * A generic `Array#map` utility function.
                                 * @private
                                 * @param {Array} array The array to iterate over.
                                 * @param {Function} callback The function that gets called for every array
                                 * item.
                                 * @returns {Array} A new array of values returned by the callback function.
                                 */function map(array, fn) {
                                    var length = array.length;
                                    var result = [];
                                    while (length--) {
                                        result[length] = fn(array[length]);
                                    }
                                    return result;
                                }

                                /**
                                 * A simple `Array#map`-like wrapper to work with domain name strings or email
                                 * addresses.
                                 * @private
                                 * @param {String} domain The domain name or email address.
                                 * @param {Function} callback The function that gets called for every
                                 * character.
                                 * @returns {Array} A new string of characters returned by the callback
                                 * function.
                                 */function mapDomain(string, fn) {
                                    var parts = string.split('@');
                                    var result = '';
                                    if (parts.length > 1) {// In email addresses, only the domain name should be punycoded. Leave
// the local part (i.e. everything up to `@`) intact.
                                        result = parts[0] + '@';
                                        string = parts[1];
                                    }// Avoid `split(regex)` for IE8 compatibility. See #17.
                                    string = string.replace(regexSeparators, '\x2E');
                                    var labels = string.split('.');
                                    var encoded = map(labels, fn).join('.');
                                    return result + encoded;
                                }

                                /**
                                 * Creates an array containing the numeric code points of each Unicode
                                 * character in the string. While JavaScript uses UCS-2 internally,
                                 * this function will convert a pair of surrogate halves (each of which
                                 * UCS-2 exposes as separate characters) into a single code point,
                                 * matching UTF-16.
                                 * @see `punycode.ucs2.encode`
                                 * @see <https://mathiasbynens.be/notes/javascript-encoding>
                                 * @memberOf punycode.ucs2
                                 * @name decode
                                 * @param {String} string The Unicode input string (UCS-2).
                                 * @returns {Array} The new array of code points.
                                 */function ucs2decode(string) {
                                    var output = [], counter = 0, length = string.length, value, extra;
                                    while (counter < length) {
                                        value = string.charCodeAt(counter++);
                                        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {// high surrogate, and there is a next character
                                            extra = string.charCodeAt(counter++);
                                            if ((extra & 0xFC00) == 0xDC00) {// low surrogate
                                                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                                            } else {// unmatched surrogate; only append this code unit, in case the next
// code unit is the high surrogate of a surrogate pair
                                                output.push(value);
                                                counter--;
                                            }
                                        } else {
                                            output.push(value);
                                        }
                                    }
                                    return output;
                                }

                                /**
                                 * Creates a string based on an array of numeric code points.
                                 * @see `punycode.ucs2.decode`
                                 * @memberOf punycode.ucs2
                                 * @name encode
                                 * @param {Array} codePoints The array of numeric code points.
                                 * @returns {String} The new Unicode string (UCS-2).
                                 */function ucs2encode(array) {
                                    return map(array, function (value) {
                                        var output = '';
                                        if (value > 0xFFFF) {
                                            value -= 0x10000;
                                            output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                                            value = 0xDC00 | value & 0x3FF;
                                        }
                                        output += stringFromCharCode(value);
                                        return output;
                                    }).join('');
                                }

                                /**
                                 * Converts a basic code point into a digit/integer.
                                 * @see `digitToBasic()`
                                 * @private
                                 * @param {Number} codePoint The basic numeric code point value.
                                 * @returns {Number} The numeric value of a basic code point (for use in
                                 * representing integers) in the range `0` to `base - 1`, or `base` if
                                 * the code point does not represent a value.
                                 */function basicToDigit(codePoint) {
                                    if (codePoint - 48 < 10) {
                                        return codePoint - 22;
                                    }
                                    if (codePoint - 65 < 26) {
                                        return codePoint - 65;
                                    }
                                    if (codePoint - 97 < 26) {
                                        return codePoint - 97;
                                    }
                                    return base;
                                }

                                /**
                                 * Converts a digit/integer into a basic code point.
                                 * @see `basicToDigit()`
                                 * @private
                                 * @param {Number} digit The numeric value of a basic code point.
                                 * @returns {Number} The basic code point whose value (when used for
                                 * representing integers) is `digit`, which needs to be in the range
                                 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
                                 * used; else, the lowercase form is used. The behavior is undefined
                                 * if `flag` is non-zero and `digit` has no uppercase form.
                                 */function digitToBasic(digit, flag) {//  0..25 map to ASCII a..z or A..Z
// 26..35 map to ASCII 0..9
                                    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
                                }

                                /**
                                 * Bias adaptation function as per section 3.4 of RFC 3492.
                                 * https://tools.ietf.org/html/rfc3492#section-3.4
                                 * @private
                                 */function adapt(delta, numPoints, firstTime) {
                                    var k = 0;
                                    delta = firstTime ? floor(delta / damp) : delta >> 1;
                                    delta += floor(delta / numPoints);
                                    for (;/* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
                                        delta = floor(delta / baseMinusTMin);
                                    }
                                    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
                                }

                                /**
                                 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
                                 * symbols.
                                 * @memberOf punycode
                                 * @param {String} input The Punycode string of ASCII-only symbols.
                                 * @returns {String} The resulting string of Unicode symbols.
                                 */function decode(input) {// Don't use UCS-2
                                    var output = [], inputLength = input.length, out, i = 0, n = initialN,
                                        bias = initialBias, basic, j, index, oldi, w, k, digit, t,
                                        /** Cached calculation results */baseMinusT;// Handle the basic code points: let `basic` be the number of input code
// points before the last delimiter, or `0` if there is none, then copy
// the first basic code points to the output.
                                    basic = input.lastIndexOf(delimiter);
                                    if (basic < 0) {
                                        basic = 0;
                                    }
                                    for (j = 0; j < basic; ++j) {// if it's not a basic code point
                                        if (input.charCodeAt(j) >= 0x80) {
                                            error('not-basic');
                                        }
                                        output.push(input.charCodeAt(j));
                                    }// Main decoding loop: start just after the last delimiter if any basic code
// points were copied; start at the beginning otherwise.
                                    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)/* no final expression */{// `index` is the index of the next character to be consumed.
// Decode a generalized variable-length integer into `delta`,
// which gets added to `i`. The overflow checking is easier
// if we increase `i` as we go, then subtract off its starting
// value at the end to obtain `delta`.
                                        for (oldi = i, w = 1, k = base; ;/* no condition */k += base) {
                                            if (index >= inputLength) {
                                                error('invalid-input');
                                            }
                                            digit = basicToDigit(input.charCodeAt(index++));
                                            if (digit >= base || digit > floor((maxInt - i) / w)) {
                                                error('overflow');
                                            }
                                            i += digit * w;
                                            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                                            if (digit < t) {
                                                break;
                                            }
                                            baseMinusT = base - t;
                                            if (w > floor(maxInt / baseMinusT)) {
                                                error('overflow');
                                            }
                                            w *= baseMinusT;
                                        }
                                        out = output.length + 1;
                                        bias = adapt(i - oldi, out, oldi == 0);// `i` was supposed to wrap around from `out` to `0`,
// incrementing `n` each time, so we'll fix that now:
                                        if (floor(i / out) > maxInt - n) {
                                            error('overflow');
                                        }
                                        n += floor(i / out);
                                        i %= out;// Insert `n` at position `i` of the output
                                        output.splice(i++, 0, n);
                                    }
                                    return ucs2encode(output);
                                }

                                /**
                                 * Converts a string of Unicode symbols (e.g. a domain name label) to a
                                 * Punycode string of ASCII-only symbols.
                                 * @memberOf punycode
                                 * @param {String} input The string of Unicode symbols.
                                 * @returns {String} The resulting Punycode string of ASCII-only symbols.
                                 */function encode(input) {
                                    var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue,
                                        output = [],
                                        /** `inputLength` will hold the number of code points in `input`. */inputLength,
                                        /** Cached calculation results */handledCPCountPlusOne, baseMinusT, qMinusT;// Convert the input in UCS-2 to Unicode
                                    input = ucs2decode(input);// Cache the length
                                    inputLength = input.length;// Initialize the state
                                    n = initialN;
                                    delta = 0;
                                    bias = initialBias;// Handle the basic code points
                                    for (j = 0; j < inputLength; ++j) {
                                        currentValue = input[j];
                                        if (currentValue < 0x80) {
                                            output.push(stringFromCharCode(currentValue));
                                        }
                                    }
                                    handledCPCount = basicLength = output.length;// `handledCPCount` is the number of code points that have been handled;
// `basicLength` is the number of basic code points.
// Finish the basic string - if it is not empty - with a delimiter
                                    if (basicLength) {
                                        output.push(delimiter);
                                    }// Main encoding loop:
                                    while (handledCPCount < inputLength) {// All non-basic code points < n have been handled already. Find the next
// larger one:
                                        for (m = maxInt, j = 0; j < inputLength; ++j) {
                                            currentValue = input[j];
                                            if (currentValue >= n && currentValue < m) {
                                                m = currentValue;
                                            }
                                        }// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
// but guard against overflow
                                        handledCPCountPlusOne = handledCPCount + 1;
                                        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
                                            error('overflow');
                                        }
                                        delta += (m - n) * handledCPCountPlusOne;
                                        n = m;
                                        for (j = 0; j < inputLength; ++j) {
                                            currentValue = input[j];
                                            if (currentValue < n && ++delta > maxInt) {
                                                error('overflow');
                                            }
                                            if (currentValue == n) {// Represent delta as a generalized variable-length integer
                                                for (q = delta, k = base; ;/* no condition */k += base) {
                                                    t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                                                    if (q < t) {
                                                        break;
                                                    }
                                                    qMinusT = q - t;
                                                    baseMinusT = base - t;
                                                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                                                    q = floor(qMinusT / baseMinusT);
                                                }
                                                output.push(stringFromCharCode(digitToBasic(q, 0)));
                                                bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                                                delta = 0;
                                                ++handledCPCount;
                                            }
                                        }
                                        ++delta;
                                        ++n;
                                    }
                                    return output.join('');
                                }

                                /**
                                 * Converts a Punycode string representing a domain name or an email address
                                 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
                                 * it doesn't matter if you call it on a string that has already been
                                 * converted to Unicode.
                                 * @memberOf punycode
                                 * @param {String} input The Punycoded domain name or email address to
                                 * convert to Unicode.
                                 * @returns {String} The Unicode representation of the given Punycode
                                 * string.
                                 */function toUnicode(input) {
                                    return mapDomain(input, function (string) {
                                        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
                                    });
                                }

                                /**
                                 * Converts a Unicode string representing a domain name or an email address to
                                 * Punycode. Only the non-ASCII parts of the domain name will be converted,
                                 * i.e. it doesn't matter if you call it with a domain that's already in
                                 * ASCII.
                                 * @memberOf punycode
                                 * @param {String} input The domain name or email address to convert, as a
                                 * Unicode string.
                                 * @returns {String} The Punycode representation of the given domain name or
                                 * email address.
                                 */function toASCII(input) {
                                    return mapDomain(input, function (string) {
                                        return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
                                    });
                                }/*--------------------------------------------------------------------------*/
                                /** Define the public API */punycode = {
                                    /**
                                     * A string representing the current Punycode.js version number.
                                     * @memberOf punycode
                                     * @type String
                                     */'version': '1.4.1',
                                    /**
                                     * An object of methods to convert from JavaScript's internal character
                                     * representation (UCS-2) to Unicode code points, and back.
                                     * @see <https://mathiasbynens.be/notes/javascript-encoding>
                                     * @memberOf punycode
                                     * @type Object
                                     */'ucs2': {'decode': ucs2decode, 'encode': ucs2encode},
                                    'decode': decode,
                                    'encode': encode,
                                    'toASCII': toASCII,
                                    'toUnicode': toUnicode
                                };/** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
// like the following:
                                if (typeof define == 'function' && _typeof(define.amd) == 'object' && define.amd) {
                                    define('punycode', function () {
                                        return punycode;
                                    });
                                } else if (freeExports && freeModule) {
                                    if (module.exports == freeExports) {// in Node.js, io.js, or RingoJS v0.8.0+
                                        freeModule.exports = punycode;
                                    } else {// in Narwhal or RingoJS v0.7.0-
                                        for (key in punycode) {
                                            punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
                                        }
                                    }
                                } else {// in Rhino or a web browser
                                    root.punycode = punycode;
                                }
                            })(this);
                        }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
                    }, {}],
                    65: [function (require, module, exports) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
                        'use strict';// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
                        function hasOwnProperty(obj, prop) {
                            return Object.prototype.hasOwnProperty.call(obj, prop);
                        }

                        module.exports = function (qs, sep, eq, options) {
                            sep = sep || '&';
                            eq = eq || '=';
                            var obj = {};
                            if (typeof qs !== 'string' || qs.length === 0) {
                                return obj;
                            }
                            var regexp = /\+/g;
                            qs = qs.split(sep);
                            var maxKeys = 1000;
                            if (options && typeof options.maxKeys === 'number') {
                                maxKeys = options.maxKeys;
                            }
                            var len = qs.length;// maxKeys <= 0 means that we should not limit keys count
                            if (maxKeys > 0 && len > maxKeys) {
                                len = maxKeys;
                            }
                            for (var i = 0; i < len; ++i) {
                                var x = qs[i].replace(regexp, '%20'), idx = x.indexOf(eq), kstr, vstr, k, v;
                                if (idx >= 0) {
                                    kstr = x.substr(0, idx);
                                    vstr = x.substr(idx + 1);
                                } else {
                                    kstr = x;
                                    vstr = '';
                                }
                                k = decodeURIComponent(kstr);
                                v = decodeURIComponent(vstr);
                                if (!hasOwnProperty(obj, k)) {
                                    obj[k] = v;
                                } else if (isArray(obj[k])) {
                                    obj[k].push(v);
                                } else {
                                    obj[k] = [obj[k], v];
                                }
                            }
                            return obj;
                        };
                        var isArray = Array.isArray || function (xs) {
                            return Object.prototype.toString.call(xs) === '[object Array]';
                        };
                    }, {}],
                    66: [function (require, module, exports) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
                        'use strict';
                        var stringifyPrimitive = function stringifyPrimitive(v) {
                            switch (_typeof(v)) {
                                case'string':
                                    return v;
                                case'boolean':
                                    return v ? 'true' : 'false';
                                case'number':
                                    return isFinite(v) ? v : '';
                                default:
                                    return '';
                            }
                        };
                        module.exports = function (obj, sep, eq, name) {
                            sep = sep || '&';
                            eq = eq || '=';
                            if (obj === null) {
                                obj = undefined;
                            }
                            if (_typeof(obj) === 'object') {
                                return map(objectKeys(obj), function (k) {
                                    var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
                                    if (isArray(obj[k])) {
                                        return map(obj[k], function (v) {
                                            return ks + encodeURIComponent(stringifyPrimitive(v));
                                        }).join(sep);
                                    } else {
                                        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
                                    }
                                }).join(sep);
                            }
                            if (!name) return '';
                            return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
                        };
                        var isArray = Array.isArray || function (xs) {
                            return Object.prototype.toString.call(xs) === '[object Array]';
                        };

                        function map(xs, f) {
                            if (xs.map) return xs.map(f);
                            var res = [];
                            for (var i = 0; i < xs.length; i++) {
                                res.push(f(xs[i], i));
                            }
                            return res;
                        }

                        var objectKeys = Object.keys || function (obj) {
                            var res = [];
                            for (var key in obj) {
                                if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
                            }
                            return res;
                        };
                    }, {}],
                    67: [function (require, module, exports) {
                        'use strict';
                        exports.decode = exports.parse = require('./decode');
                        exports.encode = exports.stringify = require('./encode');
                    }, {"./decode": 65, "./encode": 66}],
                    68: [function (require, module, exports) {/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
                        var util = require('./util');
                        var has = Object.prototype.hasOwnProperty;
                        var hasNativeMap = typeof Map !== "undefined";

                        /**
                         * A data structure which is a combination of an array and a set. Adding a new
                         * member is O(1), testing for membership is O(1), and finding the index of an
                         * element is O(1). Removing elements from the set is not supported. Only
                         * strings are supported for membership.
                         */function ArraySet() {
                            this._array = [];
                            this._set = hasNativeMap ? new Map() : Object.create(null);
                        }

                        /**
                         * Static method for creating ArraySet instances from an existing array.
                         */ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
                            var set = new ArraySet();
                            for (var i = 0, len = aArray.length; i < len; i++) {
                                set.add(aArray[i], aAllowDuplicates);
                            }
                            return set;
                        };
                        /**
                         * Return how many unique items are in this ArraySet. If duplicates have been
                         * added, than those do not count towards the size.
                         *
                         * @returns Number
                         */ArraySet.prototype.size = function ArraySet_size() {
                            return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
                        };
                        /**
                         * Add the given string to this set.
                         *
                         * @param String aStr
                         */ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
                            var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
                            var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
                            var idx = this._array.length;
                            if (!isDuplicate || aAllowDuplicates) {
                                this._array.push(aStr);
                            }
                            if (!isDuplicate) {
                                if (hasNativeMap) {
                                    this._set.set(aStr, idx);
                                } else {
                                    this._set[sStr] = idx;
                                }
                            }
                        };
                        /**
                         * Is the given string a member of this set?
                         *
                         * @param String aStr
                         */ArraySet.prototype.has = function ArraySet_has(aStr) {
                            if (hasNativeMap) {
                                return this._set.has(aStr);
                            } else {
                                var sStr = util.toSetString(aStr);
                                return has.call(this._set, sStr);
                            }
                        };
                        /**
                         * What is the index of the given string in the array?
                         *
                         * @param String aStr
                         */ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
                            if (hasNativeMap) {
                                var idx = this._set.get(aStr);
                                if (idx >= 0) {
                                    return idx;
                                }
                            } else {
                                var sStr = util.toSetString(aStr);
                                if (has.call(this._set, sStr)) {
                                    return this._set[sStr];
                                }
                            }
                            throw new Error('"' + aStr + '" is not in the set.');
                        };
                        /**
                         * What is the element at the given index?
                         *
                         * @param Number aIdx
                         */ArraySet.prototype.at = function ArraySet_at(aIdx) {
                            if (aIdx >= 0 && aIdx < this._array.length) {
                                return this._array[aIdx];
                            }
                            throw new Error('No element indexed by ' + aIdx);
                        };
                        /**
                         * Returns the array representation of this set (which has the proper indices
                         * indicated by indexOf). Note that this is a copy of the internal array used
                         * for storing the members so that no one can mess with internal state.
                         */ArraySet.prototype.toArray = function ArraySet_toArray() {
                            return this._array.slice();
                        };
                        exports.ArraySet = ArraySet;
                    }, {"./util": 77}],
                    69: [function (require, module, exports) {/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 *
 * Based on the Base 64 VLQ implementation in Closure Compiler:
 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
 *
 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Google Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
                        var base64 = require('./base64');// A single base 64 digit can contain 6 bits of data. For the base 64 variable
// length quantities we use in the source map spec, the first bit is the sign,
// the next four bits are the actual value, and the 6th bit is the
// continuation bit. The continuation bit tells us whether there are more
// digits in this value following this digit.
//
//   Continuation
//   |    Sign
//   |    |
//   V    V
//   101011
                        var VLQ_BASE_SHIFT = 5;// binary: 100000
                        var VLQ_BASE = 1 << VLQ_BASE_SHIFT;// binary: 011111
                        var VLQ_BASE_MASK = VLQ_BASE - 1;// binary: 100000
                        var VLQ_CONTINUATION_BIT = VLQ_BASE;

                        /**
                         * Converts from a two-complement value to a value where the sign bit is
                         * placed in the least significant bit.  For example, as decimals:
                         *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
                         *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
                         */function toVLQSigned(aValue) {
                            return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
                        }

                        /**
                         * Converts to a two-complement value from a value where the sign bit is
                         * placed in the least significant bit.  For example, as decimals:
                         *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
                         *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
                         */function fromVLQSigned(aValue) {
                            var isNegative = (aValue & 1) === 1;
                            var shifted = aValue >> 1;
                            return isNegative ? -shifted : shifted;
                        }

                        /**
                         * Returns the base 64 VLQ encoded value.
                         */exports.encode = function base64VLQ_encode(aValue) {
                            var encoded = "";
                            var digit;
                            var vlq = toVLQSigned(aValue);
                            do {
                                digit = vlq & VLQ_BASE_MASK;
                                vlq >>>= VLQ_BASE_SHIFT;
                                if (vlq > 0) {// There are still more digits in this value, so we must make sure the
// continuation bit is marked.
                                    digit |= VLQ_CONTINUATION_BIT;
                                }
                                encoded += base64.encode(digit);
                            } while (vlq > 0);
                            return encoded;
                        };
                        /**
                         * Decodes the next base 64 VLQ value from the given string and returns the
                         * value and the rest of the string via the out parameter.
                         */exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
                            var strLen = aStr.length;
                            var result = 0;
                            var shift = 0;
                            var continuation, digit;
                            do {
                                if (aIndex >= strLen) {
                                    throw new Error("Expected more digits in base 64 VLQ value.");
                                }
                                digit = base64.decode(aStr.charCodeAt(aIndex++));
                                if (digit === -1) {
                                    throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
                                }
                                continuation = !!(digit & VLQ_CONTINUATION_BIT);
                                digit &= VLQ_BASE_MASK;
                                result = result + (digit << shift);
                                shift += VLQ_BASE_SHIFT;
                            } while (continuation);
                            aOutParam.value = fromVLQSigned(result);
                            aOutParam.rest = aIndex;
                        };
                    }, {"./base64": 70}],
                    70: [function (require, module, exports) {/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
                        var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
                        /**
                         * Encode an integer in the range of 0 to 63 to a single base 64 digit.
                         */exports.encode = function (number) {
                            if (0 <= number && number < intToCharMap.length) {
                                return intToCharMap[number];
                            }
                            throw new TypeError("Must be between 0 and 63: " + number);
                        };
                        /**
                         * Decode a single base 64 character code digit to an integer. Returns -1 on
                         * failure.
                         */exports.decode = function (charCode) {
                            var bigA = 65;// 'A'
                            var bigZ = 90;// 'Z'
                            var littleA = 97;// 'a'
                            var littleZ = 122;// 'z'
                            var zero = 48;// '0'
                            var nine = 57;// '9'
                            var plus = 43;// '+'
                            var slash = 47;// '/'
                            var littleOffset = 26;
                            var numberOffset = 52;// 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
                            if (bigA <= charCode && charCode <= bigZ) {
                                return charCode - bigA;
                            }// 26 - 51: abcdefghijklmnopqrstuvwxyz
                            if (littleA <= charCode && charCode <= littleZ) {
                                return charCode - littleA + littleOffset;
                            }// 52 - 61: 0123456789
                            if (zero <= charCode && charCode <= nine) {
                                return charCode - zero + numberOffset;
                            }// 62: +
                            if (charCode == plus) {
                                return 62;
                            }// 63: /
                            if (charCode == slash) {
                                return 63;
                            }// Invalid base64 digit.
                            return -1;
                        };
                    }, {}],
                    71: [function (require, module, exports) {/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
                        exports.GREATEST_LOWER_BOUND = 1;
                        exports.LEAST_UPPER_BOUND = 2;

                        /**
                         * Recursive implementation of binary search.
                         *
                         * @param aLow Indices here and lower do not contain the needle.
                         * @param aHigh Indices here and higher do not contain the needle.
                         * @param aNeedle The element being searched for.
                         * @param aHaystack The non-empty array being searched.
                         * @param aCompare Function which takes two elements and returns -1, 0, or 1.
                         * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
                         *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
                         *     closest element that is smaller than or greater than the one we are
                         *     searching for, respectively, if the exact element cannot be found.
                         */function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {// This function terminates when one of the following is true:
//
//   1. We find the exact element we are looking for.
//
//   2. We did not find the exact element, but we can return the index of
//      the next-closest element.
//
//   3. We did not find the exact element, and there is no next-closest
//      element than the one we are searching for, so we return -1.
                            var mid = Math.floor((aHigh - aLow) / 2) + aLow;
                            var cmp = aCompare(aNeedle, aHaystack[mid], true);
                            if (cmp === 0) {// Found the element we are looking for.
                                return mid;
                            } else if (cmp > 0) {// Our needle is greater than aHaystack[mid].
                                if (aHigh - mid > 1) {// The element is in the upper half.
                                    return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
                                }// The exact needle element was not found in this haystack. Determine if
// we are in termination case (3) or (2) and return the appropriate thing.
                                if (aBias == exports.LEAST_UPPER_BOUND) {
                                    return aHigh < aHaystack.length ? aHigh : -1;
                                } else {
                                    return mid;
                                }
                            } else {// Our needle is less than aHaystack[mid].
                                if (mid - aLow > 1) {// The element is in the lower half.
                                    return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
                                }// we are in termination case (3) or (2) and return the appropriate thing.
                                if (aBias == exports.LEAST_UPPER_BOUND) {
                                    return mid;
                                } else {
                                    return aLow < 0 ? -1 : aLow;
                                }
                            }
                        }

                        /**
                         * This is an implementation of binary search which will always try and return
                         * the index of the closest element if there is no exact hit. This is because
                         * mappings between original and generated line/col pairs are single points,
                         * and there is an implicit region between each of them, so a miss just means
                         * that you aren't on the very start of a region.
                         *
                         * @param aNeedle The element you are looking for.
                         * @param aHaystack The array that is being searched.
                         * @param aCompare A function which takes the needle and an element in the
                         *     array and returns -1, 0, or 1 depending on whether the needle is less
                         *     than, equal to, or greater than the element, respectively.
                         * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
                         *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
                         *     closest element that is smaller than or greater than the one we are
                         *     searching for, respectively, if the exact element cannot be found.
                         *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
                         */exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
                            if (aHaystack.length === 0) {
                                return -1;
                            }
                            var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
                            if (index < 0) {
                                return -1;
                            }// We have found either the exact element, or the next-closest element than
// the one we are searching for. However, there may be more than one such
// element. Make sure we always return the smallest of these.
                            while (index - 1 >= 0) {
                                if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
                                    break;
                                }
                                --index;
                            }
                            return index;
                        };
                    }, {}],
                    72: [function (require, module, exports) {/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2014 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
                        var util = require('./util');

                        /**
                         * Determine whether mappingB is after mappingA with respect to generated
                         * position.
                         */function generatedPositionAfter(mappingA, mappingB) {// Optimized for most common case
                            var lineA = mappingA.generatedLine;
                            var lineB = mappingB.generatedLine;
                            var columnA = mappingA.generatedColumn;
                            var columnB = mappingB.generatedColumn;
                            return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
                        }

                        /**
                         * A data structure to provide a sorted view of accumulated mappings in a
                         * performance conscious manner. It trades a neglibable overhead in general
                         * case for a large speedup in case of mappings being added in order.
                         */function MappingList() {
                            this._array = [];
                            this._sorted = true;// Serves as infimum
                            this._last = {generatedLine: -1, generatedColumn: 0};
                        }

                        /**
                         * Iterate through internal items. This method takes the same arguments that
                         * `Array.prototype.forEach` takes.
                         *
                         * NOTE: The order of the mappings is NOT guaranteed.
                         */MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
                            this._array.forEach(aCallback, aThisArg);
                        };
                        /**
                         * Add the given source mapping.
                         *
                         * @param Object aMapping
                         */MappingList.prototype.add = function MappingList_add(aMapping) {
                            if (generatedPositionAfter(this._last, aMapping)) {
                                this._last = aMapping;
                                this._array.push(aMapping);
                            } else {
                                this._sorted = false;
                                this._array.push(aMapping);
                            }
                        };
                        /**
                         * Returns the flat, sorted array of mappings. The mappings are sorted by
                         * generated position.
                         *
                         * WARNING: This method returns internal data without copying, for
                         * performance. The return value must NOT be mutated, and should be treated as
                         * an immutable borrow. If you want to take ownership, you must make your own
                         * copy.
                         */MappingList.prototype.toArray = function MappingList_toArray() {
                            if (!this._sorted) {
                                this._array.sort(util.compareByGeneratedPositionsInflated);
                                this._sorted = true;
                            }
                            return this._array;
                        };
                        exports.MappingList = MappingList;
                    }, {"./util": 77}],
                    73: [function (require, module, exports) {/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */ // It turns out that some (most?) JavaScript engines don't self-host
// `Array.prototype.sort`. This makes sense because C++ will likely remain
// faster than JS when doing raw CPU-intensive sorting. However, when using a
// custom comparator function, calling back and forth between the VM's C++ and
// JIT'd JS is rather slow *and* loses JIT type information, resulting in
// worse generated code for the comparator function than would be optimal. In
// fact, when sorting with a comparator, these costs outweigh the benefits of
// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
// a ~3500ms mean speed-up in `bench/bench.html`.
                        /**
                         * Swap the elements indexed by `x` and `y` in the array `ary`.
                         *
                         * @param {Array} ary
                         *        The array.
                         * @param {Number} x
                         *        The index of the first item.
                         * @param {Number} y
                         *        The index of the second item.
                         */function swap(ary, x, y) {
                            var temp = ary[x];
                            ary[x] = ary[y];
                            ary[y] = temp;
                        }

                        /**
                         * Returns a random integer within the range `low .. high` inclusive.
                         *
                         * @param {Number} low
                         *        The lower bound on the range.
                         * @param {Number} high
                         *        The upper bound on the range.
                         */function randomIntInRange(low, high) {
                            return Math.round(low + Math.random() * (high - low));
                        }

                        /**
                         * The Quick Sort algorithm.
                         *
                         * @param {Array} ary
                         *        An array to sort.
                         * @param {function} comparator
                         *        Function to use to compare two items.
                         * @param {Number} p
                         *        Start index of the array
                         * @param {Number} r
                         *        End index of the array
                         */function doQuickSort(ary, comparator, p, r) {// If our lower bound is less than our upper bound, we (1) partition the
// array into two pieces and (2) recurse on each half. If it is not, this is
// the empty array and our base case.
                            if (p < r) {// (1) Partitioning.
//
// The partitioning chooses a pivot between `p` and `r` and moves all
// elements that are less than or equal to the pivot to the before it, and
// all the elements that are greater than it after it. The effect is that
// once partition is done, the pivot is in the exact place it will be when
// the array is put in sorted order, and it will not need to be moved
// again. This runs in O(n) time.
// Always choose a random pivot so that an input array which is reverse
// sorted does not cause O(n^2) running time.
                                var pivotIndex = randomIntInRange(p, r);
                                var i = p - 1;
                                swap(ary, pivotIndex, r);
                                var pivot = ary[r];// Immediately after `j` is incremented in this loop, the following hold
// true:
//
//   * Every element in `ary[p .. i]` is less than or equal to the pivot.
//
//   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
                                for (var j = p; j < r; j++) {
                                    if (comparator(ary[j], pivot) <= 0) {
                                        i += 1;
                                        swap(ary, i, j);
                                    }
                                }
                                swap(ary, i + 1, j);
                                var q = i + 1;// (2) Recurse on each half.
                                doQuickSort(ary, comparator, p, q - 1);
                                doQuickSort(ary, comparator, q + 1, r);
                            }
                        }

                        /**
                         * Sort the given array in-place with the given comparator function.
                         *
                         * @param {Array} ary
                         *        An array to sort.
                         * @param {function} comparator
                         *        Function to use to compare two items.
                         */exports.quickSort = function (ary, comparator) {
                            doQuickSort(ary, comparator, 0, ary.length - 1);
                        };
                    }, {}],
                    74: [function (require, module, exports) {/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
                        var util = require('./util');
                        var binarySearch = require('./binary-search');
                        var ArraySet = require('./array-set').ArraySet;
                        var base64VLQ = require('./base64-vlq');
                        var quickSort = require('./quick-sort').quickSort;

                        function SourceMapConsumer(aSourceMap, aSourceMapURL) {
                            var sourceMap = aSourceMap;
                            if (typeof aSourceMap === 'string') {
                                sourceMap = util.parseSourceMapInput(aSourceMap);
                            }
                            return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
                        }

                        SourceMapConsumer.fromSourceMap = function (aSourceMap, aSourceMapURL) {
                            return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
                        };
                        /**
                         * The version of the source mapping spec that we are consuming.
                         */SourceMapConsumer.prototype._version = 3;// `__generatedMappings` and `__originalMappings` are arrays that hold the
// parsed mapping coordinates from the source map's "mappings" attribute. They
// are lazily instantiated, accessed via the `_generatedMappings` and
// `_originalMappings` getters respectively, and we only parse the mappings
// and create these arrays once queried for a source location. We jump through
// these hoops because there can be many thousands of mappings, and parsing
// them is expensive, so we only want to do it if we must.
//
// Each object in the arrays is of the form:
//
//     {
//       generatedLine: The line number in the generated code,
//       generatedColumn: The column number in the generated code,
//       source: The path to the original source file that generated this
//               chunk of code,
//       originalLine: The line number in the original source that
//                     corresponds to this chunk of generated code,
//       originalColumn: The column number in the original source that
//                       corresponds to this chunk of generated code,
//       name: The name of the original symbol which generated this chunk of
//             code.
//     }
//
// All properties except for `generatedLine` and `generatedColumn` can be
// `null`.
//
// `_generatedMappings` is ordered by the generated positions.
//
// `_originalMappings` is ordered by the original positions.
                        SourceMapConsumer.prototype.__generatedMappings = null;
                        Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
                            configurable: true,
                            enumerable: true,
                            get: function get() {
                                if (!this.__generatedMappings) {
                                    this._parseMappings(this._mappings, this.sourceRoot);
                                }
                                return this.__generatedMappings;
                            }
                        });
                        SourceMapConsumer.prototype.__originalMappings = null;
                        Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
                            configurable: true,
                            enumerable: true,
                            get: function get() {
                                if (!this.__originalMappings) {
                                    this._parseMappings(this._mappings, this.sourceRoot);
                                }
                                return this.__originalMappings;
                            }
                        });
                        SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
                            var c = aStr.charAt(index);
                            return c === ";" || c === ",";
                        };
                        /**
                         * Parse the mappings in a string in to a data structure which we can easily
                         * query (the ordered arrays in the `this.__generatedMappings` and
                         * `this.__originalMappings` properties).
                         */SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
                            throw new Error("Subclasses must implement _parseMappings");
                        };
                        SourceMapConsumer.GENERATED_ORDER = 1;
                        SourceMapConsumer.ORIGINAL_ORDER = 2;
                        SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
                        SourceMapConsumer.LEAST_UPPER_BOUND = 2;
                        /**
                         * Iterate over each mapping between an original source/line/column and a
                         * generated line/column in this source map.
                         *
                         * @param Function aCallback
                         *        The function that is called with each mapping.
                         * @param Object aContext
                         *        Optional. If specified, this object will be the value of `this` every
                         *        time that `aCallback` is called.
                         * @param aOrder
                         *        Either `SourceMapConsumer.GENERATED_ORDER` or
                         *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
                         *        iterate over the mappings sorted by the generated file's line/column
                         *        order or the original's source/line/column order, respectively. Defaults to
                         *        `SourceMapConsumer.GENERATED_ORDER`.
                         */SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
                            var context = aContext || null;
                            var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
                            var mappings;
                            switch (order) {
                                case SourceMapConsumer.GENERATED_ORDER:
                                    mappings = this._generatedMappings;
                                    break;
                                case SourceMapConsumer.ORIGINAL_ORDER:
                                    mappings = this._originalMappings;
                                    break;
                                default:
                                    throw new Error("Unknown order of iteration.");
                            }
                            var sourceRoot = this.sourceRoot;
                            mappings.map(function (mapping) {
                                var source = mapping.source === null ? null : this._sources.at(mapping.source);
                                source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
                                return {
                                    source: source,
                                    generatedLine: mapping.generatedLine,
                                    generatedColumn: mapping.generatedColumn,
                                    originalLine: mapping.originalLine,
                                    originalColumn: mapping.originalColumn,
                                    name: mapping.name === null ? null : this._names.at(mapping.name)
                                };
                            }, this).forEach(aCallback, context);
                        };
                        /**
                         * Returns all generated line and column information for the original source,
                         * line, and column provided. If no column is provided, returns all mappings
                         * corresponding to a either the line we are searching for or the next
                         * closest line that has any mappings. Otherwise, returns all mappings
                         * corresponding to the given line and either the column we are searching for
                         * or the next closest column that has any offsets.
                         *
                         * The only argument is an object with the following properties:
                         *
                         *   - source: The filename of the original source.
                         *   - line: The line number in the original source.  The line number is 1-based.
                         *   - column: Optional. the column number in the original source.
                         *    The column number is 0-based.
                         *
                         * and an array of objects is returned, each with the following properties:
                         *
                         *   - line: The line number in the generated source, or null.  The
                         *    line number is 1-based.
                         *   - column: The column number in the generated source, or null.
                         *    The column number is 0-based.
                         */SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
                            var line = util.getArg(aArgs, 'line');// When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
// returns the index of the closest mapping less than the needle. By
// setting needle.originalColumn to 0, we thus find the last mapping for
// the given line, provided such a mapping exists.
                            var needle = {
                                source: util.getArg(aArgs, 'source'),
                                originalLine: line,
                                originalColumn: util.getArg(aArgs, 'column', 0)
                            };
                            needle.source = this._findSourceIndex(needle.source);
                            if (needle.source < 0) {
                                return [];
                            }
                            var mappings = [];
                            var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
                            if (index >= 0) {
                                var mapping = this._originalMappings[index];
                                if (aArgs.column === undefined) {
                                    var originalLine = mapping.originalLine;// Iterate until either we run out of mappings, or we run into
// a mapping for a different line than the one we found. Since
// mappings are sorted, this is guaranteed to find all mappings for
// the line we found.
                                    while (mapping && mapping.originalLine === originalLine) {
                                        mappings.push({
                                            line: util.getArg(mapping, 'generatedLine', null),
                                            column: util.getArg(mapping, 'generatedColumn', null),
                                            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                                        });
                                        mapping = this._originalMappings[++index];
                                    }
                                } else {
                                    var originalColumn = mapping.originalColumn;// Iterate until either we run out of mappings, or we run into
// a mapping for a different line than the one we were searching for.
// Since mappings are sorted, this is guaranteed to find all mappings for
// the line we are searching for.
                                    while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
                                        mappings.push({
                                            line: util.getArg(mapping, 'generatedLine', null),
                                            column: util.getArg(mapping, 'generatedColumn', null),
                                            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                                        });
                                        mapping = this._originalMappings[++index];
                                    }
                                }
                            }
                            return mappings;
                        };
                        exports.SourceMapConsumer = SourceMapConsumer;

                        /**
                         * A BasicSourceMapConsumer instance represents a parsed source map which we can
                         * query for information about the original file positions by giving it a file
                         * position in the generated source.
                         *
                         * The first parameter is the raw source map (either as a JSON string, or
                         * already parsed to an object). According to the spec, source maps have the
                         * following attributes:
                         *
                         *   - version: Which version of the source map spec this map is following.
                         *   - sources: An array of URLs to the original source files.
                         *   - names: An array of identifiers which can be referrenced by individual mappings.
                         *   - sourceRoot: Optional. The URL root from which all sources are relative.
                         *   - sourcesContent: Optional. An array of contents of the original source files.
                         *   - mappings: A string of base64 VLQs which contain the actual mappings.
                         *   - file: Optional. The generated file this source map is associated with.
                         *
                         * Here is an example source map, taken from the source map spec[0]:
                         *
                         *     {
                         *       version : 3,
                         *       file: "out.js",
                         *       sourceRoot : "",
                         *       sources: ["foo.js", "bar.js"],
                         *       names: ["src", "maps", "are", "fun"],
                         *       mappings: "AA,AB;;ABCDE;"
                         *     }
                         *
                         * The second parameter, if given, is a string whose value is the URL
                         * at which the source map was found.  This URL is used to compute the
                         * sources array.
                         *
                         * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
                         */function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
                            var sourceMap = aSourceMap;
                            if (typeof aSourceMap === 'string') {
                                sourceMap = util.parseSourceMapInput(aSourceMap);
                            }
                            var version = util.getArg(sourceMap, 'version');
                            var sources = util.getArg(sourceMap, 'sources');// Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
// requires the array) to play nice here.
                            var names = util.getArg(sourceMap, 'names', []);
                            var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
                            var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
                            var mappings = util.getArg(sourceMap, 'mappings');
                            var file = util.getArg(sourceMap, 'file', null);// Once again, Sass deviates from the spec and supplies the version as a
// string rather than a number, so we use loose equality checking here.
                            if (version != this._version) {
                                throw new Error('Unsupported version: ' + version);
                            }
                            if (sourceRoot) {
                                sourceRoot = util.normalize(sourceRoot);
                            }
                            sources = sources.map(String)// Some source maps produce relative source paths like "./foo.js" instead of
                                // "foo.js".  Normalize these first so that future comparisons will succeed.
                                // See bugzil.la/1090768.
                                .map(util.normalize)// Always ensure that absolute sources are internally stored relative to
                                // the source root, if the source root is absolute. Not doing this would
                                // be particularly problematic when the source root is a prefix of the
                                // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
                                .map(function (source) {
                                    return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
                                });// Pass `true` below to allow duplicate names and sources. While source maps
// are intended to be compressed and deduplicated, the TypeScript compiler
// sometimes generates source maps with duplicates in them. See Github issue
// #72 and bugzil.la/889492.
                            this._names = ArraySet.fromArray(names.map(String), true);
                            this._sources = ArraySet.fromArray(sources, true);
                            this._absoluteSources = this._sources.toArray().map(function (s) {
                                return util.computeSourceURL(sourceRoot, s, aSourceMapURL);
                            });
                            this.sourceRoot = sourceRoot;
                            this.sourcesContent = sourcesContent;
                            this._mappings = mappings;
                            this._sourceMapURL = aSourceMapURL;
                            this.file = file;
                        }

                        BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
                        BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
                        /**
                         * Utility function to find the index of a source.  Returns -1 if not
                         * found.
                         */BasicSourceMapConsumer.prototype._findSourceIndex = function (aSource) {
                            var relativeSource = aSource;
                            if (this.sourceRoot != null) {
                                relativeSource = util.relative(this.sourceRoot, relativeSource);
                            }
                            if (this._sources.has(relativeSource)) {
                                return this._sources.indexOf(relativeSource);
                            }// Maybe aSource is an absolute URL as returned by |sources|.  In
// this case we can't simply undo the transform.
                            var i;
                            for (i = 0; i < this._absoluteSources.length; ++i) {
                                if (this._absoluteSources[i] == aSource) {
                                    return i;
                                }
                            }
                            return -1;
                        };
                        /**
                         * Create a BasicSourceMapConsumer from a SourceMapGenerator.
                         *
                         * @param SourceMapGenerator aSourceMap
                         *        The source map that will be consumed.
                         * @param String aSourceMapURL
                         *        The URL at which the source map can be found (optional)
                         * @returns BasicSourceMapConsumer
                         */BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
                            var smc = Object.create(BasicSourceMapConsumer.prototype);
                            var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
                            var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
                            smc.sourceRoot = aSourceMap._sourceRoot;
                            smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
                            smc.file = aSourceMap._file;
                            smc._sourceMapURL = aSourceMapURL;
                            smc._absoluteSources = smc._sources.toArray().map(function (s) {
                                return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);
                            });// Because we are modifying the entries (by converting string sources and
// names to indices into the sources and names ArraySets), we have to make
// a copy of the entry or else bad things happen. Shared mutable state
// strikes again! See github issue #191.
                            var generatedMappings = aSourceMap._mappings.toArray().slice();
                            var destGeneratedMappings = smc.__generatedMappings = [];
                            var destOriginalMappings = smc.__originalMappings = [];
                            for (var i = 0, length = generatedMappings.length; i < length; i++) {
                                var srcMapping = generatedMappings[i];
                                var destMapping = new Mapping();
                                destMapping.generatedLine = srcMapping.generatedLine;
                                destMapping.generatedColumn = srcMapping.generatedColumn;
                                if (srcMapping.source) {
                                    destMapping.source = sources.indexOf(srcMapping.source);
                                    destMapping.originalLine = srcMapping.originalLine;
                                    destMapping.originalColumn = srcMapping.originalColumn;
                                    if (srcMapping.name) {
                                        destMapping.name = names.indexOf(srcMapping.name);
                                    }
                                    destOriginalMappings.push(destMapping);
                                }
                                destGeneratedMappings.push(destMapping);
                            }
                            quickSort(smc.__originalMappings, util.compareByOriginalPositions);
                            return smc;
                        };
                        /**
                         * The version of the source mapping spec that we are consuming.
                         */BasicSourceMapConsumer.prototype._version = 3;
                        /**
                         * The list of original sources.
                         */Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
                            get: function get() {
                                return this._absoluteSources.slice();
                            }
                        });

                        /**
                         * Provide the JIT with a nice shape / hidden class.
                         */function Mapping() {
                            this.generatedLine = 0;
                            this.generatedColumn = 0;
                            this.source = null;
                            this.originalLine = null;
                            this.originalColumn = null;
                            this.name = null;
                        }

                        /**
                         * Parse the mappings in a string in to a data structure which we can easily
                         * query (the ordered arrays in the `this.__generatedMappings` and
                         * `this.__originalMappings` properties).
                         */BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
                            var generatedLine = 1;
                            var previousGeneratedColumn = 0;
                            var previousOriginalLine = 0;
                            var previousOriginalColumn = 0;
                            var previousSource = 0;
                            var previousName = 0;
                            var length = aStr.length;
                            var index = 0;
                            var cachedSegments = {};
                            var temp = {};
                            var originalMappings = [];
                            var generatedMappings = [];
                            var mapping, str, segment, end, value;
                            while (index < length) {
                                if (aStr.charAt(index) === ';') {
                                    generatedLine++;
                                    index++;
                                    previousGeneratedColumn = 0;
                                } else if (aStr.charAt(index) === ',') {
                                    index++;
                                } else {
                                    mapping = new Mapping();
                                    mapping.generatedLine = generatedLine;// Because each offset is encoded relative to the previous one,
// many segments often have the same encoding. We can exploit this
// fact by caching the parsed variable length fields of each segment,
// allowing us to avoid a second parse if we encounter the same
// segment again.
                                    for (end = index; end < length; end++) {
                                        if (this._charIsMappingSeparator(aStr, end)) {
                                            break;
                                        }
                                    }
                                    str = aStr.slice(index, end);
                                    segment = cachedSegments[str];
                                    if (segment) {
                                        index += str.length;
                                    } else {
                                        segment = [];
                                        while (index < end) {
                                            base64VLQ.decode(aStr, index, temp);
                                            value = temp.value;
                                            index = temp.rest;
                                            segment.push(value);
                                        }
                                        if (segment.length === 2) {
                                            throw new Error('Found a source, but no line and column');
                                        }
                                        if (segment.length === 3) {
                                            throw new Error('Found a source and line, but no column');
                                        }
                                        cachedSegments[str] = segment;
                                    }// Generated column.
                                    mapping.generatedColumn = previousGeneratedColumn + segment[0];
                                    previousGeneratedColumn = mapping.generatedColumn;
                                    if (segment.length > 1) {// Original source.
                                        mapping.source = previousSource + segment[1];
                                        previousSource += segment[1];// Original line.
                                        mapping.originalLine = previousOriginalLine + segment[2];
                                        previousOriginalLine = mapping.originalLine;// Lines are stored 0-based
                                        mapping.originalLine += 1;// Original column.
                                        mapping.originalColumn = previousOriginalColumn + segment[3];
                                        previousOriginalColumn = mapping.originalColumn;
                                        if (segment.length > 4) {// Original name.
                                            mapping.name = previousName + segment[4];
                                            previousName += segment[4];
                                        }
                                    }
                                    generatedMappings.push(mapping);
                                    if (typeof mapping.originalLine === 'number') {
                                        originalMappings.push(mapping);
                                    }
                                }
                            }
                            quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
                            this.__generatedMappings = generatedMappings;
                            quickSort(originalMappings, util.compareByOriginalPositions);
                            this.__originalMappings = originalMappings;
                        };
                        /**
                         * Find the mapping that best matches the hypothetical "needle" mapping that
                         * we are searching for in the given "haystack" of mappings.
                         */BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {// To return the position we are searching for, we must first find the
// mapping for the given position and then return the opposite position it
// points to. Because the mappings are sorted, we can use binary search to
// find the best mapping.
                            if (aNeedle[aLineName] <= 0) {
                                throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
                            }
                            if (aNeedle[aColumnName] < 0) {
                                throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
                            }
                            return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
                        };
                        /**
                         * Compute the last column for each generated mapping. The last column is
                         * inclusive.
                         */BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
                            for (var index = 0; index < this._generatedMappings.length; ++index) {
                                var mapping = this._generatedMappings[index];// Mappings do not contain a field for the last generated columnt. We
// can come up with an optimistic estimate, however, by assuming that
// mappings are contiguous (i.e. given two consecutive mappings, the
// first mapping ends where the second one starts).
                                if (index + 1 < this._generatedMappings.length) {
                                    var nextMapping = this._generatedMappings[index + 1];
                                    if (mapping.generatedLine === nextMapping.generatedLine) {
                                        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                                        continue;
                                    }
                                }// The last mapping for each line spans the entire line.
                                mapping.lastGeneratedColumn = Infinity;
                            }
                        };
                        /**
                         * Returns the original source, line, and column information for the generated
                         * source's line and column positions provided. The only argument is an object
                         * with the following properties:
                         *
                         *   - line: The line number in the generated source.  The line number
                         *     is 1-based.
                         *   - column: The column number in the generated source.  The column
                         *     number is 0-based.
                         *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
                         *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
                         *     closest element that is smaller than or greater than the one we are
                         *     searching for, respectively, if the exact element cannot be found.
                         *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
                         *
                         * and an object is returned with the following properties:
                         *
                         *   - source: The original source file, or null.
                         *   - line: The line number in the original source, or null.  The
                         *     line number is 1-based.
                         *   - column: The column number in the original source, or null.  The
                         *     column number is 0-based.
                         *   - name: The original identifier, or null.
                         */BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
                            var needle = {
                                generatedLine: util.getArg(aArgs, 'line'),
                                generatedColumn: util.getArg(aArgs, 'column')
                            };
                            var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
                            if (index >= 0) {
                                var mapping = this._generatedMappings[index];
                                if (mapping.generatedLine === needle.generatedLine) {
                                    var source = util.getArg(mapping, 'source', null);
                                    if (source !== null) {
                                        source = this._sources.at(source);
                                        source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
                                    }
                                    var name = util.getArg(mapping, 'name', null);
                                    if (name !== null) {
                                        name = this._names.at(name);
                                    }
                                    return {
                                        source: source,
                                        line: util.getArg(mapping, 'originalLine', null),
                                        column: util.getArg(mapping, 'originalColumn', null),
                                        name: name
                                    };
                                }
                            }
                            return {source: null, line: null, column: null, name: null};
                        };
                        /**
                         * Return true if we have the source content for every source in the source
                         * map, false otherwise.
                         */BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
                            if (!this.sourcesContent) {
                                return false;
                            }
                            return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {
                                return sc == null;
                            });
                        };
                        /**
                         * Returns the original source content. The only argument is the url of the
                         * original source file. Returns null if no original source content is
                         * available.
                         */BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
                            if (!this.sourcesContent) {
                                return null;
                            }
                            var index = this._findSourceIndex(aSource);
                            if (index >= 0) {
                                return this.sourcesContent[index];
                            }
                            var relativeSource = aSource;
                            if (this.sourceRoot != null) {
                                relativeSource = util.relative(this.sourceRoot, relativeSource);
                            }
                            var url;
                            if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {// XXX: file:// URIs and absolute paths lead to unexpected behavior for
// many users. We can help them out when they expect file:// URIs to
// behave like it would if they were running a local HTTP server. See
// https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
                                var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
                                if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
                                    return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
                                }
                                if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
                                    return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
                                }
                            }// This function is used recursively from
// IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
// don't want to throw if we can't find the source - we just want to
// return null, so we provide a flag to exit gracefully.
                            if (nullOnMissing) {
                                return null;
                            } else {
                                throw new Error('"' + relativeSource + '" is not in the SourceMap.');
                            }
                        };
                        /**
                         * Returns the generated line and column information for the original source,
                         * line, and column positions provided. The only argument is an object with
                         * the following properties:
                         *
                         *   - source: The filename of the original source.
                         *   - line: The line number in the original source.  The line number
                         *     is 1-based.
                         *   - column: The column number in the original source.  The column
                         *     number is 0-based.
                         *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
                         *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
                         *     closest element that is smaller than or greater than the one we are
                         *     searching for, respectively, if the exact element cannot be found.
                         *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
                         *
                         * and an object is returned with the following properties:
                         *
                         *   - line: The line number in the generated source, or null.  The
                         *     line number is 1-based.
                         *   - column: The column number in the generated source, or null.
                         *     The column number is 0-based.
                         */BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
                            var source = util.getArg(aArgs, 'source');
                            source = this._findSourceIndex(source);
                            if (source < 0) {
                                return {line: null, column: null, lastColumn: null};
                            }
                            var needle = {
                                source: source,
                                originalLine: util.getArg(aArgs, 'line'),
                                originalColumn: util.getArg(aArgs, 'column')
                            };
                            var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
                            if (index >= 0) {
                                var mapping = this._originalMappings[index];
                                if (mapping.source === needle.source) {
                                    return {
                                        line: util.getArg(mapping, 'generatedLine', null),
                                        column: util.getArg(mapping, 'generatedColumn', null),
                                        lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                                    };
                                }
                            }
                            return {line: null, column: null, lastColumn: null};
                        };
                        exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

                        /**
                         * An IndexedSourceMapConsumer instance represents a parsed source map which
                         * we can query for information. It differs from BasicSourceMapConsumer in
                         * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
                         * input.
                         *
                         * The first parameter is a raw source map (either as a JSON string, or already
                         * parsed to an object). According to the spec for indexed source maps, they
                         * have the following attributes:
                         *
                         *   - version: Which version of the source map spec this map is following.
                         *   - file: Optional. The generated file this source map is associated with.
                         *   - sections: A list of section definitions.
                         *
                         * Each value under the "sections" field has two fields:
                         *   - offset: The offset into the original specified at which this section
                         *       begins to apply, defined as an object with a "line" and "column"
                         *       field.
                         *   - map: A source map definition. This source map could also be indexed,
                         *       but doesn't have to be.
                         *
                         * Instead of the "map" field, it's also possible to have a "url" field
                         * specifying a URL to retrieve a source map from, but that's currently
                         * unsupported.
                         *
                         * Here's an example source map, taken from the source map spec[0], but
                         * modified to omit a section which uses the "url" field.
                         *
                         *  {
                         *    version : 3,
                         *    file: "app.js",
                         *    sections: [{
                         *      offset: {line:100, column:10},
                         *      map: {
                         *        version : 3,
                         *        file: "section.js",
                         *        sources: ["foo.js", "bar.js"],
                         *        names: ["src", "maps", "are", "fun"],
                         *        mappings: "AAAA,E;;ABCDE;"
                         *      }
                         *    }],
                         *  }
                         *
                         * The second parameter, if given, is a string whose value is the URL
                         * at which the source map was found.  This URL is used to compute the
                         * sources array.
                         *
                         * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
                         */function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
                            var sourceMap = aSourceMap;
                            if (typeof aSourceMap === 'string') {
                                sourceMap = util.parseSourceMapInput(aSourceMap);
                            }
                            var version = util.getArg(sourceMap, 'version');
                            var sections = util.getArg(sourceMap, 'sections');
                            if (version != this._version) {
                                throw new Error('Unsupported version: ' + version);
                            }
                            this._sources = new ArraySet();
                            this._names = new ArraySet();
                            var lastOffset = {line: -1, column: 0};
                            this._sections = sections.map(function (s) {
                                if (s.url) {// The url field will require support for asynchronicity.
// See https://github.com/mozilla/source-map/issues/16
                                    throw new Error('Support for url field in sections not implemented.');
                                }
                                var offset = util.getArg(s, 'offset');
                                var offsetLine = util.getArg(offset, 'line');
                                var offsetColumn = util.getArg(offset, 'column');
                                if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
                                    throw new Error('Section offsets must be ordered and non-overlapping.');
                                }
                                lastOffset = offset;
                                return {
                                    generatedOffset: {// The offset fields are 0-based, but we use 1-based indices when
// encoding/decoding from VLQ.
                                        generatedLine: offsetLine + 1, generatedColumn: offsetColumn + 1
                                    }, consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)
                                };
                            });
                        }

                        IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
                        IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
                        /**
                         * The version of the source mapping spec that we are consuming.
                         */IndexedSourceMapConsumer.prototype._version = 3;
                        /**
                         * The list of original sources.
                         */Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
                            get: function get() {
                                var sources = [];
                                for (var i = 0; i < this._sections.length; i++) {
                                    for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
                                        sources.push(this._sections[i].consumer.sources[j]);
                                    }
                                }
                                return sources;
                            }
                        });
                        /**
                         * Returns the original source, line, and column information for the generated
                         * source's line and column positions provided. The only argument is an object
                         * with the following properties:
                         *
                         *   - line: The line number in the generated source.  The line number
                         *     is 1-based.
                         *   - column: The column number in the generated source.  The column
                         *     number is 0-based.
                         *
                         * and an object is returned with the following properties:
                         *
                         *   - source: The original source file, or null.
                         *   - line: The line number in the original source, or null.  The
                         *     line number is 1-based.
                         *   - column: The column number in the original source, or null.  The
                         *     column number is 0-based.
                         *   - name: The original identifier, or null.
                         */IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
                            var needle = {
                                generatedLine: util.getArg(aArgs, 'line'),
                                generatedColumn: util.getArg(aArgs, 'column')
                            };// Find the section containing the generated position we're trying to map
// to an original position.
                            var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {
                                var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
                                if (cmp) {
                                    return cmp;
                                }
                                return needle.generatedColumn - section.generatedOffset.generatedColumn;
                            });
                            var section = this._sections[sectionIndex];
                            if (!section) {
                                return {source: null, line: null, column: null, name: null};
                            }
                            return section.consumer.originalPositionFor({
                                line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
                                column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
                                bias: aArgs.bias
                            });
                        };
                        /**
                         * Return true if we have the source content for every source in the source
                         * map, false otherwise.
                         */IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
                            return this._sections.every(function (s) {
                                return s.consumer.hasContentsOfAllSources();
                            });
                        };
                        /**
                         * Returns the original source content. The only argument is the url of the
                         * original source file. Returns null if no original source content is
                         * available.
                         */IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
                            for (var i = 0; i < this._sections.length; i++) {
                                var section = this._sections[i];
                                var content = section.consumer.sourceContentFor(aSource, true);
                                if (content) {
                                    return content;
                                }
                            }
                            if (nullOnMissing) {
                                return null;
                            } else {
                                throw new Error('"' + aSource + '" is not in the SourceMap.');
                            }
                        };
                        /**
                         * Returns the generated line and column information for the original source,
                         * line, and column positions provided. The only argument is an object with
                         * the following properties:
                         *
                         *   - source: The filename of the original source.
                         *   - line: The line number in the original source.  The line number
                         *     is 1-based.
                         *   - column: The column number in the original source.  The column
                         *     number is 0-based.
                         *
                         * and an object is returned with the following properties:
                         *
                         *   - line: The line number in the generated source, or null.  The
                         *     line number is 1-based.
                         *   - column: The column number in the generated source, or null.
                         *     The column number is 0-based.
                         */IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
                            for (var i = 0; i < this._sections.length; i++) {
                                var section = this._sections[i];// Only consider this section if the requested source is in the list of
// sources of the consumer.
                                if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {
                                    continue;
                                }
                                var generatedPosition = section.consumer.generatedPositionFor(aArgs);
                                if (generatedPosition) {
                                    var ret = {
                                        line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
                                        column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
                                    };
                                    return ret;
                                }
                            }
                            return {line: null, column: null};
                        };
                        /**
                         * Parse the mappings in a string in to a data structure which we can easily
                         * query (the ordered arrays in the `this.__generatedMappings` and
                         * `this.__originalMappings` properties).
                         */IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
                            this.__generatedMappings = [];
                            this.__originalMappings = [];
                            for (var i = 0; i < this._sections.length; i++) {
                                var section = this._sections[i];
                                var sectionMappings = section.consumer._generatedMappings;
                                for (var j = 0; j < sectionMappings.length; j++) {
                                    var mapping = sectionMappings[j];
                                    var source = section.consumer._sources.at(mapping.source);
                                    source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
                                    this._sources.add(source);
                                    source = this._sources.indexOf(source);
                                    var name = null;
                                    if (mapping.name) {
                                        name = section.consumer._names.at(mapping.name);
                                        this._names.add(name);
                                        name = this._names.indexOf(name);
                                    }// The mappings coming from the consumer for the section have
// generated positions relative to the start of the section, so we
// need to offset them to be relative to the start of the concatenated
// generated file.
                                    var adjustedMapping = {
                                        source: source,
                                        generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
                                        generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
                                        originalLine: mapping.originalLine,
                                        originalColumn: mapping.originalColumn,
                                        name: name
                                    };
                                    this.__generatedMappings.push(adjustedMapping);
                                    if (typeof adjustedMapping.originalLine === 'number') {
                                        this.__originalMappings.push(adjustedMapping);
                                    }
                                }
                            }
                            quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
                            quickSort(this.__originalMappings, util.compareByOriginalPositions);
                        };
                        exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
                    }, {
                        "./array-set": 68,
                        "./base64-vlq": 69,
                        "./binary-search": 71,
                        "./quick-sort": 73,
                        "./util": 77
                    }],
                    75: [function (require, module, exports) {/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
                        var base64VLQ = require('./base64-vlq');
                        var util = require('./util');
                        var ArraySet = require('./array-set').ArraySet;
                        var MappingList = require('./mapping-list').MappingList;

                        /**
                         * An instance of the SourceMapGenerator represents a source map which is
                         * being built incrementally. You may pass an object with the following
                         * properties:
                         *
                         *   - file: The filename of the generated source.
                         *   - sourceRoot: A root for all relative URLs in this source map.
                         */function SourceMapGenerator(aArgs) {
                            if (!aArgs) {
                                aArgs = {};
                            }
                            this._file = util.getArg(aArgs, 'file', null);
                            this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
                            this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
                            this._sources = new ArraySet();
                            this._names = new ArraySet();
                            this._mappings = new MappingList();
                            this._sourcesContents = null;
                        }

                        SourceMapGenerator.prototype._version = 3;
                        /**
                         * Creates a new SourceMapGenerator based on a SourceMapConsumer
                         *
                         * @param aSourceMapConsumer The SourceMap.
                         */SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
                            var sourceRoot = aSourceMapConsumer.sourceRoot;
                            var generator = new SourceMapGenerator({
                                file: aSourceMapConsumer.file,
                                sourceRoot: sourceRoot
                            });
                            aSourceMapConsumer.eachMapping(function (mapping) {
                                var newMapping = {
                                    generated: {
                                        line: mapping.generatedLine,
                                        column: mapping.generatedColumn
                                    }
                                };
                                if (mapping.source != null) {
                                    newMapping.source = mapping.source;
                                    if (sourceRoot != null) {
                                        newMapping.source = util.relative(sourceRoot, newMapping.source);
                                    }
                                    newMapping.original = {line: mapping.originalLine, column: mapping.originalColumn};
                                    if (mapping.name != null) {
                                        newMapping.name = mapping.name;
                                    }
                                }
                                generator.addMapping(newMapping);
                            });
                            aSourceMapConsumer.sources.forEach(function (sourceFile) {
                                var sourceRelative = sourceFile;
                                if (sourceRoot !== null) {
                                    sourceRelative = util.relative(sourceRoot, sourceFile);
                                }
                                if (!generator._sources.has(sourceRelative)) {
                                    generator._sources.add(sourceRelative);
                                }
                                var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                                if (content != null) {
                                    generator.setSourceContent(sourceFile, content);
                                }
                            });
                            return generator;
                        };
                        /**
                         * Add a single mapping from original source line and column to the generated
                         * source's line and column for this source map being created. The mapping
                         * object should have the following properties:
                         *
                         *   - generated: An object with the generated line and column positions.
                         *   - original: An object with the original line and column positions.
                         *   - source: The original source file (relative to the sourceRoot).
                         *   - name: An optional original token name for this mapping.
                         */SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
                            var generated = util.getArg(aArgs, 'generated');
                            var original = util.getArg(aArgs, 'original', null);
                            var source = util.getArg(aArgs, 'source', null);
                            var name = util.getArg(aArgs, 'name', null);
                            if (!this._skipValidation) {
                                this._validateMapping(generated, original, source, name);
                            }
                            if (source != null) {
                                source = String(source);
                                if (!this._sources.has(source)) {
                                    this._sources.add(source);
                                }
                            }
                            if (name != null) {
                                name = String(name);
                                if (!this._names.has(name)) {
                                    this._names.add(name);
                                }
                            }
                            this._mappings.add({
                                generatedLine: generated.line,
                                generatedColumn: generated.column,
                                originalLine: original != null && original.line,
                                originalColumn: original != null && original.column,
                                source: source,
                                name: name
                            });
                        };
                        /**
                         * Set the source content for a source file.
                         */SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
                            var source = aSourceFile;
                            if (this._sourceRoot != null) {
                                source = util.relative(this._sourceRoot, source);
                            }
                            if (aSourceContent != null) {// Add the source content to the _sourcesContents map.
// Create a new _sourcesContents map if the property is null.
                                if (!this._sourcesContents) {
                                    this._sourcesContents = Object.create(null);
                                }
                                this._sourcesContents[util.toSetString(source)] = aSourceContent;
                            } else if (this._sourcesContents) {// Remove the source file from the _sourcesContents map.
// If the _sourcesContents map is empty, set the property to null.
                                delete this._sourcesContents[util.toSetString(source)];
                                if (Object.keys(this._sourcesContents).length === 0) {
                                    this._sourcesContents = null;
                                }
                            }
                        };
                        /**
                         * Applies the mappings of a sub-source-map for a specific source file to the
                         * source map being generated. Each mapping to the supplied source file is
                         * rewritten using the supplied source map. Note: The resolution for the
                         * resulting mappings is the minimium of this map and the supplied map.
                         *
                         * @param aSourceMapConsumer The source map to be applied.
                         * @param aSourceFile Optional. The filename of the source file.
                         *        If omitted, SourceMapConsumer's file property will be used.
                         * @param aSourceMapPath Optional. The dirname of the path to the source map
                         *        to be applied. If relative, it is relative to the SourceMapConsumer.
                         *        This parameter is needed when the two source maps aren't in the same
                         *        directory, and the source map to be applied contains relative source
                         *        paths. If so, those relative source paths need to be rewritten
                         *        relative to the SourceMapGenerator.
                         */SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
                            var sourceFile = aSourceFile;// If aSourceFile is omitted, we will use the file property of the SourceMap
                            if (aSourceFile == null) {
                                if (aSourceMapConsumer.file == null) {
                                    throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
                                }
                                sourceFile = aSourceMapConsumer.file;
                            }
                            var sourceRoot = this._sourceRoot;// Make "sourceFile" relative if an absolute Url is passed.
                            if (sourceRoot != null) {
                                sourceFile = util.relative(sourceRoot, sourceFile);
                            }// Applying the SourceMap can add and remove items from the sources and
// the names array.
                            var newSources = new ArraySet();
                            var newNames = new ArraySet();// Find mappings for the "sourceFile"
                            this._mappings.unsortedForEach(function (mapping) {
                                if (mapping.source === sourceFile && mapping.originalLine != null) {// Check if it can be mapped by the source map, then update the mapping.
                                    var original = aSourceMapConsumer.originalPositionFor({
                                        line: mapping.originalLine,
                                        column: mapping.originalColumn
                                    });
                                    if (original.source != null) {// Copy mapping
                                        mapping.source = original.source;
                                        if (aSourceMapPath != null) {
                                            mapping.source = util.join(aSourceMapPath, mapping.source);
                                        }
                                        if (sourceRoot != null) {
                                            mapping.source = util.relative(sourceRoot, mapping.source);
                                        }
                                        mapping.originalLine = original.line;
                                        mapping.originalColumn = original.column;
                                        if (original.name != null) {
                                            mapping.name = original.name;
                                        }
                                    }
                                }
                                var source = mapping.source;
                                if (source != null && !newSources.has(source)) {
                                    newSources.add(source);
                                }
                                var name = mapping.name;
                                if (name != null && !newNames.has(name)) {
                                    newNames.add(name);
                                }
                            }, this);
                            this._sources = newSources;
                            this._names = newNames;// Copy sourcesContents of applied map.
                            aSourceMapConsumer.sources.forEach(function (sourceFile) {
                                var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                                if (content != null) {
                                    if (aSourceMapPath != null) {
                                        sourceFile = util.join(aSourceMapPath, sourceFile);
                                    }
                                    if (sourceRoot != null) {
                                        sourceFile = util.relative(sourceRoot, sourceFile);
                                    }
                                    this.setSourceContent(sourceFile, content);
                                }
                            }, this);
                        };
                        /**
                         * A mapping can have one of the three levels of data:
                         *
                         *   1. Just the generated position.
                         *   2. The Generated position, original position, and original source.
                         *   3. Generated and original position, original source, as well as a name
                         *      token.
                         *
                         * To maintain consistency, we validate that any new mapping being added falls
                         * in to one of these categories.
                         */SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {// When aOriginal is truthy but has empty values for .line and .column,
// it is most likely a programmer error. In this case we throw a very
// specific error message to try to guide them the right way.
// For example: https://github.com/Polymer/polymer-bundler/pull/519
                            if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {
                                throw new Error('original.line and original.column are not numbers -- you probably meant to omit ' + 'the original mapping entirely and only map the generated position. If so, pass ' + 'null for the original mapping instead of an object with empty or null values.');
                            }
                            if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {// Case 1.
                                return;
                            } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {// Cases 2 and 3.
                                return;
                            } else {
                                throw new Error('Invalid mapping: ' + JSON.stringify({
                                    generated: aGenerated,
                                    source: aSource,
                                    original: aOriginal,
                                    name: aName
                                }));
                            }
                        };
                        /**
                         * Serialize the accumulated mappings in to the stream of base 64 VLQs
                         * specified by the source map format.
                         */SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
                            var previousGeneratedColumn = 0;
                            var previousGeneratedLine = 1;
                            var previousOriginalColumn = 0;
                            var previousOriginalLine = 0;
                            var previousName = 0;
                            var previousSource = 0;
                            var result = '';
                            var next;
                            var mapping;
                            var nameIdx;
                            var sourceIdx;
                            var mappings = this._mappings.toArray();
                            for (var i = 0, len = mappings.length; i < len; i++) {
                                mapping = mappings[i];
                                next = '';
                                if (mapping.generatedLine !== previousGeneratedLine) {
                                    previousGeneratedColumn = 0;
                                    while (mapping.generatedLine !== previousGeneratedLine) {
                                        next += ';';
                                        previousGeneratedLine++;
                                    }
                                } else {
                                    if (i > 0) {
                                        if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
                                            continue;
                                        }
                                        next += ',';
                                    }
                                }
                                next += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
                                previousGeneratedColumn = mapping.generatedColumn;
                                if (mapping.source != null) {
                                    sourceIdx = this._sources.indexOf(mapping.source);
                                    next += base64VLQ.encode(sourceIdx - previousSource);
                                    previousSource = sourceIdx;// lines are stored 0-based in SourceMap spec version 3
                                    next += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
                                    previousOriginalLine = mapping.originalLine - 1;
                                    next += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
                                    previousOriginalColumn = mapping.originalColumn;
                                    if (mapping.name != null) {
                                        nameIdx = this._names.indexOf(mapping.name);
                                        next += base64VLQ.encode(nameIdx - previousName);
                                        previousName = nameIdx;
                                    }
                                }
                                result += next;
                            }
                            return result;
                        };
                        SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
                            return aSources.map(function (source) {
                                if (!this._sourcesContents) {
                                    return null;
                                }
                                if (aSourceRoot != null) {
                                    source = util.relative(aSourceRoot, source);
                                }
                                var key = util.toSetString(source);
                                return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
                            }, this);
                        };
                        /**
                         * Externalize the source map.
                         */SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
                            var map = {
                                version: this._version,
                                sources: this._sources.toArray(),
                                names: this._names.toArray(),
                                mappings: this._serializeMappings()
                            };
                            if (this._file != null) {
                                map.file = this._file;
                            }
                            if (this._sourceRoot != null) {
                                map.sourceRoot = this._sourceRoot;
                            }
                            if (this._sourcesContents) {
                                map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
                            }
                            return map;
                        };
                        /**
                         * Render the source map being generated to a string.
                         */SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
                            return JSON.stringify(this.toJSON());
                        };
                        exports.SourceMapGenerator = SourceMapGenerator;
                    }, {"./array-set": 68, "./base64-vlq": 69, "./mapping-list": 72, "./util": 77}],
                    76: [function (require, module, exports) {/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
                        var SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;
                        var util = require('./util');// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
// operating systems these days (capturing the result).
                        var REGEX_NEWLINE = /(\r?\n)/;// Newline character code for charCodeAt() comparisons
                        var NEWLINE_CODE = 10;// Private symbol for identifying `SourceNode`s when multiple versions of
// the source-map library are loaded. This MUST NOT CHANGE across
// versions!
                        var isSourceNode = "$$$isSourceNode$$$";

                        /**
                         * SourceNodes provide a way to abstract over interpolating/concatenating
                         * snippets of generated JavaScript source code while maintaining the line and
                         * column information associated with the original source code.
                         *
                         * @param aLine The original line number.
                         * @param aColumn The original column number.
                         * @param aSource The original source's filename.
                         * @param aChunks Optional. An array of strings which are snippets of
                         *        generated JS, or other SourceNodes.
                         * @param aName The original identifier.
                         */function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
                            this.children = [];
                            this.sourceContents = {};
                            this.line = aLine == null ? null : aLine;
                            this.column = aColumn == null ? null : aColumn;
                            this.source = aSource == null ? null : aSource;
                            this.name = aName == null ? null : aName;
                            this[isSourceNode] = true;
                            if (aChunks != null) this.add(aChunks);
                        }

                        /**
                         * Creates a SourceNode from generated code and a SourceMapConsumer.
                         *
                         * @param aGeneratedCode The generated code
                         * @param aSourceMapConsumer The SourceMap for the generated code
                         * @param aRelativePath Optional. The path that relative sources in the
                         *        SourceMapConsumer should be relative to.
                         */SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {// The SourceNode we want to fill with the generated code
// and the SourceMap
                            var node = new SourceNode();// All even indices of this array are one line of the generated code,
// while all odd indices are the newlines between two adjacent lines
// (since `REGEX_NEWLINE` captures its match).
// Processed fragments are accessed by calling `shiftNextLine`.
                            var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
                            var remainingLinesIndex = 0;
                            var shiftNextLine = function shiftNextLine() {
                                var lineContents = getNextLine();// The last line of a file might not have a newline.
                                var newLine = getNextLine() || "";
                                return lineContents + newLine;

                                function getNextLine() {
                                    return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : undefined;
                                }
                            };// We need to remember the position of "remainingLines"
                            var lastGeneratedLine = 1, lastGeneratedColumn = 0;// The generate SourceNodes we need a code range.
// To extract it current and last mapping is used.
// Here we store the last mapping.
                            var lastMapping = null;
                            aSourceMapConsumer.eachMapping(function (mapping) {
                                if (lastMapping !== null) {// We add the code from "lastMapping" to "mapping":
// First check if there is a new line in between.
                                    if (lastGeneratedLine < mapping.generatedLine) {// Associate first line with "lastMapping"
                                        addMappingWithCode(lastMapping, shiftNextLine());
                                        lastGeneratedLine++;
                                        lastGeneratedColumn = 0;// The remaining code is added without mapping
                                    } else {// There is no new line in between.
// Associate the code between "lastGeneratedColumn" and
// "mapping.generatedColumn" with "lastMapping"
                                        var nextLine = remainingLines[remainingLinesIndex] || '';
                                        var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
                                        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
                                        lastGeneratedColumn = mapping.generatedColumn;
                                        addMappingWithCode(lastMapping, code);// No more remaining code, continue
                                        lastMapping = mapping;
                                        return;
                                    }
                                }// We add the generated code until the first mapping
// to the SourceNode without any mapping.
// Each line is added as separate string.
                                while (lastGeneratedLine < mapping.generatedLine) {
                                    node.add(shiftNextLine());
                                    lastGeneratedLine++;
                                }
                                if (lastGeneratedColumn < mapping.generatedColumn) {
                                    var nextLine = remainingLines[remainingLinesIndex] || '';
                                    node.add(nextLine.substr(0, mapping.generatedColumn));
                                    remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
                                    lastGeneratedColumn = mapping.generatedColumn;
                                }
                                lastMapping = mapping;
                            }, this);// We have processed all mappings.
                            if (remainingLinesIndex < remainingLines.length) {
                                if (lastMapping) {// Associate the remaining code in the current line with "lastMapping"
                                    addMappingWithCode(lastMapping, shiftNextLine());
                                }// and add the remaining lines without any mapping
                                node.add(remainingLines.splice(remainingLinesIndex).join(""));
                            }// Copy sourcesContent into SourceNode
                            aSourceMapConsumer.sources.forEach(function (sourceFile) {
                                var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                                if (content != null) {
                                    if (aRelativePath != null) {
                                        sourceFile = util.join(aRelativePath, sourceFile);
                                    }
                                    node.setSourceContent(sourceFile, content);
                                }
                            });
                            return node;

                            function addMappingWithCode(mapping, code) {
                                if (mapping === null || mapping.source === undefined) {
                                    node.add(code);
                                } else {
                                    var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
                                    node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
                                }
                            }
                        };
                        /**
                         * Add a chunk of generated JS to this source node.
                         *
                         * @param aChunk A string snippet of generated JS code, another instance of
                         *        SourceNode, or an array where each member is one of those things.
                         */SourceNode.prototype.add = function SourceNode_add(aChunk) {
                            if (Array.isArray(aChunk)) {
                                aChunk.forEach(function (chunk) {
                                    this.add(chunk);
                                }, this);
                            } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
                                if (aChunk) {
                                    this.children.push(aChunk);
                                }
                            } else {
                                throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
                            }
                            return this;
                        };
                        /**
                         * Add a chunk of generated JS to the beginning of this source node.
                         *
                         * @param aChunk A string snippet of generated JS code, another instance of
                         *        SourceNode, or an array where each member is one of those things.
                         */SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
                            if (Array.isArray(aChunk)) {
                                for (var i = aChunk.length - 1; i >= 0; i--) {
                                    this.prepend(aChunk[i]);
                                }
                            } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
                                this.children.unshift(aChunk);
                            } else {
                                throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
                            }
                            return this;
                        };
                        /**
                         * Walk over the tree of JS snippets in this node and its children. The
                         * walking function is called once for each snippet of JS and is passed that
                         * snippet and the its original associated source's line/column location.
                         *
                         * @param aFn The traversal function.
                         */SourceNode.prototype.walk = function SourceNode_walk(aFn) {
                            var chunk;
                            for (var i = 0, len = this.children.length; i < len; i++) {
                                chunk = this.children[i];
                                if (chunk[isSourceNode]) {
                                    chunk.walk(aFn);
                                } else {
                                    if (chunk !== '') {
                                        aFn(chunk, {
                                            source: this.source,
                                            line: this.line,
                                            column: this.column,
                                            name: this.name
                                        });
                                    }
                                }
                            }
                        };
                        /**
                         * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
                         * each of `this.children`.
                         *
                         * @param aSep The separator.
                         */SourceNode.prototype.join = function SourceNode_join(aSep) {
                            var newChildren;
                            var i;
                            var len = this.children.length;
                            if (len > 0) {
                                newChildren = [];
                                for (i = 0; i < len - 1; i++) {
                                    newChildren.push(this.children[i]);
                                    newChildren.push(aSep);
                                }
                                newChildren.push(this.children[i]);
                                this.children = newChildren;
                            }
                            return this;
                        };
                        /**
                         * Call String.prototype.replace on the very right-most source snippet. Useful
                         * for trimming whitespace from the end of a source node, etc.
                         *
                         * @param aPattern The pattern to replace.
                         * @param aReplacement The thing to replace the pattern with.
                         */SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
                            var lastChild = this.children[this.children.length - 1];
                            if (lastChild[isSourceNode]) {
                                lastChild.replaceRight(aPattern, aReplacement);
                            } else if (typeof lastChild === 'string') {
                                this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
                            } else {
                                this.children.push(''.replace(aPattern, aReplacement));
                            }
                            return this;
                        };
                        /**
                         * Set the source content for a source file. This will be added to the SourceMapGenerator
                         * in the sourcesContent field.
                         *
                         * @param aSourceFile The filename of the source file
                         * @param aSourceContent The content of the source file
                         */SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
                            this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
                        };
                        /**
                         * Walk over the tree of SourceNodes. The walking function is called for each
                         * source file content and is passed the filename and source content.
                         *
                         * @param aFn The traversal function.
                         */SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
                            for (var i = 0, len = this.children.length; i < len; i++) {
                                if (this.children[i][isSourceNode]) {
                                    this.children[i].walkSourceContents(aFn);
                                }
                            }
                            var sources = Object.keys(this.sourceContents);
                            for (var i = 0, len = sources.length; i < len; i++) {
                                aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
                            }
                        };
                        /**
                         * Return the string representation of this source node. Walks over the tree
                         * and concatenates all the various snippets together to one string.
                         */SourceNode.prototype.toString = function SourceNode_toString() {
                            var str = "";
                            this.walk(function (chunk) {
                                str += chunk;
                            });
                            return str;
                        };
                        /**
                         * Returns the string representation of this source node along with a source
                         * map.
                         */SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
                            var generated = {code: "", line: 1, column: 0};
                            var map = new SourceMapGenerator(aArgs);
                            var sourceMappingActive = false;
                            var lastOriginalSource = null;
                            var lastOriginalLine = null;
                            var lastOriginalColumn = null;
                            var lastOriginalName = null;
                            this.walk(function (chunk, original) {
                                generated.code += chunk;
                                if (original.source !== null && original.line !== null && original.column !== null) {
                                    if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
                                        map.addMapping({
                                            source: original.source,
                                            original: {line: original.line, column: original.column},
                                            generated: {line: generated.line, column: generated.column},
                                            name: original.name
                                        });
                                    }
                                    lastOriginalSource = original.source;
                                    lastOriginalLine = original.line;
                                    lastOriginalColumn = original.column;
                                    lastOriginalName = original.name;
                                    sourceMappingActive = true;
                                } else if (sourceMappingActive) {
                                    map.addMapping({generated: {line: generated.line, column: generated.column}});
                                    lastOriginalSource = null;
                                    sourceMappingActive = false;
                                }
                                for (var idx = 0, length = chunk.length; idx < length; idx++) {
                                    if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
                                        generated.line++;
                                        generated.column = 0;// Mappings end at eol
                                        if (idx + 1 === length) {
                                            lastOriginalSource = null;
                                            sourceMappingActive = false;
                                        } else if (sourceMappingActive) {
                                            map.addMapping({
                                                source: original.source,
                                                original: {line: original.line, column: original.column},
                                                generated: {line: generated.line, column: generated.column},
                                                name: original.name
                                            });
                                        }
                                    } else {
                                        generated.column++;
                                    }
                                }
                            });
                            this.walkSourceContents(function (sourceFile, sourceContent) {
                                map.setSourceContent(sourceFile, sourceContent);
                            });
                            return {code: generated.code, map: map};
                        };
                        exports.SourceNode = SourceNode;
                    }, {"./source-map-generator": 75, "./util": 77}],
                    77: [function (require, module, exports) {/* -*- Mode: js; js-indent-level: 2; -*- */ /*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
                        /**
                         * This is a helper function for getting values from parameter/options
                         * objects.
                         *
                         * @param args The object we are extracting values from
                         * @param name The name of the property we are getting.
                         * @param defaultValue An optional value to return if the property is missing
                         * from the object. If this is not specified and the property is missing, an
                         * error will be thrown.
                         */function getArg(aArgs, aName, aDefaultValue) {
                            if (aName in aArgs) {
                                return aArgs[aName];
                            } else if (arguments.length === 3) {
                                return aDefaultValue;
                            } else {
                                throw new Error('"' + aName + '" is a required argument.');
                            }
                        }

                        exports.getArg = getArg;
                        var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
                        var dataUrlRegexp = /^data:.+\,.+$/;

                        function urlParse(aUrl) {
                            var match = aUrl.match(urlRegexp);
                            if (!match) {
                                return null;
                            }
                            return {scheme: match[1], auth: match[2], host: match[3], port: match[4], path: match[5]};
                        }

                        exports.urlParse = urlParse;

                        function urlGenerate(aParsedUrl) {
                            var url = '';
                            if (aParsedUrl.scheme) {
                                url += aParsedUrl.scheme + ':';
                            }
                            url += '//';
                            if (aParsedUrl.auth) {
                                url += aParsedUrl.auth + '@';
                            }
                            if (aParsedUrl.host) {
                                url += aParsedUrl.host;
                            }
                            if (aParsedUrl.port) {
                                url += ":" + aParsedUrl.port;
                            }
                            if (aParsedUrl.path) {
                                url += aParsedUrl.path;
                            }
                            return url;
                        }

                        exports.urlGenerate = urlGenerate;

                        /**
                         * Normalizes a path, or the path portion of a URL:
                         *
                         * - Replaces consecutive slashes with one slash.
                         * - Removes unnecessary '.' parts.
                         * - Removes unnecessary '<dir>/..' parts.
                         *
                         * Based on code in the Node.js 'path' core module.
                         *
                         * @param aPath The path or url to normalize.
                         */function normalize(aPath) {
                            var path = aPath;
                            var url = urlParse(aPath);
                            if (url) {
                                if (!url.path) {
                                    return aPath;
                                }
                                path = url.path;
                            }
                            var isAbsolute = exports.isAbsolute(path);
                            var parts = path.split(/\/+/);
                            for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
                                part = parts[i];
                                if (part === '.') {
                                    parts.splice(i, 1);
                                } else if (part === '..') {
                                    up++;
                                } else if (up > 0) {
                                    if (part === '') {// The first part is blank if the path is absolute. Trying to go
// above the root is a no-op. Therefore we can remove all '..' parts
// directly after the root.
                                        parts.splice(i + 1, up);
                                        up = 0;
                                    } else {
                                        parts.splice(i, 2);
                                        up--;
                                    }
                                }
                            }
                            path = parts.join('/');
                            if (path === '') {
                                path = isAbsolute ? '/' : '.';
                            }
                            if (url) {
                                url.path = path;
                                return urlGenerate(url);
                            }
                            return path;
                        }

                        exports.normalize = normalize;

                        /**
                         * Joins two paths/URLs.
                         *
                         * @param aRoot The root path or URL.
                         * @param aPath The path or URL to be joined with the root.
                         *
                         * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
                         *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
                         *   first.
                         * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
                         *   is updated with the result and aRoot is returned. Otherwise the result
                         *   is returned.
                         *   - If aPath is absolute, the result is aPath.
                         *   - Otherwise the two paths are joined with a slash.
                         * - Joining for example 'http://' and 'www.example.com' is also supported.
                         */function join(aRoot, aPath) {
                            if (aRoot === "") {
                                aRoot = ".";
                            }
                            if (aPath === "") {
                                aPath = ".";
                            }
                            var aPathUrl = urlParse(aPath);
                            var aRootUrl = urlParse(aRoot);
                            if (aRootUrl) {
                                aRoot = aRootUrl.path || '/';
                            }// `join(foo, '//www.example.org')`
                            if (aPathUrl && !aPathUrl.scheme) {
                                if (aRootUrl) {
                                    aPathUrl.scheme = aRootUrl.scheme;
                                }
                                return urlGenerate(aPathUrl);
                            }
                            if (aPathUrl || aPath.match(dataUrlRegexp)) {
                                return aPath;
                            }// `join('http://', 'www.example.com')`
                            if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
                                aRootUrl.host = aPath;
                                return urlGenerate(aRootUrl);
                            }
                            var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
                            if (aRootUrl) {
                                aRootUrl.path = joined;
                                return urlGenerate(aRootUrl);
                            }
                            return joined;
                        }

                        exports.join = join;
                        exports.isAbsolute = function (aPath) {
                            return aPath.charAt(0) === '/' || urlRegexp.test(aPath);
                        };

                        /**
                         * Make a path relative to a URL or another path.
                         *
                         * @param aRoot The root path or URL.
                         * @param aPath The path or URL to be made relative to aRoot.
                         */function relative(aRoot, aPath) {
                            if (aRoot === "") {
                                aRoot = ".";
                            }
                            aRoot = aRoot.replace(/\/$/, '');// It is possible for the path to be above the root. In this case, simply
// checking whether the root is a prefix of the path won't work. Instead, we
// need to remove components from the root one by one, until either we find
// a prefix that fits, or we run out of components to remove.
                            var level = 0;
                            while (aPath.indexOf(aRoot + '/') !== 0) {
                                var index = aRoot.lastIndexOf("/");
                                if (index < 0) {
                                    return aPath;
                                }// If the only part of the root that is left is the scheme (i.e. http://,
// file:///, etc.), one or more slashes (/), or simply nothing at all, we
// have exhausted all components, so the path is not relative to the root.
                                aRoot = aRoot.slice(0, index);
                                if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
                                    return aPath;
                                }
                                ++level;
                            }// Make sure we add a "../" for each component we removed from the root.
                            return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
                        }

                        exports.relative = relative;
                        var supportsNullProto = function () {
                            var obj = Object.create(null);
                            return !('__proto__' in obj);
                        }();

                        function identity(s) {
                            return s;
                        }

                        /**
                         * Because behavior goes wacky when you set `__proto__` on objects, we
                         * have to prefix all the strings in our set with an arbitrary character.
                         *
                         * See https://github.com/mozilla/source-map/pull/31 and
                         * https://github.com/mozilla/source-map/issues/30
                         *
                         * @param String aStr
                         */function toSetString(aStr) {
                            if (isProtoString(aStr)) {
                                return '$' + aStr;
                            }
                            return aStr;
                        }

                        exports.toSetString = supportsNullProto ? identity : toSetString;

                        function fromSetString(aStr) {
                            if (isProtoString(aStr)) {
                                return aStr.slice(1);
                            }
                            return aStr;
                        }

                        exports.fromSetString = supportsNullProto ? identity : fromSetString;

                        function isProtoString(s) {
                            if (!s) {
                                return false;
                            }
                            var length = s.length;
                            if (length < 9/* "__proto__".length */) {
                                return false;
                            }
                            if (s.charCodeAt(length - 1) !== 95/* '_' */ || s.charCodeAt(length - 2) !== 95/* '_' */ || s.charCodeAt(length - 3) !== 111/* 'o' */ || s.charCodeAt(length - 4) !== 116/* 't' */ || s.charCodeAt(length - 5) !== 111/* 'o' */ || s.charCodeAt(length - 6) !== 114/* 'r' */ || s.charCodeAt(length - 7) !== 112/* 'p' */ || s.charCodeAt(length - 8) !== 95/* '_' */ || s.charCodeAt(length - 9) !== 95/* '_' */) {
                                return false;
                            }
                            for (var i = length - 10; i >= 0; i--) {
                                if (s.charCodeAt(i) !== 36/* '$' */) {
                                    return false;
                                }
                            }
                            return true;
                        }

                        /**
                         * Comparator between two mappings where the original positions are compared.
                         *
                         * Optionally pass in `true` as `onlyCompareGenerated` to consider two
                         * mappings with the same original source/line/column, but different generated
                         * line and column the same. Useful when searching for a mapping with a
                         * stubbed out mapping.
                         */function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
                            var cmp = strcmp(mappingA.source, mappingB.source);
                            if (cmp !== 0) {
                                return cmp;
                            }
                            cmp = mappingA.originalLine - mappingB.originalLine;
                            if (cmp !== 0) {
                                return cmp;
                            }
                            cmp = mappingA.originalColumn - mappingB.originalColumn;
                            if (cmp !== 0 || onlyCompareOriginal) {
                                return cmp;
                            }
                            cmp = mappingA.generatedColumn - mappingB.generatedColumn;
                            if (cmp !== 0) {
                                return cmp;
                            }
                            cmp = mappingA.generatedLine - mappingB.generatedLine;
                            if (cmp !== 0) {
                                return cmp;
                            }
                            return strcmp(mappingA.name, mappingB.name);
                        }

                        exports.compareByOriginalPositions = compareByOriginalPositions;

                        /**
                         * Comparator between two mappings with deflated source and name indices where
                         * the generated positions are compared.
                         *
                         * Optionally pass in `true` as `onlyCompareGenerated` to consider two
                         * mappings with the same generated line and column, but different
                         * source/name/original line and column the same. Useful when searching for a
                         * mapping with a stubbed out mapping.
                         */function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
                            var cmp = mappingA.generatedLine - mappingB.generatedLine;
                            if (cmp !== 0) {
                                return cmp;
                            }
                            cmp = mappingA.generatedColumn - mappingB.generatedColumn;
                            if (cmp !== 0 || onlyCompareGenerated) {
                                return cmp;
                            }
                            cmp = strcmp(mappingA.source, mappingB.source);
                            if (cmp !== 0) {
                                return cmp;
                            }
                            cmp = mappingA.originalLine - mappingB.originalLine;
                            if (cmp !== 0) {
                                return cmp;
                            }
                            cmp = mappingA.originalColumn - mappingB.originalColumn;
                            if (cmp !== 0) {
                                return cmp;
                            }
                            return strcmp(mappingA.name, mappingB.name);
                        }

                        exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

                        function strcmp(aStr1, aStr2) {
                            if (aStr1 === aStr2) {
                                return 0;
                            }
                            if (aStr1 === null) {
                                return 1;// aStr2 !== null
                            }
                            if (aStr2 === null) {
                                return -1;// aStr1 !== null
                            }
                            if (aStr1 > aStr2) {
                                return 1;
                            }
                            return -1;
                        }

                        /**
                         * Comparator between two mappings with inflated source and name strings where
                         * the generated positions are compared.
                         */function compareByGeneratedPositionsInflated(mappingA, mappingB) {
                            var cmp = mappingA.generatedLine - mappingB.generatedLine;
                            if (cmp !== 0) {
                                return cmp;
                            }
                            cmp = mappingA.generatedColumn - mappingB.generatedColumn;
                            if (cmp !== 0) {
                                return cmp;
                            }
                            cmp = strcmp(mappingA.source, mappingB.source);
                            if (cmp !== 0) {
                                return cmp;
                            }
                            cmp = mappingA.originalLine - mappingB.originalLine;
                            if (cmp !== 0) {
                                return cmp;
                            }
                            cmp = mappingA.originalColumn - mappingB.originalColumn;
                            if (cmp !== 0) {
                                return cmp;
                            }
                            return strcmp(mappingA.name, mappingB.name);
                        }

                        exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;

                        /**
                         * Strip any JSON XSSI avoidance prefix from the string (as documented
                         * in the source maps specification), and then parse the string as
                         * JSON.
                         */function parseSourceMapInput(str) {
                            return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ''));
                        }

                        exports.parseSourceMapInput = parseSourceMapInput;

                        /**
                         * Compute the URL of a source given the the source root, the source's
                         * URL, and the source map's URL.
                         */function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
                            sourceURL = sourceURL || '';
                            if (sourceRoot) {// This follows what Chrome does.
                                if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {
                                    sourceRoot += '/';
                                }// The spec says:
//   Line 4: An optional source root, useful for relocating source
//   files on a server or removing repeated values in the
//   “sources” entry.  This value is prepended to the individual
//   entries in the “source” field.
                                sourceURL = sourceRoot + sourceURL;
                            }// Historically, SourceMapConsumer did not take the sourceMapURL as
// a parameter.  This mode is still somewhat supported, which is why
// this code block is conditional.  However, it's preferable to pass
// the source map URL to SourceMapConsumer, so that this function
// can implement the source URL resolution algorithm as outlined in
// the spec.  This block is basically the equivalent of:
//    new URL(sourceURL, sourceMapURL).toString()
// ... except it avoids using URL, which wasn't available in the
// older releases of node still supported by this library.
//
// The spec says:
//   If the sources are not absolute URLs after prepending of the
//   “sourceRoot”, the sources are resolved relative to the
//   SourceMap (like resolving script src in a html document).
                            if (sourceMapURL) {
                                var parsed = urlParse(sourceMapURL);
                                if (!parsed) {
                                    throw new Error("sourceMapURL could not be parsed");
                                }
                                if (parsed.path) {// Strip the last path component, but keep the "/".
                                    var index = parsed.path.lastIndexOf('/');
                                    if (index >= 0) {
                                        parsed.path = parsed.path.substring(0, index + 1);
                                    }
                                }
                                sourceURL = join(urlGenerate(parsed), sourceURL);
                            }
                            return normalize(sourceURL);
                        }

                        exports.computeSourceURL = computeSourceURL;
                    }, {}],
                    78: [function (require, module, exports) {/*
 * Copyright 2009-2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE.txt or:
 * http://opensource.org/licenses/BSD-3-Clause
 */
                        exports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;
                        exports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;
                        exports.SourceNode = require('./lib/source-node').SourceNode;
                    }, {"./lib/source-map-consumer": 74, "./lib/source-map-generator": 75, "./lib/source-node": 76}],
                    79: [function (require, module, exports) {
                        'use strict';
                        var integerRegex = /^\d+$/;

                        function deepUnique(array) {
                            return array.sort().filter(function (element, index) {
                                return JSON.stringify(element) !== JSON.stringify(array[index - 1]);
                            });
                        }

                        exports.parse = function (string) {
                            return deepUnique(string.split(',').map(function (part) {
                                var result = {};
                                part.trim().split(/\s+/).forEach(function (element, index) {
                                    if (index === 0) {
                                        result.url = element;
                                        return;
                                    }
                                    var value = element.slice(0, element.length - 1);
                                    var postfix = element[element.length - 1];
                                    var integerValue = parseInt(value, 10);
                                    var floatValue = parseFloat(value);
                                    if (postfix === 'w' && integerRegex.test(value)) {
                                        result.width = integerValue;
                                    } else if (postfix === 'h' && integerRegex.test(value)) {
                                        result.height = integerValue;
                                    } else if (postfix === 'x' && !Number.isNaN(floatValue)) {
                                        result.density = floatValue;
                                    } else {
                                        throw new Error("Invalid srcset descriptor: ".concat(element));
                                    }
                                });
                                return result;
                            }));
                        };
                        exports.stringify = function (array) {
                            return _toConsumableArray(new Set(array.map(function (element) {
                                if (!element.url) {
                                    throw new Error('URL is required');
                                }
                                var result = [element.url];
                                if (element.width) {
                                    result.push("".concat(element.width, "w"));
                                }
                                if (element.height) {
                                    result.push("".concat(element.height, "h"));
                                }
                                if (element.density) {
                                    result.push("".concat(element.density, "x"));
                                }
                                return result.join(' ');
                            }))).join(', ');
                        };
                    }, {}],
                    80: [function (require, module, exports) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
                        'use strict';
                        var punycode = require('punycode');
                        var util = require('./util');
                        exports.parse = urlParse;
                        exports.resolve = urlResolve;
                        exports.resolveObject = urlResolveObject;
                        exports.format = urlFormat;
                        exports.Url = Url;

                        function Url() {
                            this.protocol = null;
                            this.slashes = null;
                            this.auth = null;
                            this.host = null;
                            this.port = null;
                            this.hostname = null;
                            this.hash = null;
                            this.search = null;
                            this.query = null;
                            this.pathname = null;
                            this.path = null;
                            this.href = null;
                        }// Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.
                        var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/,// Special case for a simple path URL
                            simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,// RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
                            delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],// RFC 2396: characters not allowed for various reasons.
                            unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
                            autoEscape = ['\''].concat(unwise),// Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
                            nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
                            hostEndingChars = ['/', '?', '#'], hostnameMaxLen = 255,
                            hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
                            hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,// protocols that can allow "unsafe" and "unwise" chars.
                            unsafeProtocol = {'javascript': true, 'javascript:': true},// protocols that never have a hostname.
                            hostlessProtocol = {'javascript': true, 'javascript:': true},// protocols that always contain a // bit.
                            slashedProtocol = {
                                'http': true,
                                'https': true,
                                'ftp': true,
                                'gopher': true,
                                'file': true,
                                'http:': true,
                                'https:': true,
                                'ftp:': true,
                                'gopher:': true,
                                'file:': true
                            }, querystring = require('querystring');

                        function urlParse(url, parseQueryString, slashesDenoteHost) {
                            if (url && util.isObject(url) && url instanceof Url) return url;
                            var u = new Url();
                            u.parse(url, parseQueryString, slashesDenoteHost);
                            return u;
                        }

                        Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
                            if (!util.isString(url)) {
                                throw new TypeError("Parameter 'url' must be a string, not " + _typeof(url));
                            }// Copy chrome, IE, opera backslash-handling behavior.
// Back slashes before the query string get converted to forward slashes
// See: https://code.google.com/p/chromium/issues/detail?id=25916
                            var queryIndex = url.indexOf('?'),
                                splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
                                uSplit = url.split(splitter), slashRegex = /\\/g;
                            uSplit[0] = uSplit[0].replace(slashRegex, '/');
                            url = uSplit.join(splitter);
                            var rest = url;// trim before proceeding.
// This is to support parse stuff like "  http://foo.com  \n"
                            rest = rest.trim();
                            if (!slashesDenoteHost && url.split('#').length === 1) {// Try fast path regexp
                                var simplePath = simplePathPattern.exec(rest);
                                if (simplePath) {
                                    this.path = rest;
                                    this.href = rest;
                                    this.pathname = simplePath[1];
                                    if (simplePath[2]) {
                                        this.search = simplePath[2];
                                        if (parseQueryString) {
                                            this.query = querystring.parse(this.search.substr(1));
                                        } else {
                                            this.query = this.search.substr(1);
                                        }
                                    } else if (parseQueryString) {
                                        this.search = '';
                                        this.query = {};
                                    }
                                    return this;
                                }
                            }
                            var proto = protocolPattern.exec(rest);
                            if (proto) {
                                proto = proto[0];
                                var lowerProto = proto.toLowerCase();
                                this.protocol = lowerProto;
                                rest = rest.substr(proto.length);
                            }// figure out if it's got a host
// user@server is *always* interpreted as a hostname, and url
// resolution will treat //foo/bar as host=foo,path=bar because that's
// how the browser resolves relative URLs.
                            if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
                                var slashes = rest.substr(0, 2) === '//';
                                if (slashes && !(proto && hostlessProtocol[proto])) {
                                    rest = rest.substr(2);
                                    this.slashes = true;
                                }
                            }
                            if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {// there's a hostname.
// the first instance of /, ?, ;, or # ends the host.
//
// If there is an @ in the hostname, then non-host chars *are* allowed
// to the left of the last @ sign, unless some host-ending character
// comes *before* the @-sign.
// URLs are obnoxious.
//
// ex:
// http://a@b@c/ => user:a@b host:c
// http://a@b?@c => user:a host:c path:/?@c
// v0.12 TODO(isaacs): This is not quite how Chrome does things.
// Review our test case against browsers more comprehensively.
// find the first instance of any hostEndingChars
                                var hostEnd = -1;
                                for (var i = 0; i < hostEndingChars.length; i++) {
                                    var hec = rest.indexOf(hostEndingChars[i]);
                                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
                                }// at this point, either we have an explicit point where the
// auth portion cannot go past, or the last @ char is the decider.
                                var auth, atSign;
                                if (hostEnd === -1) {// atSign can be anywhere.
                                    atSign = rest.lastIndexOf('@');
                                } else {// atSign must be in auth portion.
// http://a@b/c@d => host:b auth:a path:/c@d
                                    atSign = rest.lastIndexOf('@', hostEnd);
                                }// Now we have a portion which is definitely the auth.
// Pull that off.
                                if (atSign !== -1) {
                                    auth = rest.slice(0, atSign);
                                    rest = rest.slice(atSign + 1);
                                    this.auth = decodeURIComponent(auth);
                                }// the host is the remaining to the left of the first non-host char
                                hostEnd = -1;
                                for (var i = 0; i < nonHostChars.length; i++) {
                                    var hec = rest.indexOf(nonHostChars[i]);
                                    if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
                                }// if we still have not hit it, then the entire thing is a host.
                                if (hostEnd === -1) hostEnd = rest.length;
                                this.host = rest.slice(0, hostEnd);
                                rest = rest.slice(hostEnd);// pull out port.
                                this.parseHost();// we've indicated that there is a hostname,
// so even if it's empty, it has to be present.
                                this.hostname = this.hostname || '';// if hostname begins with [ and ends with ]
// assume that it's an IPv6 address.
                                var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';// validate a little.
                                if (!ipv6Hostname) {
                                    var hostparts = this.hostname.split(/\./);
                                    for (var i = 0, l = hostparts.length; i < l; i++) {
                                        var part = hostparts[i];
                                        if (!part) continue;
                                        if (!part.match(hostnamePartPattern)) {
                                            var newpart = '';
                                            for (var j = 0, k = part.length; j < k; j++) {
                                                if (part.charCodeAt(j) > 127) {// we replace non-ASCII char with a temporary placeholder
// we need this to make sure size of hostname is not
// broken by replacing non-ASCII by nothing
                                                    newpart += 'x';
                                                } else {
                                                    newpart += part[j];
                                                }
                                            }// we test again with ASCII char only
                                            if (!newpart.match(hostnamePartPattern)) {
                                                var validParts = hostparts.slice(0, i);
                                                var notHost = hostparts.slice(i + 1);
                                                var bit = part.match(hostnamePartStart);
                                                if (bit) {
                                                    validParts.push(bit[1]);
                                                    notHost.unshift(bit[2]);
                                                }
                                                if (notHost.length) {
                                                    rest = '/' + notHost.join('.') + rest;
                                                }
                                                this.hostname = validParts.join('.');
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (this.hostname.length > hostnameMaxLen) {
                                    this.hostname = '';
                                } else {// hostnames are always lower case.
                                    this.hostname = this.hostname.toLowerCase();
                                }
                                if (!ipv6Hostname) {// IDNA Support: Returns a punycoded representation of "domain".
// It only converts parts of the domain name that
// have non-ASCII characters, i.e. it doesn't matter if
// you call it with a domain that already is ASCII-only.
                                    this.hostname = punycode.toASCII(this.hostname);
                                }
                                var p = this.port ? ':' + this.port : '';
                                var h = this.hostname || '';
                                this.host = h + p;
                                this.href += this.host;// strip [ and ] from the hostname
// the host field still retains them, though
                                if (ipv6Hostname) {
                                    this.hostname = this.hostname.substr(1, this.hostname.length - 2);
                                    if (rest[0] !== '/') {
                                        rest = '/' + rest;
                                    }
                                }
                            }// now rest is set to the post-host stuff.
// chop off any delim chars.
                            if (!unsafeProtocol[lowerProto]) {// First, make 100% sure that any "autoEscape" chars get
// escaped, even if encodeURIComponent doesn't think they
// need to be.
                                for (var i = 0, l = autoEscape.length; i < l; i++) {
                                    var ae = autoEscape[i];
                                    if (rest.indexOf(ae) === -1) continue;
                                    var esc = encodeURIComponent(ae);
                                    if (esc === ae) {
                                        esc = escape(ae);
                                    }
                                    rest = rest.split(ae).join(esc);
                                }
                            }// chop off from the tail first.
                            var hash = rest.indexOf('#');
                            if (hash !== -1) {// got a fragment string.
                                this.hash = rest.substr(hash);
                                rest = rest.slice(0, hash);
                            }
                            var qm = rest.indexOf('?');
                            if (qm !== -1) {
                                this.search = rest.substr(qm);
                                this.query = rest.substr(qm + 1);
                                if (parseQueryString) {
                                    this.query = querystring.parse(this.query);
                                }
                                rest = rest.slice(0, qm);
                            } else if (parseQueryString) {// no query string, but parseQueryString still requested
                                this.search = '';
                                this.query = {};
                            }
                            if (rest) this.pathname = rest;
                            if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
                                this.pathname = '/';
                            }//to support http.request
                            if (this.pathname || this.search) {
                                var p = this.pathname || '';
                                var s = this.search || '';
                                this.path = p + s;
                            }// finally, reconstruct the href based on what has been validated.
                            this.href = this.format();
                            return this;
                        };// format a parsed object into a url string
                        function urlFormat(obj) {// ensure it's an object, and not a string url.
// If it's an obj, this is a no-op.
// this way, you can call url_format() on strings
// to clean up potentially wonky urls.
                            if (util.isString(obj)) obj = urlParse(obj);
                            if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
                            return obj.format();
                        }

                        Url.prototype.format = function () {
                            var auth = this.auth || '';
                            if (auth) {
                                auth = encodeURIComponent(auth);
                                auth = auth.replace(/%3A/i, ':');
                                auth += '@';
                            }
                            var protocol = this.protocol || '', pathname = this.pathname || '', hash = this.hash || '',
                                host = false, query = '';
                            if (this.host) {
                                host = auth + this.host;
                            } else if (this.hostname) {
                                host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');
                                if (this.port) {
                                    host += ':' + this.port;
                                }
                            }
                            if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
                                query = querystring.stringify(this.query);
                            }
                            var search = this.search || query && '?' + query || '';
                            if (protocol && protocol.substr(-1) !== ':') protocol += ':';// only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
// unless they had them to begin with.
                            if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
                                host = '//' + (host || '');
                                if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
                            } else if (!host) {
                                host = '';
                            }
                            if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
                            if (search && search.charAt(0) !== '?') search = '?' + search;
                            pathname = pathname.replace(/[?#]/g, function (match) {
                                return encodeURIComponent(match);
                            });
                            search = search.replace('#', '%23');
                            return protocol + host + pathname + search + hash;
                        };

                        function urlResolve(source, relative) {
                            return urlParse(source, false, true).resolve(relative);
                        }

                        Url.prototype.resolve = function (relative) {
                            return this.resolveObject(urlParse(relative, false, true)).format();
                        };

                        function urlResolveObject(source, relative) {
                            if (!source) return relative;
                            return urlParse(source, false, true).resolveObject(relative);
                        }

                        Url.prototype.resolveObject = function (relative) {
                            if (util.isString(relative)) {
                                var rel = new Url();
                                rel.parse(relative, false, true);
                                relative = rel;
                            }
                            var result = new Url();
                            var tkeys = Object.keys(this);
                            for (var tk = 0; tk < tkeys.length; tk++) {
                                var tkey = tkeys[tk];
                                result[tkey] = this[tkey];
                            }// hash is always overridden, no matter what.
// even href="" will remove it.
                            result.hash = relative.hash;// if the relative url is empty, then there's nothing left to do here.
                            if (relative.href === '') {
                                result.href = result.format();
                                return result;
                            }// hrefs like //foo/bar always cut to the protocol.
                            if (relative.slashes && !relative.protocol) {// take everything except the protocol from relative
                                var rkeys = Object.keys(relative);
                                for (var rk = 0; rk < rkeys.length; rk++) {
                                    var rkey = rkeys[rk];
                                    if (rkey !== 'protocol') result[rkey] = relative[rkey];
                                }//urlParse appends trailing / to urls like http://www.example.com
                                if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
                                    result.path = result.pathname = '/';
                                }
                                result.href = result.format();
                                return result;
                            }
                            if (relative.protocol && relative.protocol !== result.protocol) {// if it's a known url protocol, then changing
// the protocol does weird things
// first, if it's not file:, then we MUST have a host,
// and if there was a path
// to begin with, then we MUST have a path.
// if it is file:, then the host is dropped,
// because that's known to be hostless.
// anything else is assumed to be absolute.
                                if (!slashedProtocol[relative.protocol]) {
                                    var keys = Object.keys(relative);
                                    for (var v = 0; v < keys.length; v++) {
                                        var k = keys[v];
                                        result[k] = relative[k];
                                    }
                                    result.href = result.format();
                                    return result;
                                }
                                result.protocol = relative.protocol;
                                if (!relative.host && !hostlessProtocol[relative.protocol]) {
                                    var relPath = (relative.pathname || '').split('/');
                                    while (relPath.length && !(relative.host = relPath.shift())) {
                                        ;
                                    }
                                    if (!relative.host) relative.host = '';
                                    if (!relative.hostname) relative.hostname = '';
                                    if (relPath[0] !== '') relPath.unshift('');
                                    if (relPath.length < 2) relPath.unshift('');
                                    result.pathname = relPath.join('/');
                                } else {
                                    result.pathname = relative.pathname;
                                }
                                result.search = relative.search;
                                result.query = relative.query;
                                result.host = relative.host || '';
                                result.auth = relative.auth;
                                result.hostname = relative.hostname || relative.host;
                                result.port = relative.port;// to support http.request
                                if (result.pathname || result.search) {
                                    var p = result.pathname || '';
                                    var s = result.search || '';
                                    result.path = p + s;
                                }
                                result.slashes = result.slashes || relative.slashes;
                                result.href = result.format();
                                return result;
                            }
                            var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
                                isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
                                mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
                                removeAllDots = mustEndAbs,
                                srcPath = result.pathname && result.pathname.split('/') || [],
                                relPath = relative.pathname && relative.pathname.split('/') || [],
                                psychotic = result.protocol && !slashedProtocol[result.protocol];// if the url is a non-slashed url, then relative
// links like ../.. should be able
// to crawl up to the hostname, as well.  This is strange.
// result.protocol has already been set by now.
// Later on, put the first path part into the host field.
                            if (psychotic) {
                                result.hostname = '';
                                result.port = null;
                                if (result.host) {
                                    if (srcPath[0] === '') srcPath[0] = result.host; else srcPath.unshift(result.host);
                                }
                                result.host = '';
                                if (relative.protocol) {
                                    relative.hostname = null;
                                    relative.port = null;
                                    if (relative.host) {
                                        if (relPath[0] === '') relPath[0] = relative.host; else relPath.unshift(relative.host);
                                    }
                                    relative.host = null;
                                }
                                mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
                            }
                            if (isRelAbs) {// it's absolute.
                                result.host = relative.host || relative.host === '' ? relative.host : result.host;
                                result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
                                result.search = relative.search;
                                result.query = relative.query;
                                srcPath = relPath;// fall through to the dot-handling below.
                            } else if (relPath.length) {// it's relative
// throw away the existing file, and take the new path instead.
                                if (!srcPath) srcPath = [];
                                srcPath.pop();
                                srcPath = srcPath.concat(relPath);
                                result.search = relative.search;
                                result.query = relative.query;
                            } else if (!util.isNullOrUndefined(relative.search)) {// just pull out the search.
// like href='?foo'.
// Put this after the other two cases because it simplifies the booleans
                                if (psychotic) {
                                    result.hostname = result.host = srcPath.shift();//occationaly the auth can get stuck only in host
//this especially happens in cases like
//url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                                    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
                                    if (authInHost) {
                                        result.auth = authInHost.shift();
                                        result.host = result.hostname = authInHost.shift();
                                    }
                                }
                                result.search = relative.search;
                                result.query = relative.query;//to support http.request
                                if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
                                    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
                                }
                                result.href = result.format();
                                return result;
                            }
                            if (!srcPath.length) {// no path at all.  easy.
// we've already handled the other stuff above.
                                result.pathname = null;//to support http.request
                                if (result.search) {
                                    result.path = '/' + result.search;
                                } else {
                                    result.path = null;
                                }
                                result.href = result.format();
                                return result;
                            }// if a url ENDs in . or .., then it must get a trailing slash.
// however, if it ends in anything else non-slashy,
// then it must NOT get a trailing slash.
                            var last = srcPath.slice(-1)[0];
                            var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';// strip single dots, resolve double dots to parent dir
// if the path tries to go above the root, `up` ends up > 0
                            var up = 0;
                            for (var i = srcPath.length; i >= 0; i--) {
                                last = srcPath[i];
                                if (last === '.') {
                                    srcPath.splice(i, 1);
                                } else if (last === '..') {
                                    srcPath.splice(i, 1);
                                    up++;
                                } else if (up) {
                                    srcPath.splice(i, 1);
                                    up--;
                                }
                            }// if the path is allowed to go above the root, restore leading ..s
                            if (!mustEndAbs && !removeAllDots) {
                                for (; up--; up) {
                                    srcPath.unshift('..');
                                }
                            }
                            if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
                                srcPath.unshift('');
                            }
                            if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
                                srcPath.push('');
                            }
                            var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/';// put the host back
                            if (psychotic) {
                                result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';//occationaly the auth can get stuck only in host
//this especially happens in cases like
//url.resolveObject('mailto:local1@domain1', 'local2@domain2')
                                var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;
                                if (authInHost) {
                                    result.auth = authInHost.shift();
                                    result.host = result.hostname = authInHost.shift();
                                }
                            }
                            mustEndAbs = mustEndAbs || result.host && srcPath.length;
                            if (mustEndAbs && !isAbsolute) {
                                srcPath.unshift('');
                            }
                            if (!srcPath.length) {
                                result.pathname = null;
                                result.path = null;
                            } else {
                                result.pathname = srcPath.join('/');
                            }//to support request.http
                            if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
                                result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
                            }
                            result.auth = relative.auth || result.auth;
                            result.slashes = result.slashes || relative.slashes;
                            result.href = result.format();
                            return result;
                        };
                        Url.prototype.parseHost = function () {
                            var host = this.host;
                            var port = portPattern.exec(host);
                            if (port) {
                                port = port[0];
                                if (port !== ':') {
                                    this.port = port.substr(1);
                                }
                                host = host.substr(0, host.length - port.length);
                            }
                            if (host) this.hostname = host;
                        };
                    }, {"./util": 81, "punycode": 64, "querystring": 67}],
                    81: [function (require, module, exports) {
                        'use strict';
                        module.exports = {
                            isString: function isString(arg) {
                                return typeof arg === 'string';
                            }, isObject: function isObject(arg) {
                                return _typeof(arg) === 'object' && arg !== null;
                            }, isNull: function isNull(arg) {
                                return arg === null;
                            }, isNullOrUndefined: function isNullOrUndefined(arg) {
                                return arg == null;
                            }
                        };
                    }, {}],
                    82: [function (require, module, exports) {
                        module.exports = extend;
                        var hasOwnProperty = Object.prototype.hasOwnProperty;

                        function extend() {
                            var target = {};
                            for (var i = 0; i < arguments.length; i++) {
                                var source = arguments[i];
                                for (var key in source) {
                                    if (hasOwnProperty.call(source, key)) {
                                        target[key] = source[key];
                                    }
                                }
                            }
                            return target;
                        }
                    }, {}],
                    83: [function (require, module, exports) {
                        var htmlparser = require('htmlparser2');
                        var extend = require('xtend');
                        var quoteRegexp = require('lodash.escaperegexp');
                        var cloneDeep = require('lodash.clonedeep');
                        var mergeWith = require('lodash.mergewith');
                        var isString = require('lodash.isstring');
                        var isPlainObject = require('lodash.isplainobject');
                        var srcset = require('srcset');
                        var postcss = require('postcss');
                        var url = require('url');

                        function each(obj, cb) {
                            if (obj) Object.keys(obj).forEach(function (key) {
                                cb(obj[key], key);
                            });
                        }// Avoid false positives with .__proto__, .hasOwnProperty, etc.
                        function has(obj, key) {
                            return {}.hasOwnProperty.call(obj, key);
                        }// Returns those elements of `a` for which `cb(a)` returns truthy
                        function filter(a, cb) {
                            var n = [];
                            each(a, function (v) {
                                if (cb(v)) {
                                    n.push(v);
                                }
                            });
                            return n;
                        }

                        function isEmptyObject(obj) {
                            for (var key in obj) {
                                if (has(obj, key)) {
                                    return false;
                                }
                            }
                            return true;
                        }

                        module.exports = sanitizeHtml;// A valid attribute name.
// We use a tolerant definition based on the set of strings defined by
// html.spec.whatwg.org/multipage/parsing.html#before-attribute-name-state
// and html.spec.whatwg.org/multipage/parsing.html#attribute-name-state .
// The characters accepted are ones which can be appended to the attribute
// name buffer without triggering a parse error:
//   * unexpected-equals-sign-before-attribute-name
//   * unexpected-null-character
//   * unexpected-character-in-attribute-name
// We exclude the empty string because it's impossible to get to the after
// attribute name state with an empty attribute name buffer.
                        var VALID_HTML_ATTRIBUTE_NAME = /^[^\0\t\n\f\r /<=>]+$/;// Ignore the _recursing flag; it's there for recursive
// invocation as a guard against this exploit:
// https://github.com/fb55/htmlparser2/issues/105
                        function sanitizeHtml(html, options, _recursing) {
                            var result = '';// Used for hot swapping the result variable with an empty string in order to "capture" the text written to it.
                            var tempResult = '';

                            function Frame(tag, attribs) {
                                var that = this;
                                this.tag = tag;
                                this.attribs = attribs || {};
                                this.tagPosition = result.length;
                                this.text = '';// Node inner text
                                this.updateParentNodeText = function () {
                                    if (stack.length) {
                                        var parentFrame = stack[stack.length - 1];
                                        parentFrame.text += that.text;
                                    }
                                };
                            }

                            if (!options) {
                                options = sanitizeHtml.defaults;
                                options.parser = htmlParserDefaults;
                            } else {
                                options = extend(sanitizeHtml.defaults, options);
                                if (options.parser) {
                                    options.parser = extend(htmlParserDefaults, options.parser);
                                } else {
                                    options.parser = htmlParserDefaults;
                                }
                            }// Tags that contain something other than HTML, or where discarding
// the text when the tag is disallowed makes sense for other reasons.
// If we are not allowing these tags, we should drop their content too.
// For other tags you would drop the tag but keep its content.
                            var nonTextTagsArray = options.nonTextTags || ['script', 'style', 'textarea'];
                            var allowedAttributesMap;
                            var allowedAttributesGlobMap;
                            if (options.allowedAttributes) {
                                allowedAttributesMap = {};
                                allowedAttributesGlobMap = {};
                                each(options.allowedAttributes, function (attributes, tag) {
                                    allowedAttributesMap[tag] = [];
                                    var globRegex = [];
                                    attributes.forEach(function (obj) {
                                        if (isString(obj) && obj.indexOf('*') >= 0) {
                                            globRegex.push(quoteRegexp(obj).replace(/\\\*/g, '.*'));
                                        } else {
                                            allowedAttributesMap[tag].push(obj);
                                        }
                                    });
                                    allowedAttributesGlobMap[tag] = new RegExp('^(' + globRegex.join('|') + ')$');
                                });
                            }
                            var allowedClassesMap = {};
                            each(options.allowedClasses, function (classes, tag) {// Implicitly allows the class attribute
                                if (allowedAttributesMap) {
                                    if (!has(allowedAttributesMap, tag)) {
                                        allowedAttributesMap[tag] = [];
                                    }
                                    allowedAttributesMap[tag].push('class');
                                }
                                allowedClassesMap[tag] = classes;
                            });
                            var transformTagsMap = {};
                            var transformTagsAll;
                            each(options.transformTags, function (transform, tag) {
                                var transFun;
                                if (typeof transform === 'function') {
                                    transFun = transform;
                                } else if (typeof transform === "string") {
                                    transFun = sanitizeHtml.simpleTransform(transform);
                                }
                                if (tag === '*') {
                                    transformTagsAll = transFun;
                                } else {
                                    transformTagsMap[tag] = transFun;
                                }
                            });
                            var depth = 0;
                            var stack = [];
                            var skipMap = {};
                            var transformMap = {};
                            var skipText = false;
                            var skipTextDepth = 0;
                            var parser = new htmlparser.Parser({
                                onopentag: function onopentag(name, attribs) {
                                    if (skipText) {
                                        skipTextDepth++;
                                        return;
                                    }
                                    var frame = new Frame(name, attribs);
                                    stack.push(frame);
                                    var skip = false;
                                    var hasText = frame.text ? true : false;
                                    var transformedTag;
                                    if (has(transformTagsMap, name)) {
                                        transformedTag = transformTagsMap[name](name, attribs);
                                        frame.attribs = attribs = transformedTag.attribs;
                                        if (transformedTag.text !== undefined) {
                                            frame.innerText = transformedTag.text;
                                        }
                                        if (name !== transformedTag.tagName) {
                                            frame.name = name = transformedTag.tagName;
                                            transformMap[depth] = transformedTag.tagName;
                                        }
                                    }
                                    if (transformTagsAll) {
                                        transformedTag = transformTagsAll(name, attribs);
                                        frame.attribs = attribs = transformedTag.attribs;
                                        if (name !== transformedTag.tagName) {
                                            frame.name = name = transformedTag.tagName;
                                            transformMap[depth] = transformedTag.tagName;
                                        }
                                    }
                                    if (options.allowedTags && options.allowedTags.indexOf(name) === -1 || options.disallowedTagsMode === 'recursiveEscape' && !isEmptyObject(skipMap)) {
                                        skip = true;
                                        skipMap[depth] = true;
                                        if (options.disallowedTagsMode === 'discard') {
                                            if (nonTextTagsArray.indexOf(name) !== -1) {
                                                skipText = true;
                                                skipTextDepth = 1;
                                            }
                                        }
                                        skipMap[depth] = true;
                                    }
                                    depth++;
                                    if (skip) {
                                        if (options.disallowedTagsMode === 'discard') {// We want the contents but not this tag
                                            return;
                                        }
                                        tempResult = result;
                                        result = '';
                                    }
                                    result += '<' + name;
                                    if (!allowedAttributesMap || has(allowedAttributesMap, name) || allowedAttributesMap['*']) {
                                        each(attribs, function (value, a) {
                                            if (!VALID_HTML_ATTRIBUTE_NAME.test(a)) {// This prevents part of an attribute name in the output from being
// interpreted as the end of an attribute, or end of a tag.
                                                delete frame.attribs[a];
                                                return;
                                            }
                                            var parsed;// check allowedAttributesMap for the element and attribute and modify the value
// as necessary if there are specific values defined.
                                            var passedAllowedAttributesMapCheck = false;
                                            if (!allowedAttributesMap || has(allowedAttributesMap, name) && allowedAttributesMap[name].indexOf(a) !== -1 || allowedAttributesMap['*'] && allowedAttributesMap['*'].indexOf(a) !== -1 || has(allowedAttributesGlobMap, name) && allowedAttributesGlobMap[name].test(a) || allowedAttributesGlobMap['*'] && allowedAttributesGlobMap['*'].test(a)) {
                                                passedAllowedAttributesMapCheck = true;
                                            } else if (allowedAttributesMap && allowedAttributesMap[name]) {
                                                var _iteratorNormalCompletion = true;
                                                var _didIteratorError = false;
                                                var _iteratorError = undefined;
                                                try {
                                                    for (var _iterator10 = allowedAttributesMap[name][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator10.next()).done); _iteratorNormalCompletion = true) {
                                                        var o = _step.value;
                                                        if (isPlainObject(o) && o.name && o.name === a) {
                                                            passedAllowedAttributesMapCheck = true;
                                                            var newValue = '';
                                                            if (o.multiple === true) {// verify the values that are allowed
                                                                var splitStrArray = value.split(' ');
                                                                var _iteratorNormalCompletion2 = true;
                                                                var _didIteratorError2 = false;
                                                                var _iteratorError2 = undefined;
                                                                try {
                                                                    for (var _iterator11 = splitStrArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator11.next()).done); _iteratorNormalCompletion2 = true) {
                                                                        var s = _step2.value;
                                                                        if (o.values.indexOf(s) !== -1) {
                                                                            if (newValue === '') {
                                                                                newValue = s;
                                                                            } else {
                                                                                newValue += ' ' + s;
                                                                            }
                                                                        }
                                                                    }
                                                                } catch (err) {
                                                                    _didIteratorError2 = true;
                                                                    _iteratorError2 = err;
                                                                } finally {
                                                                    try {
                                                                        if (!_iteratorNormalCompletion2 && _iterator11["return"] != null) {
                                                                            _iterator11["return"]();
                                                                        }
                                                                    } finally {
                                                                        if (_didIteratorError2) {
                                                                            throw _iteratorError2;
                                                                        }
                                                                    }
                                                                }
                                                            } else if (o.values.indexOf(value) >= 0) {// verified an allowed value matches the entire attribute value
                                                                newValue = value;
                                                            }
                                                            value = newValue;
                                                        }
                                                    }
                                                } catch (err) {
                                                    _didIteratorError = true;
                                                    _iteratorError = err;
                                                } finally {
                                                    try {
                                                        if (!_iteratorNormalCompletion && _iterator10["return"] != null) {
                                                            _iterator10["return"]();
                                                        }
                                                    } finally {
                                                        if (_didIteratorError) {
                                                            throw _iteratorError;
                                                        }
                                                    }
                                                }
                                            }
                                            if (passedAllowedAttributesMapCheck) {
                                                if (options.allowedSchemesAppliedToAttributes.indexOf(a) !== -1) {
                                                    if (naughtyHref(name, value)) {
                                                        delete frame.attribs[a];
                                                        return;
                                                    }
                                                }
                                                if (name === 'iframe' && a === 'src') {
                                                    var allowed = true;
                                                    try {// naughtyHref is in charge of whether protocol relative URLs
// are cool. We should just accept them
                                                        parsed = url.parse(value, false, true);
                                                        var isRelativeUrl = parsed && parsed.host === null && parsed.protocol === null;
                                                        if (isRelativeUrl) {// default value of allowIframeRelativeUrls is true unless allowIframeHostnames specified
                                                            allowed = has(options, "allowIframeRelativeUrls") ? options.allowIframeRelativeUrls : !options.allowedIframeHostnames;
                                                        } else if (options.allowedIframeHostnames) {
                                                            allowed = options.allowedIframeHostnames.find(function (hostname) {
                                                                return hostname === parsed.hostname;
                                                            });
                                                        }
                                                    } catch (e) {// Unparseable iframe src
                                                        allowed = false;
                                                    }
                                                    if (!allowed) {
                                                        delete frame.attribs[a];
                                                        return;
                                                    }
                                                }
                                                if (a === 'srcset') {
                                                    try {
                                                        parsed = srcset.parse(value);
                                                        each(parsed, function (value) {
                                                            if (naughtyHref('srcset', value.url)) {
                                                                value.evil = true;
                                                            }
                                                        });
                                                        parsed = filter(parsed, function (v) {
                                                            return !v.evil;
                                                        });
                                                        if (!parsed.length) {
                                                            delete frame.attribs[a];
                                                            return;
                                                        } else {
                                                            value = srcset.stringify(filter(parsed, function (v) {
                                                                return !v.evil;
                                                            }));
                                                            frame.attribs[a] = value;
                                                        }
                                                    } catch (e) {// Unparseable srcset
                                                        delete frame.attribs[a];
                                                        return;
                                                    }
                                                }
                                                if (a === 'class') {
                                                    value = filterClasses(value, allowedClassesMap[name]);
                                                    if (!value.length) {
                                                        delete frame.attribs[a];
                                                        return;
                                                    }
                                                }
                                                if (a === 'style') {
                                                    try {
                                                        var abstractSyntaxTree = postcss.parse(name + " {" + value + "}");
                                                        var filteredAST = filterCss(abstractSyntaxTree, options.allowedStyles);
                                                        value = stringifyStyleAttributes(filteredAST);
                                                        if (value.length === 0) {
                                                            delete frame.attribs[a];
                                                            return;
                                                        }
                                                    } catch (e) {
                                                        delete frame.attribs[a];
                                                        return;
                                                    }
                                                }
                                                result += ' ' + a;
                                                if (value && value.length) {
                                                    result += '="' + escapeHtml(value, true) + '"';
                                                }
                                            } else {
                                                delete frame.attribs[a];
                                            }
                                        });
                                    }
                                    if (options.selfClosing.indexOf(name) !== -1) {
                                        result += " />";
                                    } else {
                                        result += ">";
                                        if (frame.innerText && !hasText && !options.textFilter) {
                                            result += frame.innerText;
                                        }
                                    }
                                    if (skip) {
                                        result = tempResult + escapeHtml(result);
                                        tempResult = '';
                                    }
                                }, ontext: function ontext(text) {
                                    if (skipText) {
                                        return;
                                    }
                                    var lastFrame = stack[stack.length - 1];
                                    var tag;
                                    if (lastFrame) {
                                        tag = lastFrame.tag;// If inner text was set by transform function then let's use it
                                        text = lastFrame.innerText !== undefined ? lastFrame.innerText : text;
                                    }
                                    if (options.disallowedTagsMode === 'discard' && (tag === 'script' || tag === 'style')) {// htmlparser2 gives us these as-is. Escaping them ruins the content. Allowing
// script tags is, by definition, game over for XSS protection, so if that's
// your concern, don't allow them. The same is essentially true for style tags
// which have their own collection of XSS vectors.
                                        result += text;
                                    } else {
                                        var escaped = escapeHtml(text, false);
                                        if (options.textFilter) {
                                            result += options.textFilter(escaped);
                                        } else {
                                            result += escaped;
                                        }
                                    }
                                    if (stack.length) {
                                        var frame = stack[stack.length - 1];
                                        frame.text += text;
                                    }
                                }, onclosetag: function onclosetag(name) {
                                    if (skipText) {
                                        skipTextDepth--;
                                        if (!skipTextDepth) {
                                            skipText = false;
                                        } else {
                                            return;
                                        }
                                    }
                                    var frame = stack.pop();
                                    if (!frame) {// Do not crash on bad markup
                                        return;
                                    }
                                    skipText = false;
                                    depth--;
                                    var skip = skipMap[depth];
                                    if (skip) {
                                        delete skipMap[depth];
                                        if (options.disallowedTagsMode === 'discard') {
                                            frame.updateParentNodeText();
                                            return;
                                        }
                                        tempResult = result;
                                        result = '';
                                    }
                                    if (transformMap[depth]) {
                                        name = transformMap[depth];
                                        delete transformMap[depth];
                                    }
                                    if (options.exclusiveFilter && options.exclusiveFilter(frame)) {
                                        result = result.substr(0, frame.tagPosition);
                                        return;
                                    }
                                    frame.updateParentNodeText();
                                    if (options.selfClosing.indexOf(name) !== -1) {// Already output />
                                        return;
                                    }
                                    result += "</" + name + ">";
                                    if (skip) {
                                        result = tempResult + escapeHtml(result);
                                        tempResult = '';
                                    }
                                }
                            }, options.parser);
                            parser.write(html);
                            parser.end();
                            return result;

                            function escapeHtml(s, quote) {
                                if (typeof s !== 'string') {
                                    s = s + '';
                                }
                                if (options.parser.decodeEntities) {
                                    s = s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\>/g, '&gt;');
                                    if (quote) {
                                        s = s.replace(/\"/g, '&quot;');
                                    }
                                }// TODO: this is inadequate because it will pass `&0;`. This approach
// will not work, each & must be considered with regard to whether it
// is followed by a 100% syntactically valid entity or not, and escaped
// if it is not. If this bothers you, don't set parser.decodeEntities
// to false. (The default is true.)
                                s = s.replace(/&(?![a-zA-Z0-9#]{1,20};)/g, '&amp;')// Match ampersands not part of existing HTML entity
                                    .replace(/</g, '&lt;').replace(/\>/g, '&gt;');
                                if (quote) {
                                    s = s.replace(/\"/g, '&quot;');
                                }
                                return s;
                            }

                            function naughtyHref(name, href) {// Browsers ignore character codes of 32 (space) and below in a surprising
// number of situations. Start reading here:
// https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet#Embedded_tab
                                href = href.replace(/[\x00-\x20]+/g, '');// Clobber any comments in URLs, which the browser might
// interpret inside an XML data island, allowing
// a javascript: URL to be snuck through
                                href = href.replace(/<\!\-\-.*?\-\-\>/g, '');// Case insensitive so we don't get faked out by JAVASCRIPT #1
                                var matches = href.match(/^([a-zA-Z]+)\:/);
                                if (!matches) {// Protocol-relative URL starting with any combination of '/' and '\'
                                    if (href.match(/^[\/\\]{2}/)) {
                                        return !options.allowProtocolRelative;
                                    }// No scheme
                                    return false;
                                }
                                var scheme = matches[1].toLowerCase();
                                if (has(options.allowedSchemesByTag, name)) {
                                    return options.allowedSchemesByTag[name].indexOf(scheme) === -1;
                                }
                                return !options.allowedSchemes || options.allowedSchemes.indexOf(scheme) === -1;
                            }

                            /**
                             * Filters user input css properties by whitelisted regex attributes.
                             *
                             * @param {object} abstractSyntaxTree  - Object representation of CSS attributes.
                             * @property {array[Declaration]} abstractSyntaxTree.nodes[0] - Each object cointains prop and value key, i.e { prop: 'color', value: 'red' }.
                             * @param {object} allowedStyles       - Keys are properties (i.e color), value is list of permitted regex rules (i.e /green/i).
                             * @return {object}                    - Abstract Syntax Tree with filtered style attributes.
                             */function filterCss(abstractSyntaxTree, allowedStyles) {
                                if (!allowedStyles) {
                                    return abstractSyntaxTree;
                                }
                                var filteredAST = cloneDeep(abstractSyntaxTree);
                                var astRules = abstractSyntaxTree.nodes[0];
                                var selectedRule;// Merge global and tag-specific styles into new AST.
                                if (allowedStyles[astRules.selector] && allowedStyles['*']) {
                                    selectedRule = mergeWith(cloneDeep(allowedStyles[astRules.selector]), allowedStyles['*'], function (objValue, srcValue) {
                                        if (Array.isArray(objValue)) {
                                            return objValue.concat(srcValue);
                                        }
                                    });
                                } else {
                                    selectedRule = allowedStyles[astRules.selector] || allowedStyles['*'];
                                }
                                if (selectedRule) {
                                    filteredAST.nodes[0].nodes = astRules.nodes.reduce(filterDeclarations(selectedRule), []);
                                }
                                return filteredAST;
                            }

                            /**
                             * Extracts the style attribues from an AbstractSyntaxTree and formats those
                             * values in the inline style attribute format.
                             *
                             * @param  {AbstractSyntaxTree} filteredAST
                             * @return {string}             - Example: "color:yellow;text-align:center;font-family:helvetica;"
                             */function stringifyStyleAttributes(filteredAST) {
                                return filteredAST.nodes[0].nodes.reduce(function (extractedAttributes, attributeObject) {
                                    extractedAttributes.push(attributeObject.prop + ':' + attributeObject.value);
                                    return extractedAttributes;
                                }, []).join(';');
                            }

                            /**
                             * Filters the existing attributes for the given property. Discards any attributes
                             * which don't match the whitelist.
                             *
                             * @param  {object} selectedRule             - Example: { color: red, font-family: helvetica }
                             * @param  {array} allowedDeclarationsList   - List of declarations which pass whitelisting.
                             * @param  {object} attributeObject          - Object representing the current css property.
                             * @property {string} attributeObject.type   - Typically 'declaration'.
                             * @property {string} attributeObject.prop   - The CSS property, i.e 'color'.
                             * @property {string} attributeObject.value  - The corresponding value to the css property, i.e 'red'.
                             * @return {function}                        - When used in Array.reduce, will return an array of Declaration objects
                             */function filterDeclarations(selectedRule) {
                                return function (allowedDeclarationsList, attributeObject) {// If this property is whitelisted...
                                    if (selectedRule.hasOwnProperty(attributeObject.prop)) {
                                        var matchesRegex = selectedRule[attributeObject.prop].some(function (regularExpression) {
                                            return regularExpression.test(attributeObject.value);
                                        });
                                        if (matchesRegex) {
                                            allowedDeclarationsList.push(attributeObject);
                                        }
                                    }
                                    return allowedDeclarationsList;
                                };
                            }

                            function filterClasses(classes, allowed) {
                                if (!allowed) {// The class attribute is allowed without filtering on this tag
                                    return classes;
                                }
                                classes = classes.split(/\s+/);
                                return classes.filter(function (clss) {
                                    return allowed.indexOf(clss) !== -1;
                                }).join(' ');
                            }
                        }// Defaults are accessible to you so that you can use them as a starting point
// programmatically if you wish
                        var htmlParserDefaults = {decodeEntities: true};
                        sanitizeHtml.defaults = {
                            allowedTags: ['h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul', 'ol', 'nl', 'li', 'b', 'i', 'strong', 'em', 'strike', 'code', 'hr', 'br', 'div', 'table', 'thead', 'caption', 'tbody', 'tr', 'th', 'td', 'pre', 'iframe'],
                            disallowedTagsMode: 'discard',
                            allowedAttributes: {
                                a: ['href', 'name', 'target'],// We don't currently allow img itself by default, but this
// would make sense if we did. You could add srcset here,
// and if you do the URL is checked for safety
                                img: ['src']
                            },// Lots of these won't come up by default because we don't allow them
                            selfClosing: ['img', 'br', 'hr', 'area', 'base', 'basefont', 'input', 'link', 'meta'],// URL schemes we permit
                            allowedSchemes: ['http', 'https', 'ftp', 'mailto'],
                            allowedSchemesByTag: {},
                            allowedSchemesAppliedToAttributes: ['href', 'src', 'cite'],
                            allowProtocolRelative: true
                        };
                        sanitizeHtml.simpleTransform = function (newTagName, newAttribs, merge) {
                            merge = merge === undefined ? true : merge;
                            newAttribs = newAttribs || {};
                            return function (tagName, attribs) {
                                var attrib;
                                if (merge) {
                                    for (attrib in newAttribs) {
                                        attribs[attrib] = newAttribs[attrib];
                                    }
                                } else {
                                    attribs = newAttribs;
                                }
                                return {tagName: newTagName, attribs: attribs};
                            };
                        };
                    }, {
                        "htmlparser2": 31,
                        "lodash.clonedeep": 33,
                        "lodash.escaperegexp": 34,
                        "lodash.isplainobject": 35,
                        "lodash.isstring": 36,
                        "lodash.mergewith": 37,
                        "postcss": 51,
                        "srcset": 79,
                        "url": 80,
                        "xtend": 82
                    }]
                }, {}, [83])(83);
            });

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

        /***/
    }),

    /***/
    "./node_modules/setimmediate/setImmediate.js":
    /*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (global, process) {
            (function (global, undefined) {
                "use strict";

                if (global.setImmediate) {
                    return;
                }

                var nextHandle = 1; // Spec says greater than zero
                var tasksByHandle = {};
                var currentlyRunningATask = false;
                var doc = global.document;
                var registerImmediate;

                function setImmediate(callback) {
                    // Callback can either be a function or a string
                    if (typeof callback !== "function") {
                        callback = new Function("" + callback);
                    }
                    // Copy function arguments
                    var args = new Array(arguments.length - 1);
                    for (var i = 0; i < args.length; i++) {
                        args[i] = arguments[i + 1];
                    }
                    // Store and register the task
                    var task = {callback: callback, args: args};
                    tasksByHandle[nextHandle] = task;
                    registerImmediate(nextHandle);
                    return nextHandle++;
                }

                function clearImmediate(handle) {
                    delete tasksByHandle[handle];
                }

                function run(task) {
                    var callback = task.callback;
                    var args = task.args;
                    switch (args.length) {
                        case 0:
                            callback();
                            break;
                        case 1:
                            callback(args[0]);
                            break;
                        case 2:
                            callback(args[0], args[1]);
                            break;
                        case 3:
                            callback(args[0], args[1], args[2]);
                            break;
                        default:
                            callback.apply(undefined, args);
                            break;
                    }
                }

                function runIfPresent(handle) {
                    // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
                    // So if we're currently running a task, we'll need to delay this invocation.
                    if (currentlyRunningATask) {
                        // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
                        // "too much recursion" error.
                        setTimeout(runIfPresent, 0, handle);
                    } else {
                        var task = tasksByHandle[handle];
                        if (task) {
                            currentlyRunningATask = true;
                            try {
                                run(task);
                            } finally {
                                clearImmediate(handle);
                                currentlyRunningATask = false;
                            }
                        }
                    }
                }

                function installNextTickImplementation() {
                    registerImmediate = function (handle) {
                        process.nextTick(function () {
                            runIfPresent(handle);
                        });
                    };
                }

                function canUsePostMessage() {
                    // The test against `importScripts` prevents this implementation from being installed inside a web worker,
                    // where `global.postMessage` means something completely different and can't be used for this purpose.
                    if (global.postMessage && !global.importScripts) {
                        var postMessageIsAsynchronous = true;
                        var oldOnMessage = global.onmessage;
                        global.onmessage = function () {
                            postMessageIsAsynchronous = false;
                        };
                        global.postMessage("", "*");
                        global.onmessage = oldOnMessage;
                        return postMessageIsAsynchronous;
                    }
                }

                function installPostMessageImplementation() {
                    // Installs an event handler on `global` for the `message` event: see
                    // * https://developer.mozilla.org/en/DOM/window.postMessage
                    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

                    var messagePrefix = "setImmediate$" + Math.random() + "$";
                    var onGlobalMessage = function (event) {
                        if (event.source === global &&
                            typeof event.data === "string" &&
                            event.data.indexOf(messagePrefix) === 0) {
                            runIfPresent(+event.data.slice(messagePrefix.length));
                        }
                    };

                    if (global.addEventListener) {
                        global.addEventListener("message", onGlobalMessage, false);
                    } else {
                        global.attachEvent("onmessage", onGlobalMessage);
                    }

                    registerImmediate = function (handle) {
                        global.postMessage(messagePrefix + handle, "*");
                    };
                }

                function installMessageChannelImplementation() {
                    var channel = new MessageChannel();
                    channel.port1.onmessage = function (event) {
                        var handle = event.data;
                        runIfPresent(handle);
                    };

                    registerImmediate = function (handle) {
                        channel.port2.postMessage(handle);
                    };
                }

                function installReadyStateChangeImplementation() {
                    var html = doc.documentElement;
                    registerImmediate = function (handle) {
                        // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
                        // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
                        var script = doc.createElement("script");
                        script.onreadystatechange = function () {
                            runIfPresent(handle);
                            script.onreadystatechange = null;
                            html.removeChild(script);
                            script = null;
                        };
                        html.appendChild(script);
                    };
                }

                function installSetTimeoutImplementation() {
                    registerImmediate = function (handle) {
                        setTimeout(runIfPresent, 0, handle);
                    };
                }

                // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
                var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
                attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

                // Don't get fooled by e.g. browserify environments.
                if ({}.toString.call(global.process) === "[object process]") {
                    // For Node.js before 0.9
                    installNextTickImplementation();

                } else if (canUsePostMessage()) {
                    // For non-IE10 modern browsers
                    installPostMessageImplementation();

                } else if (global.MessageChannel) {
                    // For web workers, where supported
                    installMessageChannelImplementation();

                } else if (doc && "onreadystatechange" in doc.createElement("script")) {
                    // For IE 6–8
                    installReadyStateChangeImplementation();

                } else {
                    // For older browsers
                    installSetTimeoutImplementation();
                }

                attachTo.setImmediate = setImmediate;
                attachTo.clearImmediate = clearImmediate;
            }(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css&":
    /*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=style&index=0&id=002b7664&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css&":
    /*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=style&index=0&id=a1d20622&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css&":
    /*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=style&index=0&id=690fd6ce&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css&":
    /*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=style&index=0&id=3fdbdfe9&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css&":
    /*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=style&index=0&id=3996aa1a&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css&":
    /*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=style&index=0&id=dd350904&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css&":
    /*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=style&index=0&id=38857dd6&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css&":
    /*!***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css& ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=style&index=0&id=bf5bf2dc&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css&":
    /*!***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css& ***!
  \***************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=style&index=0&id=6a8af1dc&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css&":
    /*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css& ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=style&index=0&id=3b0bf4e6&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css&":
    /*!*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css& ***!
  \*********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=style&index=0&id=656608d9&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css&":
    /*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css& ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=style&index=0&id=2767e9c3&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css&":
    /*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css& ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=style&index=0&id=51b91a07&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css&":
    /*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css& ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=style&index=0&id=14cb8987&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css&":
    /*!*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css& ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=style&index=0&id=0f830af4&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css&":
    /*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=style&index=0&id=4cafbc50&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css&":
    /*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css& ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=style&index=0&id=5552c086&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css&":
    /*!***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=style&index=0&id=cc2e81b0&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css&":
    /*!********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css& ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=style&index=0&id=559f9208&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/index.js!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css&":
    /*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader!./node_modules/css-loader??ref--34-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--34-2!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {


        var content = __webpack_require__(/*! !../../../../css-loader??ref--34-1!../../../../vue-loader/lib/loaders/stylePostLoader.js!../../../../postcss-loader/src??ref--34-2!../../../../vue-loader/lib??vue-loader-options!./TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css& */ "./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=style&index=0&id=e647c006&scoped=true&lang=css&");

        if (typeof content === 'string') content = [[module.i, content, '']];

        var transform;
        var insertInto;


        var options = {"hmr": true}

        options.transform = transform
        options.insertInto = undefined;

        var update = __webpack_require__(/*! ../../../../style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

        if (content.locals) module.exports = content.locals;

        if (false) {
        }

        /***/
    }),

    /***/
    "./node_modules/style-loader/lib/addStyles.js":
    /*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        /*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

        var stylesInDom = {};

        var memoize = function (fn) {
            var memo;

            return function () {
                if (typeof memo === "undefined") memo = fn.apply(this, arguments);
                return memo;
            };
        };

        var isOldIE = memoize(function () {
            // Test for IE <= 9 as proposed by Browserhacks
            // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
            // Tests for existence of standard globals is to allow style-loader
            // to operate correctly into non-standard environments
            // @see https://github.com/webpack-contrib/style-loader/issues/177
            return window && document && document.all && !window.atob;
        });

        var getTarget = function (target, parent) {
            if (parent) {
                return parent.querySelector(target);
            }
            return document.querySelector(target);
        };

        var getElement = (function (fn) {
            var memo = {};

            return function (target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                    return target();
                }
                if (typeof memo[target] === "undefined") {
                    var styleTarget = getTarget.call(this, target, parent);
                    // Special case to return head of iframe instead of iframe itself
                    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
                        try {
                            // This will throw an exception if access to iframe is blocked
                            // due to cross-origin restrictions
                            styleTarget = styleTarget.contentDocument.head;
                        } catch (e) {
                            styleTarget = null;
                        }
                    }
                    memo[target] = styleTarget;
                }
                return memo[target]
            };
        })();

        var singleton = null;
        var singletonCounter = 0;
        var stylesInsertedAtTop = [];

        var fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

        module.exports = function (list, options) {
            if (typeof DEBUG !== "undefined" && DEBUG) {
                if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
            }

            options = options || {};

            options.attrs = typeof options.attrs === "object" ? options.attrs : {};

            // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
            // tags it will allow on a page
            if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

            // By default, add <style> tags to the <head> element
            if (!options.insertInto) options.insertInto = "head";

            // By default, add <style> tags to the bottom of the target
            if (!options.insertAt) options.insertAt = "bottom";

            var styles = listToStyles(list, options);

            addStylesToDom(styles, options);

            return function update(newList) {
                var mayRemove = [];

                for (var i = 0; i < styles.length; i++) {
                    var item = styles[i];
                    var domStyle = stylesInDom[item.id];

                    domStyle.refs--;
                    mayRemove.push(domStyle);
                }

                if (newList) {
                    var newStyles = listToStyles(newList, options);
                    addStylesToDom(newStyles, options);
                }

                for (var i = 0; i < mayRemove.length; i++) {
                    var domStyle = mayRemove[i];

                    if (domStyle.refs === 0) {
                        for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

                        delete stylesInDom[domStyle.id];
                    }
                }
            };
        };

        function addStylesToDom(styles, options) {
            for (var i = 0; i < styles.length; i++) {
                var item = styles[i];
                var domStyle = stylesInDom[item.id];

                if (domStyle) {
                    domStyle.refs++;

                    for (var j = 0; j < domStyle.parts.length; j++) {
                        domStyle.parts[j](item.parts[j]);
                    }

                    for (; j < item.parts.length; j++) {
                        domStyle.parts.push(addStyle(item.parts[j], options));
                    }
                } else {
                    var parts = [];

                    for (var j = 0; j < item.parts.length; j++) {
                        parts.push(addStyle(item.parts[j], options));
                    }

                    stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
                }
            }
        }

        function listToStyles(list, options) {
            var styles = [];
            var newStyles = {};

            for (var i = 0; i < list.length; i++) {
                var item = list[i];
                var id = options.base ? item[0] + options.base : item[0];
                var css = item[1];
                var media = item[2];
                var sourceMap = item[3];
                var part = {css: css, media: media, sourceMap: sourceMap};

                if (!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
                else newStyles[id].parts.push(part);
            }

            return styles;
        }

        function insertStyleElement(options, style) {
            var target = getElement(options.insertInto)

            if (!target) {
                throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
            }

            var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

            if (options.insertAt === "top") {
                if (!lastStyleElementInsertedAtTop) {
                    target.insertBefore(style, target.firstChild);
                } else if (lastStyleElementInsertedAtTop.nextSibling) {
                    target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
                } else {
                    target.appendChild(style);
                }
                stylesInsertedAtTop.push(style);
            } else if (options.insertAt === "bottom") {
                target.appendChild(style);
            } else if (typeof options.insertAt === "object" && options.insertAt.before) {
                var nextSibling = getElement(options.insertAt.before, target);
                target.insertBefore(style, nextSibling);
            } else {
                throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
            }
        }

        function removeStyleElement(style) {
            if (style.parentNode === null) return false;
            style.parentNode.removeChild(style);

            var idx = stylesInsertedAtTop.indexOf(style);
            if (idx >= 0) {
                stylesInsertedAtTop.splice(idx, 1);
            }
        }

        function createStyleElement(options) {
            var style = document.createElement("style");

            if (options.attrs.type === undefined) {
                options.attrs.type = "text/css";
            }

            if (options.attrs.nonce === undefined) {
                var nonce = getNonce();
                if (nonce) {
                    options.attrs.nonce = nonce;
                }
            }

            addAttrs(style, options.attrs);
            insertStyleElement(options, style);

            return style;
        }

        function createLinkElement(options) {
            var link = document.createElement("link");

            if (options.attrs.type === undefined) {
                options.attrs.type = "text/css";
            }
            options.attrs.rel = "stylesheet";

            addAttrs(link, options.attrs);
            insertStyleElement(options, link);

            return link;
        }

        function addAttrs(el, attrs) {
            Object.keys(attrs).forEach(function (key) {
                el.setAttribute(key, attrs[key]);
            });
        }

        function getNonce() {
            if (false) {
            }

            return __webpack_require__.nc;
        }

        function addStyle(obj, options) {
            var style, update, remove, result;

            // If a transform function was defined, run it on the css
            if (options.transform && obj.css) {
                result = typeof options.transform === 'function'
                    ? options.transform(obj.css)
                    : options.transform.default(obj.css);

                if (result) {
                    // If transform returns a value, use that instead of the original css.
                    // This allows running runtime transformations on the css.
                    obj.css = result;
                } else {
                    // If the transform function returns a falsy value, don't add this css.
                    // This allows conditional loading of css
                    return function () {
                        // noop
                    };
                }
            }

            if (options.singleton) {
                var styleIndex = singletonCounter++;

                style = singleton || (singleton = createStyleElement(options));

                update = applyToSingletonTag.bind(null, style, styleIndex, false);
                remove = applyToSingletonTag.bind(null, style, styleIndex, true);

            } else if (
                obj.sourceMap &&
                typeof URL === "function" &&
                typeof URL.createObjectURL === "function" &&
                typeof URL.revokeObjectURL === "function" &&
                typeof Blob === "function" &&
                typeof btoa === "function"
            ) {
                style = createLinkElement(options);
                update = updateLink.bind(null, style, options);
                remove = function () {
                    removeStyleElement(style);

                    if (style.href) URL.revokeObjectURL(style.href);
                };
            } else {
                style = createStyleElement(options);
                update = applyToTag.bind(null, style);
                remove = function () {
                    removeStyleElement(style);
                };
            }

            update(obj);

            return function updateStyle(newObj) {
                if (newObj) {
                    if (
                        newObj.css === obj.css &&
                        newObj.media === obj.media &&
                        newObj.sourceMap === obj.sourceMap
                    ) {
                        return;
                    }

                    update(obj = newObj);
                } else {
                    remove();
                }
            };
        }

        var replaceText = (function () {
            var textStore = [];

            return function (index, replacement) {
                textStore[index] = replacement;

                return textStore.filter(Boolean).join('\n');
            };
        })();

        function applyToSingletonTag(style, index, remove, obj) {
            var css = remove ? "" : obj.css;

            if (style.styleSheet) {
                style.styleSheet.cssText = replaceText(index, css);
            } else {
                var cssNode = document.createTextNode(css);
                var childNodes = style.childNodes;

                if (childNodes[index]) style.removeChild(childNodes[index]);

                if (childNodes.length) {
                    style.insertBefore(cssNode, childNodes[index]);
                } else {
                    style.appendChild(cssNode);
                }
            }
        }

        function applyToTag(style, obj) {
            var css = obj.css;
            var media = obj.media;

            if (media) {
                style.setAttribute("media", media)
            }

            if (style.styleSheet) {
                style.styleSheet.cssText = css;
            } else {
                while (style.firstChild) {
                    style.removeChild(style.firstChild);
                }

                style.appendChild(document.createTextNode(css));
            }
        }

        function updateLink(link, options, obj) {
            var css = obj.css;
            var sourceMap = obj.sourceMap;

            /*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
            var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

            if (options.convertToAbsoluteUrls || autoFixUrls) {
                css = fixUrls(css);
            }

            if (sourceMap) {
                // http://stackoverflow.com/a/26603875
                css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
            }

            var blob = new Blob([css], {type: "text/css"});

            var oldSrc = link.href;

            link.href = URL.createObjectURL(blob);

            if (oldSrc) URL.revokeObjectURL(oldSrc);
        }


        /***/
    }),

    /***/
    "./node_modules/style-loader/lib/urls.js":
    /*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
    /*! no static exports found */
    /***/ (function (module, exports) {


        /**
         * When source maps are enabled, `style-loader` uses a link element with a data-uri to
         * embed the css on the page. This breaks all relative urls because now they are relative to a
         * bundle instead of the current page.
         *
         * One solution is to only use full urls, but that may be impossible.
         *
         * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
         *
         * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
         *
         */

        module.exports = function (css) {
            // get current location
            var location = typeof window !== "undefined" && window.location;

            if (!location) {
                throw new Error("fixUrls requires window.location");
            }

            // blank or null?
            if (!css || typeof css !== "string") {
                return css;
            }

            var baseUrl = location.protocol + "//" + location.host;
            var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

            // convert each url(...)
            /*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
            var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {
                // strip quotes (if they exist)
                var unquotedOrigUrl = origUrl
                    .trim()
                    .replace(/^"(.*)"$/, function (o, $1) {
                        return $1;
                    })
                    .replace(/^'(.*)'$/, function (o, $1) {
                        return $1;
                    });

                // already a full url? no change
                if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
                    return fullMatch;
                }

                // convert the url to a full url
                var newUrl;

                if (unquotedOrigUrl.indexOf("//") === 0) {
                    //TODO: should we add protocol?
                    newUrl = unquotedOrigUrl;
                } else if (unquotedOrigUrl.indexOf("/") === 0) {
                    // path should be relative to the base url
                    newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
                } else {
                    // path should be relative to current directory
                    newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
                }

                // send back the fixed url(...)
                return "url(" + JSON.stringify(newUrl) + ")";
            });

            // send back the fixed css
            return fixedCss;
        };


        /***/
    }),

    /***/
    "./node_modules/timers-browserify/main.js":
    /*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        /* WEBPACK VAR INJECTION */
        (function (global) {
            var scope = (typeof global !== "undefined" && global) ||
                (typeof self !== "undefined" && self) ||
                window;
            var apply = Function.prototype.apply;

// DOM APIs, for completeness

            exports.setTimeout = function () {
                return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
            };
            exports.setInterval = function () {
                return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
            };
            exports.clearTimeout =
                exports.clearInterval = function (timeout) {
                    if (timeout) {
                        timeout.close();
                    }
                };

            function Timeout(id, clearFn) {
                this._id = id;
                this._clearFn = clearFn;
            }

            Timeout.prototype.unref = Timeout.prototype.ref = function () {
            };
            Timeout.prototype.close = function () {
                this._clearFn.call(scope, this._id);
            };

// Does not start the time, just sets up the members needed.
            exports.enroll = function (item, msecs) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = msecs;
            };

            exports.unenroll = function (item) {
                clearTimeout(item._idleTimeoutId);
                item._idleTimeout = -1;
            };

            exports._unrefActive = exports.active = function (item) {
                clearTimeout(item._idleTimeoutId);

                var msecs = item._idleTimeout;
                if (msecs >= 0) {
                    item._idleTimeoutId = setTimeout(function onTimeout() {
                        if (item._onTimeout)
                            item._onTimeout();
                    }, msecs);
                }
            };

// setimmediate attaches itself to the global object
            __webpack_require__(/*! setimmediate */ "./node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
            exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                (typeof global !== "undefined" && global.setImmediate) ||
                (this && this.setImmediate);
            exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                (typeof global !== "undefined" && global.clearImmediate) ||
                (this && this.clearImmediate);

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=script&lang=js&":
    /*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'AtomSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1000
                },
                size: {
                    type: Number,
                    default: 60
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`
                    }
                },

                circleStyle() {
                    return {
                        color: this.color,
                        fontSize: `${this.size * 0.24}px`
                    }
                },

                lineStyle() {
                    return {
                        animationDuration: `${this.animationDuration}ms`,
                        borderLeftWidth: `${this.size / 25}px`,
                        borderTopWidth: `${this.size / 25}px`,
                        borderLeftColor: this.color
                    }
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=script&lang=js&":
    /*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'BreedingRhombusSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 2000
                },
                size: {
                    type: Number,
                    default: 150
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    animationBaseName: 'breeding-rhombus-spinner-animation-child',
                    rhombusesNum: 8
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`
                    }
                },

                rhombusStyle() {
                    return {
                        height: `${this.size / 7.5}px`,
                        width: `${this.size / 7.5}px`,
                        animationDuration: `${this.animationDuration}ms`,
                        top: `${this.size / 2.3077}px`,
                        left: `${this.size / 2.3077}px`,
                        backgroundColor: this.color
                    }
                },

                rhombusesStyles() {
                    const rhombusesStyles = []
                    const delayModifier = this.animationDuration * 0.05

                    for (let i = 1; i <= this.rhombusesNum; i++) {
                        rhombusesStyles.push(Object.assign({
                            animationDelay: `${delayModifier * (i + 1)}ms`
                        }, this.rhombusStyle))
                    }

                    return rhombusesStyles
                },

                bigRhombusStyle() {
                    return {
                        height: `${this.size / 3}px`,
                        width: `${this.size / 3}px`,
                        animationDuration: `${this.animationDuration}`,
                        top: `${this.size / 3}px`,
                        left: `${this.size / 3}px`,
                        backgroundColor: this.color
                    }
                }
            }

        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=script&lang=js&":
    /*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'CirclesToRhombusesSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1200
                },
                circleSize: {
                    type: Number,
                    default: 15
                },
                color: {
                    type: String,
                    default: '#fff'
                },
                circlesNum: {
                    type: Number,
                    default: 3
                }
            },

            computed: {
                circleMarginLeft() {
                    return this.circleSize * 1.125
                },

                spinnertStyle() {
                    return {
                        height: `${this.circleSize}px`,
                        width: `${(this.circleSize + this.circleMarginLeft) * this.circlesNum}px`
                    }
                },

                circleStyle() {
                    return {
                        borderColor: this.color,
                        animationDuration: `${this.animationDuration}ms`,
                        height: `${this.circleSize}px`,
                        width: `${this.circleSize}px`,
                        marginLeft: `${this.circleMarginLeft}px`
                    }
                },

                circlesStyles() {
                    const circlesStyles = []
                    const delay = 150

                    for (let i = 1; i <= this.circlesNum; i++) {
                        const style = Object.assign({
                            animationDelay: `${i * delay}ms`
                        }, this.circleStyle)

                        if (i === 1) {
                            style.marginLeft = 0
                        }

                        circlesStyles.push(style)
                    }

                    return circlesStyles
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=script&lang=js&":
    /*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=script&lang=js& ***!
  \*********************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'FingerprintSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1500
                },
                size: {
                    type: Number,
                    default: 60
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    ringsNum: 9,
                    containerPadding: 2
                }
            },

            computed: {
                outerRingSize() {
                    return this.size - this.containerPadding * 2
                },

                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`,
                        padding: `${this.containerPadding}px`
                    }
                },

                ringStyle() {
                    return {
                        borderTopColor: this.color,
                        animationDuration: `${this.animationDuration}ms`
                    }
                },

                ringsStyles() {
                    const ringsStyles = []
                    const ringBase = this.outerRingSize / (this.ringsNum)
                    const ringInc = ringBase

                    for (let i = 1; i <= this.ringsNum; i++) {
                        let style = Object.assign({
                            animationDelay: `${i * 50}ms`,
                            height: `${ringBase + (i - 1) * ringInc}px`,
                            width: `${ringBase + (i - 1) * ringInc}px`
                        }, this.ringStyle)
                        ringsStyles.push(style)
                    }

                    return ringsStyles
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=script&lang=js&":
    /*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _services_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/utils */ "./node_modules/epic-spinners/src/services/utils.js");
//
//
//
//
//
//
//
//
//
//


        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'FlowerSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 2500
                },
                size: {
                    type: Number,
                    default: 70
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    smallDotName: `flower-spinner-small-dot-${Date.now()}`,
                    bigDotName: `flower-spinner-big-dot-${Date.now()}`
                }
            },

            computed: {
                dotSize() {
                    return this.size / 7
                },

                spinnerStyle() {
                    return {
                        width: `${this.size}px`,
                        height: `${this.size}px`
                    }
                },

                dotsContainerStyle() {
                    return {
                        width: `${this.dotSize}px`,
                        height: `${this.dotSize}px`
                    }
                },

                smallerDotStyle() {
                    return {
                        background: this.color,
                        animationDuration: `${this.animationDuration}ms`,
                        animationName: this.smallDotName
                    }
                },

                biggerDotStyle() {
                    return {
                        background: this.color,
                        animationDuration: `${this.animationDuration}ms`,
                        animationName: this.bigDotName
                    }
                }
            },

            watch: {
                size: {
                    handler: 'updateAnimation',
                    immediate: true
                },
                color: {
                    handler: 'updateAnimation',
                    immediate: true
                }
            },

            beforeDestroy() {
                _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].removeKeyframes(this.smallDotName)
                _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].removeKeyframes(this.bigDotName)
            },

            methods: {
                updateAnimation() {
                    _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].removeKeyframes(this.smallDotName)
                    _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].appendKeyframes(this.smallDotName, this.generateSmallDotKeyframes())
                    _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].removeKeyframes(this.bigDotName)
                    _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].appendKeyframes(this.bigDotName, this.generateBigDotKeyframes())
                },

                generateSmallDotKeyframes() {
                    return `0%, 100% {
                  box-shadow: 0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color};
                }
                25%, 75% {
                  box-shadow: ${this.dotSize * 1.4}px 0 0 ${this.color},
                              -${this.dotSize * 1.4}px 0 0 ${this.color},
                              0 ${this.dotSize * 1.4}px 0 ${this.color},
                              0 -${this.dotSize * 1.4}px 0 ${this.color},
                              ${this.dotSize}px -${this.dotSize}px 0 ${this.color},
                              ${this.dotSize}px ${this.dotSize}px 0 ${this.color},
                              -${this.dotSize}px -${this.dotSize}px 0 ${this.color},
                              -${this.dotSize}px ${this.dotSize}px 0 ${this.color};

                }
                100% {
                  box-shadow: 0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color};
                }`
                },

                generateBigDotKeyframes() {
                    return `0%, 100% {
                  box-shadow: 0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color};
                }
                50% {
                  transform: rotate(180deg);
                }
                25%, 75% {
                  box-shadow: ${this.dotSize * 2.6}px 0 0 ${this.color},
                              -${this.dotSize * 2.6}px 0 0 ${this.color},
                              0 ${this.dotSize * 2.6}px 0 ${this.color},
                              0 -${this.dotSize * 2.6}px 0 ${this.color},
                              ${this.dotSize * 1.9}px -${this.dotSize * 1.9}px 0 ${this.color},
                              ${this.dotSize * 1.9}px ${this.dotSize * 1.9}px 0 ${this.color},
                              -${this.dotSize * 1.9}px -${this.dotSize * 1.9}px 0 ${this.color},
                              -${this.dotSize * 1.9}px ${this.dotSize * 1.9}px 0 ${this.color};

                }
                100% {
                  transform: rotate(360deg);
                  box-shadow: 0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color},
                              0 0 0 ${this.color};
                }`
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=script&lang=js&":
    /*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'FulfillingBouncingCircleSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 4000
                },
                size: {
                    type: Number,
                    default: 60
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`,
                        animationDuration: `${this.animationDuration}ms`
                    }
                },

                orbitStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`,
                        borderColor: this.color,
                        borderWidth: `${this.size * 0.03}px`,
                        animationDuration: `${this.animationDuration}ms`
                    }
                },

                circleStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`,
                        borderColor: this.color,
                        color: this.color,
                        borderWidth: `${this.size * 0.1}px`,
                        animationDuration: `${this.animationDuration}ms`
                    }
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=script&lang=js&":
    /*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'FulfillingSquareSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 4000
                },
                size: {
                    type: Number,
                    default: 50
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`,
                        borderColor: this.color
                    }
                },

                spinnerInnerStyle() {
                    return {
                        backgroundColor: this.color
                    }
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=script&lang=js&":
    /*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=script&lang=js& ***!
  \********************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'HalfCircleSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1000
                },
                size: {
                    type: Number,
                    default: 60
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`
                    }
                },

                circleStyle() {
                    return {
                        borderWidth: `${this.size / 10}px`,
                        animationDuration: `${this.animationDuration}ms`
                    }
                },

                circle1Style() {
                    return Object.assign({
                        borderTopColor: this.color
                    }, this.circleStyle)
                },

                circle2Style() {
                    return Object.assign({
                        borderBottomColor: this.color
                    }, this.circleStyle)
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=script&lang=js&":
    /*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=script&lang=js& ***!
  \********************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'HollowDotsSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1000
                },
                dotSize: {
                    type: Number,
                    default: 15
                },
                dotsNum: {
                    type: Number,
                    default: 3
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            computed: {
                horizontalMargin() {
                    return this.dotSize / 2
                },

                spinnerStyle() {
                    return {
                        height: `${this.dotSize}px`,
                        width: `${(this.dotSize + this.horizontalMargin * 2) * this.dotsNum}px`
                    }
                },

                dotStyle() {
                    return {
                        animationDuration: `${this.animationDuration}ms`,
                        width: `${this.dotSize}px`,
                        height: `${this.dotSize}px`,
                        margin: `0 ${this.horizontalMargin}px`,
                        borderWidth: `${this.dotSize / 5}px`,
                        borderColor: this.color
                    }
                },

                dotsStyles() {
                    const dotsStyles = []
                    const delayModifier = 0.3
                    const basicDelay = 1000

                    for (let i = 1; i <= this.dotsNum; i++) {
                        const style = Object.assign({
                            animationDelay: `${basicDelay * i * delayModifier}ms`
                        }, this.dotStyle)

                        dotsStyles.push(style)
                    }

                    return dotsStyles
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=script&lang=js&":
    /*!*****************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'IntersectingCirclesSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1200
                },
                size: {
                    type: Number,
                    default: 70
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            computed: {
                circleSize() {
                    return this.size / 2
                },

                spinnerStyle() {
                    return {
                        width: `${this.size}px`,
                        height: `${this.size}px`
                    }
                },

                spinnerBlockStyle() {
                    return {
                        animationDuration: `${this.animationDuration}ms`,
                        width: `${this.circleSize}px`,
                        height: `${this.circleSize}px`
                    }
                },

                circleStyle() {
                    return {
                        borderColor: this.color
                    }
                },

                circleStyles() {
                    const circlesPositions = [
                        {top: 0, left: 0},
                        {left: `${this.circleSize * -0.36}px`, top: `${this.circleSize * 0.2}px`},
                        {left: `${this.circleSize * -0.36}px`, top: `${this.circleSize * -0.2}px`},
                        {left: 0, top: `${this.circleSize * -0.36}px`},
                        {left: `${this.circleSize * 0.36}px`, top: `${this.circleSize * -0.2}px`},
                        {left: `${this.circleSize * 0.36}px`, top: `${this.circleSize * 0.2}px`},
                        {left: 0, top: `${this.circleSize * 0.36}px`}
                    ]

                    return circlesPositions.map((cp) => Object.assign(cp, this.circleStyle))
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=script&lang=js&":
    /*!**************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'LoopingRhombusesSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 2500
                },
                rhombusSize: {
                    type: Number,
                    default: 15
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    rhombusesNum: 3
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.rhombusSize}px`,
                        width: `${this.rhombusSize * 4}px`
                    }
                },

                rhombusStyle() {
                    return {
                        height: `${this.rhombusSize}px`,
                        width: `${this.rhombusSize}px`,
                        backgroundColor: this.color,
                        animationDuration: `${this.animationDuration}ms`,
                        left: `${this.rhombusSize * 4}px`
                    }
                },

                rhombusesStyles() {
                    const rhombusesStyles = []
                    const delay = -this.animationDuration / 1.5

                    for (let i = 1; i <= this.rhombusesNum; i++) {
                        const style = Object.assign({
                            animationDelay: `${i * delay}ms`
                        }, this.rhombusStyle)

                        rhombusesStyles.push(style)
                    }

                    return rhombusesStyles
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=script&lang=js&":
    /*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'OrbitSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1000
                },
                size: {
                    type: Number,
                    default: 50
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`
                    }
                },

                orbitStyle() {
                    return {
                        borderColor: this.color,
                        animationDuration: `${this.animationDuration}ms`
                    }
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=script&lang=js&":
    /*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _services_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/utils */ "./node_modules/epic-spinners/src/services/utils.js");
//
//
//
//
//
//


        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'PixelSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1500
                },
                size: {
                    type: Number,
                    default: 70
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    animationName: `pixel-spinner-animation-${Date.now()}`
                }
            },

            computed: {
                pixelSize() {
                    return this.size / 7
                },

                spinnerStyle() {
                    return {
                        width: `${this.size}px`,
                        height: `${this.size}px`
                    }
                },

                spinnerInnerStyle() {
                    return {
                        animationDuration: `${this.animationDuration}ms`,
                        animationName: this.animationName,
                        width: `${this.pixelSize}px`,
                        height: `${this.pixelSize}px`,
                        backgroundColor: this.color,
                        color: this.color,
                        boxShadow: `
                      ${this.pixelSize * 1.5}px ${this.pixelSize * 1.5}px 0 0,
                      ${this.pixelSize * -1.5}px ${this.pixelSize * -1.5}px 0 0,
                      ${this.pixelSize * 1.5}px ${this.pixelSize * -1.5}px 0 0,
                      ${this.pixelSize * -1.5}px ${this.pixelSize * 1.5}px 0 0,
                      0 ${this.pixelSize * 1.5}px 0 0,
                      ${this.pixelSize * 1.5}px 0 0 0,
                      ${this.pixelSize * -1.5}px 0 0 0,
                      0 ${this.pixelSize * -1.5}px 0 0
                    `
                    }
                }
            },

            watch: {
                size: {
                    handler: 'updateAnimation',
                    immediate: true
                }
            },

            mounted() {
                this.updateAnimation()
            },

            beforeDestroy() {
                _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].removeKeyframes(this.animationName)
            },

            methods: {
                updateAnimation() {
                    _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].removeKeyframes(this.animationName)
                    _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].appendKeyframes(this.animationName, this.generateKeyframes())
                },

                generateKeyframes() {
                    return `
      50% {
        box-shadow:  ${this.pixelSize * 2}px ${this.pixelSize * 2}px 0 0,
                     ${this.pixelSize * -2}px ${this.pixelSize * -2}px 0 0,
                     ${this.pixelSize * 2}px ${this.pixelSize * -2}px 0 0,
                     ${this.pixelSize * -2}px ${this.pixelSize * 2}px 0 0,
                     0 ${this.pixelSize}px 0 0,
                     ${this.pixelSize}px 0 0 0,
                     ${this.pixelSize * -1}px 0 0 0,
                     0 ${this.pixelSize * -1}px 0 0;
      }


      75% {
        box-shadow:  ${this.pixelSize * 2}px ${this.pixelSize * 2}px 0 0,
                     ${this.pixelSize * -2}px ${this.pixelSize * -2}px 0 0,
                     ${this.pixelSize * 2}px ${this.pixelSize * -2}px 0 0,
                     ${this.pixelSize * -2}px ${this.pixelSize * 2}px 0 0,
                     0 ${this.pixelSize}px 0 0,
                     ${this.pixelSize}px 0 0 0,
                     ${this.pixelSize * -1}px 0 0 0,
                     0 ${this.pixelSize * -1}px 0 0;
      }

      100% {
        transform: rotate(360deg);
      }`
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=script&lang=js&":
    /*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'RadarSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 2000
                },
                size: {
                    type: Number,
                    default: 110
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    circlesNum: 4
                }
            },

            computed: {
                borderWidth() {
                    return this.size * 5 / 110
                },

                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`
                    }
                },

                circleStyle() {
                    return {
                        animationDuration: `${this.animationDuration}ms`
                    }
                },

                circleInnerContainerStyle() {
                    return {
                        borderWidth: `${this.borderWidth}px`
                    }
                },

                circleInnerStyle() {
                    return {
                        borderLeftColor: this.color,
                        borderRightColor: this.color,
                        borderWidth: `${this.borderWidth}px`
                    }
                },

                circlesStyles() {
                    const circlesStyles = []
                    const delay = this.animationDuration * 0.15

                    for (let i = 0; i < this.circlesNum; i++) {
                        circlesStyles.push(Object.assign({
                            padding: `${this.borderWidth * 2 * i}px`,
                            animationDelay: `${i === this.circlesNum - 1 ? 0 : delay}ms`
                        }, this.circleStyle))
                    }

                    return circlesStyles
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=script&lang=js&":
    /*!************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=script&lang=js& ***!
  \************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'ScalingSquaresSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1250
                },
                size: {
                    type: Number,
                    default: 65
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    squaresNum: 4
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`,
                        animationDuration: `${this.animationDuration}ms`
                    }
                },

                squareStyle() {
                    return {
                        height: `${this.size * 0.25 / 1.3}px`,
                        width: `${this.size * 0.25 / 1.3}px`,
                        animationDuration: `${this.animationDuration}ms`,
                        borderWidth: `${this.size * 0.04 / 1.3}px`,
                        borderColor: this.color
                    }
                },

                squaresStyles() {
                    const squaresStyles = []

                    for (let i = 1; i <= this.squaresNum; i++) {
                        squaresStyles.push(Object.assign({}, this.squareStyle))
                    }

                    return squaresStyles
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=script&lang=js&":
    /*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'SelfBuildingSquareSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 6000
                },
                size: {
                    type: Number,
                    default: 40
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    squaresNum: 9
                }
            },

            computed: {
                squareSize() {
                    return this.size / 4
                },

                initialTopPosition() {
                    return -this.squareSize * 2 / 3
                },

                spinnerStyle() {
                    return {
                        top: `${-this.initialTopPosition}px`,
                        height: `${this.size}px`,
                        width: `${this.size}px`
                    }
                },

                squareStyle() {
                    return {
                        height: `${this.squareSize}px`,
                        width: `${this.squareSize}px`,
                        top: `${this.initialTopPosition}px`,
                        marginRight: `${this.squareSize / 3}px`,
                        marginTop: `${this.squareSize / 3}px`,
                        animationDuration: `${this.animationDuration}ms`,
                        background: this.color
                    }
                },

                squaresStyles() {
                    const squaresStyles = []
                    const delaysMultipliers = [6, 7, 8, 3, 4, 5, 0, 1, 2]
                    const delayModifier = this.animationDuration * 0.05

                    for (let i = 0; i < this.squaresNum; i++) {
                        squaresStyles.push(Object.assign({
                            animationDelay: `${delayModifier * delaysMultipliers[i]}ms`
                        }, this.squareStyle))
                    }

                    return squaresStyles
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=script&lang=js&":
    /*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'SemipolarSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 2000
                },
                size: {
                    type: Number,
                    default: 65
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    ringsNum: 5
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`
                    }
                },
                ringStyle() {
                    return {
                        animationDuration: `${this.animationDuration}ms`,
                        borderTopColor: this.color,
                        borderLeftColor: this.color
                    }
                },
                ringsStyles() {
                    const ringsStyles = []
                    const delayModifier = 0.1
                    const ringWidth = this.size * 0.05
                    const positionIncrement = ringWidth * 2
                    const sizeDecrement = this.size * 0.2

                    for (let i = 0; i < this.ringsNum; i++) {
                        const computedSize = `${this.size - sizeDecrement * i}px`
                        const computedPosition = `${positionIncrement * i}px`
                        const style = Object.assign({
                            animationDelay: `${this.animationDuration * delayModifier * (this.ringsNum - i - 1)}ms`,
                            height: computedSize,
                            width: computedSize,
                            left: computedPosition,
                            top: computedPosition,
                            borderWidth: `${ringWidth}px`
                        }, this.ringStyle)
                        ringsStyles.push(style)
                    }

                    return ringsStyles
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=script&lang=js&":
    /*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=script&lang=js& ***!
  \****************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _services_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../services/utils */ "./node_modules/epic-spinners/src/services/utils.js");
//
//
//
//
//
//
//
//
//
//
//


        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'SpringSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 3000
                },
                size: {
                    type: Number,
                    default: 70
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    animationName: `spring-spinner-animation-${Date.now()}`
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`
                    }
                },

                spinnerPartStyle() {
                    return {
                        height: `${this.size / 2}px`,
                        width: `${this.size}px`
                    }
                },

                rotatorStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`,
                        borderRightColor: this.color,
                        borderTopColor: this.color,
                        borderWidth: `${this.size / 7}px`,
                        animationDuration: `${this.animationDuration}ms`,
                        animationName: this.animationName
                    }
                }
            },

            watch: {
                size: {
                    handler: 'updateAnimation',
                    immediate: true
                },
                color: {
                    handler: 'updateAnimation',
                    immediate: true
                }
            },

            mounted() {
                this.updateAnimation()
            },

            beforeDestroy() {
                _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].removeKeyframes(this.animationName)
            },

            methods: {
                updateAnimation() {
                    _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].removeKeyframes(this.animationName)
                    _services_utils__WEBPACK_IMPORTED_MODULE_0__["default"].appendKeyframes(this.animationName, this.generateKeyframes())
                },

                generateKeyframes() {
                    return `
        0% {
          border-width: ${this.size / 7}px;
        }
        25% {
          border-width: ${this.size / 23.33}px;
        }
        50% {
          transform: rotate(115deg);
          border-width: ${this.size / 7}px;
        }
        75% {
          border-width: ${this.size / 23.33}px;
         }
        100% {
         border-width: ${this.size / 7}px;
        }`
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=script&lang=js&":
    /*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'SwappingSquaresSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1000
                },
                size: {
                    type: Number,
                    default: 65
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    animationBaseName: 'swapping-squares-animation-child',
                    squaresNum: 4
                }
            },

            computed: {
                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`
                    }
                },

                squareStyle() {
                    return {
                        height: `${this.size * 0.25 / 1.3}px`,
                        width: `${this.size * 0.25 / 1.3}px`,
                        animationDuration: `${this.animationDuration}ms`,
                        borderWidth: `${this.size * 0.04 / 1.3}px`,
                        borderColor: this.color
                    }
                },

                squaresStyles() {
                    const squaresStyles = []
                    const delay = this.animationDuration * 0.5

                    for (let i = 1; i <= this.squaresNum; i++) {
                        squaresStyles.push(Object.assign({
                            animationDelay: `${i % 2 === 0 ? delay : 0}ms`
                        }, this.squareStyle))
                    }

                    return squaresStyles
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=script&lang=js&":
    /*!**********************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
//
//
//
//
//
//
//
//

        /* harmony default export */
        __webpack_exports__["default"] = ({
            name: 'TrinityRingsSpinner',

            props: {
                animationDuration: {
                    type: Number,
                    default: 1500
                },
                size: {
                    type: Number,
                    default: 60
                },
                color: {
                    type: String,
                    default: '#fff'
                }
            },

            data() {
                return {
                    containerPadding: 3
                }
            },

            computed: {
                outerRingSize() {
                    return this.size - this.containerPadding * 2
                },

                spinnerStyle() {
                    return {
                        height: `${this.size}px`,
                        width: `${this.size}px`,
                        padding: `${this.containerPadding}px`
                    }
                },

                ring1Style() {
                    return {
                        height: `${this.outerRingSize}px`,
                        width: `${this.outerRingSize}px`,
                        borderColor: this.color,
                        animationDuration: `${this.animationDuration}ms`
                    }
                },

                ring2Style() {
                    return {
                        height: `${this.outerRingSize * 0.65}px`,
                        width: `${this.outerRingSize * 0.65}px`,
                        borderColor: this.color,
                        animationDuration: `${this.animationDuration}ms`
                    }
                },

                ring3Style() {
                    return {
                        height: `${this.outerRingSize * 0.1}px`,
                        width: `${this.outerRingSize * 0.1}px`,
                        borderColor: this.color,
                        animationDuration: `${this.animationDuration}ms`
                    }
                }
            }
        });


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=template&id=002b7664&scoped=true&":
    /*!************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/AtomSpinner.vue?vue&type=template&id=002b7664&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c("div", {staticClass: "atom-spinner", style: _vm.spinnerStyle}, [
                _c("div", {staticClass: "spinner-inner"}, [
                    _c("div", {staticClass: "spinner-line", style: _vm.lineStyle}),
                    _vm._v(" "),
                    _c("div", {staticClass: "spinner-line", style: _vm.lineStyle}),
                    _vm._v(" "),
                    _c("div", {staticClass: "spinner-line", style: _vm.lineStyle}),
                    _vm._v(" "),
                    _c("div", {staticClass: "spinner-circle", style: _vm.circleStyle}, [
                        _vm._v("\n      ●\n    ")
                    ])
                ])
            ])
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=template&id=a1d20622&scoped=true&":
    /*!***********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/BreedingRhombusSpinner.vue?vue&type=template&id=a1d20622&scoped=true& ***!
  \***********************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "breeding-rhombus-spinner", style: _vm.spinnerStyle},
                [
                    _vm._l(_vm.rhombusesStyles, function (rs, index) {
                        return _c("div", {
                            key: index,
                            staticClass: "rhombus",
                            class: "child-" + (index + 1),
                            style: rs
                        })
                    }),
                    _vm._v(" "),
                    _c("div", {staticClass: "rhombus big", style: _vm.bigRhombusStyle})
                ],
                2
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=template&id=690fd6ce&scoped=true&":
    /*!**************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/CirclesToRhombusesSpinner.vue?vue&type=template&id=690fd6ce&scoped=true& ***!
  \**************************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "circles-to-rhombuses-spinner", style: _vm.spinnertStyle},
                _vm._l(_vm.circlesStyles, function (cs, index) {
                    return _c("div", {key: index, staticClass: "circle", style: cs})
                }),
                0
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=template&id=3fdbdfe9&scoped=true&":
    /*!*******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FingerprintSpinner.vue?vue&type=template&id=3fdbdfe9&scoped=true& ***!
  \*******************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "fingerprint-spinner", style: _vm.spinnerStyle},
                _vm._l(_vm.ringsStyles, function (rs, index) {
                    return _c("div", {key: index, staticClass: "spinner-ring", style: rs})
                }),
                0
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=template&id=3996aa1a&scoped=true&":
    /*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FlowerSpinner.vue?vue&type=template&id=3996aa1a&scoped=true& ***!
  \**************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c("div", {staticClass: "flower-spinner", style: _vm.spinnerStyle}, [
                _c(
                    "div",
                    {staticClass: "dots-container", style: _vm.dotsContainerStyle},
                    [
                        _c("div", {staticClass: "big-dot", style: _vm.biggerDotStyle}, [
                            _c("div", {staticClass: "small-dot", style: _vm.smallerDotStyle})
                        ])
                    ]
                )
            ])
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=template&id=dd350904&scoped=true&":
    /*!********************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FulfillingBouncingCircleSpinner.vue?vue&type=template&id=dd350904&scoped=true& ***!
  \********************************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {
                    staticClass: "fulfilling-bouncing-circle-spinner",
                    style: _vm.spinnerStyle
                },
                [
                    _c("div", {staticClass: "circle", style: _vm.circleStyle}),
                    _vm._v(" "),
                    _c("div", {staticClass: "orbit", style: _vm.orbitStyle})
                ]
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=template&id=38857dd6&scoped=true&":
    /*!************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/FulfillingSquareSpinner.vue?vue&type=template&id=38857dd6&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "fulfilling-square-spinner", style: _vm.spinnerStyle},
                [_c("div", {staticClass: "spinner-inner", style: _vm.spinnerInnerStyle})]
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=template&id=bf5bf2dc&scoped=true&":
    /*!******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/HalfCircleSpinner.vue?vue&type=template&id=bf5bf2dc&scoped=true& ***!
  \******************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "half-circle-spinner", style: _vm.spinnerStyle},
                [
                    _c("div", {staticClass: "circle circle-1", style: _vm.circle1Style}),
                    _vm._v(" "),
                    _c("div", {staticClass: "circle circle-2", style: _vm.circle2Style})
                ]
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=template&id=6a8af1dc&scoped=true&":
    /*!******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/HollowDotsSpinner.vue?vue&type=template&id=6a8af1dc&scoped=true& ***!
  \******************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "hollow-dots-spinner", style: _vm.spinnerStyle},
                _vm._l(_vm.dotsStyles, function (ds, index) {
                    return _c("div", {key: index, staticClass: "dot", style: ds})
                }),
                0
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=template&id=3b0bf4e6&scoped=true&":
    /*!***************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/IntersectingCirclesSpinner.vue?vue&type=template&id=3b0bf4e6&scoped=true& ***!
  \***************************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "intersecting-circles-spinner", style: _vm.spinnerStyle},
                [
                    _c(
                        "div",
                        {staticClass: "spinnerBlock", style: _vm.spinnerBlockStyle},
                        _vm._l(_vm.circleStyles, function (cs, index) {
                            return _c("span", {key: index, staticClass: "circle", style: cs})
                        }),
                        0
                    )
                ]
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=template&id=656608d9&scoped=true&":
    /*!************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/LoopingRhombusesSpinner.vue?vue&type=template&id=656608d9&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "looping-rhombuses-spinner", style: _vm.spinnerStyle},
                _vm._l(_vm.rhombusesStyles, function (rs, index) {
                    return _c("div", {
                        staticClass: "rhombus",
                        style: rs,
                        attrs: {ikey: index}
                    })
                }),
                0
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=template&id=2767e9c3&scoped=true&":
    /*!*************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/OrbitSpinner.vue?vue&type=template&id=2767e9c3&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c("div", {staticClass: "orbit-spinner", style: _vm.spinnerStyle}, [
                _c("div", {staticClass: "orbit one", style: _vm.orbitStyle}),
                _vm._v(" "),
                _c("div", {staticClass: "orbit two", style: _vm.orbitStyle}),
                _vm._v(" "),
                _c("div", {staticClass: "orbit three", style: _vm.orbitStyle})
            ])
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=template&id=51b91a07&scoped=true&":
    /*!*************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/PixelSpinner.vue?vue&type=template&id=51b91a07&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c("div", {staticClass: "pixel-spinner", style: _vm.spinnerStyle}, [
                _c("div", {
                    staticClass: "pixel-spinner-inner",
                    style: _vm.spinnerInnerStyle
                })
            ])
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=template&id=14cb8987&scoped=true&":
    /*!*************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/RadarSpinner.vue?vue&type=template&id=14cb8987&scoped=true& ***!
  \*************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "radar-spinner", style: _vm.spinnerStyle},
                _vm._l(_vm.circlesStyles, function (cs, index) {
                    return _c("div", {key: index, staticClass: "circle", style: cs}, [
                        _c(
                            "div",
                            {
                                staticClass: "circle-inner-container",
                                style: _vm.circleInnerContainerStyle
                            },
                            [
                                _c("div", {
                                    staticClass: "circle-inner",
                                    style: _vm.circleInnerStyle
                                })
                            ]
                        )
                    ])
                }),
                0
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=template&id=0f830af4&scoped=true&":
    /*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/ScalingSquaresSpinner.vue?vue&type=template&id=0f830af4&scoped=true& ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "scaling-squares-spinner", style: _vm.spinnerStyle},
                _vm._l(_vm.squaresStyles, function (ss, index) {
                    return _c("div", {
                        key: index,
                        staticClass: "square",
                        class: "square-" + (index + 1),
                        style: ss
                    })
                }),
                0
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=template&id=4cafbc50&scoped=true&":
    /*!**************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SelfBuildingSquareSpinner.vue?vue&type=template&id=4cafbc50&scoped=true& ***!
  \**************************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "self-building-square-spinner", style: _vm.spinnerStyle},
                _vm._l(_vm.squaresStyles, function (ss, index) {
                    return _c("div", {
                        key: index,
                        staticClass: "square",
                        class: {clear: index && index % 3 === 0},
                        style: ss
                    })
                }),
                0
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=template&id=5552c086&scoped=true&":
    /*!*****************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SemipolarSpinner.vue?vue&type=template&id=5552c086&scoped=true& ***!
  \*****************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "semipolar-spinner", style: _vm.spinnerStyle},
                _vm._l(_vm.ringsStyles, function (rs, index) {
                    return _c("div", {key: index, staticClass: "ring", style: rs})
                }),
                0
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=template&id=cc2e81b0&scoped=true&":
    /*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SpringSpinner.vue?vue&type=template&id=cc2e81b0&scoped=true& ***!
  \**************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c("div", {staticClass: "spring-spinner", style: _vm.spinnerStyle}, [
                _c(
                    "div",
                    {staticClass: "spring-spinner-part top", style: _vm.spinnerPartStyle},
                    [
                        _c("div", {
                            staticClass: "spring-spinner-rotator",
                            style: _vm.rotatorStyle
                        })
                    ]
                ),
                _vm._v(" "),
                _c(
                    "div",
                    {
                        staticClass: "spring-spinner-part bottom",
                        style: _vm.spinnerPartStyle
                    },
                    [
                        _c("div", {
                            staticClass: "spring-spinner-rotator",
                            style: _vm.rotatorStyle
                        })
                    ]
                )
            ])
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=template&id=559f9208&scoped=true&":
    /*!***********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/SwappingSquaresSpinner.vue?vue&type=template&id=559f9208&scoped=true& ***!
  \***********************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "swapping-squares-spinner", style: _vm.spinnerStyle},
                _vm._l(_vm.squaresStyles, function (ss, index) {
                    return _c("div", {
                        key: index,
                        staticClass: "square",
                        class: "square-" + (index + 1),
                        style: ss
                    })
                }),
                0
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=template&id=e647c006&scoped=true&":
    /*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./node_modules/epic-spinners/src/components/lib/TrinityRingsSpinner.vue?vue&type=template&id=e647c006&scoped=true& ***!
  \********************************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "trinity-rings-spinner", style: _vm.spinnerStyle},
                [
                    _c("div", {staticClass: "circle circle1", style: _vm.ring1Style}),
                    _vm._v(" "),
                    _c("div", {staticClass: "circle circle2", style: _vm.ring2Style}),
                    _vm._v(" "),
                    _c("div", {staticClass: "circle circle3", style: _vm.ring3Style})
                ]
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=template&id=dbb15004&":
    /*!***************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=template&id=dbb15004& ***!
  \***************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "row"},
                [
                    _vm.isLoading
                        ? _c(
                        "div",
                        {staticStyle: {margin: "auto", width: "30px"}},
                        [
                            _c("half-circle-spinner", {
                                attrs: {
                                    "animation-duration": 1000,
                                    size: 15,
                                    color: "#808080"
                                }
                            })
                        ],
                        1
                        )
                        : _vm._e(),
                    _vm._v(" "),
                    _vm._l(_vm.data, function (item) {
                        return !_vm.isLoading && _vm.data.length
                            ? _c(
                                "div",
                                {key: item.id, staticClass: "col-md-3 col-sm-6 container-grid"},
                                [
                                    _c("div", {staticClass: "grid-in"}, [
                                        _c("div", {staticClass: "grid-shadow"}, [
                                            _c(
                                                "div",
                                                {
                                                    staticClass: "hourseitem",
                                                    staticStyle: {"margin-top": "0"}
                                                },
                                                [
                                                    _c("div", {staticClass: "blii"}, [
                                                        _c("div", {staticClass: "img"}, [
                                                            _c("img", {
                                                                staticClass: "thumb",
                                                                staticStyle: {"border-radius": "0"},
                                                                attrs: {
                                                                    "data-src": item.image,
                                                                    src: item.image,
                                                                    alt: item.name
                                                                }
                                                            })
                                                        ]),
                                                        _vm._v(" "),
                                                        _c("a", {
                                                            staticClass: "linkdetail",
                                                            attrs: {href: item.url}
                                                        })
                                                    ])
                                                ]
                                            ),
                                            _vm._v(" "),
                                            _c("div", {staticClass: "grid-h"}, [
                                                _c("div", {staticClass: "blog-title"}, [
                                                    _c("a", {attrs: {href: item.url}}, [
                                                        _c("h2", [_vm._v(_vm._s(item.name))])
                                                    ])
                                                ]),
                                                _vm._v(" "),
                                                _c("div", {staticClass: "blog-excerpt"}, [
                                                    _c("p", [_vm._v(_vm._s(item.description))])
                                                ])
                                            ])
                                        ])
                                    ])
                                ]
                            )
                            : _vm._e()
                    })
                ],
                2
            )
        }
        var staticRenderFns = []
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=template&id=02cccb88&":
    /*!*******************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=template&id=02cccb88& ***!
  \*******************************************************************************************************************************************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return render;
        });
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return staticRenderFns;
        });
        var render = function () {
            var _vm = this
            var _h = _vm.$createElement
            var _c = _vm._self._c || _h
            return _c(
                "div",
                {staticClass: "row rowm10"},
                [
                    _vm.isLoading
                        ? _c(
                        "div",
                        {staticStyle: {margin: "auto", width: "30px"}},
                        [
                            _c("half-circle-spinner", {
                                attrs: {
                                    "animation-duration": 1000,
                                    size: 15,
                                    color: "#808080"
                                }
                            })
                        ],
                        1
                        )
                        : _vm._e(),
                    _vm._v(" "),
                    _vm.show_empty_string && !_vm.isLoading && !_vm.data.length
                        ? _c("div", {staticClass: "col-12 text-center"}, [
                            _c("span", [_vm._v(_vm._s(_vm.__("No property found")) + "!")])
                        ])
                        : _vm._e(),
                    _vm._v(" "),
                    _vm._l(_vm.data, function (item) {
                        return !_vm.isLoading && _vm.data.length
                            ? _c(
                                "div",
                                {key: item.id, staticClass: "col-sm-4 col-md-3 colm10"},
                                [
                                    _c("div", {staticClass: "hourseitem"}, [
                                        _c("div", {staticClass: "blii"}, [
                                            _c("div", {staticClass: "img"}, [
                                                _c("img", {
                                                    staticClass: "thumb",
                                                    attrs: {
                                                        "data-src": item.image,
                                                        src: item.image,
                                                        alt: item.name
                                                    }
                                                })
                                            ]),
                                            _vm._v(" "),
                                            _c("a", {
                                                staticClass: "linkdetail",
                                                attrs: {href: item.url}
                                            }),
                                            _vm._v(" "),
                                            _c("div", {
                                                staticClass: "status",
                                                domProps: {
                                                    innerHTML: _vm._s(
                                                        _vm.$sanitize(item.status_html, {
                                                            allowedTags: ["span"],
                                                            allowedAttributes: {span: ["class"]}
                                                        })
                                                    )
                                                }
                                            })
                                        ]),
                                        _vm._v(" "),
                                        _c("div", {staticClass: "info"}, [
                                            _c("h3", [
                                                _c("a", {attrs: {href: item.url}}, [
                                                    _vm._v(_vm._s(item.name))
                                                ])
                                            ]),
                                            _vm._v(" "),
                                            _c("p", {staticClass: "city"}, [
                                                _c("i", {
                                                    staticClass: "fas fa-map-marker-alt",
                                                    staticStyle: {opacity: "0.7"}
                                                }),
                                                _vm._v("  " + _vm._s(item.location))
                                            ]),
                                            _vm._v(" "),
                                            _c("p", {staticClass: "bold500"}, [
                                                _vm._v(
                                                    _vm._s(_vm.__("Price")) +
                                                    ": " +
                                                    _vm._s(item.price) +
                                                    " "
                                                )
                                            ]),
                                            _vm._v(" "),
                                            _c("p", {staticClass: "threemt bold500"}, [
                                                _c(
                                                    "span",
                                                    {
                                                        attrs: {
                                                            "data-toggle": "tooltip",
                                                            "data-placement": "top",
                                                            "data-original-title": _vm.__("Number of rooms")
                                                        }
                                                    },
                                                    [
                                                        _vm._m(0, true),
                                                        _vm._v(" "),
                                                        _c("i", {staticClass: "vti"}, [
                                                            _vm._v(_vm._s(item.number_bedroom))
                                                        ])
                                                    ]
                                                ),
                                                _vm._v(" "),
                                                _c(
                                                    "span",
                                                    {
                                                        attrs: {
                                                            "data-toggle": "tooltip",
                                                            "data-placement": "top",
                                                            "data-original-title": _vm.__(
                                                                "Number of rest rooms"
                                                            )
                                                        }
                                                    },
                                                    [
                                                        _vm._m(1, true),
                                                        _vm._v(" "),
                                                        _c("i", {staticClass: "vti"}, [
                                                            _vm._v(_vm._s(item.number_bathroom))
                                                        ])
                                                    ]
                                                ),
                                                _vm._v(" "),
                                                _c(
                                                    "span",
                                                    {
                                                        attrs: {
                                                            "data-toggle": "tooltip",
                                                            "data-placement": "top",
                                                            "data-original-title": _vm.__("Square")
                                                        }
                                                    },
                                                    [
                                                        _vm._m(2, true),
                                                        _vm._v(" "),
                                                        _c("i", {staticClass: "vti"}, [
                                                            _vm._v(_vm._s(item.square) + " m2")
                                                        ])
                                                    ]
                                                )
                                            ])
                                        ])
                                    ])
                                ]
                            )
                            : _vm._e()
                    })
                ],
                2
            )
        }
        var staticRenderFns = [
            function () {
                var _vm = this
                var _h = _vm.$createElement
                var _c = _vm._self._c || _h
                return _c("i", [
                    _c("img", {
                        attrs: {src: "/themes/flex-home/images/bed.svg", alt: "icon"}
                    })
                ])
            },
            function () {
                var _vm = this
                var _h = _vm.$createElement
                var _c = _vm._self._c || _h
                return _c("i", [
                    _c("img", {
                        attrs: {src: "/themes/flex-home/images/bath.svg", alt: "icon"}
                    })
                ])
            },
            function () {
                var _vm = this
                var _h = _vm.$createElement
                var _c = _vm._self._c || _h
                return _c("i", [
                    _c("img", {
                        attrs: {src: "/themes/flex-home/images/area.svg", alt: "icon"}
                    })
                ])
            }
        ]
        render._withStripped = true


        /***/
    }),

    /***/
    "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
    /*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "default", function () {
            return normalizeComponent;
        });
        /* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

        function normalizeComponent(
            scriptExports,
            render,
            staticRenderFns,
            functionalTemplate,
            injectStyles,
            scopeId,
            moduleIdentifier, /* server only */
            shadowMode /* vue-cli only */
        ) {
            // Vue.extend constructor export interop
            var options = typeof scriptExports === 'function'
                ? scriptExports.options
                : scriptExports

            // render functions
            if (render) {
                options.render = render
                options.staticRenderFns = staticRenderFns
                options._compiled = true
            }

            // functional template
            if (functionalTemplate) {
                options.functional = true
            }

            // scopedId
            if (scopeId) {
                options._scopeId = 'data-v-' + scopeId
            }

            var hook
            if (moduleIdentifier) { // server build
                hook = function (context) {
                    // 2.3 injection
                    context =
                        context || // cached call
                        (this.$vnode && this.$vnode.ssrContext) || // stateful
                        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
                    // 2.2 with runInNewContext: true
                    if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                        context = __VUE_SSR_CONTEXT__
                    }
                    // inject component styles
                    if (injectStyles) {
                        injectStyles.call(this, context)
                    }
                    // register component module identifier for async chunk inferrence
                    if (context && context._registeredComponents) {
                        context._registeredComponents.add(moduleIdentifier)
                    }
                }
                // used by ssr in case component is cached and beforeCreate
                // never gets called
                options._ssrRegister = hook
            } else if (injectStyles) {
                hook = shadowMode
                    ? function () {
                        injectStyles.call(this, this.$root.$options.shadowRoot)
                    }
                    : injectStyles
            }

            if (hook) {
                if (options.functional) {
                    // for template-only hot-reload because in that case the render fn doesn't
                    // go through the normalizer
                    options._injectStyles = hook
                    // register for functional component in vue file
                    var originalRender = options.render
                    options.render = function renderWithStyleInjection(h, context) {
                        hook.call(context)
                        return originalRender(h, context)
                    }
                } else {
                    // inject component registration as beforeCreate hook
                    var existing = options.beforeCreate
                    options.beforeCreate = existing
                        ? [].concat(existing, hook)
                        : [hook]
                }
            }

            return {
                exports: scriptExports,
                options: options
            }
        }


        /***/
    }),

    /***/
    "./node_modules/vue/dist/vue.common.dev.js":
    /*!*************************************************!*\
  !*** ./node_modules/vue/dist/vue.common.dev.js ***!
  \*************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        "use strict";
        /* WEBPACK VAR INJECTION */
        (function (global, setImmediate) {/*!
 * Vue.js v2.6.11
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */


            /*  */

            var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
            function isUndef(v) {
                return v === undefined || v === null
            }

            function isDef(v) {
                return v !== undefined && v !== null
            }

            function isTrue(v) {
                return v === true
            }

            function isFalse(v) {
                return v === false
            }

            /**
             * Check if value is primitive.
             */
            function isPrimitive(value) {
                return (
                    typeof value === 'string' ||
                    typeof value === 'number' ||
                    // $flow-disable-line
                    typeof value === 'symbol' ||
                    typeof value === 'boolean'
                )
            }

            /**
             * Quick object check - this is primarily used to tell
             * Objects from primitive values when we know the value
             * is a JSON-compliant type.
             */
            function isObject(obj) {
                return obj !== null && typeof obj === 'object'
            }

            /**
             * Get the raw type string of a value, e.g., [object Object].
             */
            var _toString = Object.prototype.toString;

            function toRawType(value) {
                return _toString.call(value).slice(8, -1)
            }

            /**
             * Strict object type check. Only returns true
             * for plain JavaScript objects.
             */
            function isPlainObject(obj) {
                return _toString.call(obj) === '[object Object]'
            }

            function isRegExp(v) {
                return _toString.call(v) === '[object RegExp]'
            }

            /**
             * Check if val is a valid array index.
             */
            function isValidArrayIndex(val) {
                var n = parseFloat(String(val));
                return n >= 0 && Math.floor(n) === n && isFinite(val)
            }

            function isPromise(val) {
                return (
                    isDef(val) &&
                    typeof val.then === 'function' &&
                    typeof val.catch === 'function'
                )
            }

            /**
             * Convert a value to a string that is actually rendered.
             */
            function toString(val) {
                return val == null
                    ? ''
                    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
                        ? JSON.stringify(val, null, 2)
                        : String(val)
            }

            /**
             * Convert an input value to a number for persistence.
             * If the conversion fails, return original string.
             */
            function toNumber(val) {
                var n = parseFloat(val);
                return isNaN(n) ? val : n
            }

            /**
             * Make a map and return a function for checking if a key
             * is in that map.
             */
            function makeMap(
                str,
                expectsLowerCase
            ) {
                var map = Object.create(null);
                var list = str.split(',');
                for (var i = 0; i < list.length; i++) {
                    map[list[i]] = true;
                }
                return expectsLowerCase
                    ? function (val) {
                        return map[val.toLowerCase()];
                    }
                    : function (val) {
                        return map[val];
                    }
            }

            /**
             * Check if a tag is a built-in tag.
             */
            var isBuiltInTag = makeMap('slot,component', true);

            /**
             * Check if an attribute is a reserved attribute.
             */
            var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

            /**
             * Remove an item from an array.
             */
            function remove(arr, item) {
                if (arr.length) {
                    var index = arr.indexOf(item);
                    if (index > -1) {
                        return arr.splice(index, 1)
                    }
                }
            }

            /**
             * Check whether an object has the property.
             */
            var hasOwnProperty = Object.prototype.hasOwnProperty;

            function hasOwn(obj, key) {
                return hasOwnProperty.call(obj, key)
            }

            /**
             * Create a cached version of a pure function.
             */
            function cached(fn) {
                var cache = Object.create(null);
                return (function cachedFn(str) {
                    var hit = cache[str];
                    return hit || (cache[str] = fn(str))
                })
            }

            /**
             * Camelize a hyphen-delimited string.
             */
            var camelizeRE = /-(\w)/g;
            var camelize = cached(function (str) {
                return str.replace(camelizeRE, function (_, c) {
                    return c ? c.toUpperCase() : '';
                })
            });

            /**
             * Capitalize a string.
             */
            var capitalize = cached(function (str) {
                return str.charAt(0).toUpperCase() + str.slice(1)
            });

            /**
             * Hyphenate a camelCase string.
             */
            var hyphenateRE = /\B([A-Z])/g;
            var hyphenate = cached(function (str) {
                return str.replace(hyphenateRE, '-$1').toLowerCase()
            });

            /**
             * Simple bind polyfill for environments that do not support it,
             * e.g., PhantomJS 1.x. Technically, we don't need this anymore
             * since native bind is now performant enough in most browsers.
             * But removing it would mean breaking code that was able to run in
             * PhantomJS 1.x, so this must be kept for backward compatibility.
             */

            /* istanbul ignore next */
            function polyfillBind(fn, ctx) {
                function boundFn(a) {
                    var l = arguments.length;
                    return l
                        ? l > 1
                            ? fn.apply(ctx, arguments)
                            : fn.call(ctx, a)
                        : fn.call(ctx)
                }

                boundFn._length = fn.length;
                return boundFn
            }

            function nativeBind(fn, ctx) {
                return fn.bind(ctx)
            }

            var bind = Function.prototype.bind
                ? nativeBind
                : polyfillBind;

            /**
             * Convert an Array-like object to a real Array.
             */
            function toArray(list, start) {
                start = start || 0;
                var i = list.length - start;
                var ret = new Array(i);
                while (i--) {
                    ret[i] = list[i + start];
                }
                return ret
            }

            /**
             * Mix properties into target object.
             */
            function extend(to, _from) {
                for (var key in _from) {
                    to[key] = _from[key];
                }
                return to
            }

            /**
             * Merge an Array of Objects into a single Object.
             */
            function toObject(arr) {
                var res = {};
                for (var i = 0; i < arr.length; i++) {
                    if (arr[i]) {
                        extend(res, arr[i]);
                    }
                }
                return res
            }

            /* eslint-disable no-unused-vars */

            /**
             * Perform no operation.
             * Stubbing args to make Flow happy without leaving useless transpiled code
             * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
             */
            function noop(a, b, c) {
            }

            /**
             * Always return false.
             */
            var no = function (a, b, c) {
                return false;
            };

            /* eslint-enable no-unused-vars */

            /**
             * Return the same value.
             */
            var identity = function (_) {
                return _;
            };

            /**
             * Generate a string containing static keys from compiler modules.
             */
            function genStaticKeys(modules) {
                return modules.reduce(function (keys, m) {
                    return keys.concat(m.staticKeys || [])
                }, []).join(',')
            }

            /**
             * Check if two values are loosely equal - that is,
             * if they are plain objects, do they have the same shape?
             */
            function looseEqual(a, b) {
                if (a === b) {
                    return true
                }
                var isObjectA = isObject(a);
                var isObjectB = isObject(b);
                if (isObjectA && isObjectB) {
                    try {
                        var isArrayA = Array.isArray(a);
                        var isArrayB = Array.isArray(b);
                        if (isArrayA && isArrayB) {
                            return a.length === b.length && a.every(function (e, i) {
                                return looseEqual(e, b[i])
                            })
                        } else if (a instanceof Date && b instanceof Date) {
                            return a.getTime() === b.getTime()
                        } else if (!isArrayA && !isArrayB) {
                            var keysA = Object.keys(a);
                            var keysB = Object.keys(b);
                            return keysA.length === keysB.length && keysA.every(function (key) {
                                return looseEqual(a[key], b[key])
                            })
                        } else {
                            /* istanbul ignore next */
                            return false
                        }
                    } catch (e) {
                        /* istanbul ignore next */
                        return false
                    }
                } else if (!isObjectA && !isObjectB) {
                    return String(a) === String(b)
                } else {
                    return false
                }
            }

            /**
             * Return the first index at which a loosely equal value can be
             * found in the array (if value is a plain object, the array must
             * contain an object of the same shape), or -1 if it is not present.
             */
            function looseIndexOf(arr, val) {
                for (var i = 0; i < arr.length; i++) {
                    if (looseEqual(arr[i], val)) {
                        return i
                    }
                }
                return -1
            }

            /**
             * Ensure a function is called only once.
             */
            function once(fn) {
                var called = false;
                return function () {
                    if (!called) {
                        called = true;
                        fn.apply(this, arguments);
                    }
                }
            }

            var SSR_ATTR = 'data-server-rendered';

            var ASSET_TYPES = [
                'component',
                'directive',
                'filter'
            ];

            var LIFECYCLE_HOOKS = [
                'beforeCreate',
                'created',
                'beforeMount',
                'mounted',
                'beforeUpdate',
                'updated',
                'beforeDestroy',
                'destroyed',
                'activated',
                'deactivated',
                'errorCaptured',
                'serverPrefetch'
            ];

            /*  */


            var config = ({
                /**
                 * Option merge strategies (used in core/util/options)
                 */
                // $flow-disable-line
                optionMergeStrategies: Object.create(null),

                /**
                 * Whether to suppress warnings.
                 */
                silent: false,

                /**
                 * Show production mode tip message on boot?
                 */
                productionTip: "development" !== 'production',

                /**
                 * Whether to enable devtools
                 */
                devtools: "development" !== 'production',

                /**
                 * Whether to record perf
                 */
                performance: false,

                /**
                 * Error handler for watcher errors
                 */
                errorHandler: null,

                /**
                 * Warn handler for watcher warns
                 */
                warnHandler: null,

                /**
                 * Ignore certain custom elements
                 */
                ignoredElements: [],

                /**
                 * Custom user key aliases for v-on
                 */
                // $flow-disable-line
                keyCodes: Object.create(null),

                /**
                 * Check if a tag is reserved so that it cannot be registered as a
                 * component. This is platform-dependent and may be overwritten.
                 */
                isReservedTag: no,

                /**
                 * Check if an attribute is reserved so that it cannot be used as a component
                 * prop. This is platform-dependent and may be overwritten.
                 */
                isReservedAttr: no,

                /**
                 * Check if a tag is an unknown element.
                 * Platform-dependent.
                 */
                isUnknownElement: no,

                /**
                 * Get the namespace of an element
                 */
                getTagNamespace: noop,

                /**
                 * Parse the real tag name for the specific platform.
                 */
                parsePlatformTagName: identity,

                /**
                 * Check if an attribute must be bound using property, e.g. value
                 * Platform-dependent.
                 */
                mustUseProp: no,

                /**
                 * Perform updates asynchronously. Intended to be used by Vue Test Utils
                 * This will significantly reduce performance if set to false.
                 */
                async: true,

                /**
                 * Exposed for legacy reasons
                 */
                _lifecycleHooks: LIFECYCLE_HOOKS
            });

            /*  */

            /**
             * unicode letters used for parsing html tags, component names and property paths.
             * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
             * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
             */
            var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

            /**
             * Check if a string starts with $ or _
             */
            function isReserved(str) {
                var c = (str + '').charCodeAt(0);
                return c === 0x24 || c === 0x5F
            }

            /**
             * Define a property.
             */
            function def(obj, key, val, enumerable) {
                Object.defineProperty(obj, key, {
                    value: val,
                    enumerable: !!enumerable,
                    writable: true,
                    configurable: true
                });
            }

            /**
             * Parse simple path.
             */
            var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));

            function parsePath(path) {
                if (bailRE.test(path)) {
                    return
                }
                var segments = path.split('.');
                return function (obj) {
                    for (var i = 0; i < segments.length; i++) {
                        if (!obj) {
                            return
                        }
                        obj = obj[segments[i]];
                    }
                    return obj
                }
            }

            /*  */

// can we use __proto__?
            var hasProto = '__proto__' in {};

// Browser environment sniffing
            var inBrowser = typeof window !== 'undefined';
            var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
            var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
            var UA = inBrowser && window.navigator.userAgent.toLowerCase();
            var isIE = UA && /msie|trident/.test(UA);
            var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
            var isEdge = UA && UA.indexOf('edge/') > 0;
            var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
            var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
            var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
            var isPhantomJS = UA && /phantomjs/.test(UA);
            var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
            var nativeWatch = ({}).watch;

            var supportsPassive = false;
            if (inBrowser) {
                try {
                    var opts = {};
                    Object.defineProperty(opts, 'passive', ({
                        get: function get() {
                            /* istanbul ignore next */
                            supportsPassive = true;
                        }
                    })); // https://github.com/facebook/flow/issues/285
                    window.addEventListener('test-passive', null, opts);
                } catch (e) {
                }
            }

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
            var _isServer;
            var isServerRendering = function () {
                if (_isServer === undefined) {
                    /* istanbul ignore if */
                    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
                        // detect presence of vue-server-renderer and avoid
                        // Webpack shimming the process
                        _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
                    } else {
                        _isServer = false;
                    }
                }
                return _isServer
            };

// detect devtools
            var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

            /* istanbul ignore next */
            function isNative(Ctor) {
                return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
            }

            var hasSymbol =
                typeof Symbol !== 'undefined' && isNative(Symbol) &&
                typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

            var _Set;
            /* istanbul ignore if */ // $flow-disable-line
            if (typeof Set !== 'undefined' && isNative(Set)) {
                // use native Set when available.
                _Set = Set;
            } else {
                // a non-standard Set polyfill that only works with primitive keys.
                _Set = /*@__PURE__*/(function () {
                    function Set() {
                        this.set = Object.create(null);
                    }

                    Set.prototype.has = function has(key) {
                        return this.set[key] === true
                    };
                    Set.prototype.add = function add(key) {
                        this.set[key] = true;
                    };
                    Set.prototype.clear = function clear() {
                        this.set = Object.create(null);
                    };

                    return Set;
                }());
            }

            /*  */

            var warn = noop;
            var tip = noop;
            var generateComponentTrace = (noop); // work around flow check
            var formatComponentName = (noop);

            {
                var hasConsole = typeof console !== 'undefined';
                var classifyRE = /(?:^|[-_])(\w)/g;
                var classify = function (str) {
                    return str
                        .replace(classifyRE, function (c) {
                            return c.toUpperCase();
                        })
                        .replace(/[-_]/g, '');
                };

                warn = function (msg, vm) {
                    var trace = vm ? generateComponentTrace(vm) : '';

                    if (config.warnHandler) {
                        config.warnHandler.call(null, msg, vm, trace);
                    } else if (hasConsole && (!config.silent)) {
                        console.error(("[Vue warn]: " + msg + trace));
                    }
                };

                tip = function (msg, vm) {
                    if (hasConsole && (!config.silent)) {
                        console.warn("[Vue tip]: " + msg + (
                            vm ? generateComponentTrace(vm) : ''
                        ));
                    }
                };

                formatComponentName = function (vm, includeFile) {
                    if (vm.$root === vm) {
                        return '<Root>'
                    }
                    var options = typeof vm === 'function' && vm.cid != null
                        ? vm.options
                        : vm._isVue
                            ? vm.$options || vm.constructor.options
                            : vm;
                    var name = options.name || options._componentTag;
                    var file = options.__file;
                    if (!name && file) {
                        var match = file.match(/([^/\\]+)\.vue$/);
                        name = match && match[1];
                    }

                    return (
                        (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
                        (file && includeFile !== false ? (" at " + file) : '')
                    )
                };

                var repeat = function (str, n) {
                    var res = '';
                    while (n) {
                        if (n % 2 === 1) {
                            res += str;
                        }
                        if (n > 1) {
                            str += str;
                        }
                        n >>= 1;
                    }
                    return res
                };

                generateComponentTrace = function (vm) {
                    if (vm._isVue && vm.$parent) {
                        var tree = [];
                        var currentRecursiveSequence = 0;
                        while (vm) {
                            if (tree.length > 0) {
                                var last = tree[tree.length - 1];
                                if (last.constructor === vm.constructor) {
                                    currentRecursiveSequence++;
                                    vm = vm.$parent;
                                    continue
                                } else if (currentRecursiveSequence > 0) {
                                    tree[tree.length - 1] = [last, currentRecursiveSequence];
                                    currentRecursiveSequence = 0;
                                }
                            }
                            tree.push(vm);
                            vm = vm.$parent;
                        }
                        return '\n\nfound in\n\n' + tree
                            .map(function (vm, i) {
                                return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
                                    ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
                                    : formatComponentName(vm)));
                            })
                            .join('\n')
                    } else {
                        return ("\n\n(found in " + (formatComponentName(vm)) + ")")
                    }
                };
            }

            /*  */

            var uid = 0;

            /**
             * A dep is an observable that can have multiple
             * directives subscribing to it.
             */
            var Dep = function Dep() {
                this.id = uid++;
                this.subs = [];
            };

            Dep.prototype.addSub = function addSub(sub) {
                this.subs.push(sub);
            };

            Dep.prototype.removeSub = function removeSub(sub) {
                remove(this.subs, sub);
            };

            Dep.prototype.depend = function depend() {
                if (Dep.target) {
                    Dep.target.addDep(this);
                }
            };

            Dep.prototype.notify = function notify() {
                // stabilize the subscriber list first
                var subs = this.subs.slice();
                if (!config.async) {
                    // subs aren't sorted in scheduler if not running async
                    // we need to sort them now to make sure they fire in correct
                    // order
                    subs.sort(function (a, b) {
                        return a.id - b.id;
                    });
                }
                for (var i = 0, l = subs.length; i < l; i++) {
                    subs[i].update();
                }
            };

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
            Dep.target = null;
            var targetStack = [];

            function pushTarget(target) {
                targetStack.push(target);
                Dep.target = target;
            }

            function popTarget() {
                targetStack.pop();
                Dep.target = targetStack[targetStack.length - 1];
            }

            /*  */

            var VNode = function VNode(
                tag,
                data,
                children,
                text,
                elm,
                context,
                componentOptions,
                asyncFactory
            ) {
                this.tag = tag;
                this.data = data;
                this.children = children;
                this.text = text;
                this.elm = elm;
                this.ns = undefined;
                this.context = context;
                this.fnContext = undefined;
                this.fnOptions = undefined;
                this.fnScopeId = undefined;
                this.key = data && data.key;
                this.componentOptions = componentOptions;
                this.componentInstance = undefined;
                this.parent = undefined;
                this.raw = false;
                this.isStatic = false;
                this.isRootInsert = true;
                this.isComment = false;
                this.isCloned = false;
                this.isOnce = false;
                this.asyncFactory = asyncFactory;
                this.asyncMeta = undefined;
                this.isAsyncPlaceholder = false;
            };

            var prototypeAccessors = {child: {configurable: true}};

// DEPRECATED: alias for componentInstance for backwards compat.
            /* istanbul ignore next */
            prototypeAccessors.child.get = function () {
                return this.componentInstance
            };

            Object.defineProperties(VNode.prototype, prototypeAccessors);

            var createEmptyVNode = function (text) {
                if (text === void 0) text = '';

                var node = new VNode();
                node.text = text;
                node.isComment = true;
                return node
            };

            function createTextVNode(val) {
                return new VNode(undefined, undefined, undefined, String(val))
            }

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
            function cloneVNode(vnode) {
                var cloned = new VNode(
                    vnode.tag,
                    vnode.data,
                    // #7975
                    // clone children array to avoid mutating original in case of cloning
                    // a child.
                    vnode.children && vnode.children.slice(),
                    vnode.text,
                    vnode.elm,
                    vnode.context,
                    vnode.componentOptions,
                    vnode.asyncFactory
                );
                cloned.ns = vnode.ns;
                cloned.isStatic = vnode.isStatic;
                cloned.key = vnode.key;
                cloned.isComment = vnode.isComment;
                cloned.fnContext = vnode.fnContext;
                cloned.fnOptions = vnode.fnOptions;
                cloned.fnScopeId = vnode.fnScopeId;
                cloned.asyncMeta = vnode.asyncMeta;
                cloned.isCloned = true;
                return cloned
            }

            /*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

            var arrayProto = Array.prototype;
            var arrayMethods = Object.create(arrayProto);

            var methodsToPatch = [
                'push',
                'pop',
                'shift',
                'unshift',
                'splice',
                'sort',
                'reverse'
            ];

            /**
             * Intercept mutating methods and emit events
             */
            methodsToPatch.forEach(function (method) {
                // cache original method
                var original = arrayProto[method];
                def(arrayMethods, method, function mutator() {
                    var args = [], len = arguments.length;
                    while (len--) args[len] = arguments[len];

                    var result = original.apply(this, args);
                    var ob = this.__ob__;
                    var inserted;
                    switch (method) {
                        case 'push':
                        case 'unshift':
                            inserted = args;
                            break
                        case 'splice':
                            inserted = args.slice(2);
                            break
                    }
                    if (inserted) {
                        ob.observeArray(inserted);
                    }
                    // notify change
                    ob.dep.notify();
                    return result
                });
            });

            /*  */

            var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

            /**
             * In some cases we may want to disable observation inside a component's
             * update computation.
             */
            var shouldObserve = true;

            function toggleObserving(value) {
                shouldObserve = value;
            }

            /**
             * Observer class that is attached to each observed
             * object. Once attached, the observer converts the target
             * object's property keys into getter/setters that
             * collect dependencies and dispatch updates.
             */
            var Observer = function Observer(value) {
                this.value = value;
                this.dep = new Dep();
                this.vmCount = 0;
                def(value, '__ob__', this);
                if (Array.isArray(value)) {
                    if (hasProto) {
                        protoAugment(value, arrayMethods);
                    } else {
                        copyAugment(value, arrayMethods, arrayKeys);
                    }
                    this.observeArray(value);
                } else {
                    this.walk(value);
                }
            };

            /**
             * Walk through all properties and convert them into
             * getter/setters. This method should only be called when
             * value type is Object.
             */
            Observer.prototype.walk = function walk(obj) {
                var keys = Object.keys(obj);
                for (var i = 0; i < keys.length; i++) {
                    defineReactive$$1(obj, keys[i]);
                }
            };

            /**
             * Observe a list of Array items.
             */
            Observer.prototype.observeArray = function observeArray(items) {
                for (var i = 0, l = items.length; i < l; i++) {
                    observe(items[i]);
                }
            };

// helpers

            /**
             * Augment a target Object or Array by intercepting
             * the prototype chain using __proto__
             */
            function protoAugment(target, src) {
                /* eslint-disable no-proto */
                target.__proto__ = src;
                /* eslint-enable no-proto */
            }

            /**
             * Augment a target Object or Array by defining
             * hidden properties.
             */

            /* istanbul ignore next */
            function copyAugment(target, src, keys) {
                for (var i = 0, l = keys.length; i < l; i++) {
                    var key = keys[i];
                    def(target, key, src[key]);
                }
            }

            /**
             * Attempt to create an observer instance for a value,
             * returns the new observer if successfully observed,
             * or the existing observer if the value already has one.
             */
            function observe(value, asRootData) {
                if (!isObject(value) || value instanceof VNode) {
                    return
                }
                var ob;
                if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
                    ob = value.__ob__;
                } else if (
                    shouldObserve &&
                    !isServerRendering() &&
                    (Array.isArray(value) || isPlainObject(value)) &&
                    Object.isExtensible(value) &&
                    !value._isVue
                ) {
                    ob = new Observer(value);
                }
                if (asRootData && ob) {
                    ob.vmCount++;
                }
                return ob
            }

            /**
             * Define a reactive property on an Object.
             */
            function defineReactive$$1(
                obj,
                key,
                val,
                customSetter,
                shallow
            ) {
                var dep = new Dep();

                var property = Object.getOwnPropertyDescriptor(obj, key);
                if (property && property.configurable === false) {
                    return
                }

                // cater for pre-defined getter/setters
                var getter = property && property.get;
                var setter = property && property.set;
                if ((!getter || setter) && arguments.length === 2) {
                    val = obj[key];
                }

                var childOb = !shallow && observe(val);
                Object.defineProperty(obj, key, {
                    enumerable: true,
                    configurable: true,
                    get: function reactiveGetter() {
                        var value = getter ? getter.call(obj) : val;
                        if (Dep.target) {
                            dep.depend();
                            if (childOb) {
                                childOb.dep.depend();
                                if (Array.isArray(value)) {
                                    dependArray(value);
                                }
                            }
                        }
                        return value
                    },
                    set: function reactiveSetter(newVal) {
                        var value = getter ? getter.call(obj) : val;
                        /* eslint-disable no-self-compare */
                        if (newVal === value || (newVal !== newVal && value !== value)) {
                            return
                        }
                        /* eslint-enable no-self-compare */
                        if (customSetter) {
                            customSetter();
                        }
                        // #7981: for accessor properties without setter
                        if (getter && !setter) {
                            return
                        }
                        if (setter) {
                            setter.call(obj, newVal);
                        } else {
                            val = newVal;
                        }
                        childOb = !shallow && observe(newVal);
                        dep.notify();
                    }
                });
            }

            /**
             * Set a property on an object. Adds the new property and
             * triggers change notification if the property doesn't
             * already exist.
             */
            function set(target, key, val) {
                if (isUndef(target) || isPrimitive(target)
                ) {
                    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
                }
                if (Array.isArray(target) && isValidArrayIndex(key)) {
                    target.length = Math.max(target.length, key);
                    target.splice(key, 1, val);
                    return val
                }
                if (key in target && !(key in Object.prototype)) {
                    target[key] = val;
                    return val
                }
                var ob = (target).__ob__;
                if (target._isVue || (ob && ob.vmCount)) {
                    warn(
                        'Avoid adding reactive properties to a Vue instance or its root $data ' +
                        'at runtime - declare it upfront in the data option.'
                    );
                    return val
                }
                if (!ob) {
                    target[key] = val;
                    return val
                }
                defineReactive$$1(ob.value, key, val);
                ob.dep.notify();
                return val
            }

            /**
             * Delete a property and trigger change if necessary.
             */
            function del(target, key) {
                if (isUndef(target) || isPrimitive(target)
                ) {
                    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
                }
                if (Array.isArray(target) && isValidArrayIndex(key)) {
                    target.splice(key, 1);
                    return
                }
                var ob = (target).__ob__;
                if (target._isVue || (ob && ob.vmCount)) {
                    warn(
                        'Avoid deleting properties on a Vue instance or its root $data ' +
                        '- just set it to null.'
                    );
                    return
                }
                if (!hasOwn(target, key)) {
                    return
                }
                delete target[key];
                if (!ob) {
                    return
                }
                ob.dep.notify();
            }

            /**
             * Collect dependencies on array elements when the array is touched, since
             * we cannot intercept array element access like property getters.
             */
            function dependArray(value) {
                for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
                    e = value[i];
                    e && e.__ob__ && e.__ob__.dep.depend();
                    if (Array.isArray(e)) {
                        dependArray(e);
                    }
                }
            }

            /*  */

            /**
             * Option overwriting strategies are functions that handle
             * how to merge a parent option value and a child option
             * value into the final value.
             */
            var strats = config.optionMergeStrategies;

            /**
             * Options with restrictions
             */
            {
                strats.el = strats.propsData = function (parent, child, vm, key) {
                    if (!vm) {
                        warn(
                            "option \"" + key + "\" can only be used during instance " +
                            'creation with the `new` keyword.'
                        );
                    }
                    return defaultStrat(parent, child)
                };
            }

            /**
             * Helper that recursively merges two data objects together.
             */
            function mergeData(to, from) {
                if (!from) {
                    return to
                }
                var key, toVal, fromVal;

                var keys = hasSymbol
                    ? Reflect.ownKeys(from)
                    : Object.keys(from);

                for (var i = 0; i < keys.length; i++) {
                    key = keys[i];
                    // in case the object is already observed...
                    if (key === '__ob__') {
                        continue
                    }
                    toVal = to[key];
                    fromVal = from[key];
                    if (!hasOwn(to, key)) {
                        set(to, key, fromVal);
                    } else if (
                        toVal !== fromVal &&
                        isPlainObject(toVal) &&
                        isPlainObject(fromVal)
                    ) {
                        mergeData(toVal, fromVal);
                    }
                }
                return to
            }

            /**
             * Data
             */
            function mergeDataOrFn(
                parentVal,
                childVal,
                vm
            ) {
                if (!vm) {
                    // in a Vue.extend merge, both should be functions
                    if (!childVal) {
                        return parentVal
                    }
                    if (!parentVal) {
                        return childVal
                    }
                    // when parentVal & childVal are both present,
                    // we need to return a function that returns the
                    // merged result of both functions... no need to
                    // check if parentVal is a function here because
                    // it has to be a function to pass previous merges.
                    return function mergedDataFn() {
                        return mergeData(
                            typeof childVal === 'function' ? childVal.call(this, this) : childVal,
                            typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
                        )
                    }
                } else {
                    return function mergedInstanceDataFn() {
                        // instance merge
                        var instanceData = typeof childVal === 'function'
                            ? childVal.call(vm, vm)
                            : childVal;
                        var defaultData = typeof parentVal === 'function'
                            ? parentVal.call(vm, vm)
                            : parentVal;
                        if (instanceData) {
                            return mergeData(instanceData, defaultData)
                        } else {
                            return defaultData
                        }
                    }
                }
            }

            strats.data = function (
                parentVal,
                childVal,
                vm
            ) {
                if (!vm) {
                    if (childVal && typeof childVal !== 'function') {
                        warn(
                            'The "data" option should be a function ' +
                            'that returns a per-instance value in component ' +
                            'definitions.',
                            vm
                        );

                        return parentVal
                    }
                    return mergeDataOrFn(parentVal, childVal)
                }

                return mergeDataOrFn(parentVal, childVal, vm)
            };

            /**
             * Hooks and props are merged as arrays.
             */
            function mergeHook(
                parentVal,
                childVal
            ) {
                var res = childVal
                    ? parentVal
                        ? parentVal.concat(childVal)
                        : Array.isArray(childVal)
                            ? childVal
                            : [childVal]
                    : parentVal;
                return res
                    ? dedupeHooks(res)
                    : res
            }

            function dedupeHooks(hooks) {
                var res = [];
                for (var i = 0; i < hooks.length; i++) {
                    if (res.indexOf(hooks[i]) === -1) {
                        res.push(hooks[i]);
                    }
                }
                return res
            }

            LIFECYCLE_HOOKS.forEach(function (hook) {
                strats[hook] = mergeHook;
            });

            /**
             * Assets
             *
             * When a vm is present (instance creation), we need to do
             * a three-way merge between constructor options, instance
             * options and parent options.
             */
            function mergeAssets(
                parentVal,
                childVal,
                vm,
                key
            ) {
                var res = Object.create(parentVal || null);
                if (childVal) {
                    assertObjectType(key, childVal, vm);
                    return extend(res, childVal)
                } else {
                    return res
                }
            }

            ASSET_TYPES.forEach(function (type) {
                strats[type + 's'] = mergeAssets;
            });

            /**
             * Watchers.
             *
             * Watchers hashes should not overwrite one
             * another, so we merge them as arrays.
             */
            strats.watch = function (
                parentVal,
                childVal,
                vm,
                key
            ) {
                // work around Firefox's Object.prototype.watch...
                if (parentVal === nativeWatch) {
                    parentVal = undefined;
                }
                if (childVal === nativeWatch) {
                    childVal = undefined;
                }
                /* istanbul ignore if */
                if (!childVal) {
                    return Object.create(parentVal || null)
                }
                {
                    assertObjectType(key, childVal, vm);
                }
                if (!parentVal) {
                    return childVal
                }
                var ret = {};
                extend(ret, parentVal);
                for (var key$1 in childVal) {
                    var parent = ret[key$1];
                    var child = childVal[key$1];
                    if (parent && !Array.isArray(parent)) {
                        parent = [parent];
                    }
                    ret[key$1] = parent
                        ? parent.concat(child)
                        : Array.isArray(child) ? child : [child];
                }
                return ret
            };

            /**
             * Other object hashes.
             */
            strats.props =
                strats.methods =
                    strats.inject =
                        strats.computed = function (
                            parentVal,
                            childVal,
                            vm,
                            key
                        ) {
                            if (childVal && "development" !== 'production') {
                                assertObjectType(key, childVal, vm);
                            }
                            if (!parentVal) {
                                return childVal
                            }
                            var ret = Object.create(null);
                            extend(ret, parentVal);
                            if (childVal) {
                                extend(ret, childVal);
                            }
                            return ret
                        };
            strats.provide = mergeDataOrFn;

            /**
             * Default strategy.
             */
            var defaultStrat = function (parentVal, childVal) {
                return childVal === undefined
                    ? parentVal
                    : childVal
            };

            /**
             * Validate component names
             */
            function checkComponents(options) {
                for (var key in options.components) {
                    validateComponentName(key);
                }
            }

            function validateComponentName(name) {
                if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
                    warn(
                        'Invalid component name: "' + name + '". Component names ' +
                        'should conform to valid custom element name in html5 specification.'
                    );
                }
                if (isBuiltInTag(name) || config.isReservedTag(name)) {
                    warn(
                        'Do not use built-in or reserved HTML elements as component ' +
                        'id: ' + name
                    );
                }
            }

            /**
             * Ensure all props option syntax are normalized into the
             * Object-based format.
             */
            function normalizeProps(options, vm) {
                var props = options.props;
                if (!props) {
                    return
                }
                var res = {};
                var i, val, name;
                if (Array.isArray(props)) {
                    i = props.length;
                    while (i--) {
                        val = props[i];
                        if (typeof val === 'string') {
                            name = camelize(val);
                            res[name] = {type: null};
                        } else {
                            warn('props must be strings when using array syntax.');
                        }
                    }
                } else if (isPlainObject(props)) {
                    for (var key in props) {
                        val = props[key];
                        name = camelize(key);
                        res[name] = isPlainObject(val)
                            ? val
                            : {type: val};
                    }
                } else {
                    warn(
                        "Invalid value for option \"props\": expected an Array or an Object, " +
                        "but got " + (toRawType(props)) + ".",
                        vm
                    );
                }
                options.props = res;
            }

            /**
             * Normalize all injections into Object-based format
             */
            function normalizeInject(options, vm) {
                var inject = options.inject;
                if (!inject) {
                    return
                }
                var normalized = options.inject = {};
                if (Array.isArray(inject)) {
                    for (var i = 0; i < inject.length; i++) {
                        normalized[inject[i]] = {from: inject[i]};
                    }
                } else if (isPlainObject(inject)) {
                    for (var key in inject) {
                        var val = inject[key];
                        normalized[key] = isPlainObject(val)
                            ? extend({from: key}, val)
                            : {from: val};
                    }
                } else {
                    warn(
                        "Invalid value for option \"inject\": expected an Array or an Object, " +
                        "but got " + (toRawType(inject)) + ".",
                        vm
                    );
                }
            }

            /**
             * Normalize raw function directives into object format.
             */
            function normalizeDirectives(options) {
                var dirs = options.directives;
                if (dirs) {
                    for (var key in dirs) {
                        var def$$1 = dirs[key];
                        if (typeof def$$1 === 'function') {
                            dirs[key] = {bind: def$$1, update: def$$1};
                        }
                    }
                }
            }

            function assertObjectType(name, value, vm) {
                if (!isPlainObject(value)) {
                    warn(
                        "Invalid value for option \"" + name + "\": expected an Object, " +
                        "but got " + (toRawType(value)) + ".",
                        vm
                    );
                }
            }

            /**
             * Merge two option objects into a new one.
             * Core utility used in both instantiation and inheritance.
             */
            function mergeOptions(
                parent,
                child,
                vm
            ) {
                {
                    checkComponents(child);
                }

                if (typeof child === 'function') {
                    child = child.options;
                }

                normalizeProps(child, vm);
                normalizeInject(child, vm);
                normalizeDirectives(child);

                // Apply extends and mixins on the child options,
                // but only if it is a raw options object that isn't
                // the result of another mergeOptions call.
                // Only merged options has the _base property.
                if (!child._base) {
                    if (child.extends) {
                        parent = mergeOptions(parent, child.extends, vm);
                    }
                    if (child.mixins) {
                        for (var i = 0, l = child.mixins.length; i < l; i++) {
                            parent = mergeOptions(parent, child.mixins[i], vm);
                        }
                    }
                }

                var options = {};
                var key;
                for (key in parent) {
                    mergeField(key);
                }
                for (key in child) {
                    if (!hasOwn(parent, key)) {
                        mergeField(key);
                    }
                }

                function mergeField(key) {
                    var strat = strats[key] || defaultStrat;
                    options[key] = strat(parent[key], child[key], vm, key);
                }

                return options
            }

            /**
             * Resolve an asset.
             * This function is used because child instances need access
             * to assets defined in its ancestor chain.
             */
            function resolveAsset(
                options,
                type,
                id,
                warnMissing
            ) {
                /* istanbul ignore if */
                if (typeof id !== 'string') {
                    return
                }
                var assets = options[type];
                // check local registration variations first
                if (hasOwn(assets, id)) {
                    return assets[id]
                }
                var camelizedId = camelize(id);
                if (hasOwn(assets, camelizedId)) {
                    return assets[camelizedId]
                }
                var PascalCaseId = capitalize(camelizedId);
                if (hasOwn(assets, PascalCaseId)) {
                    return assets[PascalCaseId]
                }
                // fallback to prototype chain
                var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
                if (warnMissing && !res) {
                    warn(
                        'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
                        options
                    );
                }
                return res
            }

            /*  */


            function validateProp(
                key,
                propOptions,
                propsData,
                vm
            ) {
                var prop = propOptions[key];
                var absent = !hasOwn(propsData, key);
                var value = propsData[key];
                // boolean casting
                var booleanIndex = getTypeIndex(Boolean, prop.type);
                if (booleanIndex > -1) {
                    if (absent && !hasOwn(prop, 'default')) {
                        value = false;
                    } else if (value === '' || value === hyphenate(key)) {
                        // only cast empty string / same name to boolean if
                        // boolean has higher priority
                        var stringIndex = getTypeIndex(String, prop.type);
                        if (stringIndex < 0 || booleanIndex < stringIndex) {
                            value = true;
                        }
                    }
                }
                // check default value
                if (value === undefined) {
                    value = getPropDefaultValue(vm, prop, key);
                    // since the default value is a fresh copy,
                    // make sure to observe it.
                    var prevShouldObserve = shouldObserve;
                    toggleObserving(true);
                    observe(value);
                    toggleObserving(prevShouldObserve);
                }
                {
                    assertProp(prop, key, value, vm, absent);
                }
                return value
            }

            /**
             * Get the default value of a prop.
             */
            function getPropDefaultValue(vm, prop, key) {
                // no default, return undefined
                if (!hasOwn(prop, 'default')) {
                    return undefined
                }
                var def = prop.default;
                // warn against non-factory defaults for Object & Array
                if (isObject(def)) {
                    warn(
                        'Invalid default value for prop "' + key + '": ' +
                        'Props with type Object/Array must use a factory function ' +
                        'to return the default value.',
                        vm
                    );
                }
                // the raw prop value was also undefined from previous render,
                // return previous default value to avoid unnecessary watcher trigger
                if (vm && vm.$options.propsData &&
                    vm.$options.propsData[key] === undefined &&
                    vm._props[key] !== undefined
                ) {
                    return vm._props[key]
                }
                // call factory function for non-Function types
                // a value is Function if its prototype is function even across different execution context
                return typeof def === 'function' && getType(prop.type) !== 'Function'
                    ? def.call(vm)
                    : def
            }

            /**
             * Assert whether a prop is valid.
             */
            function assertProp(
                prop,
                name,
                value,
                vm,
                absent
            ) {
                if (prop.required && absent) {
                    warn(
                        'Missing required prop: "' + name + '"',
                        vm
                    );
                    return
                }
                if (value == null && !prop.required) {
                    return
                }
                var type = prop.type;
                var valid = !type || type === true;
                var expectedTypes = [];
                if (type) {
                    if (!Array.isArray(type)) {
                        type = [type];
                    }
                    for (var i = 0; i < type.length && !valid; i++) {
                        var assertedType = assertType(value, type[i]);
                        expectedTypes.push(assertedType.expectedType || '');
                        valid = assertedType.valid;
                    }
                }

                if (!valid) {
                    warn(
                        getInvalidTypeMessage(name, value, expectedTypes),
                        vm
                    );
                    return
                }
                var validator = prop.validator;
                if (validator) {
                    if (!validator(value)) {
                        warn(
                            'Invalid prop: custom validator check failed for prop "' + name + '".',
                            vm
                        );
                    }
                }
            }

            var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

            function assertType(value, type) {
                var valid;
                var expectedType = getType(type);
                if (simpleCheckRE.test(expectedType)) {
                    var t = typeof value;
                    valid = t === expectedType.toLowerCase();
                    // for primitive wrapper objects
                    if (!valid && t === 'object') {
                        valid = value instanceof type;
                    }
                } else if (expectedType === 'Object') {
                    valid = isPlainObject(value);
                } else if (expectedType === 'Array') {
                    valid = Array.isArray(value);
                } else {
                    valid = value instanceof type;
                }
                return {
                    valid: valid,
                    expectedType: expectedType
                }
            }

            /**
             * Use function string name to check built-in types,
             * because a simple equality check will fail when running
             * across different vms / iframes.
             */
            function getType(fn) {
                var match = fn && fn.toString().match(/^\s*function (\w+)/);
                return match ? match[1] : ''
            }

            function isSameType(a, b) {
                return getType(a) === getType(b)
            }

            function getTypeIndex(type, expectedTypes) {
                if (!Array.isArray(expectedTypes)) {
                    return isSameType(expectedTypes, type) ? 0 : -1
                }
                for (var i = 0, len = expectedTypes.length; i < len; i++) {
                    if (isSameType(expectedTypes[i], type)) {
                        return i
                    }
                }
                return -1
            }

            function getInvalidTypeMessage(name, value, expectedTypes) {
                var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
                    " Expected " + (expectedTypes.map(capitalize).join(', '));
                var expectedType = expectedTypes[0];
                var receivedType = toRawType(value);
                var expectedValue = styleValue(value, expectedType);
                var receivedValue = styleValue(value, receivedType);
                // check if we need to specify expected value
                if (expectedTypes.length === 1 &&
                    isExplicable(expectedType) &&
                    !isBoolean(expectedType, receivedType)) {
                    message += " with value " + expectedValue;
                }
                message += ", got " + receivedType + " ";
                // check if we need to specify received value
                if (isExplicable(receivedType)) {
                    message += "with value " + receivedValue + ".";
                }
                return message
            }

            function styleValue(value, type) {
                if (type === 'String') {
                    return ("\"" + value + "\"")
                } else if (type === 'Number') {
                    return ("" + (Number(value)))
                } else {
                    return ("" + value)
                }
            }

            function isExplicable(value) {
                var explicitTypes = ['string', 'number', 'boolean'];
                return explicitTypes.some(function (elem) {
                    return value.toLowerCase() === elem;
                })
            }

            function isBoolean() {
                var args = [], len = arguments.length;
                while (len--) args[len] = arguments[len];

                return args.some(function (elem) {
                    return elem.toLowerCase() === 'boolean';
                })
            }

            /*  */

            function handleError(err, vm, info) {
                // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
                // See: https://github.com/vuejs/vuex/issues/1505
                pushTarget();
                try {
                    if (vm) {
                        var cur = vm;
                        while ((cur = cur.$parent)) {
                            var hooks = cur.$options.errorCaptured;
                            if (hooks) {
                                for (var i = 0; i < hooks.length; i++) {
                                    try {
                                        var capture = hooks[i].call(cur, err, vm, info) === false;
                                        if (capture) {
                                            return
                                        }
                                    } catch (e) {
                                        globalHandleError(e, cur, 'errorCaptured hook');
                                    }
                                }
                            }
                        }
                    }
                    globalHandleError(err, vm, info);
                } finally {
                    popTarget();
                }
            }

            function invokeWithErrorHandling(
                handler,
                context,
                args,
                vm,
                info
            ) {
                var res;
                try {
                    res = args ? handler.apply(context, args) : handler.call(context);
                    if (res && !res._isVue && isPromise(res) && !res._handled) {
                        res.catch(function (e) {
                            return handleError(e, vm, info + " (Promise/async)");
                        });
                        // issue #9511
                        // avoid catch triggering multiple times when nested calls
                        res._handled = true;
                    }
                } catch (e) {
                    handleError(e, vm, info);
                }
                return res
            }

            function globalHandleError(err, vm, info) {
                if (config.errorHandler) {
                    try {
                        return config.errorHandler.call(null, err, vm, info)
                    } catch (e) {
                        // if the user intentionally throws the original error in the handler,
                        // do not log it twice
                        if (e !== err) {
                            logError(e, null, 'config.errorHandler');
                        }
                    }
                }
                logError(err, vm, info);
            }

            function logError(err, vm, info) {
                {
                    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
                }
                /* istanbul ignore else */
                if ((inBrowser || inWeex) && typeof console !== 'undefined') {
                    console.error(err);
                } else {
                    throw err
                }
            }

            /*  */

            var isUsingMicroTask = false;

            var callbacks = [];
            var pending = false;

            function flushCallbacks() {
                pending = false;
                var copies = callbacks.slice(0);
                callbacks.length = 0;
                for (var i = 0; i < copies.length; i++) {
                    copies[i]();
                }
            }

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
            var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
            /* istanbul ignore next, $flow-disable-line */
            if (typeof Promise !== 'undefined' && isNative(Promise)) {
                var p = Promise.resolve();
                timerFunc = function () {
                    p.then(flushCallbacks);
                    // In problematic UIWebViews, Promise.then doesn't completely break, but
                    // it can get stuck in a weird state where callbacks are pushed into the
                    // microtask queue but the queue isn't being flushed, until the browser
                    // needs to do some other work, e.g. handle a timer. Therefore we can
                    // "force" the microtask queue to be flushed by adding an empty timer.
                    if (isIOS) {
                        setTimeout(noop);
                    }
                };
                isUsingMicroTask = true;
            } else if (!isIE && typeof MutationObserver !== 'undefined' && (
                isNative(MutationObserver) ||
                // PhantomJS and iOS 7.x
                MutationObserver.toString() === '[object MutationObserverConstructor]'
            )) {
                // Use MutationObserver where native Promise is not available,
                // e.g. PhantomJS, iOS7, Android 4.4
                // (#6466 MutationObserver is unreliable in IE11)
                var counter = 1;
                var observer = new MutationObserver(flushCallbacks);
                var textNode = document.createTextNode(String(counter));
                observer.observe(textNode, {
                    characterData: true
                });
                timerFunc = function () {
                    counter = (counter + 1) % 2;
                    textNode.data = String(counter);
                };
                isUsingMicroTask = true;
            } else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
                // Fallback to setImmediate.
                // Technically it leverages the (macro) task queue,
                // but it is still a better choice than setTimeout.
                timerFunc = function () {
                    setImmediate(flushCallbacks);
                };
            } else {
                // Fallback to setTimeout.
                timerFunc = function () {
                    setTimeout(flushCallbacks, 0);
                };
            }

            function nextTick(cb, ctx) {
                var _resolve;
                callbacks.push(function () {
                    if (cb) {
                        try {
                            cb.call(ctx);
                        } catch (e) {
                            handleError(e, ctx, 'nextTick');
                        }
                    } else if (_resolve) {
                        _resolve(ctx);
                    }
                });
                if (!pending) {
                    pending = true;
                    timerFunc();
                }
                // $flow-disable-line
                if (!cb && typeof Promise !== 'undefined') {
                    return new Promise(function (resolve) {
                        _resolve = resolve;
                    })
                }
            }

            /*  */

            var mark;
            var measure;

            {
                var perf = inBrowser && window.performance;
                /* istanbul ignore if */
                if (
                    perf &&
                    perf.mark &&
                    perf.measure &&
                    perf.clearMarks &&
                    perf.clearMeasures
                ) {
                    mark = function (tag) {
                        return perf.mark(tag);
                    };
                    measure = function (name, startTag, endTag) {
                        perf.measure(name, startTag, endTag);
                        perf.clearMarks(startTag);
                        perf.clearMarks(endTag);
                        // perf.clearMeasures(name)
                    };
                }
            }

            /* not type checking this file because flow doesn't play well with Proxy */

            var initProxy;

            {
                var allowedGlobals = makeMap(
                    'Infinity,undefined,NaN,isFinite,isNaN,' +
                    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
                    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
                    'require' // for Webpack/Browserify
                );

                var warnNonPresent = function (target, key) {
                    warn(
                        "Property or method \"" + key + "\" is not defined on the instance but " +
                        'referenced during render. Make sure that this property is reactive, ' +
                        'either in the data option, or for class-based components, by ' +
                        'initializing the property. ' +
                        'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
                        target
                    );
                };

                var warnReservedPrefix = function (target, key) {
                    warn(
                        "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
                        'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
                        'prevent conflicts with Vue internals. ' +
                        'See: https://vuejs.org/v2/api/#data',
                        target
                    );
                };

                var hasProxy =
                    typeof Proxy !== 'undefined' && isNative(Proxy);

                if (hasProxy) {
                    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
                    config.keyCodes = new Proxy(config.keyCodes, {
                        set: function set(target, key, value) {
                            if (isBuiltInModifier(key)) {
                                warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
                                return false
                            } else {
                                target[key] = value;
                                return true
                            }
                        }
                    });
                }

                var hasHandler = {
                    has: function has(target, key) {
                        var has = key in target;
                        var isAllowed = allowedGlobals(key) ||
                            (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
                        if (!has && !isAllowed) {
                            if (key in target.$data) {
                                warnReservedPrefix(target, key);
                            } else {
                                warnNonPresent(target, key);
                            }
                        }
                        return has || !isAllowed
                    }
                };

                var getHandler = {
                    get: function get(target, key) {
                        if (typeof key === 'string' && !(key in target)) {
                            if (key in target.$data) {
                                warnReservedPrefix(target, key);
                            } else {
                                warnNonPresent(target, key);
                            }
                        }
                        return target[key]
                    }
                };

                initProxy = function initProxy(vm) {
                    if (hasProxy) {
                        // determine which proxy handler to use
                        var options = vm.$options;
                        var handlers = options.render && options.render._withStripped
                            ? getHandler
                            : hasHandler;
                        vm._renderProxy = new Proxy(vm, handlers);
                    } else {
                        vm._renderProxy = vm;
                    }
                };
            }

            /*  */

            var seenObjects = new _Set();

            /**
             * Recursively traverse an object to evoke all converted
             * getters, so that every nested property inside the object
             * is collected as a "deep" dependency.
             */
            function traverse(val) {
                _traverse(val, seenObjects);
                seenObjects.clear();
            }

            function _traverse(val, seen) {
                var i, keys;
                var isA = Array.isArray(val);
                if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
                    return
                }
                if (val.__ob__) {
                    var depId = val.__ob__.dep.id;
                    if (seen.has(depId)) {
                        return
                    }
                    seen.add(depId);
                }
                if (isA) {
                    i = val.length;
                    while (i--) {
                        _traverse(val[i], seen);
                    }
                } else {
                    keys = Object.keys(val);
                    i = keys.length;
                    while (i--) {
                        _traverse(val[keys[i]], seen);
                    }
                }
            }

            /*  */

            var normalizeEvent = cached(function (name) {
                var passive = name.charAt(0) === '&';
                name = passive ? name.slice(1) : name;
                var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
                name = once$$1 ? name.slice(1) : name;
                var capture = name.charAt(0) === '!';
                name = capture ? name.slice(1) : name;
                return {
                    name: name,
                    once: once$$1,
                    capture: capture,
                    passive: passive
                }
            });

            function createFnInvoker(fns, vm) {
                function invoker() {
                    var arguments$1 = arguments;

                    var fns = invoker.fns;
                    if (Array.isArray(fns)) {
                        var cloned = fns.slice();
                        for (var i = 0; i < cloned.length; i++) {
                            invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
                        }
                    } else {
                        // return handler return value for single handlers
                        return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
                    }
                }

                invoker.fns = fns;
                return invoker
            }

            function updateListeners(
                on,
                oldOn,
                add,
                remove$$1,
                createOnceHandler,
                vm
            ) {
                var name, def$$1, cur, old, event;
                for (name in on) {
                    def$$1 = cur = on[name];
                    old = oldOn[name];
                    event = normalizeEvent(name);
                    if (isUndef(cur)) {
                        warn(
                            "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
                            vm
                        );
                    } else if (isUndef(old)) {
                        if (isUndef(cur.fns)) {
                            cur = on[name] = createFnInvoker(cur, vm);
                        }
                        if (isTrue(event.once)) {
                            cur = on[name] = createOnceHandler(event.name, cur, event.capture);
                        }
                        add(event.name, cur, event.capture, event.passive, event.params);
                    } else if (cur !== old) {
                        old.fns = cur;
                        on[name] = old;
                    }
                }
                for (name in oldOn) {
                    if (isUndef(on[name])) {
                        event = normalizeEvent(name);
                        remove$$1(event.name, oldOn[name], event.capture);
                    }
                }
            }

            /*  */

            function mergeVNodeHook(def, hookKey, hook) {
                if (def instanceof VNode) {
                    def = def.data.hook || (def.data.hook = {});
                }
                var invoker;
                var oldHook = def[hookKey];

                function wrappedHook() {
                    hook.apply(this, arguments);
                    // important: remove merged hook to ensure it's called only once
                    // and prevent memory leak
                    remove(invoker.fns, wrappedHook);
                }

                if (isUndef(oldHook)) {
                    // no existing hook
                    invoker = createFnInvoker([wrappedHook]);
                } else {
                    /* istanbul ignore if */
                    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
                        // already a merged invoker
                        invoker = oldHook;
                        invoker.fns.push(wrappedHook);
                    } else {
                        // existing plain hook
                        invoker = createFnInvoker([oldHook, wrappedHook]);
                    }
                }

                invoker.merged = true;
                def[hookKey] = invoker;
            }

            /*  */

            function extractPropsFromVNodeData(
                data,
                Ctor,
                tag
            ) {
                // we are only extracting raw values here.
                // validation and default values are handled in the child
                // component itself.
                var propOptions = Ctor.options.props;
                if (isUndef(propOptions)) {
                    return
                }
                var res = {};
                var attrs = data.attrs;
                var props = data.props;
                if (isDef(attrs) || isDef(props)) {
                    for (var key in propOptions) {
                        var altKey = hyphenate(key);
                        {
                            var keyInLowerCase = key.toLowerCase();
                            if (
                                key !== keyInLowerCase &&
                                attrs && hasOwn(attrs, keyInLowerCase)
                            ) {
                                tip(
                                    "Prop \"" + keyInLowerCase + "\" is passed to component " +
                                    (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
                                    " \"" + key + "\". " +
                                    "Note that HTML attributes are case-insensitive and camelCased " +
                                    "props need to use their kebab-case equivalents when using in-DOM " +
                                    "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
                                );
                            }
                        }
                        checkProp(res, props, key, altKey, true) ||
                        checkProp(res, attrs, key, altKey, false);
                    }
                }
                return res
            }

            function checkProp(
                res,
                hash,
                key,
                altKey,
                preserve
            ) {
                if (isDef(hash)) {
                    if (hasOwn(hash, key)) {
                        res[key] = hash[key];
                        if (!preserve) {
                            delete hash[key];
                        }
                        return true
                    } else if (hasOwn(hash, altKey)) {
                        res[key] = hash[altKey];
                        if (!preserve) {
                            delete hash[altKey];
                        }
                        return true
                    }
                }
                return false
            }

            /*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
            function simpleNormalizeChildren(children) {
                for (var i = 0; i < children.length; i++) {
                    if (Array.isArray(children[i])) {
                        return Array.prototype.concat.apply([], children)
                    }
                }
                return children
            }

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
            function normalizeChildren(children) {
                return isPrimitive(children)
                    ? [createTextVNode(children)]
                    : Array.isArray(children)
                        ? normalizeArrayChildren(children)
                        : undefined
            }

            function isTextNode(node) {
                return isDef(node) && isDef(node.text) && isFalse(node.isComment)
            }

            function normalizeArrayChildren(children, nestedIndex) {
                var res = [];
                var i, c, lastIndex, last;
                for (i = 0; i < children.length; i++) {
                    c = children[i];
                    if (isUndef(c) || typeof c === 'boolean') {
                        continue
                    }
                    lastIndex = res.length - 1;
                    last = res[lastIndex];
                    //  nested
                    if (Array.isArray(c)) {
                        if (c.length > 0) {
                            c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
                            // merge adjacent text nodes
                            if (isTextNode(c[0]) && isTextNode(last)) {
                                res[lastIndex] = createTextVNode(last.text + (c[0]).text);
                                c.shift();
                            }
                            res.push.apply(res, c);
                        }
                    } else if (isPrimitive(c)) {
                        if (isTextNode(last)) {
                            // merge adjacent text nodes
                            // this is necessary for SSR hydration because text nodes are
                            // essentially merged when rendered to HTML strings
                            res[lastIndex] = createTextVNode(last.text + c);
                        } else if (c !== '') {
                            // convert primitive to vnode
                            res.push(createTextVNode(c));
                        }
                    } else {
                        if (isTextNode(c) && isTextNode(last)) {
                            // merge adjacent text nodes
                            res[lastIndex] = createTextVNode(last.text + c.text);
                        } else {
                            // default key for nested array children (likely generated by v-for)
                            if (isTrue(children._isVList) &&
                                isDef(c.tag) &&
                                isUndef(c.key) &&
                                isDef(nestedIndex)) {
                                c.key = "__vlist" + nestedIndex + "_" + i + "__";
                            }
                            res.push(c);
                        }
                    }
                }
                return res
            }

            /*  */

            function initProvide(vm) {
                var provide = vm.$options.provide;
                if (provide) {
                    vm._provided = typeof provide === 'function'
                        ? provide.call(vm)
                        : provide;
                }
            }

            function initInjections(vm) {
                var result = resolveInject(vm.$options.inject, vm);
                if (result) {
                    toggleObserving(false);
                    Object.keys(result).forEach(function (key) {
                        /* istanbul ignore else */
                        {
                            defineReactive$$1(vm, key, result[key], function () {
                                warn(
                                    "Avoid mutating an injected value directly since the changes will be " +
                                    "overwritten whenever the provided component re-renders. " +
                                    "injection being mutated: \"" + key + "\"",
                                    vm
                                );
                            });
                        }
                    });
                    toggleObserving(true);
                }
            }

            function resolveInject(inject, vm) {
                if (inject) {
                    // inject is :any because flow is not smart enough to figure out cached
                    var result = Object.create(null);
                    var keys = hasSymbol
                        ? Reflect.ownKeys(inject)
                        : Object.keys(inject);

                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        // #6574 in case the inject object is observed...
                        if (key === '__ob__') {
                            continue
                        }
                        var provideKey = inject[key].from;
                        var source = vm;
                        while (source) {
                            if (source._provided && hasOwn(source._provided, provideKey)) {
                                result[key] = source._provided[provideKey];
                                break
                            }
                            source = source.$parent;
                        }
                        if (!source) {
                            if ('default' in inject[key]) {
                                var provideDefault = inject[key].default;
                                result[key] = typeof provideDefault === 'function'
                                    ? provideDefault.call(vm)
                                    : provideDefault;
                            } else {
                                warn(("Injection \"" + key + "\" not found"), vm);
                            }
                        }
                    }
                    return result
                }
            }

            /*  */


            /**
             * Runtime helper for resolving raw children VNodes into a slot object.
             */
            function resolveSlots(
                children,
                context
            ) {
                if (!children || !children.length) {
                    return {}
                }
                var slots = {};
                for (var i = 0, l = children.length; i < l; i++) {
                    var child = children[i];
                    var data = child.data;
                    // remove slot attribute if the node is resolved as a Vue slot node
                    if (data && data.attrs && data.attrs.slot) {
                        delete data.attrs.slot;
                    }
                    // named slots should only be respected if the vnode was rendered in the
                    // same context.
                    if ((child.context === context || child.fnContext === context) &&
                        data && data.slot != null
                    ) {
                        var name = data.slot;
                        var slot = (slots[name] || (slots[name] = []));
                        if (child.tag === 'template') {
                            slot.push.apply(slot, child.children || []);
                        } else {
                            slot.push(child);
                        }
                    } else {
                        (slots.default || (slots.default = [])).push(child);
                    }
                }
                // ignore slots that contains only whitespace
                for (var name$1 in slots) {
                    if (slots[name$1].every(isWhitespace)) {
                        delete slots[name$1];
                    }
                }
                return slots
            }

            function isWhitespace(node) {
                return (node.isComment && !node.asyncFactory) || node.text === ' '
            }

            /*  */

            function normalizeScopedSlots(
                slots,
                normalSlots,
                prevSlots
            ) {
                var res;
                var hasNormalSlots = Object.keys(normalSlots).length > 0;
                var isStable = slots ? !!slots.$stable : !hasNormalSlots;
                var key = slots && slots.$key;
                if (!slots) {
                    res = {};
                } else if (slots._normalized) {
                    // fast path 1: child component re-render only, parent did not change
                    return slots._normalized
                } else if (
                    isStable &&
                    prevSlots &&
                    prevSlots !== emptyObject &&
                    key === prevSlots.$key &&
                    !hasNormalSlots &&
                    !prevSlots.$hasNormal
                ) {
                    // fast path 2: stable scoped slots w/ no normal slots to proxy,
                    // only need to normalize once
                    return prevSlots
                } else {
                    res = {};
                    for (var key$1 in slots) {
                        if (slots[key$1] && key$1[0] !== '$') {
                            res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
                        }
                    }
                }
                // expose normal slots on scopedSlots
                for (var key$2 in normalSlots) {
                    if (!(key$2 in res)) {
                        res[key$2] = proxyNormalSlot(normalSlots, key$2);
                    }
                }
                // avoriaz seems to mock a non-extensible $scopedSlots object
                // and when that is passed down this would cause an error
                if (slots && Object.isExtensible(slots)) {
                    (slots)._normalized = res;
                }
                def(res, '$stable', isStable);
                def(res, '$key', key);
                def(res, '$hasNormal', hasNormalSlots);
                return res
            }

            function normalizeScopedSlot(normalSlots, key, fn) {
                var normalized = function () {
                    var res = arguments.length ? fn.apply(null, arguments) : fn({});
                    res = res && typeof res === 'object' && !Array.isArray(res)
                        ? [res] // single vnode
                        : normalizeChildren(res);
                    return res && (
                        res.length === 0 ||
                        (res.length === 1 && res[0].isComment) // #9658
                    ) ? undefined
                        : res
                };
                // this is a slot using the new v-slot syntax without scope. although it is
                // compiled as a scoped slot, render fn users would expect it to be present
                // on this.$slots because the usage is semantically a normal slot.
                if (fn.proxy) {
                    Object.defineProperty(normalSlots, key, {
                        get: normalized,
                        enumerable: true,
                        configurable: true
                    });
                }
                return normalized
            }

            function proxyNormalSlot(slots, key) {
                return function () {
                    return slots[key];
                }
            }

            /*  */

            /**
             * Runtime helper for rendering v-for lists.
             */
            function renderList(
                val,
                render
            ) {
                var ret, i, l, keys, key;
                if (Array.isArray(val) || typeof val === 'string') {
                    ret = new Array(val.length);
                    for (i = 0, l = val.length; i < l; i++) {
                        ret[i] = render(val[i], i);
                    }
                } else if (typeof val === 'number') {
                    ret = new Array(val);
                    for (i = 0; i < val; i++) {
                        ret[i] = render(i + 1, i);
                    }
                } else if (isObject(val)) {
                    if (hasSymbol && val[Symbol.iterator]) {
                        ret = [];
                        var iterator = val[Symbol.iterator]();
                        var result = iterator.next();
                        while (!result.done) {
                            ret.push(render(result.value, ret.length));
                            result = iterator.next();
                        }
                    } else {
                        keys = Object.keys(val);
                        ret = new Array(keys.length);
                        for (i = 0, l = keys.length; i < l; i++) {
                            key = keys[i];
                            ret[i] = render(val[key], key, i);
                        }
                    }
                }
                if (!isDef(ret)) {
                    ret = [];
                }
                (ret)._isVList = true;
                return ret
            }

            /*  */

            /**
             * Runtime helper for rendering <slot>
             */
            function renderSlot(
                name,
                fallback,
                props,
                bindObject
            ) {
                var scopedSlotFn = this.$scopedSlots[name];
                var nodes;
                if (scopedSlotFn) { // scoped slot
                    props = props || {};
                    if (bindObject) {
                        if (!isObject(bindObject)) {
                            warn(
                                'slot v-bind without argument expects an Object',
                                this
                            );
                        }
                        props = extend(extend({}, bindObject), props);
                    }
                    nodes = scopedSlotFn(props) || fallback;
                } else {
                    nodes = this.$slots[name] || fallback;
                }

                var target = props && props.slot;
                if (target) {
                    return this.$createElement('template', {slot: target}, nodes)
                } else {
                    return nodes
                }
            }

            /*  */

            /**
             * Runtime helper for resolving filters
             */
            function resolveFilter(id) {
                return resolveAsset(this.$options, 'filters', id, true) || identity
            }

            /*  */

            function isKeyNotMatch(expect, actual) {
                if (Array.isArray(expect)) {
                    return expect.indexOf(actual) === -1
                } else {
                    return expect !== actual
                }
            }

            /**
             * Runtime helper for checking keyCodes from config.
             * exposed as Vue.prototype._k
             * passing in eventKeyName as last argument separately for backwards compat
             */
            function checkKeyCodes(
                eventKeyCode,
                key,
                builtInKeyCode,
                eventKeyName,
                builtInKeyName
            ) {
                var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
                if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
                    return isKeyNotMatch(builtInKeyName, eventKeyName)
                } else if (mappedKeyCode) {
                    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
                } else if (eventKeyName) {
                    return hyphenate(eventKeyName) !== key
                }
            }

            /*  */

            /**
             * Runtime helper for merging v-bind="object" into a VNode's data.
             */
            function bindObjectProps(
                data,
                tag,
                value,
                asProp,
                isSync
            ) {
                if (value) {
                    if (!isObject(value)) {
                        warn(
                            'v-bind without argument expects an Object or Array value',
                            this
                        );
                    } else {
                        if (Array.isArray(value)) {
                            value = toObject(value);
                        }
                        var hash;
                        var loop = function (key) {
                            if (
                                key === 'class' ||
                                key === 'style' ||
                                isReservedAttribute(key)
                            ) {
                                hash = data;
                            } else {
                                var type = data.attrs && data.attrs.type;
                                hash = asProp || config.mustUseProp(tag, type, key)
                                    ? data.domProps || (data.domProps = {})
                                    : data.attrs || (data.attrs = {});
                            }
                            var camelizedKey = camelize(key);
                            var hyphenatedKey = hyphenate(key);
                            if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
                                hash[key] = value[key];

                                if (isSync) {
                                    var on = data.on || (data.on = {});
                                    on[("update:" + key)] = function ($event) {
                                        value[key] = $event;
                                    };
                                }
                            }
                        };

                        for (var key in value) loop(key);
                    }
                }
                return data
            }

            /*  */

            /**
             * Runtime helper for rendering static trees.
             */
            function renderStatic(
                index,
                isInFor
            ) {
                var cached = this._staticTrees || (this._staticTrees = []);
                var tree = cached[index];
                // if has already-rendered static tree and not inside v-for,
                // we can reuse the same tree.
                if (tree && !isInFor) {
                    return tree
                }
                // otherwise, render a fresh tree.
                tree = cached[index] = this.$options.staticRenderFns[index].call(
                    this._renderProxy,
                    null,
                    this // for render fns generated for functional component templates
                );
                markStatic(tree, ("__static__" + index), false);
                return tree
            }

            /**
             * Runtime helper for v-once.
             * Effectively it means marking the node as static with a unique key.
             */
            function markOnce(
                tree,
                index,
                key
            ) {
                markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
                return tree
            }

            function markStatic(
                tree,
                key,
                isOnce
            ) {
                if (Array.isArray(tree)) {
                    for (var i = 0; i < tree.length; i++) {
                        if (tree[i] && typeof tree[i] !== 'string') {
                            markStaticNode(tree[i], (key + "_" + i), isOnce);
                        }
                    }
                } else {
                    markStaticNode(tree, key, isOnce);
                }
            }

            function markStaticNode(node, key, isOnce) {
                node.isStatic = true;
                node.key = key;
                node.isOnce = isOnce;
            }

            /*  */

            function bindObjectListeners(data, value) {
                if (value) {
                    if (!isPlainObject(value)) {
                        warn(
                            'v-on without argument expects an Object value',
                            this
                        );
                    } else {
                        var on = data.on = data.on ? extend({}, data.on) : {};
                        for (var key in value) {
                            var existing = on[key];
                            var ours = value[key];
                            on[key] = existing ? [].concat(existing, ours) : ours;
                        }
                    }
                }
                return data
            }

            /*  */

            function resolveScopedSlots(
                fns, // see flow/vnode
                res,
                // the following are added in 2.6
                hasDynamicKeys,
                contentHashKey
            ) {
                res = res || {$stable: !hasDynamicKeys};
                for (var i = 0; i < fns.length; i++) {
                    var slot = fns[i];
                    if (Array.isArray(slot)) {
                        resolveScopedSlots(slot, res, hasDynamicKeys);
                    } else if (slot) {
                        // marker for reverse proxying v-slot without scope on this.$slots
                        if (slot.proxy) {
                            slot.fn.proxy = true;
                        }
                        res[slot.key] = slot.fn;
                    }
                }
                if (contentHashKey) {
                    (res).$key = contentHashKey;
                }
                return res
            }

            /*  */

            function bindDynamicKeys(baseObj, values) {
                for (var i = 0; i < values.length; i += 2) {
                    var key = values[i];
                    if (typeof key === 'string' && key) {
                        baseObj[values[i]] = values[i + 1];
                    } else if (key !== '' && key !== null) {
                        // null is a special value for explicitly removing a binding
                        warn(
                            ("Invalid value for dynamic directive argument (expected string or null): " + key),
                            this
                        );
                    }
                }
                return baseObj
            }

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
            function prependModifier(value, symbol) {
                return typeof value === 'string' ? symbol + value : value
            }

            /*  */

            function installRenderHelpers(target) {
                target._o = markOnce;
                target._n = toNumber;
                target._s = toString;
                target._l = renderList;
                target._t = renderSlot;
                target._q = looseEqual;
                target._i = looseIndexOf;
                target._m = renderStatic;
                target._f = resolveFilter;
                target._k = checkKeyCodes;
                target._b = bindObjectProps;
                target._v = createTextVNode;
                target._e = createEmptyVNode;
                target._u = resolveScopedSlots;
                target._g = bindObjectListeners;
                target._d = bindDynamicKeys;
                target._p = prependModifier;
            }

            /*  */

            function FunctionalRenderContext(
                data,
                props,
                children,
                parent,
                Ctor
            ) {
                var this$1 = this;

                var options = Ctor.options;
                // ensure the createElement function in functional components
                // gets a unique context - this is necessary for correct named slot check
                var contextVm;
                if (hasOwn(parent, '_uid')) {
                    contextVm = Object.create(parent);
                    // $flow-disable-line
                    contextVm._original = parent;
                } else {
                    // the context vm passed in is a functional context as well.
                    // in this case we want to make sure we are able to get a hold to the
                    // real context instance.
                    contextVm = parent;
                    // $flow-disable-line
                    parent = parent._original;
                }
                var isCompiled = isTrue(options._compiled);
                var needNormalization = !isCompiled;

                this.data = data;
                this.props = props;
                this.children = children;
                this.parent = parent;
                this.listeners = data.on || emptyObject;
                this.injections = resolveInject(options.inject, parent);
                this.slots = function () {
                    if (!this$1.$slots) {
                        normalizeScopedSlots(
                            data.scopedSlots,
                            this$1.$slots = resolveSlots(children, parent)
                        );
                    }
                    return this$1.$slots
                };

                Object.defineProperty(this, 'scopedSlots', ({
                    enumerable: true,
                    get: function get() {
                        return normalizeScopedSlots(data.scopedSlots, this.slots())
                    }
                }));

                // support for compiled functional template
                if (isCompiled) {
                    // exposing $options for renderStatic()
                    this.$options = options;
                    // pre-resolve slots for renderSlot()
                    this.$slots = this.slots();
                    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
                }

                if (options._scopeId) {
                    this._c = function (a, b, c, d) {
                        var vnode = createElement(contextVm, a, b, c, d, needNormalization);
                        if (vnode && !Array.isArray(vnode)) {
                            vnode.fnScopeId = options._scopeId;
                            vnode.fnContext = parent;
                        }
                        return vnode
                    };
                } else {
                    this._c = function (a, b, c, d) {
                        return createElement(contextVm, a, b, c, d, needNormalization);
                    };
                }
            }

            installRenderHelpers(FunctionalRenderContext.prototype);

            function createFunctionalComponent(
                Ctor,
                propsData,
                data,
                contextVm,
                children
            ) {
                var options = Ctor.options;
                var props = {};
                var propOptions = options.props;
                if (isDef(propOptions)) {
                    for (var key in propOptions) {
                        props[key] = validateProp(key, propOptions, propsData || emptyObject);
                    }
                } else {
                    if (isDef(data.attrs)) {
                        mergeProps(props, data.attrs);
                    }
                    if (isDef(data.props)) {
                        mergeProps(props, data.props);
                    }
                }

                var renderContext = new FunctionalRenderContext(
                    data,
                    props,
                    children,
                    contextVm,
                    Ctor
                );

                var vnode = options.render.call(null, renderContext._c, renderContext);

                if (vnode instanceof VNode) {
                    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
                } else if (Array.isArray(vnode)) {
                    var vnodes = normalizeChildren(vnode) || [];
                    var res = new Array(vnodes.length);
                    for (var i = 0; i < vnodes.length; i++) {
                        res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
                    }
                    return res
                }
            }

            function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
                // #7817 clone node before setting fnContext, otherwise if the node is reused
                // (e.g. it was from a cached normal slot) the fnContext causes named slots
                // that should not be matched to match.
                var clone = cloneVNode(vnode);
                clone.fnContext = contextVm;
                clone.fnOptions = options;
                {
                    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
                }
                if (data.slot) {
                    (clone.data || (clone.data = {})).slot = data.slot;
                }
                return clone
            }

            function mergeProps(to, from) {
                for (var key in from) {
                    to[camelize(key)] = from[key];
                }
            }

            /*  */

            /*  */

            /*  */

            /*  */

// inline hooks to be invoked on component VNodes during patch
            var componentVNodeHooks = {
                init: function init(vnode, hydrating) {
                    if (
                        vnode.componentInstance &&
                        !vnode.componentInstance._isDestroyed &&
                        vnode.data.keepAlive
                    ) {
                        // kept-alive components, treat as a patch
                        var mountedNode = vnode; // work around flow
                        componentVNodeHooks.prepatch(mountedNode, mountedNode);
                    } else {
                        var child = vnode.componentInstance = createComponentInstanceForVnode(
                            vnode,
                            activeInstance
                        );
                        child.$mount(hydrating ? vnode.elm : undefined, hydrating);
                    }
                },

                prepatch: function prepatch(oldVnode, vnode) {
                    var options = vnode.componentOptions;
                    var child = vnode.componentInstance = oldVnode.componentInstance;
                    updateChildComponent(
                        child,
                        options.propsData, // updated props
                        options.listeners, // updated listeners
                        vnode, // new parent vnode
                        options.children // new children
                    );
                },

                insert: function insert(vnode) {
                    var context = vnode.context;
                    var componentInstance = vnode.componentInstance;
                    if (!componentInstance._isMounted) {
                        componentInstance._isMounted = true;
                        callHook(componentInstance, 'mounted');
                    }
                    if (vnode.data.keepAlive) {
                        if (context._isMounted) {
                            // vue-router#1212
                            // During updates, a kept-alive component's child components may
                            // change, so directly walking the tree here may call activated hooks
                            // on incorrect children. Instead we push them into a queue which will
                            // be processed after the whole patch process ended.
                            queueActivatedComponent(componentInstance);
                        } else {
                            activateChildComponent(componentInstance, true /* direct */);
                        }
                    }
                },

                destroy: function destroy(vnode) {
                    var componentInstance = vnode.componentInstance;
                    if (!componentInstance._isDestroyed) {
                        if (!vnode.data.keepAlive) {
                            componentInstance.$destroy();
                        } else {
                            deactivateChildComponent(componentInstance, true /* direct */);
                        }
                    }
                }
            };

            var hooksToMerge = Object.keys(componentVNodeHooks);

            function createComponent(
                Ctor,
                data,
                context,
                children,
                tag
            ) {
                if (isUndef(Ctor)) {
                    return
                }

                var baseCtor = context.$options._base;

                // plain options object: turn it into a constructor
                if (isObject(Ctor)) {
                    Ctor = baseCtor.extend(Ctor);
                }

                // if at this stage it's not a constructor or an async component factory,
                // reject.
                if (typeof Ctor !== 'function') {
                    {
                        warn(("Invalid Component definition: " + (String(Ctor))), context);
                    }
                    return
                }

                // async component
                var asyncFactory;
                if (isUndef(Ctor.cid)) {
                    asyncFactory = Ctor;
                    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
                    if (Ctor === undefined) {
                        // return a placeholder node for async component, which is rendered
                        // as a comment node but preserves all the raw information for the node.
                        // the information will be used for async server-rendering and hydration.
                        return createAsyncPlaceholder(
                            asyncFactory,
                            data,
                            context,
                            children,
                            tag
                        )
                    }
                }

                data = data || {};

                // resolve constructor options in case global mixins are applied after
                // component constructor creation
                resolveConstructorOptions(Ctor);

                // transform component v-model data into props & events
                if (isDef(data.model)) {
                    transformModel(Ctor.options, data);
                }

                // extract props
                var propsData = extractPropsFromVNodeData(data, Ctor, tag);

                // functional component
                if (isTrue(Ctor.options.functional)) {
                    return createFunctionalComponent(Ctor, propsData, data, context, children)
                }

                // extract listeners, since these needs to be treated as
                // child component listeners instead of DOM listeners
                var listeners = data.on;
                // replace with listeners with .native modifier
                // so it gets processed during parent component patch.
                data.on = data.nativeOn;

                if (isTrue(Ctor.options.abstract)) {
                    // abstract components do not keep anything
                    // other than props & listeners & slot

                    // work around flow
                    var slot = data.slot;
                    data = {};
                    if (slot) {
                        data.slot = slot;
                    }
                }

                // install component management hooks onto the placeholder node
                installComponentHooks(data);

                // return a placeholder vnode
                var name = Ctor.options.name || tag;
                var vnode = new VNode(
                    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
                    data, undefined, undefined, undefined, context,
                    {Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children},
                    asyncFactory
                );

                return vnode
            }

            function createComponentInstanceForVnode(
                vnode, // we know it's MountedComponentVNode but flow doesn't
                parent // activeInstance in lifecycle state
            ) {
                var options = {
                    _isComponent: true,
                    _parentVnode: vnode,
                    parent: parent
                };
                // check inline-template render functions
                var inlineTemplate = vnode.data.inlineTemplate;
                if (isDef(inlineTemplate)) {
                    options.render = inlineTemplate.render;
                    options.staticRenderFns = inlineTemplate.staticRenderFns;
                }
                return new vnode.componentOptions.Ctor(options)
            }

            function installComponentHooks(data) {
                var hooks = data.hook || (data.hook = {});
                for (var i = 0; i < hooksToMerge.length; i++) {
                    var key = hooksToMerge[i];
                    var existing = hooks[key];
                    var toMerge = componentVNodeHooks[key];
                    if (existing !== toMerge && !(existing && existing._merged)) {
                        hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
                    }
                }
            }

            function mergeHook$1(f1, f2) {
                var merged = function (a, b) {
                    // flow complains about extra args which is why we use any
                    f1(a, b);
                    f2(a, b);
                };
                merged._merged = true;
                return merged
            }

// transform component v-model info (value and callback) into
// prop and event handler respectively.
            function transformModel(options, data) {
                var prop = (options.model && options.model.prop) || 'value';
                var event = (options.model && options.model.event) || 'input'
                ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
                var on = data.on || (data.on = {});
                var existing = on[event];
                var callback = data.model.callback;
                if (isDef(existing)) {
                    if (
                        Array.isArray(existing)
                            ? existing.indexOf(callback) === -1
                            : existing !== callback
                    ) {
                        on[event] = [callback].concat(existing);
                    }
                } else {
                    on[event] = callback;
                }
            }

            /*  */

            var SIMPLE_NORMALIZE = 1;
            var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
            function createElement(
                context,
                tag,
                data,
                children,
                normalizationType,
                alwaysNormalize
            ) {
                if (Array.isArray(data) || isPrimitive(data)) {
                    normalizationType = children;
                    children = data;
                    data = undefined;
                }
                if (isTrue(alwaysNormalize)) {
                    normalizationType = ALWAYS_NORMALIZE;
                }
                return _createElement(context, tag, data, children, normalizationType)
            }

            function _createElement(
                context,
                tag,
                data,
                children,
                normalizationType
            ) {
                if (isDef(data) && isDef((data).__ob__)) {
                    warn(
                        "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
                        'Always create fresh vnode data objects in each render!',
                        context
                    );
                    return createEmptyVNode()
                }
                // object syntax in v-bind
                if (isDef(data) && isDef(data.is)) {
                    tag = data.is;
                }
                if (!tag) {
                    // in case of component :is set to falsy value
                    return createEmptyVNode()
                }
                // warn against non-primitive key
                if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
                ) {
                    {
                        warn(
                            'Avoid using non-primitive value as key, ' +
                            'use string/number value instead.',
                            context
                        );
                    }
                }
                // support single function children as default scoped slot
                if (Array.isArray(children) &&
                    typeof children[0] === 'function'
                ) {
                    data = data || {};
                    data.scopedSlots = {default: children[0]};
                    children.length = 0;
                }
                if (normalizationType === ALWAYS_NORMALIZE) {
                    children = normalizeChildren(children);
                } else if (normalizationType === SIMPLE_NORMALIZE) {
                    children = simpleNormalizeChildren(children);
                }
                var vnode, ns;
                if (typeof tag === 'string') {
                    var Ctor;
                    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
                    if (config.isReservedTag(tag)) {
                        // platform built-in elements
                        if (isDef(data) && isDef(data.nativeOn)) {
                            warn(
                                ("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">."),
                                context
                            );
                        }
                        vnode = new VNode(
                            config.parsePlatformTagName(tag), data, children,
                            undefined, undefined, context
                        );
                    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
                        // component
                        vnode = createComponent(Ctor, data, context, children, tag);
                    } else {
                        // unknown or unlisted namespaced elements
                        // check at runtime because it may get assigned a namespace when its
                        // parent normalizes children
                        vnode = new VNode(
                            tag, data, children,
                            undefined, undefined, context
                        );
                    }
                } else {
                    // direct component options / constructor
                    vnode = createComponent(tag, data, context, children);
                }
                if (Array.isArray(vnode)) {
                    return vnode
                } else if (isDef(vnode)) {
                    if (isDef(ns)) {
                        applyNS(vnode, ns);
                    }
                    if (isDef(data)) {
                        registerDeepBindings(data);
                    }
                    return vnode
                } else {
                    return createEmptyVNode()
                }
            }

            function applyNS(vnode, ns, force) {
                vnode.ns = ns;
                if (vnode.tag === 'foreignObject') {
                    // use default namespace inside foreignObject
                    ns = undefined;
                    force = true;
                }
                if (isDef(vnode.children)) {
                    for (var i = 0, l = vnode.children.length; i < l; i++) {
                        var child = vnode.children[i];
                        if (isDef(child.tag) && (
                            isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
                            applyNS(child, ns, force);
                        }
                    }
                }
            }

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
            function registerDeepBindings(data) {
                if (isObject(data.style)) {
                    traverse(data.style);
                }
                if (isObject(data.class)) {
                    traverse(data.class);
                }
            }

            /*  */

            function initRender(vm) {
                vm._vnode = null; // the root of the child tree
                vm._staticTrees = null; // v-once cached trees
                var options = vm.$options;
                var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
                var renderContext = parentVnode && parentVnode.context;
                vm.$slots = resolveSlots(options._renderChildren, renderContext);
                vm.$scopedSlots = emptyObject;
                // bind the createElement fn to this instance
                // so that we get proper render context inside it.
                // args order: tag, data, children, normalizationType, alwaysNormalize
                // internal version is used by render functions compiled from templates
                vm._c = function (a, b, c, d) {
                    return createElement(vm, a, b, c, d, false);
                };
                // normalization is always applied for the public version, used in
                // user-written render functions.
                vm.$createElement = function (a, b, c, d) {
                    return createElement(vm, a, b, c, d, true);
                };

                // $attrs & $listeners are exposed for easier HOC creation.
                // they need to be reactive so that HOCs using them are always updated
                var parentData = parentVnode && parentVnode.data;

                /* istanbul ignore else */
                {
                    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
                        !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
                    }, true);
                    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
                        !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
                    }, true);
                }
            }

            var currentRenderingInstance = null;

            function renderMixin(Vue) {
                // install runtime convenience helpers
                installRenderHelpers(Vue.prototype);

                Vue.prototype.$nextTick = function (fn) {
                    return nextTick(fn, this)
                };

                Vue.prototype._render = function () {
                    var vm = this;
                    var ref = vm.$options;
                    var render = ref.render;
                    var _parentVnode = ref._parentVnode;

                    if (_parentVnode) {
                        vm.$scopedSlots = normalizeScopedSlots(
                            _parentVnode.data.scopedSlots,
                            vm.$slots,
                            vm.$scopedSlots
                        );
                    }

                    // set parent vnode. this allows render functions to have access
                    // to the data on the placeholder node.
                    vm.$vnode = _parentVnode;
                    // render self
                    var vnode;
                    try {
                        // There's no need to maintain a stack because all render fns are called
                        // separately from one another. Nested component's render fns are called
                        // when parent component is patched.
                        currentRenderingInstance = vm;
                        vnode = render.call(vm._renderProxy, vm.$createElement);
                    } catch (e) {
                        handleError(e, vm, "render");
                        // return error render result,
                        // or previous vnode to prevent render error causing blank component
                        /* istanbul ignore else */
                        if (vm.$options.renderError) {
                            try {
                                vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
                            } catch (e) {
                                handleError(e, vm, "renderError");
                                vnode = vm._vnode;
                            }
                        } else {
                            vnode = vm._vnode;
                        }
                    } finally {
                        currentRenderingInstance = null;
                    }
                    // if the returned array contains only a single node, allow it
                    if (Array.isArray(vnode) && vnode.length === 1) {
                        vnode = vnode[0];
                    }
                    // return empty vnode in case the render function errored out
                    if (!(vnode instanceof VNode)) {
                        if (Array.isArray(vnode)) {
                            warn(
                                'Multiple root nodes returned from render function. Render function ' +
                                'should return a single root node.',
                                vm
                            );
                        }
                        vnode = createEmptyVNode();
                    }
                    // set parent
                    vnode.parent = _parentVnode;
                    return vnode
                };
            }

            /*  */

            function ensureCtor(comp, base) {
                if (
                    comp.__esModule ||
                    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
                ) {
                    comp = comp.default;
                }
                return isObject(comp)
                    ? base.extend(comp)
                    : comp
            }

            function createAsyncPlaceholder(
                factory,
                data,
                context,
                children,
                tag
            ) {
                var node = createEmptyVNode();
                node.asyncFactory = factory;
                node.asyncMeta = {data: data, context: context, children: children, tag: tag};
                return node
            }

            function resolveAsyncComponent(
                factory,
                baseCtor
            ) {
                if (isTrue(factory.error) && isDef(factory.errorComp)) {
                    return factory.errorComp
                }

                if (isDef(factory.resolved)) {
                    return factory.resolved
                }

                var owner = currentRenderingInstance;
                if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
                    // already pending
                    factory.owners.push(owner);
                }

                if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
                    return factory.loadingComp
                }

                if (owner && !isDef(factory.owners)) {
                    var owners = factory.owners = [owner];
                    var sync = true;
                    var timerLoading = null;
                    var timerTimeout = null

                    ;(owner).$on('hook:destroyed', function () {
                        return remove(owners, owner);
                    });

                    var forceRender = function (renderCompleted) {
                        for (var i = 0, l = owners.length; i < l; i++) {
                            (owners[i]).$forceUpdate();
                        }

                        if (renderCompleted) {
                            owners.length = 0;
                            if (timerLoading !== null) {
                                clearTimeout(timerLoading);
                                timerLoading = null;
                            }
                            if (timerTimeout !== null) {
                                clearTimeout(timerTimeout);
                                timerTimeout = null;
                            }
                        }
                    };

                    var resolve = once(function (res) {
                        // cache resolved
                        factory.resolved = ensureCtor(res, baseCtor);
                        // invoke callbacks only if this is not a synchronous resolve
                        // (async resolves are shimmed as synchronous during SSR)
                        if (!sync) {
                            forceRender(true);
                        } else {
                            owners.length = 0;
                        }
                    });

                    var reject = once(function (reason) {
                        warn(
                            "Failed to resolve async component: " + (String(factory)) +
                            (reason ? ("\nReason: " + reason) : '')
                        );
                        if (isDef(factory.errorComp)) {
                            factory.error = true;
                            forceRender(true);
                        }
                    });

                    var res = factory(resolve, reject);

                    if (isObject(res)) {
                        if (isPromise(res)) {
                            // () => Promise
                            if (isUndef(factory.resolved)) {
                                res.then(resolve, reject);
                            }
                        } else if (isPromise(res.component)) {
                            res.component.then(resolve, reject);

                            if (isDef(res.error)) {
                                factory.errorComp = ensureCtor(res.error, baseCtor);
                            }

                            if (isDef(res.loading)) {
                                factory.loadingComp = ensureCtor(res.loading, baseCtor);
                                if (res.delay === 0) {
                                    factory.loading = true;
                                } else {
                                    timerLoading = setTimeout(function () {
                                        timerLoading = null;
                                        if (isUndef(factory.resolved) && isUndef(factory.error)) {
                                            factory.loading = true;
                                            forceRender(false);
                                        }
                                    }, res.delay || 200);
                                }
                            }

                            if (isDef(res.timeout)) {
                                timerTimeout = setTimeout(function () {
                                    timerTimeout = null;
                                    if (isUndef(factory.resolved)) {
                                        reject(
                                            "timeout (" + (res.timeout) + "ms)"
                                        );
                                    }
                                }, res.timeout);
                            }
                        }
                    }

                    sync = false;
                    // return in case resolved synchronously
                    return factory.loading
                        ? factory.loadingComp
                        : factory.resolved
                }
            }

            /*  */

            function isAsyncPlaceholder(node) {
                return node.isComment && node.asyncFactory
            }

            /*  */

            function getFirstComponentChild(children) {
                if (Array.isArray(children)) {
                    for (var i = 0; i < children.length; i++) {
                        var c = children[i];
                        if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
                            return c
                        }
                    }
                }
            }

            /*  */

            /*  */

            function initEvents(vm) {
                vm._events = Object.create(null);
                vm._hasHookEvent = false;
                // init parent attached events
                var listeners = vm.$options._parentListeners;
                if (listeners) {
                    updateComponentListeners(vm, listeners);
                }
            }

            var target;

            function add(event, fn) {
                target.$on(event, fn);
            }

            function remove$1(event, fn) {
                target.$off(event, fn);
            }

            function createOnceHandler(event, fn) {
                var _target = target;
                return function onceHandler() {
                    var res = fn.apply(null, arguments);
                    if (res !== null) {
                        _target.$off(event, onceHandler);
                    }
                }
            }

            function updateComponentListeners(
                vm,
                listeners,
                oldListeners
            ) {
                target = vm;
                updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
                target = undefined;
            }

            function eventsMixin(Vue) {
                var hookRE = /^hook:/;
                Vue.prototype.$on = function (event, fn) {
                    var vm = this;
                    if (Array.isArray(event)) {
                        for (var i = 0, l = event.length; i < l; i++) {
                            vm.$on(event[i], fn);
                        }
                    } else {
                        (vm._events[event] || (vm._events[event] = [])).push(fn);
                        // optimize hook:event cost by using a boolean flag marked at registration
                        // instead of a hash lookup
                        if (hookRE.test(event)) {
                            vm._hasHookEvent = true;
                        }
                    }
                    return vm
                };

                Vue.prototype.$once = function (event, fn) {
                    var vm = this;

                    function on() {
                        vm.$off(event, on);
                        fn.apply(vm, arguments);
                    }

                    on.fn = fn;
                    vm.$on(event, on);
                    return vm
                };

                Vue.prototype.$off = function (event, fn) {
                    var vm = this;
                    // all
                    if (!arguments.length) {
                        vm._events = Object.create(null);
                        return vm
                    }
                    // array of events
                    if (Array.isArray(event)) {
                        for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
                            vm.$off(event[i$1], fn);
                        }
                        return vm
                    }
                    // specific event
                    var cbs = vm._events[event];
                    if (!cbs) {
                        return vm
                    }
                    if (!fn) {
                        vm._events[event] = null;
                        return vm
                    }
                    // specific handler
                    var cb;
                    var i = cbs.length;
                    while (i--) {
                        cb = cbs[i];
                        if (cb === fn || cb.fn === fn) {
                            cbs.splice(i, 1);
                            break
                        }
                    }
                    return vm
                };

                Vue.prototype.$emit = function (event) {
                    var vm = this;
                    {
                        var lowerCaseEvent = event.toLowerCase();
                        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
                            tip(
                                "Event \"" + lowerCaseEvent + "\" is emitted in component " +
                                (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
                                "Note that HTML attributes are case-insensitive and you cannot use " +
                                "v-on to listen to camelCase events when using in-DOM templates. " +
                                "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
                            );
                        }
                    }
                    var cbs = vm._events[event];
                    if (cbs) {
                        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
                        var args = toArray(arguments, 1);
                        var info = "event handler for \"" + event + "\"";
                        for (var i = 0, l = cbs.length; i < l; i++) {
                            invokeWithErrorHandling(cbs[i], vm, args, vm, info);
                        }
                    }
                    return vm
                };
            }

            /*  */

            var activeInstance = null;
            var isUpdatingChildComponent = false;

            function setActiveInstance(vm) {
                var prevActiveInstance = activeInstance;
                activeInstance = vm;
                return function () {
                    activeInstance = prevActiveInstance;
                }
            }

            function initLifecycle(vm) {
                var options = vm.$options;

                // locate first non-abstract parent
                var parent = options.parent;
                if (parent && !options.abstract) {
                    while (parent.$options.abstract && parent.$parent) {
                        parent = parent.$parent;
                    }
                    parent.$children.push(vm);
                }

                vm.$parent = parent;
                vm.$root = parent ? parent.$root : vm;

                vm.$children = [];
                vm.$refs = {};

                vm._watcher = null;
                vm._inactive = null;
                vm._directInactive = false;
                vm._isMounted = false;
                vm._isDestroyed = false;
                vm._isBeingDestroyed = false;
            }

            function lifecycleMixin(Vue) {
                Vue.prototype._update = function (vnode, hydrating) {
                    var vm = this;
                    var prevEl = vm.$el;
                    var prevVnode = vm._vnode;
                    var restoreActiveInstance = setActiveInstance(vm);
                    vm._vnode = vnode;
                    // Vue.prototype.__patch__ is injected in entry points
                    // based on the rendering backend used.
                    if (!prevVnode) {
                        // initial render
                        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
                    } else {
                        // updates
                        vm.$el = vm.__patch__(prevVnode, vnode);
                    }
                    restoreActiveInstance();
                    // update __vue__ reference
                    if (prevEl) {
                        prevEl.__vue__ = null;
                    }
                    if (vm.$el) {
                        vm.$el.__vue__ = vm;
                    }
                    // if parent is an HOC, update its $el as well
                    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
                        vm.$parent.$el = vm.$el;
                    }
                    // updated hook is called by the scheduler to ensure that children are
                    // updated in a parent's updated hook.
                };

                Vue.prototype.$forceUpdate = function () {
                    var vm = this;
                    if (vm._watcher) {
                        vm._watcher.update();
                    }
                };

                Vue.prototype.$destroy = function () {
                    var vm = this;
                    if (vm._isBeingDestroyed) {
                        return
                    }
                    callHook(vm, 'beforeDestroy');
                    vm._isBeingDestroyed = true;
                    // remove self from parent
                    var parent = vm.$parent;
                    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
                        remove(parent.$children, vm);
                    }
                    // teardown watchers
                    if (vm._watcher) {
                        vm._watcher.teardown();
                    }
                    var i = vm._watchers.length;
                    while (i--) {
                        vm._watchers[i].teardown();
                    }
                    // remove reference from data ob
                    // frozen object may not have observer.
                    if (vm._data.__ob__) {
                        vm._data.__ob__.vmCount--;
                    }
                    // call the last hook...
                    vm._isDestroyed = true;
                    // invoke destroy hooks on current rendered tree
                    vm.__patch__(vm._vnode, null);
                    // fire destroyed hook
                    callHook(vm, 'destroyed');
                    // turn off all instance listeners.
                    vm.$off();
                    // remove __vue__ reference
                    if (vm.$el) {
                        vm.$el.__vue__ = null;
                    }
                    // release circular reference (#6759)
                    if (vm.$vnode) {
                        vm.$vnode.parent = null;
                    }
                };
            }

            function mountComponent(
                vm,
                el,
                hydrating
            ) {
                vm.$el = el;
                if (!vm.$options.render) {
                    vm.$options.render = createEmptyVNode;
                    {
                        /* istanbul ignore if */
                        if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
                            vm.$options.el || el) {
                            warn(
                                'You are using the runtime-only build of Vue where the template ' +
                                'compiler is not available. Either pre-compile the templates into ' +
                                'render functions, or use the compiler-included build.',
                                vm
                            );
                        } else {
                            warn(
                                'Failed to mount component: template or render function not defined.',
                                vm
                            );
                        }
                    }
                }
                callHook(vm, 'beforeMount');

                var updateComponent;
                /* istanbul ignore if */
                if (config.performance && mark) {
                    updateComponent = function () {
                        var name = vm._name;
                        var id = vm._uid;
                        var startTag = "vue-perf-start:" + id;
                        var endTag = "vue-perf-end:" + id;

                        mark(startTag);
                        var vnode = vm._render();
                        mark(endTag);
                        measure(("vue " + name + " render"), startTag, endTag);

                        mark(startTag);
                        vm._update(vnode, hydrating);
                        mark(endTag);
                        measure(("vue " + name + " patch"), startTag, endTag);
                    };
                } else {
                    updateComponent = function () {
                        vm._update(vm._render(), hydrating);
                    };
                }

                // we set this to vm._watcher inside the watcher's constructor
                // since the watcher's initial patch may call $forceUpdate (e.g. inside child
                // component's mounted hook), which relies on vm._watcher being already defined
                new Watcher(vm, updateComponent, noop, {
                    before: function before() {
                        if (vm._isMounted && !vm._isDestroyed) {
                            callHook(vm, 'beforeUpdate');
                        }
                    }
                }, true /* isRenderWatcher */);
                hydrating = false;

                // manually mounted instance, call mounted on self
                // mounted is called for render-created child components in its inserted hook
                if (vm.$vnode == null) {
                    vm._isMounted = true;
                    callHook(vm, 'mounted');
                }
                return vm
            }

            function updateChildComponent(
                vm,
                propsData,
                listeners,
                parentVnode,
                renderChildren
            ) {
                {
                    isUpdatingChildComponent = true;
                }

                // determine whether component has slot children
                // we need to do this before overwriting $options._renderChildren.

                // check if there are dynamic scopedSlots (hand-written or compiled but with
                // dynamic slot names). Static scoped slots compiled from template has the
                // "$stable" marker.
                var newScopedSlots = parentVnode.data.scopedSlots;
                var oldScopedSlots = vm.$scopedSlots;
                var hasDynamicScopedSlot = !!(
                    (newScopedSlots && !newScopedSlots.$stable) ||
                    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
                    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
                );

                // Any static slot children from the parent may have changed during parent's
                // update. Dynamic scoped slots may also have changed. In such cases, a forced
                // update is necessary to ensure correctness.
                var needsForceUpdate = !!(
                    renderChildren ||               // has new static slots
                    vm.$options._renderChildren ||  // has old static slots
                    hasDynamicScopedSlot
                );

                vm.$options._parentVnode = parentVnode;
                vm.$vnode = parentVnode; // update vm's placeholder node without re-render

                if (vm._vnode) { // update child tree's parent
                    vm._vnode.parent = parentVnode;
                }
                vm.$options._renderChildren = renderChildren;

                // update $attrs and $listeners hash
                // these are also reactive so they may trigger child update if the child
                // used them during render
                vm.$attrs = parentVnode.data.attrs || emptyObject;
                vm.$listeners = listeners || emptyObject;

                // update props
                if (propsData && vm.$options.props) {
                    toggleObserving(false);
                    var props = vm._props;
                    var propKeys = vm.$options._propKeys || [];
                    for (var i = 0; i < propKeys.length; i++) {
                        var key = propKeys[i];
                        var propOptions = vm.$options.props; // wtf flow?
                        props[key] = validateProp(key, propOptions, propsData, vm);
                    }
                    toggleObserving(true);
                    // keep a copy of raw propsData
                    vm.$options.propsData = propsData;
                }

                // update listeners
                listeners = listeners || emptyObject;
                var oldListeners = vm.$options._parentListeners;
                vm.$options._parentListeners = listeners;
                updateComponentListeners(vm, listeners, oldListeners);

                // resolve slots + force update if has children
                if (needsForceUpdate) {
                    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
                    vm.$forceUpdate();
                }

                {
                    isUpdatingChildComponent = false;
                }
            }

            function isInInactiveTree(vm) {
                while (vm && (vm = vm.$parent)) {
                    if (vm._inactive) {
                        return true
                    }
                }
                return false
            }

            function activateChildComponent(vm, direct) {
                if (direct) {
                    vm._directInactive = false;
                    if (isInInactiveTree(vm)) {
                        return
                    }
                } else if (vm._directInactive) {
                    return
                }
                if (vm._inactive || vm._inactive === null) {
                    vm._inactive = false;
                    for (var i = 0; i < vm.$children.length; i++) {
                        activateChildComponent(vm.$children[i]);
                    }
                    callHook(vm, 'activated');
                }
            }

            function deactivateChildComponent(vm, direct) {
                if (direct) {
                    vm._directInactive = true;
                    if (isInInactiveTree(vm)) {
                        return
                    }
                }
                if (!vm._inactive) {
                    vm._inactive = true;
                    for (var i = 0; i < vm.$children.length; i++) {
                        deactivateChildComponent(vm.$children[i]);
                    }
                    callHook(vm, 'deactivated');
                }
            }

            function callHook(vm, hook) {
                // #7573 disable dep collection when invoking lifecycle hooks
                pushTarget();
                var handlers = vm.$options[hook];
                var info = hook + " hook";
                if (handlers) {
                    for (var i = 0, j = handlers.length; i < j; i++) {
                        invokeWithErrorHandling(handlers[i], vm, null, vm, info);
                    }
                }
                if (vm._hasHookEvent) {
                    vm.$emit('hook:' + hook);
                }
                popTarget();
            }

            /*  */

            var MAX_UPDATE_COUNT = 100;

            var queue = [];
            var activatedChildren = [];
            var has = {};
            var circular = {};
            var waiting = false;
            var flushing = false;
            var index = 0;

            /**
             * Reset the scheduler's state.
             */
            function resetSchedulerState() {
                index = queue.length = activatedChildren.length = 0;
                has = {};
                {
                    circular = {};
                }
                waiting = flushing = false;
            }

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
            var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
            var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
            if (inBrowser && !isIE) {
                var performance = window.performance;
                if (
                    performance &&
                    typeof performance.now === 'function' &&
                    getNow() > document.createEvent('Event').timeStamp
                ) {
                    // if the event timestamp, although evaluated AFTER the Date.now(), is
                    // smaller than it, it means the event is using a hi-res timestamp,
                    // and we need to use the hi-res version for event listener timestamps as
                    // well.
                    getNow = function () {
                        return performance.now();
                    };
                }
            }

            /**
             * Flush both queues and run the watchers.
             */
            function flushSchedulerQueue() {
                currentFlushTimestamp = getNow();
                flushing = true;
                var watcher, id;

                // Sort queue before flush.
                // This ensures that:
                // 1. Components are updated from parent to child. (because parent is always
                //    created before the child)
                // 2. A component's user watchers are run before its render watcher (because
                //    user watchers are created before the render watcher)
                // 3. If a component is destroyed during a parent component's watcher run,
                //    its watchers can be skipped.
                queue.sort(function (a, b) {
                    return a.id - b.id;
                });

                // do not cache length because more watchers might be pushed
                // as we run existing watchers
                for (index = 0; index < queue.length; index++) {
                    watcher = queue[index];
                    if (watcher.before) {
                        watcher.before();
                    }
                    id = watcher.id;
                    has[id] = null;
                    watcher.run();
                    // in dev build, check and stop circular updates.
                    if (has[id] != null) {
                        circular[id] = (circular[id] || 0) + 1;
                        if (circular[id] > MAX_UPDATE_COUNT) {
                            warn(
                                'You may have an infinite update loop ' + (
                                    watcher.user
                                        ? ("in watcher with expression \"" + (watcher.expression) + "\"")
                                        : "in a component render function."
                                ),
                                watcher.vm
                            );
                            break
                        }
                    }
                }

                // keep copies of post queues before resetting state
                var activatedQueue = activatedChildren.slice();
                var updatedQueue = queue.slice();

                resetSchedulerState();

                // call component updated and activated hooks
                callActivatedHooks(activatedQueue);
                callUpdatedHooks(updatedQueue);

                // devtool hook
                /* istanbul ignore if */
                if (devtools && config.devtools) {
                    devtools.emit('flush');
                }
            }

            function callUpdatedHooks(queue) {
                var i = queue.length;
                while (i--) {
                    var watcher = queue[i];
                    var vm = watcher.vm;
                    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
                        callHook(vm, 'updated');
                    }
                }
            }

            /**
             * Queue a kept-alive component that was activated during patch.
             * The queue will be processed after the entire tree has been patched.
             */
            function queueActivatedComponent(vm) {
                // setting _inactive to false here so that a render function can
                // rely on checking whether it's in an inactive tree (e.g. router-view)
                vm._inactive = false;
                activatedChildren.push(vm);
            }

            function callActivatedHooks(queue) {
                for (var i = 0; i < queue.length; i++) {
                    queue[i]._inactive = true;
                    activateChildComponent(queue[i], true /* true */);
                }
            }

            /**
             * Push a watcher into the watcher queue.
             * Jobs with duplicate IDs will be skipped unless it's
             * pushed when the queue is being flushed.
             */
            function queueWatcher(watcher) {
                var id = watcher.id;
                if (has[id] == null) {
                    has[id] = true;
                    if (!flushing) {
                        queue.push(watcher);
                    } else {
                        // if already flushing, splice the watcher based on its id
                        // if already past its id, it will be run next immediately.
                        var i = queue.length - 1;
                        while (i > index && queue[i].id > watcher.id) {
                            i--;
                        }
                        queue.splice(i + 1, 0, watcher);
                    }
                    // queue the flush
                    if (!waiting) {
                        waiting = true;

                        if (!config.async) {
                            flushSchedulerQueue();
                            return
                        }
                        nextTick(flushSchedulerQueue);
                    }
                }
            }

            /*  */


            var uid$2 = 0;

            /**
             * A watcher parses an expression, collects dependencies,
             * and fires callback when the expression value changes.
             * This is used for both the $watch() api and directives.
             */
            var Watcher = function Watcher(
                vm,
                expOrFn,
                cb,
                options,
                isRenderWatcher
            ) {
                this.vm = vm;
                if (isRenderWatcher) {
                    vm._watcher = this;
                }
                vm._watchers.push(this);
                // options
                if (options) {
                    this.deep = !!options.deep;
                    this.user = !!options.user;
                    this.lazy = !!options.lazy;
                    this.sync = !!options.sync;
                    this.before = options.before;
                } else {
                    this.deep = this.user = this.lazy = this.sync = false;
                }
                this.cb = cb;
                this.id = ++uid$2; // uid for batching
                this.active = true;
                this.dirty = this.lazy; // for lazy watchers
                this.deps = [];
                this.newDeps = [];
                this.depIds = new _Set();
                this.newDepIds = new _Set();
                this.expression = expOrFn.toString();
                // parse expression for getter
                if (typeof expOrFn === 'function') {
                    this.getter = expOrFn;
                } else {
                    this.getter = parsePath(expOrFn);
                    if (!this.getter) {
                        this.getter = noop;
                        warn(
                            "Failed watching path: \"" + expOrFn + "\" " +
                            'Watcher only accepts simple dot-delimited paths. ' +
                            'For full control, use a function instead.',
                            vm
                        );
                    }
                }
                this.value = this.lazy
                    ? undefined
                    : this.get();
            };

            /**
             * Evaluate the getter, and re-collect dependencies.
             */
            Watcher.prototype.get = function get() {
                pushTarget(this);
                var value;
                var vm = this.vm;
                try {
                    value = this.getter.call(vm, vm);
                } catch (e) {
                    if (this.user) {
                        handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
                    } else {
                        throw e
                    }
                } finally {
                    // "touch" every property so they are all tracked as
                    // dependencies for deep watching
                    if (this.deep) {
                        traverse(value);
                    }
                    popTarget();
                    this.cleanupDeps();
                }
                return value
            };

            /**
             * Add a dependency to this directive.
             */
            Watcher.prototype.addDep = function addDep(dep) {
                var id = dep.id;
                if (!this.newDepIds.has(id)) {
                    this.newDepIds.add(id);
                    this.newDeps.push(dep);
                    if (!this.depIds.has(id)) {
                        dep.addSub(this);
                    }
                }
            };

            /**
             * Clean up for dependency collection.
             */
            Watcher.prototype.cleanupDeps = function cleanupDeps() {
                var i = this.deps.length;
                while (i--) {
                    var dep = this.deps[i];
                    if (!this.newDepIds.has(dep.id)) {
                        dep.removeSub(this);
                    }
                }
                var tmp = this.depIds;
                this.depIds = this.newDepIds;
                this.newDepIds = tmp;
                this.newDepIds.clear();
                tmp = this.deps;
                this.deps = this.newDeps;
                this.newDeps = tmp;
                this.newDeps.length = 0;
            };

            /**
             * Subscriber interface.
             * Will be called when a dependency changes.
             */
            Watcher.prototype.update = function update() {
                /* istanbul ignore else */
                if (this.lazy) {
                    this.dirty = true;
                } else if (this.sync) {
                    this.run();
                } else {
                    queueWatcher(this);
                }
            };

            /**
             * Scheduler job interface.
             * Will be called by the scheduler.
             */
            Watcher.prototype.run = function run() {
                if (this.active) {
                    var value = this.get();
                    if (
                        value !== this.value ||
                        // Deep watchers and watchers on Object/Arrays should fire even
                        // when the value is the same, because the value may
                        // have mutated.
                        isObject(value) ||
                        this.deep
                    ) {
                        // set new value
                        var oldValue = this.value;
                        this.value = value;
                        if (this.user) {
                            try {
                                this.cb.call(this.vm, value, oldValue);
                            } catch (e) {
                                handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
                            }
                        } else {
                            this.cb.call(this.vm, value, oldValue);
                        }
                    }
                }
            };

            /**
             * Evaluate the value of the watcher.
             * This only gets called for lazy watchers.
             */
            Watcher.prototype.evaluate = function evaluate() {
                this.value = this.get();
                this.dirty = false;
            };

            /**
             * Depend on all deps collected by this watcher.
             */
            Watcher.prototype.depend = function depend() {
                var i = this.deps.length;
                while (i--) {
                    this.deps[i].depend();
                }
            };

            /**
             * Remove self from all dependencies' subscriber list.
             */
            Watcher.prototype.teardown = function teardown() {
                if (this.active) {
                    // remove self from vm's watcher list
                    // this is a somewhat expensive operation so we skip it
                    // if the vm is being destroyed.
                    if (!this.vm._isBeingDestroyed) {
                        remove(this.vm._watchers, this);
                    }
                    var i = this.deps.length;
                    while (i--) {
                        this.deps[i].removeSub(this);
                    }
                    this.active = false;
                }
            };

            /*  */

            var sharedPropertyDefinition = {
                enumerable: true,
                configurable: true,
                get: noop,
                set: noop
            };

            function proxy(target, sourceKey, key) {
                sharedPropertyDefinition.get = function proxyGetter() {
                    return this[sourceKey][key]
                };
                sharedPropertyDefinition.set = function proxySetter(val) {
                    this[sourceKey][key] = val;
                };
                Object.defineProperty(target, key, sharedPropertyDefinition);
            }

            function initState(vm) {
                vm._watchers = [];
                var opts = vm.$options;
                if (opts.props) {
                    initProps(vm, opts.props);
                }
                if (opts.methods) {
                    initMethods(vm, opts.methods);
                }
                if (opts.data) {
                    initData(vm);
                } else {
                    observe(vm._data = {}, true /* asRootData */);
                }
                if (opts.computed) {
                    initComputed(vm, opts.computed);
                }
                if (opts.watch && opts.watch !== nativeWatch) {
                    initWatch(vm, opts.watch);
                }
            }

            function initProps(vm, propsOptions) {
                var propsData = vm.$options.propsData || {};
                var props = vm._props = {};
                // cache prop keys so that future props updates can iterate using Array
                // instead of dynamic object key enumeration.
                var keys = vm.$options._propKeys = [];
                var isRoot = !vm.$parent;
                // root instance props should be converted
                if (!isRoot) {
                    toggleObserving(false);
                }
                var loop = function (key) {
                    keys.push(key);
                    var value = validateProp(key, propsOptions, propsData, vm);
                    /* istanbul ignore else */
                    {
                        var hyphenatedKey = hyphenate(key);
                        if (isReservedAttribute(hyphenatedKey) ||
                            config.isReservedAttr(hyphenatedKey)) {
                            warn(
                                ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
                                vm
                            );
                        }
                        defineReactive$$1(props, key, value, function () {
                            if (!isRoot && !isUpdatingChildComponent) {
                                warn(
                                    "Avoid mutating a prop directly since the value will be " +
                                    "overwritten whenever the parent component re-renders. " +
                                    "Instead, use a data or computed property based on the prop's " +
                                    "value. Prop being mutated: \"" + key + "\"",
                                    vm
                                );
                            }
                        });
                    }
                    // static props are already proxied on the component's prototype
                    // during Vue.extend(). We only need to proxy props defined at
                    // instantiation here.
                    if (!(key in vm)) {
                        proxy(vm, "_props", key);
                    }
                };

                for (var key in propsOptions) loop(key);
                toggleObserving(true);
            }

            function initData(vm) {
                var data = vm.$options.data;
                data = vm._data = typeof data === 'function'
                    ? getData(data, vm)
                    : data || {};
                if (!isPlainObject(data)) {
                    data = {};
                    warn(
                        'data functions should return an object:\n' +
                        'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
                        vm
                    );
                }
                // proxy data on instance
                var keys = Object.keys(data);
                var props = vm.$options.props;
                var methods = vm.$options.methods;
                var i = keys.length;
                while (i--) {
                    var key = keys[i];
                    {
                        if (methods && hasOwn(methods, key)) {
                            warn(
                                ("Method \"" + key + "\" has already been defined as a data property."),
                                vm
                            );
                        }
                    }
                    if (props && hasOwn(props, key)) {
                        warn(
                            "The data property \"" + key + "\" is already declared as a prop. " +
                            "Use prop default value instead.",
                            vm
                        );
                    } else if (!isReserved(key)) {
                        proxy(vm, "_data", key);
                    }
                }
                // observe data
                observe(data, true /* asRootData */);
            }

            function getData(data, vm) {
                // #7573 disable dep collection when invoking data getters
                pushTarget();
                try {
                    return data.call(vm, vm)
                } catch (e) {
                    handleError(e, vm, "data()");
                    return {}
                } finally {
                    popTarget();
                }
            }

            var computedWatcherOptions = {lazy: true};

            function initComputed(vm, computed) {
                // $flow-disable-line
                var watchers = vm._computedWatchers = Object.create(null);
                // computed properties are just getters during SSR
                var isSSR = isServerRendering();

                for (var key in computed) {
                    var userDef = computed[key];
                    var getter = typeof userDef === 'function' ? userDef : userDef.get;
                    if (getter == null) {
                        warn(
                            ("Getter is missing for computed property \"" + key + "\"."),
                            vm
                        );
                    }

                    if (!isSSR) {
                        // create internal watcher for the computed property.
                        watchers[key] = new Watcher(
                            vm,
                            getter || noop,
                            noop,
                            computedWatcherOptions
                        );
                    }

                    // component-defined computed properties are already defined on the
                    // component prototype. We only need to define computed properties defined
                    // at instantiation here.
                    if (!(key in vm)) {
                        defineComputed(vm, key, userDef);
                    } else {
                        if (key in vm.$data) {
                            warn(("The computed property \"" + key + "\" is already defined in data."), vm);
                        } else if (vm.$options.props && key in vm.$options.props) {
                            warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
                        }
                    }
                }
            }

            function defineComputed(
                target,
                key,
                userDef
            ) {
                var shouldCache = !isServerRendering();
                if (typeof userDef === 'function') {
                    sharedPropertyDefinition.get = shouldCache
                        ? createComputedGetter(key)
                        : createGetterInvoker(userDef);
                    sharedPropertyDefinition.set = noop;
                } else {
                    sharedPropertyDefinition.get = userDef.get
                        ? shouldCache && userDef.cache !== false
                            ? createComputedGetter(key)
                            : createGetterInvoker(userDef.get)
                        : noop;
                    sharedPropertyDefinition.set = userDef.set || noop;
                }
                if (sharedPropertyDefinition.set === noop) {
                    sharedPropertyDefinition.set = function () {
                        warn(
                            ("Computed property \"" + key + "\" was assigned to but it has no setter."),
                            this
                        );
                    };
                }
                Object.defineProperty(target, key, sharedPropertyDefinition);
            }

            function createComputedGetter(key) {
                return function computedGetter() {
                    var watcher = this._computedWatchers && this._computedWatchers[key];
                    if (watcher) {
                        if (watcher.dirty) {
                            watcher.evaluate();
                        }
                        if (Dep.target) {
                            watcher.depend();
                        }
                        return watcher.value
                    }
                }
            }

            function createGetterInvoker(fn) {
                return function computedGetter() {
                    return fn.call(this, this)
                }
            }

            function initMethods(vm, methods) {
                var props = vm.$options.props;
                for (var key in methods) {
                    {
                        if (typeof methods[key] !== 'function') {
                            warn(
                                "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
                                "Did you reference the function correctly?",
                                vm
                            );
                        }
                        if (props && hasOwn(props, key)) {
                            warn(
                                ("Method \"" + key + "\" has already been defined as a prop."),
                                vm
                            );
                        }
                        if ((key in vm) && isReserved(key)) {
                            warn(
                                "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
                                "Avoid defining component methods that start with _ or $."
                            );
                        }
                    }
                    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
                }
            }

            function initWatch(vm, watch) {
                for (var key in watch) {
                    var handler = watch[key];
                    if (Array.isArray(handler)) {
                        for (var i = 0; i < handler.length; i++) {
                            createWatcher(vm, key, handler[i]);
                        }
                    } else {
                        createWatcher(vm, key, handler);
                    }
                }
            }

            function createWatcher(
                vm,
                expOrFn,
                handler,
                options
            ) {
                if (isPlainObject(handler)) {
                    options = handler;
                    handler = handler.handler;
                }
                if (typeof handler === 'string') {
                    handler = vm[handler];
                }
                return vm.$watch(expOrFn, handler, options)
            }

            function stateMixin(Vue) {
                // flow somehow has problems with directly declared definition object
                // when using Object.defineProperty, so we have to procedurally build up
                // the object here.
                var dataDef = {};
                dataDef.get = function () {
                    return this._data
                };
                var propsDef = {};
                propsDef.get = function () {
                    return this._props
                };
                {
                    dataDef.set = function () {
                        warn(
                            'Avoid replacing instance root $data. ' +
                            'Use nested data properties instead.',
                            this
                        );
                    };
                    propsDef.set = function () {
                        warn("$props is readonly.", this);
                    };
                }
                Object.defineProperty(Vue.prototype, '$data', dataDef);
                Object.defineProperty(Vue.prototype, '$props', propsDef);

                Vue.prototype.$set = set;
                Vue.prototype.$delete = del;

                Vue.prototype.$watch = function (
                    expOrFn,
                    cb,
                    options
                ) {
                    var vm = this;
                    if (isPlainObject(cb)) {
                        return createWatcher(vm, expOrFn, cb, options)
                    }
                    options = options || {};
                    options.user = true;
                    var watcher = new Watcher(vm, expOrFn, cb, options);
                    if (options.immediate) {
                        try {
                            cb.call(vm, watcher.value);
                        } catch (error) {
                            handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
                        }
                    }
                    return function unwatchFn() {
                        watcher.teardown();
                    }
                };
            }

            /*  */

            var uid$3 = 0;

            function initMixin(Vue) {
                Vue.prototype._init = function (options) {
                    var vm = this;
                    // a uid
                    vm._uid = uid$3++;

                    var startTag, endTag;
                    /* istanbul ignore if */
                    if (config.performance && mark) {
                        startTag = "vue-perf-start:" + (vm._uid);
                        endTag = "vue-perf-end:" + (vm._uid);
                        mark(startTag);
                    }

                    // a flag to avoid this being observed
                    vm._isVue = true;
                    // merge options
                    if (options && options._isComponent) {
                        // optimize internal component instantiation
                        // since dynamic options merging is pretty slow, and none of the
                        // internal component options needs special treatment.
                        initInternalComponent(vm, options);
                    } else {
                        vm.$options = mergeOptions(
                            resolveConstructorOptions(vm.constructor),
                            options || {},
                            vm
                        );
                    }
                    /* istanbul ignore else */
                    {
                        initProxy(vm);
                    }
                    // expose real self
                    vm._self = vm;
                    initLifecycle(vm);
                    initEvents(vm);
                    initRender(vm);
                    callHook(vm, 'beforeCreate');
                    initInjections(vm); // resolve injections before data/props
                    initState(vm);
                    initProvide(vm); // resolve provide after data/props
                    callHook(vm, 'created');

                    /* istanbul ignore if */
                    if (config.performance && mark) {
                        vm._name = formatComponentName(vm, false);
                        mark(endTag);
                        measure(("vue " + (vm._name) + " init"), startTag, endTag);
                    }

                    if (vm.$options.el) {
                        vm.$mount(vm.$options.el);
                    }
                };
            }

            function initInternalComponent(vm, options) {
                var opts = vm.$options = Object.create(vm.constructor.options);
                // doing this because it's faster than dynamic enumeration.
                var parentVnode = options._parentVnode;
                opts.parent = options.parent;
                opts._parentVnode = parentVnode;

                var vnodeComponentOptions = parentVnode.componentOptions;
                opts.propsData = vnodeComponentOptions.propsData;
                opts._parentListeners = vnodeComponentOptions.listeners;
                opts._renderChildren = vnodeComponentOptions.children;
                opts._componentTag = vnodeComponentOptions.tag;

                if (options.render) {
                    opts.render = options.render;
                    opts.staticRenderFns = options.staticRenderFns;
                }
            }

            function resolveConstructorOptions(Ctor) {
                var options = Ctor.options;
                if (Ctor.super) {
                    var superOptions = resolveConstructorOptions(Ctor.super);
                    var cachedSuperOptions = Ctor.superOptions;
                    if (superOptions !== cachedSuperOptions) {
                        // super option changed,
                        // need to resolve new options.
                        Ctor.superOptions = superOptions;
                        // check if there are any late-modified/attached options (#4976)
                        var modifiedOptions = resolveModifiedOptions(Ctor);
                        // update base extend options
                        if (modifiedOptions) {
                            extend(Ctor.extendOptions, modifiedOptions);
                        }
                        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
                        if (options.name) {
                            options.components[options.name] = Ctor;
                        }
                    }
                }
                return options
            }

            function resolveModifiedOptions(Ctor) {
                var modified;
                var latest = Ctor.options;
                var sealed = Ctor.sealedOptions;
                for (var key in latest) {
                    if (latest[key] !== sealed[key]) {
                        if (!modified) {
                            modified = {};
                        }
                        modified[key] = latest[key];
                    }
                }
                return modified
            }

            function Vue(options) {
                if (!(this instanceof Vue)
                ) {
                    warn('Vue is a constructor and should be called with the `new` keyword');
                }
                this._init(options);
            }

            initMixin(Vue);
            stateMixin(Vue);
            eventsMixin(Vue);
            lifecycleMixin(Vue);
            renderMixin(Vue);

            /*  */

            function initUse(Vue) {
                Vue.use = function (plugin) {
                    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
                    if (installedPlugins.indexOf(plugin) > -1) {
                        return this
                    }

                    // additional parameters
                    var args = toArray(arguments, 1);
                    args.unshift(this);
                    if (typeof plugin.install === 'function') {
                        plugin.install.apply(plugin, args);
                    } else if (typeof plugin === 'function') {
                        plugin.apply(null, args);
                    }
                    installedPlugins.push(plugin);
                    return this
                };
            }

            /*  */

            function initMixin$1(Vue) {
                Vue.mixin = function (mixin) {
                    this.options = mergeOptions(this.options, mixin);
                    return this
                };
            }

            /*  */

            function initExtend(Vue) {
                /**
                 * Each instance constructor, including Vue, has a unique
                 * cid. This enables us to create wrapped "child
                 * constructors" for prototypal inheritance and cache them.
                 */
                Vue.cid = 0;
                var cid = 1;

                /**
                 * Class inheritance
                 */
                Vue.extend = function (extendOptions) {
                    extendOptions = extendOptions || {};
                    var Super = this;
                    var SuperId = Super.cid;
                    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
                    if (cachedCtors[SuperId]) {
                        return cachedCtors[SuperId]
                    }

                    var name = extendOptions.name || Super.options.name;
                    if (name) {
                        validateComponentName(name);
                    }

                    var Sub = function VueComponent(options) {
                        this._init(options);
                    };
                    Sub.prototype = Object.create(Super.prototype);
                    Sub.prototype.constructor = Sub;
                    Sub.cid = cid++;
                    Sub.options = mergeOptions(
                        Super.options,
                        extendOptions
                    );
                    Sub['super'] = Super;

                    // For props and computed properties, we define the proxy getters on
                    // the Vue instances at extension time, on the extended prototype. This
                    // avoids Object.defineProperty calls for each instance created.
                    if (Sub.options.props) {
                        initProps$1(Sub);
                    }
                    if (Sub.options.computed) {
                        initComputed$1(Sub);
                    }

                    // allow further extension/mixin/plugin usage
                    Sub.extend = Super.extend;
                    Sub.mixin = Super.mixin;
                    Sub.use = Super.use;

                    // create asset registers, so extended classes
                    // can have their private assets too.
                    ASSET_TYPES.forEach(function (type) {
                        Sub[type] = Super[type];
                    });
                    // enable recursive self-lookup
                    if (name) {
                        Sub.options.components[name] = Sub;
                    }

                    // keep a reference to the super options at extension time.
                    // later at instantiation we can check if Super's options have
                    // been updated.
                    Sub.superOptions = Super.options;
                    Sub.extendOptions = extendOptions;
                    Sub.sealedOptions = extend({}, Sub.options);

                    // cache constructor
                    cachedCtors[SuperId] = Sub;
                    return Sub
                };
            }

            function initProps$1(Comp) {
                var props = Comp.options.props;
                for (var key in props) {
                    proxy(Comp.prototype, "_props", key);
                }
            }

            function initComputed$1(Comp) {
                var computed = Comp.options.computed;
                for (var key in computed) {
                    defineComputed(Comp.prototype, key, computed[key]);
                }
            }

            /*  */

            function initAssetRegisters(Vue) {
                /**
                 * Create asset registration methods.
                 */
                ASSET_TYPES.forEach(function (type) {
                    Vue[type] = function (
                        id,
                        definition
                    ) {
                        if (!definition) {
                            return this.options[type + 's'][id]
                        } else {
                            /* istanbul ignore if */
                            if (type === 'component') {
                                validateComponentName(id);
                            }
                            if (type === 'component' && isPlainObject(definition)) {
                                definition.name = definition.name || id;
                                definition = this.options._base.extend(definition);
                            }
                            if (type === 'directive' && typeof definition === 'function') {
                                definition = {bind: definition, update: definition};
                            }
                            this.options[type + 's'][id] = definition;
                            return definition
                        }
                    };
                });
            }

            /*  */


            function getComponentName(opts) {
                return opts && (opts.Ctor.options.name || opts.tag)
            }

            function matches(pattern, name) {
                if (Array.isArray(pattern)) {
                    return pattern.indexOf(name) > -1
                } else if (typeof pattern === 'string') {
                    return pattern.split(',').indexOf(name) > -1
                } else if (isRegExp(pattern)) {
                    return pattern.test(name)
                }
                /* istanbul ignore next */
                return false
            }

            function pruneCache(keepAliveInstance, filter) {
                var cache = keepAliveInstance.cache;
                var keys = keepAliveInstance.keys;
                var _vnode = keepAliveInstance._vnode;
                for (var key in cache) {
                    var cachedNode = cache[key];
                    if (cachedNode) {
                        var name = getComponentName(cachedNode.componentOptions);
                        if (name && !filter(name)) {
                            pruneCacheEntry(cache, key, keys, _vnode);
                        }
                    }
                }
            }

            function pruneCacheEntry(
                cache,
                key,
                keys,
                current
            ) {
                var cached$$1 = cache[key];
                if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
                    cached$$1.componentInstance.$destroy();
                }
                cache[key] = null;
                remove(keys, key);
            }

            var patternTypes = [String, RegExp, Array];

            var KeepAlive = {
                name: 'keep-alive',
                abstract: true,

                props: {
                    include: patternTypes,
                    exclude: patternTypes,
                    max: [String, Number]
                },

                created: function created() {
                    this.cache = Object.create(null);
                    this.keys = [];
                },

                destroyed: function destroyed() {
                    for (var key in this.cache) {
                        pruneCacheEntry(this.cache, key, this.keys);
                    }
                },

                mounted: function mounted() {
                    var this$1 = this;

                    this.$watch('include', function (val) {
                        pruneCache(this$1, function (name) {
                            return matches(val, name);
                        });
                    });
                    this.$watch('exclude', function (val) {
                        pruneCache(this$1, function (name) {
                            return !matches(val, name);
                        });
                    });
                },

                render: function render() {
                    var slot = this.$slots.default;
                    var vnode = getFirstComponentChild(slot);
                    var componentOptions = vnode && vnode.componentOptions;
                    if (componentOptions) {
                        // check pattern
                        var name = getComponentName(componentOptions);
                        var ref = this;
                        var include = ref.include;
                        var exclude = ref.exclude;
                        if (
                            // not included
                            (include && (!name || !matches(include, name))) ||
                            // excluded
                            (exclude && name && matches(exclude, name))
                        ) {
                            return vnode
                        }

                        var ref$1 = this;
                        var cache = ref$1.cache;
                        var keys = ref$1.keys;
                        var key = vnode.key == null
                            // same constructor may get registered as different local components
                            // so cid alone is not enough (#3269)
                            ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
                            : vnode.key;
                        if (cache[key]) {
                            vnode.componentInstance = cache[key].componentInstance;
                            // make current key freshest
                            remove(keys, key);
                            keys.push(key);
                        } else {
                            cache[key] = vnode;
                            keys.push(key);
                            // prune oldest entry
                            if (this.max && keys.length > parseInt(this.max)) {
                                pruneCacheEntry(cache, keys[0], keys, this._vnode);
                            }
                        }

                        vnode.data.keepAlive = true;
                    }
                    return vnode || (slot && slot[0])
                }
            };

            var builtInComponents = {
                KeepAlive: KeepAlive
            };

            /*  */

            function initGlobalAPI(Vue) {
                // config
                var configDef = {};
                configDef.get = function () {
                    return config;
                };
                {
                    configDef.set = function () {
                        warn(
                            'Do not replace the Vue.config object, set individual fields instead.'
                        );
                    };
                }
                Object.defineProperty(Vue, 'config', configDef);

                // exposed util methods.
                // NOTE: these are not considered part of the public API - avoid relying on
                // them unless you are aware of the risk.
                Vue.util = {
                    warn: warn,
                    extend: extend,
                    mergeOptions: mergeOptions,
                    defineReactive: defineReactive$$1
                };

                Vue.set = set;
                Vue.delete = del;
                Vue.nextTick = nextTick;

                // 2.6 explicit observable API
                Vue.observable = function (obj) {
                    observe(obj);
                    return obj
                };

                Vue.options = Object.create(null);
                ASSET_TYPES.forEach(function (type) {
                    Vue.options[type + 's'] = Object.create(null);
                });

                // this is used to identify the "base" constructor to extend all plain-object
                // components with in Weex's multi-instance scenarios.
                Vue.options._base = Vue;

                extend(Vue.options.components, builtInComponents);

                initUse(Vue);
                initMixin$1(Vue);
                initExtend(Vue);
                initAssetRegisters(Vue);
            }

            initGlobalAPI(Vue);

            Object.defineProperty(Vue.prototype, '$isServer', {
                get: isServerRendering
            });

            Object.defineProperty(Vue.prototype, '$ssrContext', {
                get: function get() {
                    /* istanbul ignore next */
                    return this.$vnode && this.$vnode.ssrContext
                }
            });

// expose FunctionalRenderContext for ssr runtime helper installation
            Object.defineProperty(Vue, 'FunctionalRenderContext', {
                value: FunctionalRenderContext
            });

            Vue.version = '2.6.11';

            /*  */

// these are reserved for web because they are directly compiled away
// during template compilation
            var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
            var acceptValue = makeMap('input,textarea,option,select,progress');
            var mustUseProp = function (tag, type, attr) {
                return (
                    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
                    (attr === 'selected' && tag === 'option') ||
                    (attr === 'checked' && tag === 'input') ||
                    (attr === 'muted' && tag === 'video')
                )
            };

            var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

            var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

            var convertEnumeratedValue = function (key, value) {
                return isFalsyAttrValue(value) || value === 'false'
                    ? 'false'
                    // allow arbitrary string value for contenteditable
                    : key === 'contenteditable' && isValidContentEditableValue(value)
                        ? value
                        : 'true'
            };

            var isBooleanAttr = makeMap(
                'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
                'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
                'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
                'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
                'required,reversed,scoped,seamless,selected,sortable,translate,' +
                'truespeed,typemustmatch,visible'
            );

            var xlinkNS = 'http://www.w3.org/1999/xlink';

            var isXlink = function (name) {
                return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
            };

            var getXlinkProp = function (name) {
                return isXlink(name) ? name.slice(6, name.length) : ''
            };

            var isFalsyAttrValue = function (val) {
                return val == null || val === false
            };

            /*  */

            function genClassForVnode(vnode) {
                var data = vnode.data;
                var parentNode = vnode;
                var childNode = vnode;
                while (isDef(childNode.componentInstance)) {
                    childNode = childNode.componentInstance._vnode;
                    if (childNode && childNode.data) {
                        data = mergeClassData(childNode.data, data);
                    }
                }
                while (isDef(parentNode = parentNode.parent)) {
                    if (parentNode && parentNode.data) {
                        data = mergeClassData(data, parentNode.data);
                    }
                }
                return renderClass(data.staticClass, data.class)
            }

            function mergeClassData(child, parent) {
                return {
                    staticClass: concat(child.staticClass, parent.staticClass),
                    class: isDef(child.class)
                        ? [child.class, parent.class]
                        : parent.class
                }
            }

            function renderClass(
                staticClass,
                dynamicClass
            ) {
                if (isDef(staticClass) || isDef(dynamicClass)) {
                    return concat(staticClass, stringifyClass(dynamicClass))
                }
                /* istanbul ignore next */
                return ''
            }

            function concat(a, b) {
                return a ? b ? (a + ' ' + b) : a : (b || '')
            }

            function stringifyClass(value) {
                if (Array.isArray(value)) {
                    return stringifyArray(value)
                }
                if (isObject(value)) {
                    return stringifyObject(value)
                }
                if (typeof value === 'string') {
                    return value
                }
                /* istanbul ignore next */
                return ''
            }

            function stringifyArray(value) {
                var res = '';
                var stringified;
                for (var i = 0, l = value.length; i < l; i++) {
                    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
                        if (res) {
                            res += ' ';
                        }
                        res += stringified;
                    }
                }
                return res
            }

            function stringifyObject(value) {
                var res = '';
                for (var key in value) {
                    if (value[key]) {
                        if (res) {
                            res += ' ';
                        }
                        res += key;
                    }
                }
                return res
            }

            /*  */

            var namespaceMap = {
                svg: 'http://www.w3.org/2000/svg',
                math: 'http://www.w3.org/1998/Math/MathML'
            };

            var isHTMLTag = makeMap(
                'html,body,base,head,link,meta,style,title,' +
                'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
                'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
                'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
                's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
                'embed,object,param,source,canvas,script,noscript,del,ins,' +
                'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
                'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
                'output,progress,select,textarea,' +
                'details,dialog,menu,menuitem,summary,' +
                'content,element,shadow,template,blockquote,iframe,tfoot'
            );

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
            var isSVG = makeMap(
                'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
                'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
                'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
                true
            );

            var isPreTag = function (tag) {
                return tag === 'pre';
            };

            var isReservedTag = function (tag) {
                return isHTMLTag(tag) || isSVG(tag)
            };

            function getTagNamespace(tag) {
                if (isSVG(tag)) {
                    return 'svg'
                }
                // basic support for MathML
                // note it doesn't support other MathML elements being component roots
                if (tag === 'math') {
                    return 'math'
                }
            }

            var unknownElementCache = Object.create(null);

            function isUnknownElement(tag) {
                /* istanbul ignore if */
                if (!inBrowser) {
                    return true
                }
                if (isReservedTag(tag)) {
                    return false
                }
                tag = tag.toLowerCase();
                /* istanbul ignore if */
                if (unknownElementCache[tag] != null) {
                    return unknownElementCache[tag]
                }
                var el = document.createElement(tag);
                if (tag.indexOf('-') > -1) {
                    // http://stackoverflow.com/a/28210364/1070244
                    return (unknownElementCache[tag] = (
                        el.constructor === window.HTMLUnknownElement ||
                        el.constructor === window.HTMLElement
                    ))
                } else {
                    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
                }
            }

            var isTextInputType = makeMap('text,number,password,search,email,tel,url');

            /*  */

            /**
             * Query an element selector if it's not an element already.
             */
            function query(el) {
                if (typeof el === 'string') {
                    var selected = document.querySelector(el);
                    if (!selected) {
                        warn(
                            'Cannot find element: ' + el
                        );
                        return document.createElement('div')
                    }
                    return selected
                } else {
                    return el
                }
            }

            /*  */

            function createElement$1(tagName, vnode) {
                var elm = document.createElement(tagName);
                if (tagName !== 'select') {
                    return elm
                }
                // false or null will remove the attribute but undefined will not
                if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
                    elm.setAttribute('multiple', 'multiple');
                }
                return elm
            }

            function createElementNS(namespace, tagName) {
                return document.createElementNS(namespaceMap[namespace], tagName)
            }

            function createTextNode(text) {
                return document.createTextNode(text)
            }

            function createComment(text) {
                return document.createComment(text)
            }

            function insertBefore(parentNode, newNode, referenceNode) {
                parentNode.insertBefore(newNode, referenceNode);
            }

            function removeChild(node, child) {
                node.removeChild(child);
            }

            function appendChild(node, child) {
                node.appendChild(child);
            }

            function parentNode(node) {
                return node.parentNode
            }

            function nextSibling(node) {
                return node.nextSibling
            }

            function tagName(node) {
                return node.tagName
            }

            function setTextContent(node, text) {
                node.textContent = text;
            }

            function setStyleScope(node, scopeId) {
                node.setAttribute(scopeId, '');
            }

            var nodeOps = /*#__PURE__*/Object.freeze({
                createElement: createElement$1,
                createElementNS: createElementNS,
                createTextNode: createTextNode,
                createComment: createComment,
                insertBefore: insertBefore,
                removeChild: removeChild,
                appendChild: appendChild,
                parentNode: parentNode,
                nextSibling: nextSibling,
                tagName: tagName,
                setTextContent: setTextContent,
                setStyleScope: setStyleScope
            });

            /*  */

            var ref = {
                create: function create(_, vnode) {
                    registerRef(vnode);
                },
                update: function update(oldVnode, vnode) {
                    if (oldVnode.data.ref !== vnode.data.ref) {
                        registerRef(oldVnode, true);
                        registerRef(vnode);
                    }
                },
                destroy: function destroy(vnode) {
                    registerRef(vnode, true);
                }
            };

            function registerRef(vnode, isRemoval) {
                var key = vnode.data.ref;
                if (!isDef(key)) {
                    return
                }

                var vm = vnode.context;
                var ref = vnode.componentInstance || vnode.elm;
                var refs = vm.$refs;
                if (isRemoval) {
                    if (Array.isArray(refs[key])) {
                        remove(refs[key], ref);
                    } else if (refs[key] === ref) {
                        refs[key] = undefined;
                    }
                } else {
                    if (vnode.data.refInFor) {
                        if (!Array.isArray(refs[key])) {
                            refs[key] = [ref];
                        } else if (refs[key].indexOf(ref) < 0) {
                            // $flow-disable-line
                            refs[key].push(ref);
                        }
                    } else {
                        refs[key] = ref;
                    }
                }
            }

            /**
             * Virtual DOM patching algorithm based on Snabbdom by
             * Simon Friis Vindum (@paldepind)
             * Licensed under the MIT License
             * https://github.com/paldepind/snabbdom/blob/master/LICENSE
             *
             * modified by Evan You (@yyx990803)
             *
             * Not type-checking this because this file is perf-critical and the cost
             * of making flow understand it is not worth it.
             */

            var emptyNode = new VNode('', {}, []);

            var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

            function sameVnode(a, b) {
                return (
                    a.key === b.key && (
                        (
                            a.tag === b.tag &&
                            a.isComment === b.isComment &&
                            isDef(a.data) === isDef(b.data) &&
                            sameInputType(a, b)
                        ) || (
                            isTrue(a.isAsyncPlaceholder) &&
                            a.asyncFactory === b.asyncFactory &&
                            isUndef(b.asyncFactory.error)
                        )
                    )
                )
            }

            function sameInputType(a, b) {
                if (a.tag !== 'input') {
                    return true
                }
                var i;
                var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
                var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
                return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
            }

            function createKeyToOldIdx(children, beginIdx, endIdx) {
                var i, key;
                var map = {};
                for (i = beginIdx; i <= endIdx; ++i) {
                    key = children[i].key;
                    if (isDef(key)) {
                        map[key] = i;
                    }
                }
                return map
            }

            function createPatchFunction(backend) {
                var i, j;
                var cbs = {};

                var modules = backend.modules;
                var nodeOps = backend.nodeOps;

                for (i = 0; i < hooks.length; ++i) {
                    cbs[hooks[i]] = [];
                    for (j = 0; j < modules.length; ++j) {
                        if (isDef(modules[j][hooks[i]])) {
                            cbs[hooks[i]].push(modules[j][hooks[i]]);
                        }
                    }
                }

                function emptyNodeAt(elm) {
                    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
                }

                function createRmCb(childElm, listeners) {
                    function remove$$1() {
                        if (--remove$$1.listeners === 0) {
                            removeNode(childElm);
                        }
                    }

                    remove$$1.listeners = listeners;
                    return remove$$1
                }

                function removeNode(el) {
                    var parent = nodeOps.parentNode(el);
                    // element may have already been removed due to v-html / v-text
                    if (isDef(parent)) {
                        nodeOps.removeChild(parent, el);
                    }
                }

                function isUnknownElement$$1(vnode, inVPre) {
                    return (
                        !inVPre &&
                        !vnode.ns &&
                        !(
                            config.ignoredElements.length &&
                            config.ignoredElements.some(function (ignore) {
                                return isRegExp(ignore)
                                    ? ignore.test(vnode.tag)
                                    : ignore === vnode.tag
                            })
                        ) &&
                        config.isUnknownElement(vnode.tag)
                    )
                }

                var creatingElmInVPre = 0;

                function createElm(
                    vnode,
                    insertedVnodeQueue,
                    parentElm,
                    refElm,
                    nested,
                    ownerArray,
                    index
                ) {
                    if (isDef(vnode.elm) && isDef(ownerArray)) {
                        // This vnode was used in a previous render!
                        // now it's used as a new node, overwriting its elm would cause
                        // potential patch errors down the road when it's used as an insertion
                        // reference node. Instead, we clone the node on-demand before creating
                        // associated DOM element for it.
                        vnode = ownerArray[index] = cloneVNode(vnode);
                    }

                    vnode.isRootInsert = !nested; // for transition enter check
                    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
                        return
                    }

                    var data = vnode.data;
                    var children = vnode.children;
                    var tag = vnode.tag;
                    if (isDef(tag)) {
                        {
                            if (data && data.pre) {
                                creatingElmInVPre++;
                            }
                            if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
                                warn(
                                    'Unknown custom element: <' + tag + '> - did you ' +
                                    'register the component correctly? For recursive components, ' +
                                    'make sure to provide the "name" option.',
                                    vnode.context
                                );
                            }
                        }

                        vnode.elm = vnode.ns
                            ? nodeOps.createElementNS(vnode.ns, tag)
                            : nodeOps.createElement(tag, vnode);
                        setScope(vnode);

                        /* istanbul ignore if */
                        {
                            createChildren(vnode, children, insertedVnodeQueue);
                            if (isDef(data)) {
                                invokeCreateHooks(vnode, insertedVnodeQueue);
                            }
                            insert(parentElm, vnode.elm, refElm);
                        }

                        if (data && data.pre) {
                            creatingElmInVPre--;
                        }
                    } else if (isTrue(vnode.isComment)) {
                        vnode.elm = nodeOps.createComment(vnode.text);
                        insert(parentElm, vnode.elm, refElm);
                    } else {
                        vnode.elm = nodeOps.createTextNode(vnode.text);
                        insert(parentElm, vnode.elm, refElm);
                    }
                }

                function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
                    var i = vnode.data;
                    if (isDef(i)) {
                        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
                        if (isDef(i = i.hook) && isDef(i = i.init)) {
                            i(vnode, false /* hydrating */);
                        }
                        // after calling the init hook, if the vnode is a child component
                        // it should've created a child instance and mounted it. the child
                        // component also has set the placeholder vnode's elm.
                        // in that case we can just return the element and be done.
                        if (isDef(vnode.componentInstance)) {
                            initComponent(vnode, insertedVnodeQueue);
                            insert(parentElm, vnode.elm, refElm);
                            if (isTrue(isReactivated)) {
                                reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
                            }
                            return true
                        }
                    }
                }

                function initComponent(vnode, insertedVnodeQueue) {
                    if (isDef(vnode.data.pendingInsert)) {
                        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
                        vnode.data.pendingInsert = null;
                    }
                    vnode.elm = vnode.componentInstance.$el;
                    if (isPatchable(vnode)) {
                        invokeCreateHooks(vnode, insertedVnodeQueue);
                        setScope(vnode);
                    } else {
                        // empty component root.
                        // skip all element-related modules except for ref (#3455)
                        registerRef(vnode);
                        // make sure to invoke the insert hook
                        insertedVnodeQueue.push(vnode);
                    }
                }

                function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
                    var i;
                    // hack for #4339: a reactivated component with inner transition
                    // does not trigger because the inner node's created hooks are not called
                    // again. It's not ideal to involve module-specific logic in here but
                    // there doesn't seem to be a better way to do it.
                    var innerNode = vnode;
                    while (innerNode.componentInstance) {
                        innerNode = innerNode.componentInstance._vnode;
                        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
                            for (i = 0; i < cbs.activate.length; ++i) {
                                cbs.activate[i](emptyNode, innerNode);
                            }
                            insertedVnodeQueue.push(innerNode);
                            break
                        }
                    }
                    // unlike a newly created component,
                    // a reactivated keep-alive component doesn't insert itself
                    insert(parentElm, vnode.elm, refElm);
                }

                function insert(parent, elm, ref$$1) {
                    if (isDef(parent)) {
                        if (isDef(ref$$1)) {
                            if (nodeOps.parentNode(ref$$1) === parent) {
                                nodeOps.insertBefore(parent, elm, ref$$1);
                            }
                        } else {
                            nodeOps.appendChild(parent, elm);
                        }
                    }
                }

                function createChildren(vnode, children, insertedVnodeQueue) {
                    if (Array.isArray(children)) {
                        {
                            checkDuplicateKeys(children);
                        }
                        for (var i = 0; i < children.length; ++i) {
                            createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
                        }
                    } else if (isPrimitive(vnode.text)) {
                        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
                    }
                }

                function isPatchable(vnode) {
                    while (vnode.componentInstance) {
                        vnode = vnode.componentInstance._vnode;
                    }
                    return isDef(vnode.tag)
                }

                function invokeCreateHooks(vnode, insertedVnodeQueue) {
                    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                        cbs.create[i$1](emptyNode, vnode);
                    }
                    i = vnode.data.hook; // Reuse variable
                    if (isDef(i)) {
                        if (isDef(i.create)) {
                            i.create(emptyNode, vnode);
                        }
                        if (isDef(i.insert)) {
                            insertedVnodeQueue.push(vnode);
                        }
                    }
                }

                // set scope id attribute for scoped CSS.
                // this is implemented as a special case to avoid the overhead
                // of going through the normal attribute patching process.
                function setScope(vnode) {
                    var i;
                    if (isDef(i = vnode.fnScopeId)) {
                        nodeOps.setStyleScope(vnode.elm, i);
                    } else {
                        var ancestor = vnode;
                        while (ancestor) {
                            if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
                                nodeOps.setStyleScope(vnode.elm, i);
                            }
                            ancestor = ancestor.parent;
                        }
                    }
                    // for slot content they should also get the scopeId from the host instance.
                    if (isDef(i = activeInstance) &&
                        i !== vnode.context &&
                        i !== vnode.fnContext &&
                        isDef(i = i.$options._scopeId)
                    ) {
                        nodeOps.setStyleScope(vnode.elm, i);
                    }
                }

                function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
                    for (; startIdx <= endIdx; ++startIdx) {
                        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
                    }
                }

                function invokeDestroyHook(vnode) {
                    var i, j;
                    var data = vnode.data;
                    if (isDef(data)) {
                        if (isDef(i = data.hook) && isDef(i = i.destroy)) {
                            i(vnode);
                        }
                        for (i = 0; i < cbs.destroy.length; ++i) {
                            cbs.destroy[i](vnode);
                        }
                    }
                    if (isDef(i = vnode.children)) {
                        for (j = 0; j < vnode.children.length; ++j) {
                            invokeDestroyHook(vnode.children[j]);
                        }
                    }
                }

                function removeVnodes(vnodes, startIdx, endIdx) {
                    for (; startIdx <= endIdx; ++startIdx) {
                        var ch = vnodes[startIdx];
                        if (isDef(ch)) {
                            if (isDef(ch.tag)) {
                                removeAndInvokeRemoveHook(ch);
                                invokeDestroyHook(ch);
                            } else { // Text node
                                removeNode(ch.elm);
                            }
                        }
                    }
                }

                function removeAndInvokeRemoveHook(vnode, rm) {
                    if (isDef(rm) || isDef(vnode.data)) {
                        var i;
                        var listeners = cbs.remove.length + 1;
                        if (isDef(rm)) {
                            // we have a recursively passed down rm callback
                            // increase the listeners count
                            rm.listeners += listeners;
                        } else {
                            // directly removing
                            rm = createRmCb(vnode.elm, listeners);
                        }
                        // recursively invoke hooks on child component root node
                        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
                            removeAndInvokeRemoveHook(i, rm);
                        }
                        for (i = 0; i < cbs.remove.length; ++i) {
                            cbs.remove[i](vnode, rm);
                        }
                        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
                            i(vnode, rm);
                        } else {
                            rm();
                        }
                    } else {
                        removeNode(vnode.elm);
                    }
                }

                function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
                    var oldStartIdx = 0;
                    var newStartIdx = 0;
                    var oldEndIdx = oldCh.length - 1;
                    var oldStartVnode = oldCh[0];
                    var oldEndVnode = oldCh[oldEndIdx];
                    var newEndIdx = newCh.length - 1;
                    var newStartVnode = newCh[0];
                    var newEndVnode = newCh[newEndIdx];
                    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

                    // removeOnly is a special flag used only by <transition-group>
                    // to ensure removed elements stay in correct relative positions
                    // during leaving transitions
                    var canMove = !removeOnly;

                    {
                        checkDuplicateKeys(newCh);
                    }

                    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
                        if (isUndef(oldStartVnode)) {
                            oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
                        } else if (isUndef(oldEndVnode)) {
                            oldEndVnode = oldCh[--oldEndIdx];
                        } else if (sameVnode(oldStartVnode, newStartVnode)) {
                            patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                            oldStartVnode = oldCh[++oldStartIdx];
                            newStartVnode = newCh[++newStartIdx];
                        } else if (sameVnode(oldEndVnode, newEndVnode)) {
                            patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
                            oldEndVnode = oldCh[--oldEndIdx];
                            newEndVnode = newCh[--newEndIdx];
                        } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
                            patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
                            canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
                            oldStartVnode = oldCh[++oldStartIdx];
                            newEndVnode = newCh[--newEndIdx];
                        } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
                            patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                            canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
                            oldEndVnode = oldCh[--oldEndIdx];
                            newStartVnode = newCh[++newStartIdx];
                        } else {
                            if (isUndef(oldKeyToIdx)) {
                                oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
                            }
                            idxInOld = isDef(newStartVnode.key)
                                ? oldKeyToIdx[newStartVnode.key]
                                : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
                            if (isUndef(idxInOld)) { // New element
                                createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                            } else {
                                vnodeToMove = oldCh[idxInOld];
                                if (sameVnode(vnodeToMove, newStartVnode)) {
                                    patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
                                    oldCh[idxInOld] = undefined;
                                    canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
                                } else {
                                    // same key but different element. treat as new element
                                    createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
                                }
                            }
                            newStartVnode = newCh[++newStartIdx];
                        }
                    }
                    if (oldStartIdx > oldEndIdx) {
                        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
                        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
                    } else if (newStartIdx > newEndIdx) {
                        removeVnodes(oldCh, oldStartIdx, oldEndIdx);
                    }
                }

                function checkDuplicateKeys(children) {
                    var seenKeys = {};
                    for (var i = 0; i < children.length; i++) {
                        var vnode = children[i];
                        var key = vnode.key;
                        if (isDef(key)) {
                            if (seenKeys[key]) {
                                warn(
                                    ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
                                    vnode.context
                                );
                            } else {
                                seenKeys[key] = true;
                            }
                        }
                    }
                }

                function findIdxInOld(node, oldCh, start, end) {
                    for (var i = start; i < end; i++) {
                        var c = oldCh[i];
                        if (isDef(c) && sameVnode(node, c)) {
                            return i
                        }
                    }
                }

                function patchVnode(
                    oldVnode,
                    vnode,
                    insertedVnodeQueue,
                    ownerArray,
                    index,
                    removeOnly
                ) {
                    if (oldVnode === vnode) {
                        return
                    }

                    if (isDef(vnode.elm) && isDef(ownerArray)) {
                        // clone reused vnode
                        vnode = ownerArray[index] = cloneVNode(vnode);
                    }

                    var elm = vnode.elm = oldVnode.elm;

                    if (isTrue(oldVnode.isAsyncPlaceholder)) {
                        if (isDef(vnode.asyncFactory.resolved)) {
                            hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
                        } else {
                            vnode.isAsyncPlaceholder = true;
                        }
                        return
                    }

                    // reuse element for static trees.
                    // note we only do this if the vnode is cloned -
                    // if the new node is not cloned it means the render functions have been
                    // reset by the hot-reload-api and we need to do a proper re-render.
                    if (isTrue(vnode.isStatic) &&
                        isTrue(oldVnode.isStatic) &&
                        vnode.key === oldVnode.key &&
                        (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
                    ) {
                        vnode.componentInstance = oldVnode.componentInstance;
                        return
                    }

                    var i;
                    var data = vnode.data;
                    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
                        i(oldVnode, vnode);
                    }

                    var oldCh = oldVnode.children;
                    var ch = vnode.children;
                    if (isDef(data) && isPatchable(vnode)) {
                        for (i = 0; i < cbs.update.length; ++i) {
                            cbs.update[i](oldVnode, vnode);
                        }
                        if (isDef(i = data.hook) && isDef(i = i.update)) {
                            i(oldVnode, vnode);
                        }
                    }
                    if (isUndef(vnode.text)) {
                        if (isDef(oldCh) && isDef(ch)) {
                            if (oldCh !== ch) {
                                updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
                            }
                        } else if (isDef(ch)) {
                            {
                                checkDuplicateKeys(ch);
                            }
                            if (isDef(oldVnode.text)) {
                                nodeOps.setTextContent(elm, '');
                            }
                            addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
                        } else if (isDef(oldCh)) {
                            removeVnodes(oldCh, 0, oldCh.length - 1);
                        } else if (isDef(oldVnode.text)) {
                            nodeOps.setTextContent(elm, '');
                        }
                    } else if (oldVnode.text !== vnode.text) {
                        nodeOps.setTextContent(elm, vnode.text);
                    }
                    if (isDef(data)) {
                        if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
                            i(oldVnode, vnode);
                        }
                    }
                }

                function invokeInsertHook(vnode, queue, initial) {
                    // delay insert hooks for component root nodes, invoke them after the
                    // element is really inserted
                    if (isTrue(initial) && isDef(vnode.parent)) {
                        vnode.parent.data.pendingInsert = queue;
                    } else {
                        for (var i = 0; i < queue.length; ++i) {
                            queue[i].data.hook.insert(queue[i]);
                        }
                    }
                }

                var hydrationBailed = false;
                // list of modules that can skip create hook during hydration because they
                // are already rendered on the client or has no need for initialization
                // Note: style is excluded because it relies on initial clone for future
                // deep updates (#7063).
                var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

                // Note: this is a browser-only function so we can assume elms are DOM nodes.
                function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
                    var i;
                    var tag = vnode.tag;
                    var data = vnode.data;
                    var children = vnode.children;
                    inVPre = inVPre || (data && data.pre);
                    vnode.elm = elm;

                    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
                        vnode.isAsyncPlaceholder = true;
                        return true
                    }
                    // assert node match
                    {
                        if (!assertNodeMatch(elm, vnode, inVPre)) {
                            return false
                        }
                    }
                    if (isDef(data)) {
                        if (isDef(i = data.hook) && isDef(i = i.init)) {
                            i(vnode, true /* hydrating */);
                        }
                        if (isDef(i = vnode.componentInstance)) {
                            // child component. it should have hydrated its own tree.
                            initComponent(vnode, insertedVnodeQueue);
                            return true
                        }
                    }
                    if (isDef(tag)) {
                        if (isDef(children)) {
                            // empty element, allow client to pick up and populate children
                            if (!elm.hasChildNodes()) {
                                createChildren(vnode, children, insertedVnodeQueue);
                            } else {
                                // v-html and domProps: innerHTML
                                if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
                                    if (i !== elm.innerHTML) {
                                        /* istanbul ignore if */
                                        if (typeof console !== 'undefined' &&
                                            !hydrationBailed
                                        ) {
                                            hydrationBailed = true;
                                            console.warn('Parent: ', elm);
                                            console.warn('server innerHTML: ', i);
                                            console.warn('client innerHTML: ', elm.innerHTML);
                                        }
                                        return false
                                    }
                                } else {
                                    // iterate and compare children lists
                                    var childrenMatch = true;
                                    var childNode = elm.firstChild;
                                    for (var i$1 = 0; i$1 < children.length; i$1++) {
                                        if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                                            childrenMatch = false;
                                            break
                                        }
                                        childNode = childNode.nextSibling;
                                    }
                                    // if childNode is not null, it means the actual childNodes list is
                                    // longer than the virtual children list.
                                    if (!childrenMatch || childNode) {
                                        /* istanbul ignore if */
                                        if (typeof console !== 'undefined' &&
                                            !hydrationBailed
                                        ) {
                                            hydrationBailed = true;
                                            console.warn('Parent: ', elm);
                                            console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
                                        }
                                        return false
                                    }
                                }
                            }
                        }
                        if (isDef(data)) {
                            var fullInvoke = false;
                            for (var key in data) {
                                if (!isRenderedModule(key)) {
                                    fullInvoke = true;
                                    invokeCreateHooks(vnode, insertedVnodeQueue);
                                    break
                                }
                            }
                            if (!fullInvoke && data['class']) {
                                // ensure collecting deps for deep class bindings for future updates
                                traverse(data['class']);
                            }
                        }
                    } else if (elm.data !== vnode.text) {
                        elm.data = vnode.text;
                    }
                    return true
                }

                function assertNodeMatch(node, vnode, inVPre) {
                    if (isDef(vnode.tag)) {
                        return vnode.tag.indexOf('vue-component') === 0 || (
                            !isUnknownElement$$1(vnode, inVPre) &&
                            vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
                        )
                    } else {
                        return node.nodeType === (vnode.isComment ? 8 : 3)
                    }
                }

                return function patch(oldVnode, vnode, hydrating, removeOnly) {
                    if (isUndef(vnode)) {
                        if (isDef(oldVnode)) {
                            invokeDestroyHook(oldVnode);
                        }
                        return
                    }

                    var isInitialPatch = false;
                    var insertedVnodeQueue = [];

                    if (isUndef(oldVnode)) {
                        // empty mount (likely as component), create new root element
                        isInitialPatch = true;
                        createElm(vnode, insertedVnodeQueue);
                    } else {
                        var isRealElement = isDef(oldVnode.nodeType);
                        if (!isRealElement && sameVnode(oldVnode, vnode)) {
                            // patch existing root node
                            patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
                        } else {
                            if (isRealElement) {
                                // mounting to a real element
                                // check if this is server-rendered content and if we can perform
                                // a successful hydration.
                                if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
                                    oldVnode.removeAttribute(SSR_ATTR);
                                    hydrating = true;
                                }
                                if (isTrue(hydrating)) {
                                    if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                                        invokeInsertHook(vnode, insertedVnodeQueue, true);
                                        return oldVnode
                                    } else {
                                        warn(
                                            'The client-side rendered virtual DOM tree is not matching ' +
                                            'server-rendered content. This is likely caused by incorrect ' +
                                            'HTML markup, for example nesting block-level elements inside ' +
                                            '<p>, or missing <tbody>. Bailing hydration and performing ' +
                                            'full client-side render.'
                                        );
                                    }
                                }
                                // either not server-rendered, or hydration failed.
                                // create an empty node and replace it
                                oldVnode = emptyNodeAt(oldVnode);
                            }

                            // replacing existing element
                            var oldElm = oldVnode.elm;
                            var parentElm = nodeOps.parentNode(oldElm);

                            // create new node
                            createElm(
                                vnode,
                                insertedVnodeQueue,
                                // extremely rare edge case: do not insert if old element is in a
                                // leaving transition. Only happens when combining transition +
                                // keep-alive + HOCs. (#4590)
                                oldElm._leaveCb ? null : parentElm,
                                nodeOps.nextSibling(oldElm)
                            );

                            // update parent placeholder node element, recursively
                            if (isDef(vnode.parent)) {
                                var ancestor = vnode.parent;
                                var patchable = isPatchable(vnode);
                                while (ancestor) {
                                    for (var i = 0; i < cbs.destroy.length; ++i) {
                                        cbs.destroy[i](ancestor);
                                    }
                                    ancestor.elm = vnode.elm;
                                    if (patchable) {
                                        for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                                            cbs.create[i$1](emptyNode, ancestor);
                                        }
                                        // #6513
                                        // invoke insert hooks that may have been merged by create hooks.
                                        // e.g. for directives that uses the "inserted" hook.
                                        var insert = ancestor.data.hook.insert;
                                        if (insert.merged) {
                                            // start at index 1 to avoid re-invoking component mounted hook
                                            for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                                                insert.fns[i$2]();
                                            }
                                        }
                                    } else {
                                        registerRef(ancestor);
                                    }
                                    ancestor = ancestor.parent;
                                }
                            }

                            // destroy old node
                            if (isDef(parentElm)) {
                                removeVnodes([oldVnode], 0, 0);
                            } else if (isDef(oldVnode.tag)) {
                                invokeDestroyHook(oldVnode);
                            }
                        }
                    }

                    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
                    return vnode.elm
                }
            }

            /*  */

            var directives = {
                create: updateDirectives,
                update: updateDirectives,
                destroy: function unbindDirectives(vnode) {
                    updateDirectives(vnode, emptyNode);
                }
            };

            function updateDirectives(oldVnode, vnode) {
                if (oldVnode.data.directives || vnode.data.directives) {
                    _update(oldVnode, vnode);
                }
            }

            function _update(oldVnode, vnode) {
                var isCreate = oldVnode === emptyNode;
                var isDestroy = vnode === emptyNode;
                var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
                var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

                var dirsWithInsert = [];
                var dirsWithPostpatch = [];

                var key, oldDir, dir;
                for (key in newDirs) {
                    oldDir = oldDirs[key];
                    dir = newDirs[key];
                    if (!oldDir) {
                        // new directive, bind
                        callHook$1(dir, 'bind', vnode, oldVnode);
                        if (dir.def && dir.def.inserted) {
                            dirsWithInsert.push(dir);
                        }
                    } else {
                        // existing directive, update
                        dir.oldValue = oldDir.value;
                        dir.oldArg = oldDir.arg;
                        callHook$1(dir, 'update', vnode, oldVnode);
                        if (dir.def && dir.def.componentUpdated) {
                            dirsWithPostpatch.push(dir);
                        }
                    }
                }

                if (dirsWithInsert.length) {
                    var callInsert = function () {
                        for (var i = 0; i < dirsWithInsert.length; i++) {
                            callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
                        }
                    };
                    if (isCreate) {
                        mergeVNodeHook(vnode, 'insert', callInsert);
                    } else {
                        callInsert();
                    }
                }

                if (dirsWithPostpatch.length) {
                    mergeVNodeHook(vnode, 'postpatch', function () {
                        for (var i = 0; i < dirsWithPostpatch.length; i++) {
                            callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
                        }
                    });
                }

                if (!isCreate) {
                    for (key in oldDirs) {
                        if (!newDirs[key]) {
                            // no longer present, unbind
                            callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
                        }
                    }
                }
            }

            var emptyModifiers = Object.create(null);

            function normalizeDirectives$1(
                dirs,
                vm
            ) {
                var res = Object.create(null);
                if (!dirs) {
                    // $flow-disable-line
                    return res
                }
                var i, dir;
                for (i = 0; i < dirs.length; i++) {
                    dir = dirs[i];
                    if (!dir.modifiers) {
                        // $flow-disable-line
                        dir.modifiers = emptyModifiers;
                    }
                    res[getRawDirName(dir)] = dir;
                    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
                }
                // $flow-disable-line
                return res
            }

            function getRawDirName(dir) {
                return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
            }

            function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
                var fn = dir.def && dir.def[hook];
                if (fn) {
                    try {
                        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
                    } catch (e) {
                        handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
                    }
                }
            }

            var baseModules = [
                ref,
                directives
            ];

            /*  */

            function updateAttrs(oldVnode, vnode) {
                var opts = vnode.componentOptions;
                if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
                    return
                }
                if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
                    return
                }
                var key, cur, old;
                var elm = vnode.elm;
                var oldAttrs = oldVnode.data.attrs || {};
                var attrs = vnode.data.attrs || {};
                // clone observed objects, as the user probably wants to mutate it
                if (isDef(attrs.__ob__)) {
                    attrs = vnode.data.attrs = extend({}, attrs);
                }

                for (key in attrs) {
                    cur = attrs[key];
                    old = oldAttrs[key];
                    if (old !== cur) {
                        setAttr(elm, key, cur);
                    }
                }
                // #4391: in IE9, setting type can reset value for input[type=radio]
                // #6666: IE/Edge forces progress value down to 1 before setting a max
                /* istanbul ignore if */
                if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
                    setAttr(elm, 'value', attrs.value);
                }
                for (key in oldAttrs) {
                    if (isUndef(attrs[key])) {
                        if (isXlink(key)) {
                            elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
                        } else if (!isEnumeratedAttr(key)) {
                            elm.removeAttribute(key);
                        }
                    }
                }
            }

            function setAttr(el, key, value) {
                if (el.tagName.indexOf('-') > -1) {
                    baseSetAttr(el, key, value);
                } else if (isBooleanAttr(key)) {
                    // set attribute for blank value
                    // e.g. <option disabled>Select one</option>
                    if (isFalsyAttrValue(value)) {
                        el.removeAttribute(key);
                    } else {
                        // technically allowfullscreen is a boolean attribute for <iframe>,
                        // but Flash expects a value of "true" when used on <embed> tag
                        value = key === 'allowfullscreen' && el.tagName === 'EMBED'
                            ? 'true'
                            : key;
                        el.setAttribute(key, value);
                    }
                } else if (isEnumeratedAttr(key)) {
                    el.setAttribute(key, convertEnumeratedValue(key, value));
                } else if (isXlink(key)) {
                    if (isFalsyAttrValue(value)) {
                        el.removeAttributeNS(xlinkNS, getXlinkProp(key));
                    } else {
                        el.setAttributeNS(xlinkNS, key, value);
                    }
                } else {
                    baseSetAttr(el, key, value);
                }
            }

            function baseSetAttr(el, key, value) {
                if (isFalsyAttrValue(value)) {
                    el.removeAttribute(key);
                } else {
                    // #7138: IE10 & 11 fires input event when setting placeholder on
                    // <textarea>... block the first input event and remove the blocker
                    // immediately.
                    /* istanbul ignore if */
                    if (
                        isIE && !isIE9 &&
                        el.tagName === 'TEXTAREA' &&
                        key === 'placeholder' && value !== '' && !el.__ieph
                    ) {
                        var blocker = function (e) {
                            e.stopImmediatePropagation();
                            el.removeEventListener('input', blocker);
                        };
                        el.addEventListener('input', blocker);
                        // $flow-disable-line
                        el.__ieph = true; /* IE placeholder patched */
                    }
                    el.setAttribute(key, value);
                }
            }

            var attrs = {
                create: updateAttrs,
                update: updateAttrs
            };

            /*  */

            function updateClass(oldVnode, vnode) {
                var el = vnode.elm;
                var data = vnode.data;
                var oldData = oldVnode.data;
                if (
                    isUndef(data.staticClass) &&
                    isUndef(data.class) && (
                        isUndef(oldData) || (
                            isUndef(oldData.staticClass) &&
                            isUndef(oldData.class)
                        )
                    )
                ) {
                    return
                }

                var cls = genClassForVnode(vnode);

                // handle transition classes
                var transitionClass = el._transitionClasses;
                if (isDef(transitionClass)) {
                    cls = concat(cls, stringifyClass(transitionClass));
                }

                // set the class
                if (cls !== el._prevClass) {
                    el.setAttribute('class', cls);
                    el._prevClass = cls;
                }
            }

            var klass = {
                create: updateClass,
                update: updateClass
            };

            /*  */

            var validDivisionCharRE = /[\w).+\-_$\]]/;

            function parseFilters(exp) {
                var inSingle = false;
                var inDouble = false;
                var inTemplateString = false;
                var inRegex = false;
                var curly = 0;
                var square = 0;
                var paren = 0;
                var lastFilterIndex = 0;
                var c, prev, i, expression, filters;

                for (i = 0; i < exp.length; i++) {
                    prev = c;
                    c = exp.charCodeAt(i);
                    if (inSingle) {
                        if (c === 0x27 && prev !== 0x5C) {
                            inSingle = false;
                        }
                    } else if (inDouble) {
                        if (c === 0x22 && prev !== 0x5C) {
                            inDouble = false;
                        }
                    } else if (inTemplateString) {
                        if (c === 0x60 && prev !== 0x5C) {
                            inTemplateString = false;
                        }
                    } else if (inRegex) {
                        if (c === 0x2f && prev !== 0x5C) {
                            inRegex = false;
                        }
                    } else if (
                        c === 0x7C && // pipe
                        exp.charCodeAt(i + 1) !== 0x7C &&
                        exp.charCodeAt(i - 1) !== 0x7C &&
                        !curly && !square && !paren
                    ) {
                        if (expression === undefined) {
                            // first filter, end of expression
                            lastFilterIndex = i + 1;
                            expression = exp.slice(0, i).trim();
                        } else {
                            pushFilter();
                        }
                    } else {
                        switch (c) {
                            case 0x22:
                                inDouble = true;
                                break         // "
                            case 0x27:
                                inSingle = true;
                                break         // '
                            case 0x60:
                                inTemplateString = true;
                                break // `
                            case 0x28:
                                paren++;
                                break                 // (
                            case 0x29:
                                paren--;
                                break                 // )
                            case 0x5B:
                                square++;
                                break                // [
                            case 0x5D:
                                square--;
                                break                // ]
                            case 0x7B:
                                curly++;
                                break                 // {
                            case 0x7D:
                                curly--;
                                break                 // }
                        }
                        if (c === 0x2f) { // /
                            var j = i - 1;
                            var p = (void 0);
                            // find first non-whitespace prev char
                            for (; j >= 0; j--) {
                                p = exp.charAt(j);
                                if (p !== ' ') {
                                    break
                                }
                            }
                            if (!p || !validDivisionCharRE.test(p)) {
                                inRegex = true;
                            }
                        }
                    }
                }

                if (expression === undefined) {
                    expression = exp.slice(0, i).trim();
                } else if (lastFilterIndex !== 0) {
                    pushFilter();
                }

                function pushFilter() {
                    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
                    lastFilterIndex = i + 1;
                }

                if (filters) {
                    for (i = 0; i < filters.length; i++) {
                        expression = wrapFilter(expression, filters[i]);
                    }
                }

                return expression
            }

            function wrapFilter(exp, filter) {
                var i = filter.indexOf('(');
                if (i < 0) {
                    // _f: resolveFilter
                    return ("_f(\"" + filter + "\")(" + exp + ")")
                } else {
                    var name = filter.slice(0, i);
                    var args = filter.slice(i + 1);
                    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
                }
            }

            /*  */


            /* eslint-disable no-unused-vars */
            function baseWarn(msg, range) {
                console.error(("[Vue compiler]: " + msg));
            }

            /* eslint-enable no-unused-vars */

            function pluckModuleFunction(
                modules,
                key
            ) {
                return modules
                    ? modules.map(function (m) {
                        return m[key];
                    }).filter(function (_) {
                        return _;
                    })
                    : []
            }

            function addProp(el, name, value, range, dynamic) {
                (el.props || (el.props = [])).push(rangeSetItem({name: name, value: value, dynamic: dynamic}, range));
                el.plain = false;
            }

            function addAttr(el, name, value, range, dynamic) {
                var attrs = dynamic
                    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
                    : (el.attrs || (el.attrs = []));
                attrs.push(rangeSetItem({name: name, value: value, dynamic: dynamic}, range));
                el.plain = false;
            }

// add a raw attr (use this in preTransforms)
            function addRawAttr(el, name, value, range) {
                el.attrsMap[name] = value;
                el.attrsList.push(rangeSetItem({name: name, value: value}, range));
            }

            function addDirective(
                el,
                name,
                rawName,
                value,
                arg,
                isDynamicArg,
                modifiers,
                range
            ) {
                (el.directives || (el.directives = [])).push(rangeSetItem({
                    name: name,
                    rawName: rawName,
                    value: value,
                    arg: arg,
                    isDynamicArg: isDynamicArg,
                    modifiers: modifiers
                }, range));
                el.plain = false;
            }

            function prependModifierMarker(symbol, name, dynamic) {
                return dynamic
                    ? ("_p(" + name + ",\"" + symbol + "\")")
                    : symbol + name // mark the event as captured
            }

            function addHandler(
                el,
                name,
                value,
                modifiers,
                important,
                warn,
                range,
                dynamic
            ) {
                modifiers = modifiers || emptyObject;
                // warn prevent and passive modifier
                /* istanbul ignore if */
                if (
                    warn &&
                    modifiers.prevent && modifiers.passive
                ) {
                    warn(
                        'passive and prevent can\'t be used together. ' +
                        'Passive handler can\'t prevent default event.',
                        range
                    );
                }

                // normalize click.right and click.middle since they don't actually fire
                // this is technically browser-specific, but at least for now browsers are
                // the only target envs that have right/middle clicks.
                if (modifiers.right) {
                    if (dynamic) {
                        name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
                    } else if (name === 'click') {
                        name = 'contextmenu';
                        delete modifiers.right;
                    }
                } else if (modifiers.middle) {
                    if (dynamic) {
                        name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
                    } else if (name === 'click') {
                        name = 'mouseup';
                    }
                }

                // check capture modifier
                if (modifiers.capture) {
                    delete modifiers.capture;
                    name = prependModifierMarker('!', name, dynamic);
                }
                if (modifiers.once) {
                    delete modifiers.once;
                    name = prependModifierMarker('~', name, dynamic);
                }
                /* istanbul ignore if */
                if (modifiers.passive) {
                    delete modifiers.passive;
                    name = prependModifierMarker('&', name, dynamic);
                }

                var events;
                if (modifiers.native) {
                    delete modifiers.native;
                    events = el.nativeEvents || (el.nativeEvents = {});
                } else {
                    events = el.events || (el.events = {});
                }

                var newHandler = rangeSetItem({value: value.trim(), dynamic: dynamic}, range);
                if (modifiers !== emptyObject) {
                    newHandler.modifiers = modifiers;
                }

                var handlers = events[name];
                /* istanbul ignore if */
                if (Array.isArray(handlers)) {
                    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
                } else if (handlers) {
                    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
                } else {
                    events[name] = newHandler;
                }

                el.plain = false;
            }

            function getRawBindingAttr(
                el,
                name
            ) {
                return el.rawAttrsMap[':' + name] ||
                    el.rawAttrsMap['v-bind:' + name] ||
                    el.rawAttrsMap[name]
            }

            function getBindingAttr(
                el,
                name,
                getStatic
            ) {
                var dynamicValue =
                    getAndRemoveAttr(el, ':' + name) ||
                    getAndRemoveAttr(el, 'v-bind:' + name);
                if (dynamicValue != null) {
                    return parseFilters(dynamicValue)
                } else if (getStatic !== false) {
                    var staticValue = getAndRemoveAttr(el, name);
                    if (staticValue != null) {
                        return JSON.stringify(staticValue)
                    }
                }
            }

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
            function getAndRemoveAttr(
                el,
                name,
                removeFromMap
            ) {
                var val;
                if ((val = el.attrsMap[name]) != null) {
                    var list = el.attrsList;
                    for (var i = 0, l = list.length; i < l; i++) {
                        if (list[i].name === name) {
                            list.splice(i, 1);
                            break
                        }
                    }
                }
                if (removeFromMap) {
                    delete el.attrsMap[name];
                }
                return val
            }

            function getAndRemoveAttrByRegex(
                el,
                name
            ) {
                var list = el.attrsList;
                for (var i = 0, l = list.length; i < l; i++) {
                    var attr = list[i];
                    if (name.test(attr.name)) {
                        list.splice(i, 1);
                        return attr
                    }
                }
            }

            function rangeSetItem(
                item,
                range
            ) {
                if (range) {
                    if (range.start != null) {
                        item.start = range.start;
                    }
                    if (range.end != null) {
                        item.end = range.end;
                    }
                }
                return item
            }

            /*  */

            /**
             * Cross-platform code generation for component v-model
             */
            function genComponentModel(
                el,
                value,
                modifiers
            ) {
                var ref = modifiers || {};
                var number = ref.number;
                var trim = ref.trim;

                var baseValueExpression = '$$v';
                var valueExpression = baseValueExpression;
                if (trim) {
                    valueExpression =
                        "(typeof " + baseValueExpression + " === 'string'" +
                        "? " + baseValueExpression + ".trim()" +
                        ": " + baseValueExpression + ")";
                }
                if (number) {
                    valueExpression = "_n(" + valueExpression + ")";
                }
                var assignment = genAssignmentCode(value, valueExpression);

                el.model = {
                    value: ("(" + value + ")"),
                    expression: JSON.stringify(value),
                    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
                };
            }

            /**
             * Cross-platform codegen helper for generating v-model value assignment code.
             */
            function genAssignmentCode(
                value,
                assignment
            ) {
                var res = parseModel(value);
                if (res.key === null) {
                    return (value + "=" + assignment)
                } else {
                    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
                }
            }

            /**
             * Parse a v-model expression into a base path and a final key segment.
             * Handles both dot-path and possible square brackets.
             *
             * Possible cases:
             *
             * - test
             * - test[key]
             * - test[test1[key]]
             * - test["a"][key]
             * - xxx.test[a[a].test1[key]]
             * - test.xxx.a["asa"][test1[key]]
             *
             */

            var len, str, chr, index$1, expressionPos, expressionEndPos;


            function parseModel(val) {
                // Fix https://github.com/vuejs/vue/pull/7730
                // allow v-model="obj.val " (trailing whitespace)
                val = val.trim();
                len = val.length;

                if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
                    index$1 = val.lastIndexOf('.');
                    if (index$1 > -1) {
                        return {
                            exp: val.slice(0, index$1),
                            key: '"' + val.slice(index$1 + 1) + '"'
                        }
                    } else {
                        return {
                            exp: val,
                            key: null
                        }
                    }
                }

                str = val;
                index$1 = expressionPos = expressionEndPos = 0;

                while (!eof()) {
                    chr = next();
                    /* istanbul ignore if */
                    if (isStringStart(chr)) {
                        parseString(chr);
                    } else if (chr === 0x5B) {
                        parseBracket(chr);
                    }
                }

                return {
                    exp: val.slice(0, expressionPos),
                    key: val.slice(expressionPos + 1, expressionEndPos)
                }
            }

            function next() {
                return str.charCodeAt(++index$1)
            }

            function eof() {
                return index$1 >= len
            }

            function isStringStart(chr) {
                return chr === 0x22 || chr === 0x27
            }

            function parseBracket(chr) {
                var inBracket = 1;
                expressionPos = index$1;
                while (!eof()) {
                    chr = next();
                    if (isStringStart(chr)) {
                        parseString(chr);
                        continue
                    }
                    if (chr === 0x5B) {
                        inBracket++;
                    }
                    if (chr === 0x5D) {
                        inBracket--;
                    }
                    if (inBracket === 0) {
                        expressionEndPos = index$1;
                        break
                    }
                }
            }

            function parseString(chr) {
                var stringQuote = chr;
                while (!eof()) {
                    chr = next();
                    if (chr === stringQuote) {
                        break
                    }
                }
            }

            /*  */

            var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
            var RANGE_TOKEN = '__r';
            var CHECKBOX_RADIO_TOKEN = '__c';

            function model(
                el,
                dir,
                _warn
            ) {
                warn$1 = _warn;
                var value = dir.value;
                var modifiers = dir.modifiers;
                var tag = el.tag;
                var type = el.attrsMap.type;

                {
                    // inputs with type="file" are read only and setting the input's
                    // value will throw an error.
                    if (tag === 'input' && type === 'file') {
                        warn$1(
                            "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
                            "File inputs are read only. Use a v-on:change listener instead.",
                            el.rawAttrsMap['v-model']
                        );
                    }
                }

                if (el.component) {
                    genComponentModel(el, value, modifiers);
                    // component v-model doesn't need extra runtime
                    return false
                } else if (tag === 'select') {
                    genSelect(el, value, modifiers);
                } else if (tag === 'input' && type === 'checkbox') {
                    genCheckboxModel(el, value, modifiers);
                } else if (tag === 'input' && type === 'radio') {
                    genRadioModel(el, value, modifiers);
                } else if (tag === 'input' || tag === 'textarea') {
                    genDefaultModel(el, value, modifiers);
                } else if (!config.isReservedTag(tag)) {
                    genComponentModel(el, value, modifiers);
                    // component v-model doesn't need extra runtime
                    return false
                } else {
                    warn$1(
                        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
                        "v-model is not supported on this element type. " +
                        'If you are working with contenteditable, it\'s recommended to ' +
                        'wrap a library dedicated for that purpose inside a custom component.',
                        el.rawAttrsMap['v-model']
                    );
                }

                // ensure runtime directive metadata
                return true
            }

            function genCheckboxModel(
                el,
                value,
                modifiers
            ) {
                var number = modifiers && modifiers.number;
                var valueBinding = getBindingAttr(el, 'value') || 'null';
                var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
                var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
                addProp(el, 'checked',
                    "Array.isArray(" + value + ")" +
                    "?_i(" + value + "," + valueBinding + ")>-1" + (
                        trueValueBinding === 'true'
                            ? (":(" + value + ")")
                            : (":_q(" + value + "," + trueValueBinding + ")")
                    )
                );
                addHandler(el, 'change',
                    "var $$a=" + value + "," +
                    '$$el=$event.target,' +
                    "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
                    'if(Array.isArray($$a)){' +
                    "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
                    '$$i=_i($$a,$$v);' +
                    "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
                    "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
                    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
                    null, true
                );
            }

            function genRadioModel(
                el,
                value,
                modifiers
            ) {
                var number = modifiers && modifiers.number;
                var valueBinding = getBindingAttr(el, 'value') || 'null';
                valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
                addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
                addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
            }

            function genSelect(
                el,
                value,
                modifiers
            ) {
                var number = modifiers && modifiers.number;
                var selectedVal = "Array.prototype.filter" +
                    ".call($event.target.options,function(o){return o.selected})" +
                    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
                    "return " + (number ? '_n(val)' : 'val') + "})";

                var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
                var code = "var $$selectedVal = " + selectedVal + ";";
                code = code + " " + (genAssignmentCode(value, assignment));
                addHandler(el, 'change', code, null, true);
            }

            function genDefaultModel(
                el,
                value,
                modifiers
            ) {
                var type = el.attrsMap.type;

                // warn if v-bind:value conflicts with v-model
                // except for inputs with v-bind:type
                {
                    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
                    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
                    if (value$1 && !typeBinding) {
                        var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
                        warn$1(
                            binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
                            'because the latter already expands to a value binding internally',
                            el.rawAttrsMap[binding]
                        );
                    }
                }

                var ref = modifiers || {};
                var lazy = ref.lazy;
                var number = ref.number;
                var trim = ref.trim;
                var needCompositionGuard = !lazy && type !== 'range';
                var event = lazy
                    ? 'change'
                    : type === 'range'
                        ? RANGE_TOKEN
                        : 'input';

                var valueExpression = '$event.target.value';
                if (trim) {
                    valueExpression = "$event.target.value.trim()";
                }
                if (number) {
                    valueExpression = "_n(" + valueExpression + ")";
                }

                var code = genAssignmentCode(value, valueExpression);
                if (needCompositionGuard) {
                    code = "if($event.target.composing)return;" + code;
                }

                addProp(el, 'value', ("(" + value + ")"));
                addHandler(el, event, code, null, true);
                if (trim || number) {
                    addHandler(el, 'blur', '$forceUpdate()');
                }
            }

            /*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
            function normalizeEvents(on) {
                /* istanbul ignore if */
                if (isDef(on[RANGE_TOKEN])) {
                    // IE input[type=range] only supports `change` event
                    var event = isIE ? 'change' : 'input';
                    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
                    delete on[RANGE_TOKEN];
                }
                // This was originally intended to fix #4521 but no longer necessary
                // after 2.5. Keeping it for backwards compat with generated code from < 2.4
                /* istanbul ignore if */
                if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
                    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
                    delete on[CHECKBOX_RADIO_TOKEN];
                }
            }

            var target$1;

            function createOnceHandler$1(event, handler, capture) {
                var _target = target$1; // save current target element in closure
                return function onceHandler() {
                    var res = handler.apply(null, arguments);
                    if (res !== null) {
                        remove$2(event, onceHandler, capture, _target);
                    }
                }
            }

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
            var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

            function add$1(
                name,
                handler,
                capture,
                passive
            ) {
                // async edge case #6566: inner click event triggers patch, event handler
                // attached to outer element during patch, and triggered again. This
                // happens because browsers fire microtask ticks between event propagation.
                // the solution is simple: we save the timestamp when a handler is attached,
                // and the handler would only fire if the event passed to it was fired
                // AFTER it was attached.
                if (useMicrotaskFix) {
                    var attachedTimestamp = currentFlushTimestamp;
                    var original = handler;
                    handler = original._wrapper = function (e) {
                        if (
                            // no bubbling, should always fire.
                            // this is just a safety net in case event.timeStamp is unreliable in
                            // certain weird environments...
                            e.target === e.currentTarget ||
                            // event is fired after handler attachment
                            e.timeStamp >= attachedTimestamp ||
                            // bail for environments that have buggy event.timeStamp implementations
                            // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
                            // #9681 QtWebEngine event.timeStamp is negative value
                            e.timeStamp <= 0 ||
                            // #9448 bail if event is fired in another document in a multi-page
                            // electron/nw.js app, since event.timeStamp will be using a different
                            // starting reference
                            e.target.ownerDocument !== document
                        ) {
                            return original.apply(this, arguments)
                        }
                    };
                }
                target$1.addEventListener(
                    name,
                    handler,
                    supportsPassive
                        ? {capture: capture, passive: passive}
                        : capture
                );
            }

            function remove$2(
                name,
                handler,
                capture,
                _target
            ) {
                (_target || target$1).removeEventListener(
                    name,
                    handler._wrapper || handler,
                    capture
                );
            }

            function updateDOMListeners(oldVnode, vnode) {
                if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
                    return
                }
                var on = vnode.data.on || {};
                var oldOn = oldVnode.data.on || {};
                target$1 = vnode.elm;
                normalizeEvents(on);
                updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
                target$1 = undefined;
            }

            var events = {
                create: updateDOMListeners,
                update: updateDOMListeners
            };

            /*  */

            var svgContainer;

            function updateDOMProps(oldVnode, vnode) {
                if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
                    return
                }
                var key, cur;
                var elm = vnode.elm;
                var oldProps = oldVnode.data.domProps || {};
                var props = vnode.data.domProps || {};
                // clone observed objects, as the user probably wants to mutate it
                if (isDef(props.__ob__)) {
                    props = vnode.data.domProps = extend({}, props);
                }

                for (key in oldProps) {
                    if (!(key in props)) {
                        elm[key] = '';
                    }
                }

                for (key in props) {
                    cur = props[key];
                    // ignore children if the node has textContent or innerHTML,
                    // as these will throw away existing DOM nodes and cause removal errors
                    // on subsequent patches (#3360)
                    if (key === 'textContent' || key === 'innerHTML') {
                        if (vnode.children) {
                            vnode.children.length = 0;
                        }
                        if (cur === oldProps[key]) {
                            continue
                        }
                        // #6601 work around Chrome version <= 55 bug where single textNode
                        // replaced by innerHTML/textContent retains its parentNode property
                        if (elm.childNodes.length === 1) {
                            elm.removeChild(elm.childNodes[0]);
                        }
                    }

                    if (key === 'value' && elm.tagName !== 'PROGRESS') {
                        // store value as _value as well since
                        // non-string values will be stringified
                        elm._value = cur;
                        // avoid resetting cursor position when value is the same
                        var strCur = isUndef(cur) ? '' : String(cur);
                        if (shouldUpdateValue(elm, strCur)) {
                            elm.value = strCur;
                        }
                    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
                        // IE doesn't support innerHTML for SVG elements
                        svgContainer = svgContainer || document.createElement('div');
                        svgContainer.innerHTML = "<svg>" + cur + "</svg>";
                        var svg = svgContainer.firstChild;
                        while (elm.firstChild) {
                            elm.removeChild(elm.firstChild);
                        }
                        while (svg.firstChild) {
                            elm.appendChild(svg.firstChild);
                        }
                    } else if (
                        // skip the update if old and new VDOM state is the same.
                        // `value` is handled separately because the DOM value may be temporarily
                        // out of sync with VDOM state due to focus, composition and modifiers.
                        // This  #4521 by skipping the unnecesarry `checked` update.
                        cur !== oldProps[key]
                    ) {
                        // some property updates can throw
                        // e.g. `value` on <progress> w/ non-finite value
                        try {
                            elm[key] = cur;
                        } catch (e) {
                        }
                    }
                }
            }

// check platforms/web/util/attrs.js acceptValue


            function shouldUpdateValue(elm, checkVal) {
                return (!elm.composing && (
                    elm.tagName === 'OPTION' ||
                    isNotInFocusAndDirty(elm, checkVal) ||
                    isDirtyWithModifiers(elm, checkVal)
                ))
            }

            function isNotInFocusAndDirty(elm, checkVal) {
                // return true when textbox (.number and .trim) loses focus and its value is
                // not equal to the updated value
                var notInFocus = true;
                // #6157
                // work around IE bug when accessing document.activeElement in an iframe
                try {
                    notInFocus = document.activeElement !== elm;
                } catch (e) {
                }
                return notInFocus && elm.value !== checkVal
            }

            function isDirtyWithModifiers(elm, newVal) {
                var value = elm.value;
                var modifiers = elm._vModifiers; // injected by v-model runtime
                if (isDef(modifiers)) {
                    if (modifiers.number) {
                        return toNumber(value) !== toNumber(newVal)
                    }
                    if (modifiers.trim) {
                        return value.trim() !== newVal.trim()
                    }
                }
                return value !== newVal
            }

            var domProps = {
                create: updateDOMProps,
                update: updateDOMProps
            };

            /*  */

            var parseStyleText = cached(function (cssText) {
                var res = {};
                var listDelimiter = /;(?![^(]*\))/g;
                var propertyDelimiter = /:(.+)/;
                cssText.split(listDelimiter).forEach(function (item) {
                    if (item) {
                        var tmp = item.split(propertyDelimiter);
                        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
                    }
                });
                return res
            });

// merge static and dynamic style data on the same vnode
            function normalizeStyleData(data) {
                var style = normalizeStyleBinding(data.style);
                // static style is pre-processed into an object during compilation
                // and is always a fresh object, so it's safe to merge into it
                return data.staticStyle
                    ? extend(data.staticStyle, style)
                    : style
            }

// normalize possible array / string values into Object
            function normalizeStyleBinding(bindingStyle) {
                if (Array.isArray(bindingStyle)) {
                    return toObject(bindingStyle)
                }
                if (typeof bindingStyle === 'string') {
                    return parseStyleText(bindingStyle)
                }
                return bindingStyle
            }

            /**
             * parent component style should be after child's
             * so that parent component's style could override it
             */
            function getStyle(vnode, checkChild) {
                var res = {};
                var styleData;

                if (checkChild) {
                    var childNode = vnode;
                    while (childNode.componentInstance) {
                        childNode = childNode.componentInstance._vnode;
                        if (
                            childNode && childNode.data &&
                            (styleData = normalizeStyleData(childNode.data))
                        ) {
                            extend(res, styleData);
                        }
                    }
                }

                if ((styleData = normalizeStyleData(vnode.data))) {
                    extend(res, styleData);
                }

                var parentNode = vnode;
                while ((parentNode = parentNode.parent)) {
                    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
                        extend(res, styleData);
                    }
                }
                return res
            }

            /*  */

            var cssVarRE = /^--/;
            var importantRE = /\s*!important$/;
            var setProp = function (el, name, val) {
                /* istanbul ignore if */
                if (cssVarRE.test(name)) {
                    el.style.setProperty(name, val);
                } else if (importantRE.test(val)) {
                    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
                } else {
                    var normalizedName = normalize(name);
                    if (Array.isArray(val)) {
                        // Support values array created by autoprefixer, e.g.
                        // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
                        // Set them one by one, and the browser will only set those it can recognize
                        for (var i = 0, len = val.length; i < len; i++) {
                            el.style[normalizedName] = val[i];
                        }
                    } else {
                        el.style[normalizedName] = val;
                    }
                }
            };

            var vendorNames = ['Webkit', 'Moz', 'ms'];

            var emptyStyle;
            var normalize = cached(function (prop) {
                emptyStyle = emptyStyle || document.createElement('div').style;
                prop = camelize(prop);
                if (prop !== 'filter' && (prop in emptyStyle)) {
                    return prop
                }
                var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
                for (var i = 0; i < vendorNames.length; i++) {
                    var name = vendorNames[i] + capName;
                    if (name in emptyStyle) {
                        return name
                    }
                }
            });

            function updateStyle(oldVnode, vnode) {
                var data = vnode.data;
                var oldData = oldVnode.data;

                if (isUndef(data.staticStyle) && isUndef(data.style) &&
                    isUndef(oldData.staticStyle) && isUndef(oldData.style)
                ) {
                    return
                }

                var cur, name;
                var el = vnode.elm;
                var oldStaticStyle = oldData.staticStyle;
                var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

                // if static style exists, stylebinding already merged into it when doing normalizeStyleData
                var oldStyle = oldStaticStyle || oldStyleBinding;

                var style = normalizeStyleBinding(vnode.data.style) || {};

                // store normalized style under a different key for next diff
                // make sure to clone it if it's reactive, since the user likely wants
                // to mutate it.
                vnode.data.normalizedStyle = isDef(style.__ob__)
                    ? extend({}, style)
                    : style;

                var newStyle = getStyle(vnode, true);

                for (name in oldStyle) {
                    if (isUndef(newStyle[name])) {
                        setProp(el, name, '');
                    }
                }
                for (name in newStyle) {
                    cur = newStyle[name];
                    if (cur !== oldStyle[name]) {
                        // ie9 setting to null has no effect, must use empty string
                        setProp(el, name, cur == null ? '' : cur);
                    }
                }
            }

            var style = {
                create: updateStyle,
                update: updateStyle
            };

            /*  */

            var whitespaceRE = /\s+/;

            /**
             * Add class with compatibility for SVG since classList is not supported on
             * SVG elements in IE
             */
            function addClass(el, cls) {
                /* istanbul ignore if */
                if (!cls || !(cls = cls.trim())) {
                    return
                }

                /* istanbul ignore else */
                if (el.classList) {
                    if (cls.indexOf(' ') > -1) {
                        cls.split(whitespaceRE).forEach(function (c) {
                            return el.classList.add(c);
                        });
                    } else {
                        el.classList.add(cls);
                    }
                } else {
                    var cur = " " + (el.getAttribute('class') || '') + " ";
                    if (cur.indexOf(' ' + cls + ' ') < 0) {
                        el.setAttribute('class', (cur + cls).trim());
                    }
                }
            }

            /**
             * Remove class with compatibility for SVG since classList is not supported on
             * SVG elements in IE
             */
            function removeClass(el, cls) {
                /* istanbul ignore if */
                if (!cls || !(cls = cls.trim())) {
                    return
                }

                /* istanbul ignore else */
                if (el.classList) {
                    if (cls.indexOf(' ') > -1) {
                        cls.split(whitespaceRE).forEach(function (c) {
                            return el.classList.remove(c);
                        });
                    } else {
                        el.classList.remove(cls);
                    }
                    if (!el.classList.length) {
                        el.removeAttribute('class');
                    }
                } else {
                    var cur = " " + (el.getAttribute('class') || '') + " ";
                    var tar = ' ' + cls + ' ';
                    while (cur.indexOf(tar) >= 0) {
                        cur = cur.replace(tar, ' ');
                    }
                    cur = cur.trim();
                    if (cur) {
                        el.setAttribute('class', cur);
                    } else {
                        el.removeAttribute('class');
                    }
                }
            }

            /*  */

            function resolveTransition(def$$1) {
                if (!def$$1) {
                    return
                }
                /* istanbul ignore else */
                if (typeof def$$1 === 'object') {
                    var res = {};
                    if (def$$1.css !== false) {
                        extend(res, autoCssTransition(def$$1.name || 'v'));
                    }
                    extend(res, def$$1);
                    return res
                } else if (typeof def$$1 === 'string') {
                    return autoCssTransition(def$$1)
                }
            }

            var autoCssTransition = cached(function (name) {
                return {
                    enterClass: (name + "-enter"),
                    enterToClass: (name + "-enter-to"),
                    enterActiveClass: (name + "-enter-active"),
                    leaveClass: (name + "-leave"),
                    leaveToClass: (name + "-leave-to"),
                    leaveActiveClass: (name + "-leave-active")
                }
            });

            var hasTransition = inBrowser && !isIE9;
            var TRANSITION = 'transition';
            var ANIMATION = 'animation';

// Transition property/event sniffing
            var transitionProp = 'transition';
            var transitionEndEvent = 'transitionend';
            var animationProp = 'animation';
            var animationEndEvent = 'animationend';
            if (hasTransition) {
                /* istanbul ignore if */
                if (window.ontransitionend === undefined &&
                    window.onwebkittransitionend !== undefined
                ) {
                    transitionProp = 'WebkitTransition';
                    transitionEndEvent = 'webkitTransitionEnd';
                }
                if (window.onanimationend === undefined &&
                    window.onwebkitanimationend !== undefined
                ) {
                    animationProp = 'WebkitAnimation';
                    animationEndEvent = 'webkitAnimationEnd';
                }
            }

// binding to window is necessary to make hot reload work in IE in strict mode
            var raf = inBrowser
                ? window.requestAnimationFrame
                    ? window.requestAnimationFrame.bind(window)
                    : setTimeout
                : /* istanbul ignore next */ function (fn) {
                    return fn();
                };

            function nextFrame(fn) {
                raf(function () {
                    raf(fn);
                });
            }

            function addTransitionClass(el, cls) {
                var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
                if (transitionClasses.indexOf(cls) < 0) {
                    transitionClasses.push(cls);
                    addClass(el, cls);
                }
            }

            function removeTransitionClass(el, cls) {
                if (el._transitionClasses) {
                    remove(el._transitionClasses, cls);
                }
                removeClass(el, cls);
            }

            function whenTransitionEnds(
                el,
                expectedType,
                cb
            ) {
                var ref = getTransitionInfo(el, expectedType);
                var type = ref.type;
                var timeout = ref.timeout;
                var propCount = ref.propCount;
                if (!type) {
                    return cb()
                }
                var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
                var ended = 0;
                var end = function () {
                    el.removeEventListener(event, onEnd);
                    cb();
                };
                var onEnd = function (e) {
                    if (e.target === el) {
                        if (++ended >= propCount) {
                            end();
                        }
                    }
                };
                setTimeout(function () {
                    if (ended < propCount) {
                        end();
                    }
                }, timeout + 1);
                el.addEventListener(event, onEnd);
            }

            var transformRE = /\b(transform|all)(,|$)/;

            function getTransitionInfo(el, expectedType) {
                var styles = window.getComputedStyle(el);
                // JSDOM may return undefined for transition properties
                var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
                var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
                var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
                var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
                var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
                var animationTimeout = getTimeout(animationDelays, animationDurations);

                var type;
                var timeout = 0;
                var propCount = 0;
                /* istanbul ignore if */
                if (expectedType === TRANSITION) {
                    if (transitionTimeout > 0) {
                        type = TRANSITION;
                        timeout = transitionTimeout;
                        propCount = transitionDurations.length;
                    }
                } else if (expectedType === ANIMATION) {
                    if (animationTimeout > 0) {
                        type = ANIMATION;
                        timeout = animationTimeout;
                        propCount = animationDurations.length;
                    }
                } else {
                    timeout = Math.max(transitionTimeout, animationTimeout);
                    type = timeout > 0
                        ? transitionTimeout > animationTimeout
                            ? TRANSITION
                            : ANIMATION
                        : null;
                    propCount = type
                        ? type === TRANSITION
                            ? transitionDurations.length
                            : animationDurations.length
                        : 0;
                }
                var hasTransform =
                    type === TRANSITION &&
                    transformRE.test(styles[transitionProp + 'Property']);
                return {
                    type: type,
                    timeout: timeout,
                    propCount: propCount,
                    hasTransform: hasTransform
                }
            }

            function getTimeout(delays, durations) {
                /* istanbul ignore next */
                while (delays.length < durations.length) {
                    delays = delays.concat(delays);
                }

                return Math.max.apply(null, durations.map(function (d, i) {
                    return toMs(d) + toMs(delays[i])
                }))
            }

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
            function toMs(s) {
                return Number(s.slice(0, -1).replace(',', '.')) * 1000
            }

            /*  */

            function enter(vnode, toggleDisplay) {
                var el = vnode.elm;

                // call leave callback now
                if (isDef(el._leaveCb)) {
                    el._leaveCb.cancelled = true;
                    el._leaveCb();
                }

                var data = resolveTransition(vnode.data.transition);
                if (isUndef(data)) {
                    return
                }

                /* istanbul ignore if */
                if (isDef(el._enterCb) || el.nodeType !== 1) {
                    return
                }

                var css = data.css;
                var type = data.type;
                var enterClass = data.enterClass;
                var enterToClass = data.enterToClass;
                var enterActiveClass = data.enterActiveClass;
                var appearClass = data.appearClass;
                var appearToClass = data.appearToClass;
                var appearActiveClass = data.appearActiveClass;
                var beforeEnter = data.beforeEnter;
                var enter = data.enter;
                var afterEnter = data.afterEnter;
                var enterCancelled = data.enterCancelled;
                var beforeAppear = data.beforeAppear;
                var appear = data.appear;
                var afterAppear = data.afterAppear;
                var appearCancelled = data.appearCancelled;
                var duration = data.duration;

                // activeInstance will always be the <transition> component managing this
                // transition. One edge case to check is when the <transition> is placed
                // as the root node of a child component. In that case we need to check
                // <transition>'s parent for appear check.
                var context = activeInstance;
                var transitionNode = activeInstance.$vnode;
                while (transitionNode && transitionNode.parent) {
                    context = transitionNode.context;
                    transitionNode = transitionNode.parent;
                }

                var isAppear = !context._isMounted || !vnode.isRootInsert;

                if (isAppear && !appear && appear !== '') {
                    return
                }

                var startClass = isAppear && appearClass
                    ? appearClass
                    : enterClass;
                var activeClass = isAppear && appearActiveClass
                    ? appearActiveClass
                    : enterActiveClass;
                var toClass = isAppear && appearToClass
                    ? appearToClass
                    : enterToClass;

                var beforeEnterHook = isAppear
                    ? (beforeAppear || beforeEnter)
                    : beforeEnter;
                var enterHook = isAppear
                    ? (typeof appear === 'function' ? appear : enter)
                    : enter;
                var afterEnterHook = isAppear
                    ? (afterAppear || afterEnter)
                    : afterEnter;
                var enterCancelledHook = isAppear
                    ? (appearCancelled || enterCancelled)
                    : enterCancelled;

                var explicitEnterDuration = toNumber(
                    isObject(duration)
                        ? duration.enter
                        : duration
                );

                if (explicitEnterDuration != null) {
                    checkDuration(explicitEnterDuration, 'enter', vnode);
                }

                var expectsCSS = css !== false && !isIE9;
                var userWantsControl = getHookArgumentsLength(enterHook);

                var cb = el._enterCb = once(function () {
                    if (expectsCSS) {
                        removeTransitionClass(el, toClass);
                        removeTransitionClass(el, activeClass);
                    }
                    if (cb.cancelled) {
                        if (expectsCSS) {
                            removeTransitionClass(el, startClass);
                        }
                        enterCancelledHook && enterCancelledHook(el);
                    } else {
                        afterEnterHook && afterEnterHook(el);
                    }
                    el._enterCb = null;
                });

                if (!vnode.data.show) {
                    // remove pending leave element on enter by injecting an insert hook
                    mergeVNodeHook(vnode, 'insert', function () {
                        var parent = el.parentNode;
                        var pendingNode = parent && parent._pending && parent._pending[vnode.key];
                        if (pendingNode &&
                            pendingNode.tag === vnode.tag &&
                            pendingNode.elm._leaveCb
                        ) {
                            pendingNode.elm._leaveCb();
                        }
                        enterHook && enterHook(el, cb);
                    });
                }

                // start enter transition
                beforeEnterHook && beforeEnterHook(el);
                if (expectsCSS) {
                    addTransitionClass(el, startClass);
                    addTransitionClass(el, activeClass);
                    nextFrame(function () {
                        removeTransitionClass(el, startClass);
                        if (!cb.cancelled) {
                            addTransitionClass(el, toClass);
                            if (!userWantsControl) {
                                if (isValidDuration(explicitEnterDuration)) {
                                    setTimeout(cb, explicitEnterDuration);
                                } else {
                                    whenTransitionEnds(el, type, cb);
                                }
                            }
                        }
                    });
                }

                if (vnode.data.show) {
                    toggleDisplay && toggleDisplay();
                    enterHook && enterHook(el, cb);
                }

                if (!expectsCSS && !userWantsControl) {
                    cb();
                }
            }

            function leave(vnode, rm) {
                var el = vnode.elm;

                // call enter callback now
                if (isDef(el._enterCb)) {
                    el._enterCb.cancelled = true;
                    el._enterCb();
                }

                var data = resolveTransition(vnode.data.transition);
                if (isUndef(data) || el.nodeType !== 1) {
                    return rm()
                }

                /* istanbul ignore if */
                if (isDef(el._leaveCb)) {
                    return
                }

                var css = data.css;
                var type = data.type;
                var leaveClass = data.leaveClass;
                var leaveToClass = data.leaveToClass;
                var leaveActiveClass = data.leaveActiveClass;
                var beforeLeave = data.beforeLeave;
                var leave = data.leave;
                var afterLeave = data.afterLeave;
                var leaveCancelled = data.leaveCancelled;
                var delayLeave = data.delayLeave;
                var duration = data.duration;

                var expectsCSS = css !== false && !isIE9;
                var userWantsControl = getHookArgumentsLength(leave);

                var explicitLeaveDuration = toNumber(
                    isObject(duration)
                        ? duration.leave
                        : duration
                );

                if (isDef(explicitLeaveDuration)) {
                    checkDuration(explicitLeaveDuration, 'leave', vnode);
                }

                var cb = el._leaveCb = once(function () {
                    if (el.parentNode && el.parentNode._pending) {
                        el.parentNode._pending[vnode.key] = null;
                    }
                    if (expectsCSS) {
                        removeTransitionClass(el, leaveToClass);
                        removeTransitionClass(el, leaveActiveClass);
                    }
                    if (cb.cancelled) {
                        if (expectsCSS) {
                            removeTransitionClass(el, leaveClass);
                        }
                        leaveCancelled && leaveCancelled(el);
                    } else {
                        rm();
                        afterLeave && afterLeave(el);
                    }
                    el._leaveCb = null;
                });

                if (delayLeave) {
                    delayLeave(performLeave);
                } else {
                    performLeave();
                }

                function performLeave() {
                    // the delayed leave may have already been cancelled
                    if (cb.cancelled) {
                        return
                    }
                    // record leaving element
                    if (!vnode.data.show && el.parentNode) {
                        (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
                    }
                    beforeLeave && beforeLeave(el);
                    if (expectsCSS) {
                        addTransitionClass(el, leaveClass);
                        addTransitionClass(el, leaveActiveClass);
                        nextFrame(function () {
                            removeTransitionClass(el, leaveClass);
                            if (!cb.cancelled) {
                                addTransitionClass(el, leaveToClass);
                                if (!userWantsControl) {
                                    if (isValidDuration(explicitLeaveDuration)) {
                                        setTimeout(cb, explicitLeaveDuration);
                                    } else {
                                        whenTransitionEnds(el, type, cb);
                                    }
                                }
                            }
                        });
                    }
                    leave && leave(el, cb);
                    if (!expectsCSS && !userWantsControl) {
                        cb();
                    }
                }
            }

// only used in dev mode
            function checkDuration(val, name, vnode) {
                if (typeof val !== 'number') {
                    warn(
                        "<transition> explicit " + name + " duration is not a valid number - " +
                        "got " + (JSON.stringify(val)) + ".",
                        vnode.context
                    );
                } else if (isNaN(val)) {
                    warn(
                        "<transition> explicit " + name + " duration is NaN - " +
                        'the duration expression might be incorrect.',
                        vnode.context
                    );
                }
            }

            function isValidDuration(val) {
                return typeof val === 'number' && !isNaN(val)
            }

            /**
             * Normalize a transition hook's argument length. The hook may be:
             * - a merged hook (invoker) with the original in .fns
             * - a wrapped component method (check ._length)
             * - a plain function (.length)
             */
            function getHookArgumentsLength(fn) {
                if (isUndef(fn)) {
                    return false
                }
                var invokerFns = fn.fns;
                if (isDef(invokerFns)) {
                    // invoker
                    return getHookArgumentsLength(
                        Array.isArray(invokerFns)
                            ? invokerFns[0]
                            : invokerFns
                    )
                } else {
                    return (fn._length || fn.length) > 1
                }
            }

            function _enter(_, vnode) {
                if (vnode.data.show !== true) {
                    enter(vnode);
                }
            }

            var transition = inBrowser ? {
                create: _enter,
                activate: _enter,
                remove: function remove$$1(vnode, rm) {
                    /* istanbul ignore else */
                    if (vnode.data.show !== true) {
                        leave(vnode, rm);
                    } else {
                        rm();
                    }
                }
            } : {};

            var platformModules = [
                attrs,
                klass,
                events,
                domProps,
                style,
                transition
            ];

            /*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
            var modules = platformModules.concat(baseModules);

            var patch = createPatchFunction({nodeOps: nodeOps, modules: modules});

            /**
             * Not type checking this file because flow doesn't like attaching
             * properties to Elements.
             */

            /* istanbul ignore if */
            if (isIE9) {
                // http://www.matts411.com/post/internet-explorer-9-oninput/
                document.addEventListener('selectionchange', function () {
                    var el = document.activeElement;
                    if (el && el.vmodel) {
                        trigger(el, 'input');
                    }
                });
            }

            var directive = {
                inserted: function inserted(el, binding, vnode, oldVnode) {
                    if (vnode.tag === 'select') {
                        // #6903
                        if (oldVnode.elm && !oldVnode.elm._vOptions) {
                            mergeVNodeHook(vnode, 'postpatch', function () {
                                directive.componentUpdated(el, binding, vnode);
                            });
                        } else {
                            setSelected(el, binding, vnode.context);
                        }
                        el._vOptions = [].map.call(el.options, getValue);
                    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
                        el._vModifiers = binding.modifiers;
                        if (!binding.modifiers.lazy) {
                            el.addEventListener('compositionstart', onCompositionStart);
                            el.addEventListener('compositionend', onCompositionEnd);
                            // Safari < 10.2 & UIWebView doesn't fire compositionend when
                            // switching focus before confirming composition choice
                            // this also fixes the issue where some browsers e.g. iOS Chrome
                            // fires "change" instead of "input" on autocomplete.
                            el.addEventListener('change', onCompositionEnd);
                            /* istanbul ignore if */
                            if (isIE9) {
                                el.vmodel = true;
                            }
                        }
                    }
                },

                componentUpdated: function componentUpdated(el, binding, vnode) {
                    if (vnode.tag === 'select') {
                        setSelected(el, binding, vnode.context);
                        // in case the options rendered by v-for have changed,
                        // it's possible that the value is out-of-sync with the rendered options.
                        // detect such cases and filter out values that no longer has a matching
                        // option in the DOM.
                        var prevOptions = el._vOptions;
                        var curOptions = el._vOptions = [].map.call(el.options, getValue);
                        if (curOptions.some(function (o, i) {
                            return !looseEqual(o, prevOptions[i]);
                        })) {
                            // trigger change event if
                            // no matching option found for at least one value
                            var needReset = el.multiple
                                ? binding.value.some(function (v) {
                                    return hasNoMatchingOption(v, curOptions);
                                })
                                : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
                            if (needReset) {
                                trigger(el, 'change');
                            }
                        }
                    }
                }
            };

            function setSelected(el, binding, vm) {
                actuallySetSelected(el, binding, vm);
                /* istanbul ignore if */
                if (isIE || isEdge) {
                    setTimeout(function () {
                        actuallySetSelected(el, binding, vm);
                    }, 0);
                }
            }

            function actuallySetSelected(el, binding, vm) {
                var value = binding.value;
                var isMultiple = el.multiple;
                if (isMultiple && !Array.isArray(value)) {
                    warn(
                        "<select multiple v-model=\"" + (binding.expression) + "\"> " +
                        "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
                        vm
                    );
                    return
                }
                var selected, option;
                for (var i = 0, l = el.options.length; i < l; i++) {
                    option = el.options[i];
                    if (isMultiple) {
                        selected = looseIndexOf(value, getValue(option)) > -1;
                        if (option.selected !== selected) {
                            option.selected = selected;
                        }
                    } else {
                        if (looseEqual(getValue(option), value)) {
                            if (el.selectedIndex !== i) {
                                el.selectedIndex = i;
                            }
                            return
                        }
                    }
                }
                if (!isMultiple) {
                    el.selectedIndex = -1;
                }
            }

            function hasNoMatchingOption(value, options) {
                return options.every(function (o) {
                    return !looseEqual(o, value);
                })
            }

            function getValue(option) {
                return '_value' in option
                    ? option._value
                    : option.value
            }

            function onCompositionStart(e) {
                e.target.composing = true;
            }

            function onCompositionEnd(e) {
                // prevent triggering an input event for no reason
                if (!e.target.composing) {
                    return
                }
                e.target.composing = false;
                trigger(e.target, 'input');
            }

            function trigger(el, type) {
                var e = document.createEvent('HTMLEvents');
                e.initEvent(type, true, true);
                el.dispatchEvent(e);
            }

            /*  */

// recursively search for possible transition defined inside the component root
            function locateNode(vnode) {
                return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
                    ? locateNode(vnode.componentInstance._vnode)
                    : vnode
            }

            var show = {
                bind: function bind(el, ref, vnode) {
                    var value = ref.value;

                    vnode = locateNode(vnode);
                    var transition$$1 = vnode.data && vnode.data.transition;
                    var originalDisplay = el.__vOriginalDisplay =
                        el.style.display === 'none' ? '' : el.style.display;
                    if (value && transition$$1) {
                        vnode.data.show = true;
                        enter(vnode, function () {
                            el.style.display = originalDisplay;
                        });
                    } else {
                        el.style.display = value ? originalDisplay : 'none';
                    }
                },

                update: function update(el, ref, vnode) {
                    var value = ref.value;
                    var oldValue = ref.oldValue;

                    /* istanbul ignore if */
                    if (!value === !oldValue) {
                        return
                    }
                    vnode = locateNode(vnode);
                    var transition$$1 = vnode.data && vnode.data.transition;
                    if (transition$$1) {
                        vnode.data.show = true;
                        if (value) {
                            enter(vnode, function () {
                                el.style.display = el.__vOriginalDisplay;
                            });
                        } else {
                            leave(vnode, function () {
                                el.style.display = 'none';
                            });
                        }
                    } else {
                        el.style.display = value ? el.__vOriginalDisplay : 'none';
                    }
                },

                unbind: function unbind(
                    el,
                    binding,
                    vnode,
                    oldVnode,
                    isDestroy
                ) {
                    if (!isDestroy) {
                        el.style.display = el.__vOriginalDisplay;
                    }
                }
            };

            var platformDirectives = {
                model: directive,
                show: show
            };

            /*  */

            var transitionProps = {
                name: String,
                appear: Boolean,
                css: Boolean,
                mode: String,
                type: String,
                enterClass: String,
                leaveClass: String,
                enterToClass: String,
                leaveToClass: String,
                enterActiveClass: String,
                leaveActiveClass: String,
                appearClass: String,
                appearActiveClass: String,
                appearToClass: String,
                duration: [Number, String, Object]
            };

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
            function getRealChild(vnode) {
                var compOptions = vnode && vnode.componentOptions;
                if (compOptions && compOptions.Ctor.options.abstract) {
                    return getRealChild(getFirstComponentChild(compOptions.children))
                } else {
                    return vnode
                }
            }

            function extractTransitionData(comp) {
                var data = {};
                var options = comp.$options;
                // props
                for (var key in options.propsData) {
                    data[key] = comp[key];
                }
                // events.
                // extract listeners and pass them directly to the transition methods
                var listeners = options._parentListeners;
                for (var key$1 in listeners) {
                    data[camelize(key$1)] = listeners[key$1];
                }
                return data
            }

            function placeholder(h, rawChild) {
                if (/\d-keep-alive$/.test(rawChild.tag)) {
                    return h('keep-alive', {
                        props: rawChild.componentOptions.propsData
                    })
                }
            }

            function hasParentTransition(vnode) {
                while ((vnode = vnode.parent)) {
                    if (vnode.data.transition) {
                        return true
                    }
                }
            }

            function isSameChild(child, oldChild) {
                return oldChild.key === child.key && oldChild.tag === child.tag
            }

            var isNotTextNode = function (c) {
                return c.tag || isAsyncPlaceholder(c);
            };

            var isVShowDirective = function (d) {
                return d.name === 'show';
            };

            var Transition = {
                name: 'transition',
                props: transitionProps,
                abstract: true,

                render: function render(h) {
                    var this$1 = this;

                    var children = this.$slots.default;
                    if (!children) {
                        return
                    }

                    // filter out text nodes (possible whitespaces)
                    children = children.filter(isNotTextNode);
                    /* istanbul ignore if */
                    if (!children.length) {
                        return
                    }

                    // warn multiple elements
                    if (children.length > 1) {
                        warn(
                            '<transition> can only be used on a single element. Use ' +
                            '<transition-group> for lists.',
                            this.$parent
                        );
                    }

                    var mode = this.mode;

                    // warn invalid mode
                    if (mode && mode !== 'in-out' && mode !== 'out-in'
                    ) {
                        warn(
                            'invalid <transition> mode: ' + mode,
                            this.$parent
                        );
                    }

                    var rawChild = children[0];

                    // if this is a component root node and the component's
                    // parent container node also has transition, skip.
                    if (hasParentTransition(this.$vnode)) {
                        return rawChild
                    }

                    // apply transition data to child
                    // use getRealChild() to ignore abstract components e.g. keep-alive
                    var child = getRealChild(rawChild);
                    /* istanbul ignore if */
                    if (!child) {
                        return rawChild
                    }

                    if (this._leaving) {
                        return placeholder(h, rawChild)
                    }

                    // ensure a key that is unique to the vnode type and to this transition
                    // component instance. This key will be used to remove pending leaving nodes
                    // during entering.
                    var id = "__transition-" + (this._uid) + "-";
                    child.key = child.key == null
                        ? child.isComment
                            ? id + 'comment'
                            : id + child.tag
                        : isPrimitive(child.key)
                            ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
                            : child.key;

                    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
                    var oldRawChild = this._vnode;
                    var oldChild = getRealChild(oldRawChild);

                    // mark v-show
                    // so that the transition module can hand over the control to the directive
                    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
                        child.data.show = true;
                    }

                    if (
                        oldChild &&
                        oldChild.data &&
                        !isSameChild(child, oldChild) &&
                        !isAsyncPlaceholder(oldChild) &&
                        // #6687 component root is a comment node
                        !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
                    ) {
                        // replace old child transition data with fresh one
                        // important for dynamic transitions!
                        var oldData = oldChild.data.transition = extend({}, data);
                        // handle transition mode
                        if (mode === 'out-in') {
                            // return placeholder node and queue update when leave finishes
                            this._leaving = true;
                            mergeVNodeHook(oldData, 'afterLeave', function () {
                                this$1._leaving = false;
                                this$1.$forceUpdate();
                            });
                            return placeholder(h, rawChild)
                        } else if (mode === 'in-out') {
                            if (isAsyncPlaceholder(child)) {
                                return oldRawChild
                            }
                            var delayedLeave;
                            var performLeave = function () {
                                delayedLeave();
                            };
                            mergeVNodeHook(data, 'afterEnter', performLeave);
                            mergeVNodeHook(data, 'enterCancelled', performLeave);
                            mergeVNodeHook(oldData, 'delayLeave', function (leave) {
                                delayedLeave = leave;
                            });
                        }
                    }

                    return rawChild
                }
            };

            /*  */

            var props = extend({
                tag: String,
                moveClass: String
            }, transitionProps);

            delete props.mode;

            var TransitionGroup = {
                props: props,

                beforeMount: function beforeMount() {
                    var this$1 = this;

                    var update = this._update;
                    this._update = function (vnode, hydrating) {
                        var restoreActiveInstance = setActiveInstance(this$1);
                        // force removing pass
                        this$1.__patch__(
                            this$1._vnode,
                            this$1.kept,
                            false, // hydrating
                            true // removeOnly (!important, avoids unnecessary moves)
                        );
                        this$1._vnode = this$1.kept;
                        restoreActiveInstance();
                        update.call(this$1, vnode, hydrating);
                    };
                },

                render: function render(h) {
                    var tag = this.tag || this.$vnode.data.tag || 'span';
                    var map = Object.create(null);
                    var prevChildren = this.prevChildren = this.children;
                    var rawChildren = this.$slots.default || [];
                    var children = this.children = [];
                    var transitionData = extractTransitionData(this);

                    for (var i = 0; i < rawChildren.length; i++) {
                        var c = rawChildren[i];
                        if (c.tag) {
                            if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
                                children.push(c);
                                map[c.key] = c
                                ;(c.data || (c.data = {})).transition = transitionData;
                            } else {
                                var opts = c.componentOptions;
                                var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
                                warn(("<transition-group> children must be keyed: <" + name + ">"));
                            }
                        }
                    }

                    if (prevChildren) {
                        var kept = [];
                        var removed = [];
                        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
                            var c$1 = prevChildren[i$1];
                            c$1.data.transition = transitionData;
                            c$1.data.pos = c$1.elm.getBoundingClientRect();
                            if (map[c$1.key]) {
                                kept.push(c$1);
                            } else {
                                removed.push(c$1);
                            }
                        }
                        this.kept = h(tag, null, kept);
                        this.removed = removed;
                    }

                    return h(tag, null, children)
                },

                updated: function updated() {
                    var children = this.prevChildren;
                    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
                    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
                        return
                    }

                    // we divide the work into three loops to avoid mixing DOM reads and writes
                    // in each iteration - which helps prevent layout thrashing.
                    children.forEach(callPendingCbs);
                    children.forEach(recordPosition);
                    children.forEach(applyTranslation);

                    // force reflow to put everything in position
                    // assign to this to avoid being removed in tree-shaking
                    // $flow-disable-line
                    this._reflow = document.body.offsetHeight;

                    children.forEach(function (c) {
                        if (c.data.moved) {
                            var el = c.elm;
                            var s = el.style;
                            addTransitionClass(el, moveClass);
                            s.transform = s.WebkitTransform = s.transitionDuration = '';
                            el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
                                if (e && e.target !== el) {
                                    return
                                }
                                if (!e || /transform$/.test(e.propertyName)) {
                                    el.removeEventListener(transitionEndEvent, cb);
                                    el._moveCb = null;
                                    removeTransitionClass(el, moveClass);
                                }
                            });
                        }
                    });
                },

                methods: {
                    hasMove: function hasMove(el, moveClass) {
                        /* istanbul ignore if */
                        if (!hasTransition) {
                            return false
                        }
                        /* istanbul ignore if */
                        if (this._hasMove) {
                            return this._hasMove
                        }
                        // Detect whether an element with the move class applied has
                        // CSS transitions. Since the element may be inside an entering
                        // transition at this very moment, we make a clone of it and remove
                        // all other transition classes applied to ensure only the move class
                        // is applied.
                        var clone = el.cloneNode();
                        if (el._transitionClasses) {
                            el._transitionClasses.forEach(function (cls) {
                                removeClass(clone, cls);
                            });
                        }
                        addClass(clone, moveClass);
                        clone.style.display = 'none';
                        this.$el.appendChild(clone);
                        var info = getTransitionInfo(clone);
                        this.$el.removeChild(clone);
                        return (this._hasMove = info.hasTransform)
                    }
                }
            };

            function callPendingCbs(c) {
                /* istanbul ignore if */
                if (c.elm._moveCb) {
                    c.elm._moveCb();
                }
                /* istanbul ignore if */
                if (c.elm._enterCb) {
                    c.elm._enterCb();
                }
            }

            function recordPosition(c) {
                c.data.newPos = c.elm.getBoundingClientRect();
            }

            function applyTranslation(c) {
                var oldPos = c.data.pos;
                var newPos = c.data.newPos;
                var dx = oldPos.left - newPos.left;
                var dy = oldPos.top - newPos.top;
                if (dx || dy) {
                    c.data.moved = true;
                    var s = c.elm.style;
                    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
                    s.transitionDuration = '0s';
                }
            }

            var platformComponents = {
                Transition: Transition,
                TransitionGroup: TransitionGroup
            };

            /*  */

// install platform specific utils
            Vue.config.mustUseProp = mustUseProp;
            Vue.config.isReservedTag = isReservedTag;
            Vue.config.isReservedAttr = isReservedAttr;
            Vue.config.getTagNamespace = getTagNamespace;
            Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
            extend(Vue.options.directives, platformDirectives);
            extend(Vue.options.components, platformComponents);

// install platform patch function
            Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
            Vue.prototype.$mount = function (
                el,
                hydrating
            ) {
                el = el && inBrowser ? query(el) : undefined;
                return mountComponent(this, el, hydrating)
            };

// devtools global hook
            /* istanbul ignore next */
            if (inBrowser) {
                setTimeout(function () {
                    if (config.devtools) {
                        if (devtools) {
                            devtools.emit('init', Vue);
                        } else {
                            console[console.info ? 'info' : 'log'](
                                'Download the Vue Devtools extension for a better development experience:\n' +
                                'https://github.com/vuejs/vue-devtools'
                            );
                        }
                    }
                    if (config.productionTip !== false &&
                        typeof console !== 'undefined'
                    ) {
                        console[console.info ? 'info' : 'log'](
                            "You are running Vue in development mode.\n" +
                            "Make sure to turn on production mode when deploying for production.\n" +
                            "See more tips at https://vuejs.org/guide/deployment.html"
                        );
                    }
                }, 0);
            }

            /*  */

            var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
            var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

            var buildRegex = cached(function (delimiters) {
                var open = delimiters[0].replace(regexEscapeRE, '\\$&');
                var close = delimiters[1].replace(regexEscapeRE, '\\$&');
                return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
            });


            function parseText(
                text,
                delimiters
            ) {
                var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
                if (!tagRE.test(text)) {
                    return
                }
                var tokens = [];
                var rawTokens = [];
                var lastIndex = tagRE.lastIndex = 0;
                var match, index, tokenValue;
                while ((match = tagRE.exec(text))) {
                    index = match.index;
                    // push text token
                    if (index > lastIndex) {
                        rawTokens.push(tokenValue = text.slice(lastIndex, index));
                        tokens.push(JSON.stringify(tokenValue));
                    }
                    // tag token
                    var exp = parseFilters(match[1].trim());
                    tokens.push(("_s(" + exp + ")"));
                    rawTokens.push({'@binding': exp});
                    lastIndex = index + match[0].length;
                }
                if (lastIndex < text.length) {
                    rawTokens.push(tokenValue = text.slice(lastIndex));
                    tokens.push(JSON.stringify(tokenValue));
                }
                return {
                    expression: tokens.join('+'),
                    tokens: rawTokens
                }
            }

            /*  */

            function transformNode(el, options) {
                var warn = options.warn || baseWarn;
                var staticClass = getAndRemoveAttr(el, 'class');
                if (staticClass) {
                    var res = parseText(staticClass, options.delimiters);
                    if (res) {
                        warn(
                            "class=\"" + staticClass + "\": " +
                            'Interpolation inside attributes has been removed. ' +
                            'Use v-bind or the colon shorthand instead. For example, ' +
                            'instead of <div class="{{ val }}">, use <div :class="val">.',
                            el.rawAttrsMap['class']
                        );
                    }
                }
                if (staticClass) {
                    el.staticClass = JSON.stringify(staticClass);
                }
                var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
                if (classBinding) {
                    el.classBinding = classBinding;
                }
            }

            function genData(el) {
                var data = '';
                if (el.staticClass) {
                    data += "staticClass:" + (el.staticClass) + ",";
                }
                if (el.classBinding) {
                    data += "class:" + (el.classBinding) + ",";
                }
                return data
            }

            var klass$1 = {
                staticKeys: ['staticClass'],
                transformNode: transformNode,
                genData: genData
            };

            /*  */

            function transformNode$1(el, options) {
                var warn = options.warn || baseWarn;
                var staticStyle = getAndRemoveAttr(el, 'style');
                if (staticStyle) {
                    /* istanbul ignore if */
                    {
                        var res = parseText(staticStyle, options.delimiters);
                        if (res) {
                            warn(
                                "style=\"" + staticStyle + "\": " +
                                'Interpolation inside attributes has been removed. ' +
                                'Use v-bind or the colon shorthand instead. For example, ' +
                                'instead of <div style="{{ val }}">, use <div :style="val">.',
                                el.rawAttrsMap['style']
                            );
                        }
                    }
                    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
                }

                var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
                if (styleBinding) {
                    el.styleBinding = styleBinding;
                }
            }

            function genData$1(el) {
                var data = '';
                if (el.staticStyle) {
                    data += "staticStyle:" + (el.staticStyle) + ",";
                }
                if (el.styleBinding) {
                    data += "style:(" + (el.styleBinding) + "),";
                }
                return data
            }

            var style$1 = {
                staticKeys: ['staticStyle'],
                transformNode: transformNode$1,
                genData: genData$1
            };

            /*  */

            var decoder;

            var he = {
                decode: function decode(html) {
                    decoder = decoder || document.createElement('div');
                    decoder.innerHTML = html;
                    return decoder.textContent
                }
            };

            /*  */

            var isUnaryTag = makeMap(
                'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
                'link,meta,param,source,track,wbr'
            );

// Elements that you can, intentionally, leave open
// (and which close themselves)
            var canBeLeftOpenTag = makeMap(
                'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
            );

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
            var isNonPhrasingTag = makeMap(
                'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
                'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
                'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
                'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
                'title,tr,track'
            );

            /**
             * Not type-checking this file because it's mostly vendor code.
             */

// Regular Expressions for parsing tags and attributes
            var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
            var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
            var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
            var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
            var startTagOpen = new RegExp(("^<" + qnameCapture));
            var startTagClose = /^\s*(\/?)>/;
            var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
            var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being passed as HTML comment when inlined in page
            var comment = /^<!\--/;
            var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
            var isPlainTextElement = makeMap('script,style,textarea', true);
            var reCache = {};

            var decodingMap = {
                '&lt;': '<',
                '&gt;': '>',
                '&quot;': '"',
                '&amp;': '&',
                '&#10;': '\n',
                '&#9;': '\t',
                '&#39;': "'"
            };
            var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
            var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
            var isIgnoreNewlineTag = makeMap('pre,textarea', true);
            var shouldIgnoreFirstNewline = function (tag, html) {
                return tag && isIgnoreNewlineTag(tag) && html[0] === '\n';
            };

            function decodeAttr(value, shouldDecodeNewlines) {
                var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
                return value.replace(re, function (match) {
                    return decodingMap[match];
                })
            }

            function parseHTML(html, options) {
                var stack = [];
                var expectHTML = options.expectHTML;
                var isUnaryTag$$1 = options.isUnaryTag || no;
                var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
                var index = 0;
                var last, lastTag;
                while (html) {
                    last = html;
                    // Make sure we're not in a plaintext content element like script/style
                    if (!lastTag || !isPlainTextElement(lastTag)) {
                        var textEnd = html.indexOf('<');
                        if (textEnd === 0) {
                            // Comment:
                            if (comment.test(html)) {
                                var commentEnd = html.indexOf('-->');

                                if (commentEnd >= 0) {
                                    if (options.shouldKeepComment) {
                                        options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
                                    }
                                    advance(commentEnd + 3);
                                    continue
                                }
                            }

                            // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
                            if (conditionalComment.test(html)) {
                                var conditionalEnd = html.indexOf(']>');

                                if (conditionalEnd >= 0) {
                                    advance(conditionalEnd + 2);
                                    continue
                                }
                            }

                            // Doctype:
                            var doctypeMatch = html.match(doctype);
                            if (doctypeMatch) {
                                advance(doctypeMatch[0].length);
                                continue
                            }

                            // End tag:
                            var endTagMatch = html.match(endTag);
                            if (endTagMatch) {
                                var curIndex = index;
                                advance(endTagMatch[0].length);
                                parseEndTag(endTagMatch[1], curIndex, index);
                                continue
                            }

                            // Start tag:
                            var startTagMatch = parseStartTag();
                            if (startTagMatch) {
                                handleStartTag(startTagMatch);
                                if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
                                    advance(1);
                                }
                                continue
                            }
                        }

                        var text = (void 0), rest = (void 0), next = (void 0);
                        if (textEnd >= 0) {
                            rest = html.slice(textEnd);
                            while (
                                !endTag.test(rest) &&
                                !startTagOpen.test(rest) &&
                                !comment.test(rest) &&
                                !conditionalComment.test(rest)
                                ) {
                                // < in plain text, be forgiving and treat it as text
                                next = rest.indexOf('<', 1);
                                if (next < 0) {
                                    break
                                }
                                textEnd += next;
                                rest = html.slice(textEnd);
                            }
                            text = html.substring(0, textEnd);
                        }

                        if (textEnd < 0) {
                            text = html;
                        }

                        if (text) {
                            advance(text.length);
                        }

                        if (options.chars && text) {
                            options.chars(text, index - text.length, index);
                        }
                    } else {
                        var endTagLength = 0;
                        var stackedTag = lastTag.toLowerCase();
                        var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
                        var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
                            endTagLength = endTag.length;
                            if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
                                text = text
                                    .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
                                    .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
                            }
                            if (shouldIgnoreFirstNewline(stackedTag, text)) {
                                text = text.slice(1);
                            }
                            if (options.chars) {
                                options.chars(text);
                            }
                            return ''
                        });
                        index += html.length - rest$1.length;
                        html = rest$1;
                        parseEndTag(stackedTag, index - endTagLength, index);
                    }

                    if (html === last) {
                        options.chars && options.chars(html);
                        if (!stack.length && options.warn) {
                            options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), {start: index + html.length});
                        }
                        break
                    }
                }

                // Clean up any remaining tags
                parseEndTag();

                function advance(n) {
                    index += n;
                    html = html.substring(n);
                }

                function parseStartTag() {
                    var start = html.match(startTagOpen);
                    if (start) {
                        var match = {
                            tagName: start[1],
                            attrs: [],
                            start: index
                        };
                        advance(start[0].length);
                        var end, attr;
                        while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
                            attr.start = index;
                            advance(attr[0].length);
                            attr.end = index;
                            match.attrs.push(attr);
                        }
                        if (end) {
                            match.unarySlash = end[1];
                            advance(end[0].length);
                            match.end = index;
                            return match
                        }
                    }
                }

                function handleStartTag(match) {
                    var tagName = match.tagName;
                    var unarySlash = match.unarySlash;

                    if (expectHTML) {
                        if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
                            parseEndTag(lastTag);
                        }
                        if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
                            parseEndTag(tagName);
                        }
                    }

                    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

                    var l = match.attrs.length;
                    var attrs = new Array(l);
                    for (var i = 0; i < l; i++) {
                        var args = match.attrs[i];
                        var value = args[3] || args[4] || args[5] || '';
                        var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
                            ? options.shouldDecodeNewlinesForHref
                            : options.shouldDecodeNewlines;
                        attrs[i] = {
                            name: args[1],
                            value: decodeAttr(value, shouldDecodeNewlines)
                        };
                        if (options.outputSourceRange) {
                            attrs[i].start = args.start + args[0].match(/^\s*/).length;
                            attrs[i].end = args.end;
                        }
                    }

                    if (!unary) {
                        stack.push({
                            tag: tagName,
                            lowerCasedTag: tagName.toLowerCase(),
                            attrs: attrs,
                            start: match.start,
                            end: match.end
                        });
                        lastTag = tagName;
                    }

                    if (options.start) {
                        options.start(tagName, attrs, unary, match.start, match.end);
                    }
                }

                function parseEndTag(tagName, start, end) {
                    var pos, lowerCasedTagName;
                    if (start == null) {
                        start = index;
                    }
                    if (end == null) {
                        end = index;
                    }

                    // Find the closest opened tag of the same type
                    if (tagName) {
                        lowerCasedTagName = tagName.toLowerCase();
                        for (pos = stack.length - 1; pos >= 0; pos--) {
                            if (stack[pos].lowerCasedTag === lowerCasedTagName) {
                                break
                            }
                        }
                    } else {
                        // If no tag name is provided, clean shop
                        pos = 0;
                    }

                    if (pos >= 0) {
                        // Close all the open elements, up the stack
                        for (var i = stack.length - 1; i >= pos; i--) {
                            if (i > pos || !tagName &&
                                options.warn
                            ) {
                                options.warn(
                                    ("tag <" + (stack[i].tag) + "> has no matching end tag."),
                                    {start: stack[i].start, end: stack[i].end}
                                );
                            }
                            if (options.end) {
                                options.end(stack[i].tag, start, end);
                            }
                        }

                        // Remove the open elements from the stack
                        stack.length = pos;
                        lastTag = pos && stack[pos - 1].tag;
                    } else if (lowerCasedTagName === 'br') {
                        if (options.start) {
                            options.start(tagName, [], true, start, end);
                        }
                    } else if (lowerCasedTagName === 'p') {
                        if (options.start) {
                            options.start(tagName, [], false, start, end);
                        }
                        if (options.end) {
                            options.end(tagName, start, end);
                        }
                    }
                }
            }

            /*  */

            var onRE = /^@|^v-on:/;
            var dirRE = /^v-|^@|^:|^#/;
            var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
            var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
            var stripParensRE = /^\(|\)$/g;
            var dynamicArgRE = /^\[.*\]$/;

            var argRE = /:(.*)$/;
            var bindRE = /^:|^\.|^v-bind:/;
            var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

            var slotRE = /^v-slot(:|$)|^#/;

            var lineBreakRE = /[\r\n]/;
            var whitespaceRE$1 = /\s+/g;

            var invalidAttributeRE = /[\s"'<>\/=]/;

            var decodeHTMLCached = cached(he.decode);

            var emptySlotScopeToken = "_empty_";

// configurable state
            var warn$2;
            var delimiters;
            var transforms;
            var preTransforms;
            var postTransforms;
            var platformIsPreTag;
            var platformMustUseProp;
            var platformGetTagNamespace;
            var maybeComponent;

            function createASTElement(
                tag,
                attrs,
                parent
            ) {
                return {
                    type: 1,
                    tag: tag,
                    attrsList: attrs,
                    attrsMap: makeAttrsMap(attrs),
                    rawAttrsMap: {},
                    parent: parent,
                    children: []
                }
            }

            /**
             * Convert HTML string to AST.
             */
            function parse(
                template,
                options
            ) {
                warn$2 = options.warn || baseWarn;

                platformIsPreTag = options.isPreTag || no;
                platformMustUseProp = options.mustUseProp || no;
                platformGetTagNamespace = options.getTagNamespace || no;
                var isReservedTag = options.isReservedTag || no;
                maybeComponent = function (el) {
                    return !!el.component || !isReservedTag(el.tag);
                };

                transforms = pluckModuleFunction(options.modules, 'transformNode');
                preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
                postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

                delimiters = options.delimiters;

                var stack = [];
                var preserveWhitespace = options.preserveWhitespace !== false;
                var whitespaceOption = options.whitespace;
                var root;
                var currentParent;
                var inVPre = false;
                var inPre = false;
                var warned = false;

                function warnOnce(msg, range) {
                    if (!warned) {
                        warned = true;
                        warn$2(msg, range);
                    }
                }

                function closeElement(element) {
                    trimEndingWhitespace(element);
                    if (!inVPre && !element.processed) {
                        element = processElement(element, options);
                    }
                    // tree management
                    if (!stack.length && element !== root) {
                        // allow root elements with v-if, v-else-if and v-else
                        if (root.if && (element.elseif || element.else)) {
                            {
                                checkRootConstraints(element);
                            }
                            addIfCondition(root, {
                                exp: element.elseif,
                                block: element
                            });
                        } else {
                            warnOnce(
                                "Component template should contain exactly one root element. " +
                                "If you are using v-if on multiple elements, " +
                                "use v-else-if to chain them instead.",
                                {start: element.start}
                            );
                        }
                    }
                    if (currentParent && !element.forbidden) {
                        if (element.elseif || element.else) {
                            processIfConditions(element, currentParent);
                        } else {
                            if (element.slotScope) {
                                // scoped slot
                                // keep it in the children list so that v-else(-if) conditions can
                                // find it as the prev node.
                                var name = element.slotTarget || '"default"'
                                ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
                            }
                            currentParent.children.push(element);
                            element.parent = currentParent;
                        }
                    }

                    // final children cleanup
                    // filter out scoped slots
                    element.children = element.children.filter(function (c) {
                        return !(c).slotScope;
                    });
                    // remove trailing whitespace node again
                    trimEndingWhitespace(element);

                    // check pre state
                    if (element.pre) {
                        inVPre = false;
                    }
                    if (platformIsPreTag(element.tag)) {
                        inPre = false;
                    }
                    // apply post-transforms
                    for (var i = 0; i < postTransforms.length; i++) {
                        postTransforms[i](element, options);
                    }
                }

                function trimEndingWhitespace(el) {
                    // remove trailing whitespace node
                    if (!inPre) {
                        var lastNode;
                        while (
                            (lastNode = el.children[el.children.length - 1]) &&
                            lastNode.type === 3 &&
                            lastNode.text === ' '
                            ) {
                            el.children.pop();
                        }
                    }
                }

                function checkRootConstraints(el) {
                    if (el.tag === 'slot' || el.tag === 'template') {
                        warnOnce(
                            "Cannot use <" + (el.tag) + "> as component root element because it may " +
                            'contain multiple nodes.',
                            {start: el.start}
                        );
                    }
                    if (el.attrsMap.hasOwnProperty('v-for')) {
                        warnOnce(
                            'Cannot use v-for on stateful component root element because ' +
                            'it renders multiple elements.',
                            el.rawAttrsMap['v-for']
                        );
                    }
                }

                parseHTML(template, {
                    warn: warn$2,
                    expectHTML: options.expectHTML,
                    isUnaryTag: options.isUnaryTag,
                    canBeLeftOpenTag: options.canBeLeftOpenTag,
                    shouldDecodeNewlines: options.shouldDecodeNewlines,
                    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
                    shouldKeepComment: options.comments,
                    outputSourceRange: options.outputSourceRange,
                    start: function start(tag, attrs, unary, start$1, end) {
                        // check namespace.
                        // inherit parent ns if there is one
                        var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

                        // handle IE svg bug
                        /* istanbul ignore if */
                        if (isIE && ns === 'svg') {
                            attrs = guardIESVGBug(attrs);
                        }

                        var element = createASTElement(tag, attrs, currentParent);
                        if (ns) {
                            element.ns = ns;
                        }

                        {
                            if (options.outputSourceRange) {
                                element.start = start$1;
                                element.end = end;
                                element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
                                    cumulated[attr.name] = attr;
                                    return cumulated
                                }, {});
                            }
                            attrs.forEach(function (attr) {
                                if (invalidAttributeRE.test(attr.name)) {
                                    warn$2(
                                        "Invalid dynamic argument expression: attribute names cannot contain " +
                                        "spaces, quotes, <, >, / or =.",
                                        {
                                            start: attr.start + attr.name.indexOf("["),
                                            end: attr.start + attr.name.length
                                        }
                                    );
                                }
                            });
                        }

                        if (isForbiddenTag(element) && !isServerRendering()) {
                            element.forbidden = true;
                            warn$2(
                                'Templates should only be responsible for mapping the state to the ' +
                                'UI. Avoid placing tags with side-effects in your templates, such as ' +
                                "<" + tag + ">" + ', as they will not be parsed.',
                                {start: element.start}
                            );
                        }

                        // apply pre-transforms
                        for (var i = 0; i < preTransforms.length; i++) {
                            element = preTransforms[i](element, options) || element;
                        }

                        if (!inVPre) {
                            processPre(element);
                            if (element.pre) {
                                inVPre = true;
                            }
                        }
                        if (platformIsPreTag(element.tag)) {
                            inPre = true;
                        }
                        if (inVPre) {
                            processRawAttrs(element);
                        } else if (!element.processed) {
                            // structural directives
                            processFor(element);
                            processIf(element);
                            processOnce(element);
                        }

                        if (!root) {
                            root = element;
                            {
                                checkRootConstraints(root);
                            }
                        }

                        if (!unary) {
                            currentParent = element;
                            stack.push(element);
                        } else {
                            closeElement(element);
                        }
                    },

                    end: function end(tag, start, end$1) {
                        var element = stack[stack.length - 1];
                        // pop stack
                        stack.length -= 1;
                        currentParent = stack[stack.length - 1];
                        if (options.outputSourceRange) {
                            element.end = end$1;
                        }
                        closeElement(element);
                    },

                    chars: function chars(text, start, end) {
                        if (!currentParent) {
                            {
                                if (text === template) {
                                    warnOnce(
                                        'Component template requires a root element, rather than just text.',
                                        {start: start}
                                    );
                                } else if ((text = text.trim())) {
                                    warnOnce(
                                        ("text \"" + text + "\" outside root element will be ignored."),
                                        {start: start}
                                    );
                                }
                            }
                            return
                        }
                        // IE textarea placeholder bug
                        /* istanbul ignore if */
                        if (isIE &&
                            currentParent.tag === 'textarea' &&
                            currentParent.attrsMap.placeholder === text
                        ) {
                            return
                        }
                        var children = currentParent.children;
                        if (inPre || text.trim()) {
                            text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
                        } else if (!children.length) {
                            // remove the whitespace-only node right after an opening tag
                            text = '';
                        } else if (whitespaceOption) {
                            if (whitespaceOption === 'condense') {
                                // in condense mode, remove the whitespace node if it contains
                                // line break, otherwise condense to a single space
                                text = lineBreakRE.test(text) ? '' : ' ';
                            } else {
                                text = ' ';
                            }
                        } else {
                            text = preserveWhitespace ? ' ' : '';
                        }
                        if (text) {
                            if (!inPre && whitespaceOption === 'condense') {
                                // condense consecutive whitespaces into single space
                                text = text.replace(whitespaceRE$1, ' ');
                            }
                            var res;
                            var child;
                            if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
                                child = {
                                    type: 2,
                                    expression: res.expression,
                                    tokens: res.tokens,
                                    text: text
                                };
                            } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
                                child = {
                                    type: 3,
                                    text: text
                                };
                            }
                            if (child) {
                                if (options.outputSourceRange) {
                                    child.start = start;
                                    child.end = end;
                                }
                                children.push(child);
                            }
                        }
                    },
                    comment: function comment(text, start, end) {
                        // adding anyting as a sibling to the root node is forbidden
                        // comments should still be allowed, but ignored
                        if (currentParent) {
                            var child = {
                                type: 3,
                                text: text,
                                isComment: true
                            };
                            if (options.outputSourceRange) {
                                child.start = start;
                                child.end = end;
                            }
                            currentParent.children.push(child);
                        }
                    }
                });
                return root
            }

            function processPre(el) {
                if (getAndRemoveAttr(el, 'v-pre') != null) {
                    el.pre = true;
                }
            }

            function processRawAttrs(el) {
                var list = el.attrsList;
                var len = list.length;
                if (len) {
                    var attrs = el.attrs = new Array(len);
                    for (var i = 0; i < len; i++) {
                        attrs[i] = {
                            name: list[i].name,
                            value: JSON.stringify(list[i].value)
                        };
                        if (list[i].start != null) {
                            attrs[i].start = list[i].start;
                            attrs[i].end = list[i].end;
                        }
                    }
                } else if (!el.pre) {
                    // non root node in pre blocks with no attributes
                    el.plain = true;
                }
            }

            function processElement(
                element,
                options
            ) {
                processKey(element);

                // determine whether this is a plain element after
                // removing structural attributes
                element.plain = (
                    !element.key &&
                    !element.scopedSlots &&
                    !element.attrsList.length
                );

                processRef(element);
                processSlotContent(element);
                processSlotOutlet(element);
                processComponent(element);
                for (var i = 0; i < transforms.length; i++) {
                    element = transforms[i](element, options) || element;
                }
                processAttrs(element);
                return element
            }

            function processKey(el) {
                var exp = getBindingAttr(el, 'key');
                if (exp) {
                    {
                        if (el.tag === 'template') {
                            warn$2(
                                "<template> cannot be keyed. Place the key on real elements instead.",
                                getRawBindingAttr(el, 'key')
                            );
                        }
                        if (el.for) {
                            var iterator = el.iterator2 || el.iterator1;
                            var parent = el.parent;
                            if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
                                warn$2(
                                    "Do not use v-for index as key on <transition-group> children, " +
                                    "this is the same as not using keys.",
                                    getRawBindingAttr(el, 'key'),
                                    true /* tip */
                                );
                            }
                        }
                    }
                    el.key = exp;
                }
            }

            function processRef(el) {
                var ref = getBindingAttr(el, 'ref');
                if (ref) {
                    el.ref = ref;
                    el.refInFor = checkInFor(el);
                }
            }

            function processFor(el) {
                var exp;
                if ((exp = getAndRemoveAttr(el, 'v-for'))) {
                    var res = parseFor(exp);
                    if (res) {
                        extend(el, res);
                    } else {
                        warn$2(
                            ("Invalid v-for expression: " + exp),
                            el.rawAttrsMap['v-for']
                        );
                    }
                }
            }


            function parseFor(exp) {
                var inMatch = exp.match(forAliasRE);
                if (!inMatch) {
                    return
                }
                var res = {};
                res.for = inMatch[2].trim();
                var alias = inMatch[1].trim().replace(stripParensRE, '');
                var iteratorMatch = alias.match(forIteratorRE);
                if (iteratorMatch) {
                    res.alias = alias.replace(forIteratorRE, '').trim();
                    res.iterator1 = iteratorMatch[1].trim();
                    if (iteratorMatch[2]) {
                        res.iterator2 = iteratorMatch[2].trim();
                    }
                } else {
                    res.alias = alias;
                }
                return res
            }

            function processIf(el) {
                var exp = getAndRemoveAttr(el, 'v-if');
                if (exp) {
                    el.if = exp;
                    addIfCondition(el, {
                        exp: exp,
                        block: el
                    });
                } else {
                    if (getAndRemoveAttr(el, 'v-else') != null) {
                        el.else = true;
                    }
                    var elseif = getAndRemoveAttr(el, 'v-else-if');
                    if (elseif) {
                        el.elseif = elseif;
                    }
                }
            }

            function processIfConditions(el, parent) {
                var prev = findPrevElement(parent.children);
                if (prev && prev.if) {
                    addIfCondition(prev, {
                        exp: el.elseif,
                        block: el
                    });
                } else {
                    warn$2(
                        "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
                        "used on element <" + (el.tag) + "> without corresponding v-if.",
                        el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
                    );
                }
            }

            function findPrevElement(children) {
                var i = children.length;
                while (i--) {
                    if (children[i].type === 1) {
                        return children[i]
                    } else {
                        if (children[i].text !== ' ') {
                            warn$2(
                                "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
                                "will be ignored.",
                                children[i]
                            );
                        }
                        children.pop();
                    }
                }
            }

            function addIfCondition(el, condition) {
                if (!el.ifConditions) {
                    el.ifConditions = [];
                }
                el.ifConditions.push(condition);
            }

            function processOnce(el) {
                var once$$1 = getAndRemoveAttr(el, 'v-once');
                if (once$$1 != null) {
                    el.once = true;
                }
            }

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
            function processSlotContent(el) {
                var slotScope;
                if (el.tag === 'template') {
                    slotScope = getAndRemoveAttr(el, 'scope');
                    /* istanbul ignore if */
                    if (slotScope) {
                        warn$2(
                            "the \"scope\" attribute for scoped slots have been deprecated and " +
                            "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
                            "can also be used on plain elements in addition to <template> to " +
                            "denote scoped slots.",
                            el.rawAttrsMap['scope'],
                            true
                        );
                    }
                    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
                } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
                    /* istanbul ignore if */
                    if (el.attrsMap['v-for']) {
                        warn$2(
                            "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
                            "(v-for takes higher priority). Use a wrapper <template> for the " +
                            "scoped slot to make it clearer.",
                            el.rawAttrsMap['slot-scope'],
                            true
                        );
                    }
                    el.slotScope = slotScope;
                }

                // slot="xxx"
                var slotTarget = getBindingAttr(el, 'slot');
                if (slotTarget) {
                    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
                    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
                    // preserve slot as an attribute for native shadow DOM compat
                    // only for non-scoped slots.
                    if (el.tag !== 'template' && !el.slotScope) {
                        addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
                    }
                }

                // 2.6 v-slot syntax
                {
                    if (el.tag === 'template') {
                        // v-slot on <template>
                        var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
                        if (slotBinding) {
                            {
                                if (el.slotTarget || el.slotScope) {
                                    warn$2(
                                        "Unexpected mixed usage of different slot syntaxes.",
                                        el
                                    );
                                }
                                if (el.parent && !maybeComponent(el.parent)) {
                                    warn$2(
                                        "<template v-slot> can only appear at the root level inside " +
                                        "the receiving component",
                                        el
                                    );
                                }
                            }
                            var ref = getSlotName(slotBinding);
                            var name = ref.name;
                            var dynamic = ref.dynamic;
                            el.slotTarget = name;
                            el.slotTargetDynamic = dynamic;
                            el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
                        }
                    } else {
                        // v-slot on component, denotes default slot
                        var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
                        if (slotBinding$1) {
                            {
                                if (!maybeComponent(el)) {
                                    warn$2(
                                        "v-slot can only be used on components or <template>.",
                                        slotBinding$1
                                    );
                                }
                                if (el.slotScope || el.slotTarget) {
                                    warn$2(
                                        "Unexpected mixed usage of different slot syntaxes.",
                                        el
                                    );
                                }
                                if (el.scopedSlots) {
                                    warn$2(
                                        "To avoid scope ambiguity, the default slot should also use " +
                                        "<template> syntax when there are other named slots.",
                                        slotBinding$1
                                    );
                                }
                            }
                            // add the component's children to its default slot
                            var slots = el.scopedSlots || (el.scopedSlots = {});
                            var ref$1 = getSlotName(slotBinding$1);
                            var name$1 = ref$1.name;
                            var dynamic$1 = ref$1.dynamic;
                            var slotContainer = slots[name$1] = createASTElement('template', [], el);
                            slotContainer.slotTarget = name$1;
                            slotContainer.slotTargetDynamic = dynamic$1;
                            slotContainer.children = el.children.filter(function (c) {
                                if (!c.slotScope) {
                                    c.parent = slotContainer;
                                    return true
                                }
                            });
                            slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
                            // remove children as they are returned from scopedSlots now
                            el.children = [];
                            // mark el non-plain so data gets generated
                            el.plain = false;
                        }
                    }
                }
            }

            function getSlotName(binding) {
                var name = binding.name.replace(slotRE, '');
                if (!name) {
                    if (binding.name[0] !== '#') {
                        name = 'default';
                    } else {
                        warn$2(
                            "v-slot shorthand syntax requires a slot name.",
                            binding
                        );
                    }
                }
                return dynamicArgRE.test(name)
                    // dynamic [name]
                    ? {name: name.slice(1, -1), dynamic: true}
                    // static name
                    : {name: ("\"" + name + "\""), dynamic: false}
            }

// handle <slot/> outlets
            function processSlotOutlet(el) {
                if (el.tag === 'slot') {
                    el.slotName = getBindingAttr(el, 'name');
                    if (el.key) {
                        warn$2(
                            "`key` does not work on <slot> because slots are abstract outlets " +
                            "and can possibly expand into multiple elements. " +
                            "Use the key on a wrapping element instead.",
                            getRawBindingAttr(el, 'key')
                        );
                    }
                }
            }

            function processComponent(el) {
                var binding;
                if ((binding = getBindingAttr(el, 'is'))) {
                    el.component = binding;
                }
                if (getAndRemoveAttr(el, 'inline-template') != null) {
                    el.inlineTemplate = true;
                }
            }

            function processAttrs(el) {
                var list = el.attrsList;
                var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
                for (i = 0, l = list.length; i < l; i++) {
                    name = rawName = list[i].name;
                    value = list[i].value;
                    if (dirRE.test(name)) {
                        // mark element as dynamic
                        el.hasBindings = true;
                        // modifiers
                        modifiers = parseModifiers(name.replace(dirRE, ''));
                        // support .foo shorthand syntax for the .prop modifier
                        if (modifiers) {
                            name = name.replace(modifierRE, '');
                        }
                        if (bindRE.test(name)) { // v-bind
                            name = name.replace(bindRE, '');
                            value = parseFilters(value);
                            isDynamic = dynamicArgRE.test(name);
                            if (isDynamic) {
                                name = name.slice(1, -1);
                            }
                            if (
                                value.trim().length === 0
                            ) {
                                warn$2(
                                    ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
                                );
                            }
                            if (modifiers) {
                                if (modifiers.prop && !isDynamic) {
                                    name = camelize(name);
                                    if (name === 'innerHtml') {
                                        name = 'innerHTML';
                                    }
                                }
                                if (modifiers.camel && !isDynamic) {
                                    name = camelize(name);
                                }
                                if (modifiers.sync) {
                                    syncGen = genAssignmentCode(value, "$event");
                                    if (!isDynamic) {
                                        addHandler(
                                            el,
                                            ("update:" + (camelize(name))),
                                            syncGen,
                                            null,
                                            false,
                                            warn$2,
                                            list[i]
                                        );
                                        if (hyphenate(name) !== camelize(name)) {
                                            addHandler(
                                                el,
                                                ("update:" + (hyphenate(name))),
                                                syncGen,
                                                null,
                                                false,
                                                warn$2,
                                                list[i]
                                            );
                                        }
                                    } else {
                                        // handler w/ dynamic event name
                                        addHandler(
                                            el,
                                            ("\"update:\"+(" + name + ")"),
                                            syncGen,
                                            null,
                                            false,
                                            warn$2,
                                            list[i],
                                            true // dynamic
                                        );
                                    }
                                }
                            }
                            if ((modifiers && modifiers.prop) || (
                                !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
                            )) {
                                addProp(el, name, value, list[i], isDynamic);
                            } else {
                                addAttr(el, name, value, list[i], isDynamic);
                            }
                        } else if (onRE.test(name)) { // v-on
                            name = name.replace(onRE, '');
                            isDynamic = dynamicArgRE.test(name);
                            if (isDynamic) {
                                name = name.slice(1, -1);
                            }
                            addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
                        } else { // normal directives
                            name = name.replace(dirRE, '');
                            // parse arg
                            var argMatch = name.match(argRE);
                            var arg = argMatch && argMatch[1];
                            isDynamic = false;
                            if (arg) {
                                name = name.slice(0, -(arg.length + 1));
                                if (dynamicArgRE.test(arg)) {
                                    arg = arg.slice(1, -1);
                                    isDynamic = true;
                                }
                            }
                            addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
                            if (name === 'model') {
                                checkForAliasModel(el, value);
                            }
                        }
                    } else {
                        // literal attribute
                        {
                            var res = parseText(value, delimiters);
                            if (res) {
                                warn$2(
                                    name + "=\"" + value + "\": " +
                                    'Interpolation inside attributes has been removed. ' +
                                    'Use v-bind or the colon shorthand instead. For example, ' +
                                    'instead of <div id="{{ val }}">, use <div :id="val">.',
                                    list[i]
                                );
                            }
                        }
                        addAttr(el, name, JSON.stringify(value), list[i]);
                        // #6887 firefox doesn't update muted state if set via attribute
                        // even immediately after element creation
                        if (!el.component &&
                            name === 'muted' &&
                            platformMustUseProp(el.tag, el.attrsMap.type, name)) {
                            addProp(el, name, 'true', list[i]);
                        }
                    }
                }
            }

            function checkInFor(el) {
                var parent = el;
                while (parent) {
                    if (parent.for !== undefined) {
                        return true
                    }
                    parent = parent.parent;
                }
                return false
            }

            function parseModifiers(name) {
                var match = name.match(modifierRE);
                if (match) {
                    var ret = {};
                    match.forEach(function (m) {
                        ret[m.slice(1)] = true;
                    });
                    return ret
                }
            }

            function makeAttrsMap(attrs) {
                var map = {};
                for (var i = 0, l = attrs.length; i < l; i++) {
                    if (
                        map[attrs[i].name] && !isIE && !isEdge
                    ) {
                        warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
                    }
                    map[attrs[i].name] = attrs[i].value;
                }
                return map
            }

// for script (e.g. type="x/template") or style, do not decode content
            function isTextTag(el) {
                return el.tag === 'script' || el.tag === 'style'
            }

            function isForbiddenTag(el) {
                return (
                    el.tag === 'style' ||
                    (el.tag === 'script' && (
                        !el.attrsMap.type ||
                        el.attrsMap.type === 'text/javascript'
                    ))
                )
            }

            var ieNSBug = /^xmlns:NS\d+/;
            var ieNSPrefix = /^NS\d+:/;

            /* istanbul ignore next */
            function guardIESVGBug(attrs) {
                var res = [];
                for (var i = 0; i < attrs.length; i++) {
                    var attr = attrs[i];
                    if (!ieNSBug.test(attr.name)) {
                        attr.name = attr.name.replace(ieNSPrefix, '');
                        res.push(attr);
                    }
                }
                return res
            }

            function checkForAliasModel(el, value) {
                var _el = el;
                while (_el) {
                    if (_el.for && _el.alias === value) {
                        warn$2(
                            "<" + (el.tag) + " v-model=\"" + value + "\">: " +
                            "You are binding v-model directly to a v-for iteration alias. " +
                            "This will not be able to modify the v-for source array because " +
                            "writing to the alias is like modifying a function local variable. " +
                            "Consider using an array of objects and use v-model on an object property instead.",
                            el.rawAttrsMap['v-model']
                        );
                    }
                    _el = _el.parent;
                }
            }

            /*  */

            function preTransformNode(el, options) {
                if (el.tag === 'input') {
                    var map = el.attrsMap;
                    if (!map['v-model']) {
                        return
                    }

                    var typeBinding;
                    if (map[':type'] || map['v-bind:type']) {
                        typeBinding = getBindingAttr(el, 'type');
                    }
                    if (!map.type && !typeBinding && map['v-bind']) {
                        typeBinding = "(" + (map['v-bind']) + ").type";
                    }

                    if (typeBinding) {
                        var ifCondition = getAndRemoveAttr(el, 'v-if', true);
                        var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
                        var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
                        var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
                        // 1. checkbox
                        var branch0 = cloneASTElement(el);
                        // process for on the main node
                        processFor(branch0);
                        addRawAttr(branch0, 'type', 'checkbox');
                        processElement(branch0, options);
                        branch0.processed = true; // prevent it from double-processed
                        branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
                        addIfCondition(branch0, {
                            exp: branch0.if,
                            block: branch0
                        });
                        // 2. add radio else-if condition
                        var branch1 = cloneASTElement(el);
                        getAndRemoveAttr(branch1, 'v-for', true);
                        addRawAttr(branch1, 'type', 'radio');
                        processElement(branch1, options);
                        addIfCondition(branch0, {
                            exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
                            block: branch1
                        });
                        // 3. other
                        var branch2 = cloneASTElement(el);
                        getAndRemoveAttr(branch2, 'v-for', true);
                        addRawAttr(branch2, ':type', typeBinding);
                        processElement(branch2, options);
                        addIfCondition(branch0, {
                            exp: ifCondition,
                            block: branch2
                        });

                        if (hasElse) {
                            branch0.else = true;
                        } else if (elseIfCondition) {
                            branch0.elseif = elseIfCondition;
                        }

                        return branch0
                    }
                }
            }

            function cloneASTElement(el) {
                return createASTElement(el.tag, el.attrsList.slice(), el.parent)
            }

            var model$1 = {
                preTransformNode: preTransformNode
            };

            var modules$1 = [
                klass$1,
                style$1,
                model$1
            ];

            /*  */

            function text(el, dir) {
                if (dir.value) {
                    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
                }
            }

            /*  */

            function html(el, dir) {
                if (dir.value) {
                    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
                }
            }

            var directives$1 = {
                model: model,
                text: text,
                html: html
            };

            /*  */

            var baseOptions = {
                expectHTML: true,
                modules: modules$1,
                directives: directives$1,
                isPreTag: isPreTag,
                isUnaryTag: isUnaryTag,
                mustUseProp: mustUseProp,
                canBeLeftOpenTag: canBeLeftOpenTag,
                isReservedTag: isReservedTag,
                getTagNamespace: getTagNamespace,
                staticKeys: genStaticKeys(modules$1)
            };

            /*  */

            var isStaticKey;
            var isPlatformReservedTag;

            var genStaticKeysCached = cached(genStaticKeys$1);

            /**
             * Goal of the optimizer: walk the generated template AST tree
             * and detect sub-trees that are purely static, i.e. parts of
             * the DOM that never needs to change.
             *
             * Once we detect these sub-trees, we can:
             *
             * 1. Hoist them into constants, so that we no longer need to
             *    create fresh nodes for them on each re-render;
             * 2. Completely skip them in the patching process.
             */
            function optimize(root, options) {
                if (!root) {
                    return
                }
                isStaticKey = genStaticKeysCached(options.staticKeys || '');
                isPlatformReservedTag = options.isReservedTag || no;
                // first pass: mark all non-static nodes.
                markStatic$1(root);
                // second pass: mark static roots.
                markStaticRoots(root, false);
            }

            function genStaticKeys$1(keys) {
                return makeMap(
                    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
                    (keys ? ',' + keys : '')
                )
            }

            function markStatic$1(node) {
                node.static = isStatic(node);
                if (node.type === 1) {
                    // do not make component slot content static. this avoids
                    // 1. components not able to mutate slot nodes
                    // 2. static slot content fails for hot-reloading
                    if (
                        !isPlatformReservedTag(node.tag) &&
                        node.tag !== 'slot' &&
                        node.attrsMap['inline-template'] == null
                    ) {
                        return
                    }
                    for (var i = 0, l = node.children.length; i < l; i++) {
                        var child = node.children[i];
                        markStatic$1(child);
                        if (!child.static) {
                            node.static = false;
                        }
                    }
                    if (node.ifConditions) {
                        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
                            var block = node.ifConditions[i$1].block;
                            markStatic$1(block);
                            if (!block.static) {
                                node.static = false;
                            }
                        }
                    }
                }
            }

            function markStaticRoots(node, isInFor) {
                if (node.type === 1) {
                    if (node.static || node.once) {
                        node.staticInFor = isInFor;
                    }
                    // For a node to qualify as a static root, it should have children that
                    // are not just static text. Otherwise the cost of hoisting out will
                    // outweigh the benefits and it's better off to just always render it fresh.
                    if (node.static && node.children.length && !(
                        node.children.length === 1 &&
                        node.children[0].type === 3
                    )) {
                        node.staticRoot = true;
                        return
                    } else {
                        node.staticRoot = false;
                    }
                    if (node.children) {
                        for (var i = 0, l = node.children.length; i < l; i++) {
                            markStaticRoots(node.children[i], isInFor || !!node.for);
                        }
                    }
                    if (node.ifConditions) {
                        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
                            markStaticRoots(node.ifConditions[i$1].block, isInFor);
                        }
                    }
                }
            }

            function isStatic(node) {
                if (node.type === 2) { // expression
                    return false
                }
                if (node.type === 3) { // text
                    return true
                }
                return !!(node.pre || (
                    !node.hasBindings && // no dynamic bindings
                    !node.if && !node.for && // not v-if or v-for or v-else
                    !isBuiltInTag(node.tag) && // not a built-in
                    isPlatformReservedTag(node.tag) && // not a component
                    !isDirectChildOfTemplateFor(node) &&
                    Object.keys(node).every(isStaticKey)
                ))
            }

            function isDirectChildOfTemplateFor(node) {
                while (node.parent) {
                    node = node.parent;
                    if (node.tag !== 'template') {
                        return false
                    }
                    if (node.for) {
                        return true
                    }
                }
                return false
            }

            /*  */

            var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/;
            var fnInvokeRE = /\([^)]*?\);*$/;
            var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
            var keyCodes = {
                esc: 27,
                tab: 9,
                enter: 13,
                space: 32,
                up: 38,
                left: 37,
                right: 39,
                down: 40,
                'delete': [8, 46]
            };

// KeyboardEvent.key aliases
            var keyNames = {
                // #7880: IE11 and Edge use `Esc` for Escape key name.
                esc: ['Esc', 'Escape'],
                tab: 'Tab',
                enter: 'Enter',
                // #9112: IE11 uses `Spacebar` for Space key name.
                space: [' ', 'Spacebar'],
                // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
                up: ['Up', 'ArrowUp'],
                left: ['Left', 'ArrowLeft'],
                right: ['Right', 'ArrowRight'],
                down: ['Down', 'ArrowDown'],
                // #9112: IE11 uses `Del` for Delete key name.
                'delete': ['Backspace', 'Delete', 'Del']
            };

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
            var genGuard = function (condition) {
                return ("if(" + condition + ")return null;");
            };

            var modifierCode = {
                stop: '$event.stopPropagation();',
                prevent: '$event.preventDefault();',
                self: genGuard("$event.target !== $event.currentTarget"),
                ctrl: genGuard("!$event.ctrlKey"),
                shift: genGuard("!$event.shiftKey"),
                alt: genGuard("!$event.altKey"),
                meta: genGuard("!$event.metaKey"),
                left: genGuard("'button' in $event && $event.button !== 0"),
                middle: genGuard("'button' in $event && $event.button !== 1"),
                right: genGuard("'button' in $event && $event.button !== 2")
            };

            function genHandlers(
                events,
                isNative
            ) {
                var prefix = isNative ? 'nativeOn:' : 'on:';
                var staticHandlers = "";
                var dynamicHandlers = "";
                for (var name in events) {
                    var handlerCode = genHandler(events[name]);
                    if (events[name] && events[name].dynamic) {
                        dynamicHandlers += name + "," + handlerCode + ",";
                    } else {
                        staticHandlers += "\"" + name + "\":" + handlerCode + ",";
                    }
                }
                staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
                if (dynamicHandlers) {
                    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
                } else {
                    return prefix + staticHandlers
                }
            }

            function genHandler(handler) {
                if (!handler) {
                    return 'function(){}'
                }

                if (Array.isArray(handler)) {
                    return ("[" + (handler.map(function (handler) {
                        return genHandler(handler);
                    }).join(',')) + "]")
                }

                var isMethodPath = simplePathRE.test(handler.value);
                var isFunctionExpression = fnExpRE.test(handler.value);
                var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

                if (!handler.modifiers) {
                    if (isMethodPath || isFunctionExpression) {
                        return handler.value
                    }
                    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
                } else {
                    var code = '';
                    var genModifierCode = '';
                    var keys = [];
                    for (var key in handler.modifiers) {
                        if (modifierCode[key]) {
                            genModifierCode += modifierCode[key];
                            // left/right
                            if (keyCodes[key]) {
                                keys.push(key);
                            }
                        } else if (key === 'exact') {
                            var modifiers = (handler.modifiers);
                            genModifierCode += genGuard(
                                ['ctrl', 'shift', 'alt', 'meta']
                                    .filter(function (keyModifier) {
                                        return !modifiers[keyModifier];
                                    })
                                    .map(function (keyModifier) {
                                        return ("$event." + keyModifier + "Key");
                                    })
                                    .join('||')
                            );
                        } else {
                            keys.push(key);
                        }
                    }
                    if (keys.length) {
                        code += genKeyFilter(keys);
                    }
                    // Make sure modifiers like prevent and stop get executed after key filtering
                    if (genModifierCode) {
                        code += genModifierCode;
                    }
                    var handlerCode = isMethodPath
                        ? ("return " + (handler.value) + "($event)")
                        : isFunctionExpression
                            ? ("return (" + (handler.value) + ")($event)")
                            : isFunctionInvocation
                                ? ("return " + (handler.value))
                                : handler.value;
                    return ("function($event){" + code + handlerCode + "}")
                }
            }

            function genKeyFilter(keys) {
                return (
                    // make sure the key filters only apply to KeyboardEvents
                    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
                    // key events that do not have keyCode property...
                    "if(!$event.type.indexOf('key')&&" +
                    (keys.map(genFilterCode).join('&&')) + ")return null;"
                )
            }

            function genFilterCode(key) {
                var keyVal = parseInt(key, 10);
                if (keyVal) {
                    return ("$event.keyCode!==" + keyVal)
                }
                var keyCode = keyCodes[key];
                var keyName = keyNames[key];
                return (
                    "_k($event.keyCode," +
                    (JSON.stringify(key)) + "," +
                    (JSON.stringify(keyCode)) + "," +
                    "$event.key," +
                    "" + (JSON.stringify(keyName)) +
                    ")"
                )
            }

            /*  */

            function on(el, dir) {
                if (dir.modifiers) {
                    warn("v-on without argument does not support modifiers.");
                }
                el.wrapListeners = function (code) {
                    return ("_g(" + code + "," + (dir.value) + ")");
                };
            }

            /*  */

            function bind$1(el, dir) {
                el.wrapData = function (code) {
                    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
                };
            }

            /*  */

            var baseDirectives = {
                on: on,
                bind: bind$1,
                cloak: noop
            };

            /*  */


            var CodegenState = function CodegenState(options) {
                this.options = options;
                this.warn = options.warn || baseWarn;
                this.transforms = pluckModuleFunction(options.modules, 'transformCode');
                this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
                this.directives = extend(extend({}, baseDirectives), options.directives);
                var isReservedTag = options.isReservedTag || no;
                this.maybeComponent = function (el) {
                    return !!el.component || !isReservedTag(el.tag);
                };
                this.onceId = 0;
                this.staticRenderFns = [];
                this.pre = false;
            };


            function generate(
                ast,
                options
            ) {
                var state = new CodegenState(options);
                var code = ast ? genElement(ast, state) : '_c("div")';
                return {
                    render: ("with(this){return " + code + "}"),
                    staticRenderFns: state.staticRenderFns
                }
            }

            function genElement(el, state) {
                if (el.parent) {
                    el.pre = el.pre || el.parent.pre;
                }

                if (el.staticRoot && !el.staticProcessed) {
                    return genStatic(el, state)
                } else if (el.once && !el.onceProcessed) {
                    return genOnce(el, state)
                } else if (el.for && !el.forProcessed) {
                    return genFor(el, state)
                } else if (el.if && !el.ifProcessed) {
                    return genIf(el, state)
                } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
                    return genChildren(el, state) || 'void 0'
                } else if (el.tag === 'slot') {
                    return genSlot(el, state)
                } else {
                    // component or element
                    var code;
                    if (el.component) {
                        code = genComponent(el.component, el, state);
                    } else {
                        var data;
                        if (!el.plain || (el.pre && state.maybeComponent(el))) {
                            data = genData$2(el, state);
                        }

                        var children = el.inlineTemplate ? null : genChildren(el, state, true);
                        code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
                    }
                    // module transforms
                    for (var i = 0; i < state.transforms.length; i++) {
                        code = state.transforms[i](el, code);
                    }
                    return code
                }
            }

// hoist static sub-trees out
            function genStatic(el, state) {
                el.staticProcessed = true;
                // Some elements (templates) need to behave differently inside of a v-pre
                // node.  All pre nodes are static roots, so we can use this as a location to
                // wrap a state change and reset it upon exiting the pre node.
                var originalPreState = state.pre;
                if (el.pre) {
                    state.pre = el.pre;
                }
                state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
                state.pre = originalPreState;
                return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
            }

// v-once
            function genOnce(el, state) {
                el.onceProcessed = true;
                if (el.if && !el.ifProcessed) {
                    return genIf(el, state)
                } else if (el.staticInFor) {
                    var key = '';
                    var parent = el.parent;
                    while (parent) {
                        if (parent.for) {
                            key = parent.key;
                            break
                        }
                        parent = parent.parent;
                    }
                    if (!key) {
                        state.warn(
                            "v-once can only be used inside v-for that is keyed. ",
                            el.rawAttrsMap['v-once']
                        );
                        return genElement(el, state)
                    }
                    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
                } else {
                    return genStatic(el, state)
                }
            }

            function genIf(
                el,
                state,
                altGen,
                altEmpty
            ) {
                el.ifProcessed = true; // avoid recursion
                return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
            }

            function genIfConditions(
                conditions,
                state,
                altGen,
                altEmpty
            ) {
                if (!conditions.length) {
                    return altEmpty || '_e()'
                }

                var condition = conditions.shift();
                if (condition.exp) {
                    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
                } else {
                    return ("" + (genTernaryExp(condition.block)))
                }

                // v-if with v-once should generate code like (a)?_m(0):_m(1)
                function genTernaryExp(el) {
                    return altGen
                        ? altGen(el, state)
                        : el.once
                            ? genOnce(el, state)
                            : genElement(el, state)
                }
            }

            function genFor(
                el,
                state,
                altGen,
                altHelper
            ) {
                var exp = el.for;
                var alias = el.alias;
                var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
                var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

                if (state.maybeComponent(el) &&
                    el.tag !== 'slot' &&
                    el.tag !== 'template' &&
                    !el.key
                ) {
                    state.warn(
                        "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
                        "v-for should have explicit keys. " +
                        "See https://vuejs.org/guide/list.html#key for more info.",
                        el.rawAttrsMap['v-for'],
                        true /* tip */
                    );
                }

                el.forProcessed = true; // avoid recursion
                return (altHelper || '_l') + "((" + exp + ")," +
                    "function(" + alias + iterator1 + iterator2 + "){" +
                    "return " + ((altGen || genElement)(el, state)) +
                    '})'
            }

            function genData$2(el, state) {
                var data = '{';

                // directives first.
                // directives may mutate the el's other properties before they are generated.
                var dirs = genDirectives(el, state);
                if (dirs) {
                    data += dirs + ',';
                }

                // key
                if (el.key) {
                    data += "key:" + (el.key) + ",";
                }
                // ref
                if (el.ref) {
                    data += "ref:" + (el.ref) + ",";
                }
                if (el.refInFor) {
                    data += "refInFor:true,";
                }
                // pre
                if (el.pre) {
                    data += "pre:true,";
                }
                // record original tag name for components using "is" attribute
                if (el.component) {
                    data += "tag:\"" + (el.tag) + "\",";
                }
                // module data generation functions
                for (var i = 0; i < state.dataGenFns.length; i++) {
                    data += state.dataGenFns[i](el);
                }
                // attributes
                if (el.attrs) {
                    data += "attrs:" + (genProps(el.attrs)) + ",";
                }
                // DOM props
                if (el.props) {
                    data += "domProps:" + (genProps(el.props)) + ",";
                }
                // event handlers
                if (el.events) {
                    data += (genHandlers(el.events, false)) + ",";
                }
                if (el.nativeEvents) {
                    data += (genHandlers(el.nativeEvents, true)) + ",";
                }
                // slot target
                // only for non-scoped slots
                if (el.slotTarget && !el.slotScope) {
                    data += "slot:" + (el.slotTarget) + ",";
                }
                // scoped slots
                if (el.scopedSlots) {
                    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
                }
                // component v-model
                if (el.model) {
                    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
                }
                // inline-template
                if (el.inlineTemplate) {
                    var inlineTemplate = genInlineTemplate(el, state);
                    if (inlineTemplate) {
                        data += inlineTemplate + ",";
                    }
                }
                data = data.replace(/,$/, '') + '}';
                // v-bind dynamic argument wrap
                // v-bind with dynamic arguments must be applied using the same v-bind object
                // merge helper so that class/style/mustUseProp attrs are handled correctly.
                if (el.dynamicAttrs) {
                    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
                }
                // v-bind data wrap
                if (el.wrapData) {
                    data = el.wrapData(data);
                }
                // v-on data wrap
                if (el.wrapListeners) {
                    data = el.wrapListeners(data);
                }
                return data
            }

            function genDirectives(el, state) {
                var dirs = el.directives;
                if (!dirs) {
                    return
                }
                var res = 'directives:[';
                var hasRuntime = false;
                var i, l, dir, needRuntime;
                for (i = 0, l = dirs.length; i < l; i++) {
                    dir = dirs[i];
                    needRuntime = true;
                    var gen = state.directives[dir.name];
                    if (gen) {
                        // compile-time directive that manipulates AST.
                        // returns true if it also needs a runtime counterpart.
                        needRuntime = !!gen(el, dir, state.warn);
                    }
                    if (needRuntime) {
                        hasRuntime = true;
                        res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
                    }
                }
                if (hasRuntime) {
                    return res.slice(0, -1) + ']'
                }
            }

            function genInlineTemplate(el, state) {
                var ast = el.children[0];
                if (el.children.length !== 1 || ast.type !== 1) {
                    state.warn(
                        'Inline-template components must have exactly one child element.',
                        {start: el.start}
                    );
                }
                if (ast && ast.type === 1) {
                    var inlineRenderFns = generate(ast, state.options);
                    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) {
                        return ("function(){" + code + "}");
                    }).join(',')) + "]}")
                }
            }

            function genScopedSlots(
                el,
                slots,
                state
            ) {
                // by default scoped slots are considered "stable", this allows child
                // components with only scoped slots to skip forced updates from parent.
                // but in some cases we have to bail-out of this optimization
                // for example if the slot contains dynamic names, has v-if or v-for on them...
                var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
                    var slot = slots[key];
                    return (
                        slot.slotTargetDynamic ||
                        slot.if ||
                        slot.for ||
                        containsSlotChild(slot) // is passing down slot from parent which may be dynamic
                    )
                });

                // #9534: if a component with scoped slots is inside a conditional branch,
                // it's possible for the same component to be reused but with different
                // compiled slot content. To avoid that, we generate a unique key based on
                // the generated code of all the slot contents.
                var needsKey = !!el.if;

                // OR when it is inside another scoped slot or v-for (the reactivity may be
                // disconnected due to the intermediate scope variable)
                // #9438, #9506
                // TODO: this can be further optimized by properly analyzing in-scope bindings
                // and skip force updating ones that do not actually use scope variables.
                if (!needsForceUpdate) {
                    var parent = el.parent;
                    while (parent) {
                        if (
                            (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
                            parent.for
                        ) {
                            needsForceUpdate = true;
                            break
                        }
                        if (parent.if) {
                            needsKey = true;
                        }
                        parent = parent.parent;
                    }
                }

                var generatedSlots = Object.keys(slots)
                    .map(function (key) {
                        return genScopedSlot(slots[key], state);
                    })
                    .join(',');

                return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
            }

            function hash(str) {
                var hash = 5381;
                var i = str.length;
                while (i) {
                    hash = (hash * 33) ^ str.charCodeAt(--i);
                }
                return hash >>> 0
            }

            function containsSlotChild(el) {
                if (el.type === 1) {
                    if (el.tag === 'slot') {
                        return true
                    }
                    return el.children.some(containsSlotChild)
                }
                return false
            }

            function genScopedSlot(
                el,
                state
            ) {
                var isLegacySyntax = el.attrsMap['slot-scope'];
                if (el.if && !el.ifProcessed && !isLegacySyntax) {
                    return genIf(el, state, genScopedSlot, "null")
                }
                if (el.for && !el.forProcessed) {
                    return genFor(el, state, genScopedSlot)
                }
                var slotScope = el.slotScope === emptySlotScopeToken
                    ? ""
                    : String(el.slotScope);
                var fn = "function(" + slotScope + "){" +
                    "return " + (el.tag === 'template'
                        ? el.if && isLegacySyntax
                            ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
                            : genChildren(el, state) || 'undefined'
                        : genElement(el, state)) + "}";
                // reverse proxy v-slot without scope on this.$slots
                var reverseProxy = slotScope ? "" : ",proxy:true";
                return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
            }

            function genChildren(
                el,
                state,
                checkSkip,
                altGenElement,
                altGenNode
            ) {
                var children = el.children;
                if (children.length) {
                    var el$1 = children[0];
                    // optimize single v-for
                    if (children.length === 1 &&
                        el$1.for &&
                        el$1.tag !== 'template' &&
                        el$1.tag !== 'slot'
                    ) {
                        var normalizationType = checkSkip
                            ? state.maybeComponent(el$1) ? ",1" : ",0"
                            : "";
                        return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
                    }
                    var normalizationType$1 = checkSkip
                        ? getNormalizationType(children, state.maybeComponent)
                        : 0;
                    var gen = altGenNode || genNode;
                    return ("[" + (children.map(function (c) {
                        return gen(c, state);
                    }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
                }
            }

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
            function getNormalizationType(
                children,
                maybeComponent
            ) {
                var res = 0;
                for (var i = 0; i < children.length; i++) {
                    var el = children[i];
                    if (el.type !== 1) {
                        continue
                    }
                    if (needsNormalization(el) ||
                        (el.ifConditions && el.ifConditions.some(function (c) {
                            return needsNormalization(c.block);
                        }))) {
                        res = 2;
                        break
                    }
                    if (maybeComponent(el) ||
                        (el.ifConditions && el.ifConditions.some(function (c) {
                            return maybeComponent(c.block);
                        }))) {
                        res = 1;
                    }
                }
                return res
            }

            function needsNormalization(el) {
                return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
            }

            function genNode(node, state) {
                if (node.type === 1) {
                    return genElement(node, state)
                } else if (node.type === 3 && node.isComment) {
                    return genComment(node)
                } else {
                    return genText(node)
                }
            }

            function genText(text) {
                return ("_v(" + (text.type === 2
                    ? text.expression // no need for () because already wrapped in _s()
                    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
            }

            function genComment(comment) {
                return ("_e(" + (JSON.stringify(comment.text)) + ")")
            }

            function genSlot(el, state) {
                var slotName = el.slotName || '"default"';
                var children = genChildren(el, state);
                var res = "_t(" + slotName + (children ? ("," + children) : '');
                var attrs = el.attrs || el.dynamicAttrs
                    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) {
                        return ({
                            // slot props are camelized
                            name: camelize(attr.name),
                            value: attr.value,
                            dynamic: attr.dynamic
                        });
                    }))
                    : null;
                var bind$$1 = el.attrsMap['v-bind'];
                if ((attrs || bind$$1) && !children) {
                    res += ",null";
                }
                if (attrs) {
                    res += "," + attrs;
                }
                if (bind$$1) {
                    res += (attrs ? '' : ',null') + "," + bind$$1;
                }
                return res + ')'
            }

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
            function genComponent(
                componentName,
                el,
                state
            ) {
                var children = el.inlineTemplate ? null : genChildren(el, state, true);
                return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
            }

            function genProps(props) {
                var staticProps = "";
                var dynamicProps = "";
                for (var i = 0; i < props.length; i++) {
                    var prop = props[i];
                    var value = transformSpecialNewlines(prop.value);
                    if (prop.dynamic) {
                        dynamicProps += (prop.name) + "," + value + ",";
                    } else {
                        staticProps += "\"" + (prop.name) + "\":" + value + ",";
                    }
                }
                staticProps = "{" + (staticProps.slice(0, -1)) + "}";
                if (dynamicProps) {
                    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
                } else {
                    return staticProps
                }
            }

// #3895, #4268
            function transformSpecialNewlines(text) {
                return text
                    .replace(/\u2028/g, '\\u2028')
                    .replace(/\u2029/g, '\\u2029')
            }

            /*  */


// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
            var prohibitedKeywordRE = new RegExp('\\b' + (
                'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
                'super,throw,while,yield,delete,export,import,return,switch,default,' +
                'extends,finally,continue,debugger,function,arguments'
            ).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
            var unaryOperatorsRE = new RegExp('\\b' + (
                'delete,typeof,void'
            ).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
            var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
            function detectErrors(ast, warn) {
                if (ast) {
                    checkNode(ast, warn);
                }
            }

            function checkNode(node, warn) {
                if (node.type === 1) {
                    for (var name in node.attrsMap) {
                        if (dirRE.test(name)) {
                            var value = node.attrsMap[name];
                            if (value) {
                                var range = node.rawAttrsMap[name];
                                if (name === 'v-for') {
                                    checkFor(node, ("v-for=\"" + value + "\""), warn, range);
                                } else if (name === 'v-slot' || name[0] === '#') {
                                    checkFunctionParameterExpression(value, (name + "=\"" + value + "\""), warn, range);
                                } else if (onRE.test(name)) {
                                    checkEvent(value, (name + "=\"" + value + "\""), warn, range);
                                } else {
                                    checkExpression(value, (name + "=\"" + value + "\""), warn, range);
                                }
                            }
                        }
                    }
                    if (node.children) {
                        for (var i = 0; i < node.children.length; i++) {
                            checkNode(node.children[i], warn);
                        }
                    }
                } else if (node.type === 2) {
                    checkExpression(node.expression, node.text, warn, node);
                }
            }

            function checkEvent(exp, text, warn, range) {
                var stripped = exp.replace(stripStringRE, '');
                var keywordMatch = stripped.match(unaryOperatorsRE);
                if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {
                    warn(
                        "avoid using JavaScript unary operator as property name: " +
                        "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
                        range
                    );
                }
                checkExpression(exp, text, warn, range);
            }

            function checkFor(node, text, warn, range) {
                checkExpression(node.for || '', text, warn, range);
                checkIdentifier(node.alias, 'v-for alias', text, warn, range);
                checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
                checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
            }

            function checkIdentifier(
                ident,
                type,
                text,
                warn,
                range
            ) {
                if (typeof ident === 'string') {
                    try {
                        new Function(("var " + ident + "=_"));
                    } catch (e) {
                        warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
                    }
                }
            }

            function checkExpression(exp, text, warn, range) {
                try {
                    new Function(("return " + exp));
                } catch (e) {
                    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
                    if (keywordMatch) {
                        warn(
                            "avoid using JavaScript keyword as property name: " +
                            "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
                            range
                        );
                    } else {
                        warn(
                            "invalid expression: " + (e.message) + " in\n\n" +
                            "    " + exp + "\n\n" +
                            "  Raw expression: " + (text.trim()) + "\n",
                            range
                        );
                    }
                }
            }

            function checkFunctionParameterExpression(exp, text, warn, range) {
                try {
                    new Function(exp, '');
                } catch (e) {
                    warn(
                        "invalid function parameter expression: " + (e.message) + " in\n\n" +
                        "    " + exp + "\n\n" +
                        "  Raw expression: " + (text.trim()) + "\n",
                        range
                    );
                }
            }

            /*  */

            var range = 2;

            function generateCodeFrame(
                source,
                start,
                end
            ) {
                if (start === void 0) start = 0;
                if (end === void 0) end = source.length;

                var lines = source.split(/\r?\n/);
                var count = 0;
                var res = [];
                for (var i = 0; i < lines.length; i++) {
                    count += lines[i].length + 1;
                    if (count >= start) {
                        for (var j = i - range; j <= i + range || end > count; j++) {
                            if (j < 0 || j >= lines.length) {
                                continue
                            }
                            res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
                            var lineLength = lines[j].length;
                            if (j === i) {
                                // push underline
                                var pad = start - (count - lineLength) + 1;
                                var length = end > count ? lineLength - pad : end - start;
                                res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
                            } else if (j > i) {
                                if (end > count) {
                                    var length$1 = Math.min(end - count, lineLength);
                                    res.push("   |  " + repeat$1("^", length$1));
                                }
                                count += lineLength + 1;
                            }
                        }
                        break
                    }
                }
                return res.join('\n')
            }

            function repeat$1(str, n) {
                var result = '';
                if (n > 0) {
                    while (true) { // eslint-disable-line
                        if (n & 1) {
                            result += str;
                        }
                        n >>>= 1;
                        if (n <= 0) {
                            break
                        }
                        str += str;
                    }
                }
                return result
            }

            /*  */


            function createFunction(code, errors) {
                try {
                    return new Function(code)
                } catch (err) {
                    errors.push({err: err, code: code});
                    return noop
                }
            }

            function createCompileToFunctionFn(compile) {
                var cache = Object.create(null);

                return function compileToFunctions(
                    template,
                    options,
                    vm
                ) {
                    options = extend({}, options);
                    var warn$$1 = options.warn || warn;
                    delete options.warn;

                    /* istanbul ignore if */
                    {
                        // detect possible CSP restriction
                        try {
                            new Function('return 1');
                        } catch (e) {
                            if (e.toString().match(/unsafe-eval|CSP/)) {
                                warn$$1(
                                    'It seems you are using the standalone build of Vue.js in an ' +
                                    'environment with Content Security Policy that prohibits unsafe-eval. ' +
                                    'The template compiler cannot work in this environment. Consider ' +
                                    'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
                                    'templates into render functions.'
                                );
                            }
                        }
                    }

                    // check cache
                    var key = options.delimiters
                        ? String(options.delimiters) + template
                        : template;
                    if (cache[key]) {
                        return cache[key]
                    }

                    // compile
                    var compiled = compile(template, options);

                    // check compilation errors/tips
                    {
                        if (compiled.errors && compiled.errors.length) {
                            if (options.outputSourceRange) {
                                compiled.errors.forEach(function (e) {
                                    warn$$1(
                                        "Error compiling template:\n\n" + (e.msg) + "\n\n" +
                                        generateCodeFrame(template, e.start, e.end),
                                        vm
                                    );
                                });
                            } else {
                                warn$$1(
                                    "Error compiling template:\n\n" + template + "\n\n" +
                                    compiled.errors.map(function (e) {
                                        return ("- " + e);
                                    }).join('\n') + '\n',
                                    vm
                                );
                            }
                        }
                        if (compiled.tips && compiled.tips.length) {
                            if (options.outputSourceRange) {
                                compiled.tips.forEach(function (e) {
                                    return tip(e.msg, vm);
                                });
                            } else {
                                compiled.tips.forEach(function (msg) {
                                    return tip(msg, vm);
                                });
                            }
                        }
                    }

                    // turn code into functions
                    var res = {};
                    var fnGenErrors = [];
                    res.render = createFunction(compiled.render, fnGenErrors);
                    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
                        return createFunction(code, fnGenErrors)
                    });

                    // check function generation errors.
                    // this should only happen if there is a bug in the compiler itself.
                    // mostly for codegen development use
                    /* istanbul ignore if */
                    {
                        if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
                            warn$$1(
                                "Failed to generate render function:\n\n" +
                                fnGenErrors.map(function (ref) {
                                    var err = ref.err;
                                    var code = ref.code;

                                    return ((err.toString()) + " in\n\n" + code + "\n");
                                }).join('\n'),
                                vm
                            );
                        }
                    }

                    return (cache[key] = res)
                }
            }

            /*  */

            function createCompilerCreator(baseCompile) {
                return function createCompiler(baseOptions) {
                    function compile(
                        template,
                        options
                    ) {
                        var finalOptions = Object.create(baseOptions);
                        var errors = [];
                        var tips = [];

                        var warn = function (msg, range, tip) {
                            (tip ? tips : errors).push(msg);
                        };

                        if (options) {
                            if (options.outputSourceRange) {
                                // $flow-disable-line
                                var leadingSpaceLength = template.match(/^\s*/)[0].length;

                                warn = function (msg, range, tip) {
                                    var data = {msg: msg};
                                    if (range) {
                                        if (range.start != null) {
                                            data.start = range.start + leadingSpaceLength;
                                        }
                                        if (range.end != null) {
                                            data.end = range.end + leadingSpaceLength;
                                        }
                                    }
                                    (tip ? tips : errors).push(data);
                                };
                            }
                            // merge custom modules
                            if (options.modules) {
                                finalOptions.modules =
                                    (baseOptions.modules || []).concat(options.modules);
                            }
                            // merge custom directives
                            if (options.directives) {
                                finalOptions.directives = extend(
                                    Object.create(baseOptions.directives || null),
                                    options.directives
                                );
                            }
                            // copy other options
                            for (var key in options) {
                                if (key !== 'modules' && key !== 'directives') {
                                    finalOptions[key] = options[key];
                                }
                            }
                        }

                        finalOptions.warn = warn;

                        var compiled = baseCompile(template.trim(), finalOptions);
                        {
                            detectErrors(compiled.ast, warn);
                        }
                        compiled.errors = errors;
                        compiled.tips = tips;
                        return compiled
                    }

                    return {
                        compile: compile,
                        compileToFunctions: createCompileToFunctionFn(compile)
                    }
                }
            }

            /*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
            var createCompiler = createCompilerCreator(function baseCompile(
                template,
                options
            ) {
                var ast = parse(template.trim(), options);
                if (options.optimize !== false) {
                    optimize(ast, options);
                }
                var code = generate(ast, options);
                return {
                    ast: ast,
                    render: code.render,
                    staticRenderFns: code.staticRenderFns
                }
            });

            /*  */

            var ref$1 = createCompiler(baseOptions);
            var compile = ref$1.compile;
            var compileToFunctions = ref$1.compileToFunctions;

            /*  */

// check whether current browser encodes a char inside attribute values
            var div;

            function getShouldDecode(href) {
                div = div || document.createElement('div');
                div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
                return div.innerHTML.indexOf('&#10;') > 0
            }

// #3663: IE encodes newlines inside attribute values while other browsers don't
            var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
            var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

            /*  */

            var idToTemplate = cached(function (id) {
                var el = query(id);
                return el && el.innerHTML
            });

            var mount = Vue.prototype.$mount;
            Vue.prototype.$mount = function (
                el,
                hydrating
            ) {
                el = el && query(el);

                /* istanbul ignore if */
                if (el === document.body || el === document.documentElement) {
                    warn(
                        "Do not mount Vue to <html> or <body> - mount to normal elements instead."
                    );
                    return this
                }

                var options = this.$options;
                // resolve template/el and convert to render function
                if (!options.render) {
                    var template = options.template;
                    if (template) {
                        if (typeof template === 'string') {
                            if (template.charAt(0) === '#') {
                                template = idToTemplate(template);
                                /* istanbul ignore if */
                                if (!template) {
                                    warn(
                                        ("Template element not found or is empty: " + (options.template)),
                                        this
                                    );
                                }
                            }
                        } else if (template.nodeType) {
                            template = template.innerHTML;
                        } else {
                            {
                                warn('invalid template option:' + template, this);
                            }
                            return this
                        }
                    } else if (el) {
                        template = getOuterHTML(el);
                    }
                    if (template) {
                        /* istanbul ignore if */
                        if (config.performance && mark) {
                            mark('compile');
                        }

                        var ref = compileToFunctions(template, {
                            outputSourceRange: "development" !== 'production',
                            shouldDecodeNewlines: shouldDecodeNewlines,
                            shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
                            delimiters: options.delimiters,
                            comments: options.comments
                        }, this);
                        var render = ref.render;
                        var staticRenderFns = ref.staticRenderFns;
                        options.render = render;
                        options.staticRenderFns = staticRenderFns;

                        /* istanbul ignore if */
                        if (config.performance && mark) {
                            mark('compile end');
                            measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
                        }
                    }
                }
                return mount.call(this, el, hydrating)
            };

            /**
             * Get outerHTML of elements, taking care
             * of SVG elements in IE as well.
             */
            function getOuterHTML(el) {
                if (el.outerHTML) {
                    return el.outerHTML
                } else {
                    var container = document.createElement('div');
                    container.appendChild(el.cloneNode(true));
                    return container.innerHTML
                }
            }

            Vue.compile = compileToFunctions;

            module.exports = Vue;

            /* WEBPACK VAR INJECTION */
        }.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../timers-browserify/main.js */ "./node_modules/timers-browserify/main.js").setImmediate))

        /***/
    }),

    /***/
    "./node_modules/vue/dist/vue.common.js":
    /*!*********************************************!*\
  !*** ./node_modules/vue/dist/vue.common.js ***!
  \*********************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        if (false) {
        } else {
            module.exports = __webpack_require__(/*! ./vue.common.dev.js */ "./node_modules/vue/dist/vue.common.dev.js")
        }


        /***/
    }),

    /***/
    "./node_modules/webpack/buildin/global.js":
    /*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
    /*! no static exports found */
    /***/ (function (module, exports) {

        var g;

// This works in non-strict mode
        g = (function () {
            return this;
        })();

        try {
            // This works if eval is allowed (see CSP)
            g = g || new Function("return this")();
        } catch (e) {
            // This works if the window reference is available
            if (typeof window === "object") g = window;
        }

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

        module.exports = g;


        /***/
    }),

    /***/
    "./node_modules/webpack/buildin/module.js":
    /*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
    /*! no static exports found */
    /***/ (function (module, exports) {

        module.exports = function (module) {
            if (!module.webpackPolyfill) {
                module.deprecate = function () {
                };
                module.paths = [];
                // module.parent = undefined by default
                if (!module.children) module.children = [];
                Object.defineProperty(module, "loaded", {
                    enumerable: true,
                    get: function () {
                        return module.l;
                    }
                });
                Object.defineProperty(module, "id", {
                    enumerable: true,
                    get: function () {
                        return module.i;
                    }
                });
                module.webpackPolyfill = 1;
            }
            return module;
        };


        /***/
    }),

    /***/
    "./platform/themes/flex-home/assets/js/components.js":
    /*!***********************************************************!*\
  !*** ./platform/themes/flex-home/assets/js/components.js ***!
  \***********************************************************/
    /*! no exports provided */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _components_PropertyComponent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/PropertyComponent */ "./platform/themes/flex-home/assets/js/components/PropertyComponent.vue");
        /* harmony import */
        var _components_NewsComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/NewsComponent */ "./platform/themes/flex-home/assets/js/components/NewsComponent.vue");
        /* harmony import */
        var sanitize_html__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! sanitize-html */ "./node_modules/sanitize-html/dist/sanitize-html.js");
        /* harmony import */
        var sanitize_html__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(sanitize_html__WEBPACK_IMPORTED_MODULE_2__);
        /**
         * First we will load all of this project's JavaScript dependencies which
         * includes Vue and other libraries. It is a great starting point when
         * building robust, powerful web applications using Vue and Laravel.
         */


        window.Vue = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.common.js");
        window._ = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
        window.axios = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
        window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
        /**
         * Next, we will create a fresh Vue application instance and attach it to
         * the page. Then, you may begin adding components to this application
         * or customize the JavaScript scaffolding to fit your unique needs.
         */

        Vue.component('property-component', _components_PropertyComponent__WEBPACK_IMPORTED_MODULE_0__["default"]);
        Vue.component('news-component', _components_NewsComponent__WEBPACK_IMPORTED_MODULE_1__["default"]);
        /**
         * This let us access the `__` method for localization in VueJS templates
         * ({{ __('key') }})
         */

        Vue.prototype.__ = function (key) {
            return _.get(window.trans, key, key);
        };


        Vue.prototype.$sanitize = sanitize_html__WEBPACK_IMPORTED_MODULE_2___default.a;
        var app = new Vue({
            el: '#app'
        });

        /***/
    }),

    /***/
    "./platform/themes/flex-home/assets/js/components/NewsComponent.vue":
    /*!**************************************************************************!*\
  !*** ./platform/themes/flex-home/assets/js/components/NewsComponent.vue ***!
  \**************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _NewsComponent_vue_vue_type_template_id_dbb15004___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./NewsComponent.vue?vue&type=template&id=dbb15004& */ "./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=template&id=dbb15004&");
        /* harmony import */
        var _NewsComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NewsComponent.vue?vue&type=script&lang=js& */ "./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
            _NewsComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _NewsComponent_vue_vue_type_template_id_dbb15004___WEBPACK_IMPORTED_MODULE_0__["render"],
            _NewsComponent_vue_vue_type_template_id_dbb15004___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            null,
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "platform/themes/flex-home/assets/js/components/NewsComponent.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=script&lang=js&":
    /*!***************************************************************************************************!*\
  !*** ./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=script&lang=js& ***!
  \***************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NewsComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../../node_modules/babel-loader/lib??ref--4-0!../../../../../../node_modules/vue-loader/lib??vue-loader-options!./NewsComponent.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_NewsComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=template&id=dbb15004&":
    /*!*********************************************************************************************************!*\
  !*** ./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=template&id=dbb15004& ***!
  \*********************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_NewsComponent_vue_vue_type_template_id_dbb15004___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../node_modules/vue-loader/lib??vue-loader-options!./NewsComponent.vue?vue&type=template&id=dbb15004& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./platform/themes/flex-home/assets/js/components/NewsComponent.vue?vue&type=template&id=dbb15004&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_NewsComponent_vue_vue_type_template_id_dbb15004___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_NewsComponent_vue_vue_type_template_id_dbb15004___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    "./platform/themes/flex-home/assets/js/components/PropertyComponent.vue":
    /*!******************************************************************************!*\
  !*** ./platform/themes/flex-home/assets/js/components/PropertyComponent.vue ***!
  \******************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _PropertyComponent_vue_vue_type_template_id_02cccb88___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PropertyComponent.vue?vue&type=template&id=02cccb88& */ "./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=template&id=02cccb88&");
        /* harmony import */
        var _PropertyComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PropertyComponent.vue?vue&type=script&lang=js& */ "./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport *//* harmony import */
        var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");


        /* normalize component */

        var component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__["default"])(
            _PropertyComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__["default"],
            _PropertyComponent_vue_vue_type_template_id_02cccb88___WEBPACK_IMPORTED_MODULE_0__["render"],
            _PropertyComponent_vue_vue_type_template_id_02cccb88___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"],
            false,
            null,
            null,
            null
        )

        /* hot reload */
        if (false) {
            var api;
        }
        component.options.__file = "platform/themes/flex-home/assets/js/components/PropertyComponent.vue"
        /* harmony default export */
        __webpack_exports__["default"] = (component.exports);

        /***/
    }),

    /***/
    "./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=script&lang=js&":
    /*!*******************************************************************************************************!*\
  !*** ./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=script&lang=js& ***!
  \*******************************************************************************************************/
    /*! exports provided: default */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_PropertyComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../../node_modules/babel-loader/lib??ref--4-0!../../../../../../node_modules/vue-loader/lib??vue-loader-options!./PropertyComponent.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js?!./node_modules/vue-loader/lib/index.js?!./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=script&lang=js&");
        /* empty/unused harmony star reexport */ /* harmony default export */
        __webpack_exports__["default"] = (_node_modules_babel_loader_lib_index_js_ref_4_0_node_modules_vue_loader_lib_index_js_vue_loader_options_PropertyComponent_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__["default"]);

        /***/
    }),

    /***/
    "./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=template&id=02cccb88&":
    /*!*************************************************************************************************************!*\
  !*** ./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=template&id=02cccb88& ***!
  \*************************************************************************************************************/
    /*! exports provided: render, staticRenderFns */
    /***/ (function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        __webpack_require__.r(__webpack_exports__);
        /* harmony import */
        var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_PropertyComponent_vue_vue_type_template_id_02cccb88___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../node_modules/vue-loader/lib??vue-loader-options!./PropertyComponent.vue?vue&type=template&id=02cccb88& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/vue-loader/lib/index.js?!./platform/themes/flex-home/assets/js/components/PropertyComponent.vue?vue&type=template&id=02cccb88&");
        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "render", function () {
            return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_PropertyComponent_vue_vue_type_template_id_02cccb88___WEBPACK_IMPORTED_MODULE_0__["render"];
        });

        /* harmony reexport (safe) */
        __webpack_require__.d(__webpack_exports__, "staticRenderFns", function () {
            return _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_PropertyComponent_vue_vue_type_template_id_02cccb88___WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"];
        });


        /***/
    }),

    /***/
    26:
    /*!*****************************************************************!*\
  !*** multi ./platform/themes/flex-home/assets/js/components.js ***!
  \*****************************************************************/
    /*! no static exports found */
    /***/ (function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(/*! /Users/odisoedim/webzone/islandhomes/platform/themes/flex-home/assets/js/components.js */"./platform/themes/flex-home/assets/js/components.js");


        /***/
    })

    /******/
});
